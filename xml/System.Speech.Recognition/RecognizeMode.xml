<Type Name="RecognizeMode" FullName="System.Speech.Recognition.RecognizeMode">
  <TypeSignature Language="C#" Value="public enum RecognizeMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RecognizeMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizeMode" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Listet Werte des Recognition-Modus.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Enumeration wird verwendet, als Argument an <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%28System.Speech.Recognition.RecognizeMode%29>.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Implementierung einer Schaltfläche Starten/Beenden für eine Anwendung, die eine grafische Benutzeroberfläche hat und verwendet <xref:System.Speech.Recognition.SpeechRecognitionEngine>. Abhängig vom Status der Anwendung <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%28System.Speech.Recognition.RecognizeMode%29> mit einzelnen oder mehreren aufgerufen wird, wenn auf die Schaltfläche geklickt wird.  
  
```  
private void _startRecogButton_Click(object sender, EventArgs eventArgs)   
{  
  
  // Toggle speech recognition on.  
  if (_startRecogButton.Text == "Start Speech Recognition")   
  {       
    _startRecogButton.Text = "Stop Speech Recognition";  
    if (_useMultiple)   
    {  
      _recognitionEngine.RecognizeAsync(RecognizeMode.Multiple);  
    }   
    else   
    {  
      _recognitionEngine.RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
  
  // Toggle speech recognition off.   
  else   
  {                                                        
    _startRecogButton.Text = "Start Speech Recognition";  
  
    // Stop after current phrase is finished.  
    if (_friendlyStop)   
    {       
      _recognitionEngine.RecognizeAsyncStop();   
    }  
  
    // Stop before current phrase is finished.  
    else   
    {        
      _recognitionEngine.RecognizeAsyncCancel();   
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Recognition.RecognizeMode Multiple = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Recognition.RecognizeMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, dass die Erkennung nicht nach Abschluss des Vorgangs beendet wird.</summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Speech.Recognition.RecognizeMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Speech.Recognition.RecognizeMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, dass Recognition nach Abschluss des Vorgangs beendet wird.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
