<Type Name="WebServiceHostFactory" FullName="System.ServiceModel.Activation.WebServiceHostFactory">
  <TypeSignature Language="C#" Value="public class WebServiceHostFactory : System.ServiceModel.Activation.ServiceHostFactory" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebServiceHostFactory extends System.ServiceModel.Activation.ServiceHostFactory" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Activation.WebServiceHostFactory" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Activation.ServiceHostFactory</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Eine Factory, von der Instanzen von <see cref="T:System.ServiceModel.Web.WebServiceHost" /> in verwalteten Hostumgebungen bereitgestellt werden. Die Hostinstanz wird hierbei dynamisch gemäß den eingehenden Nachrichten erstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei den verwalteten Hostumgebungen mit Unterstützung für dynamische Aktivierung handelt es sich um Internet Information Services (IIS) und Windows Process Activation Service (WAS).  
  
 Wurde eine benutzerdefinierte Ableitung von <xref:System.ServiceModel.Web.WebServiceHost> implementiert, sollte das zusätzliche Implementieren einer von der <xref:System.ServiceModel.Activation.WebServiceHostFactory>-Klasse abgeleiteten Factory in Betracht gezogen werden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine Klasse von <xref:System.ServiceModel.Activation.WebServiceHostFactory> abgeleitet wird.  
  
  
  
 Geben Sie die abgeleitete Webdienst-Hostfactory in einer SVC-Datei an, damit sie verwendet wird. Das folgende Beispiel veranschaulicht die in einer SVC-Datei verwendete Syntax.  
  
```  
<%@ServiceHost language=c# Service="Microsoft.Samples.MyWCFService" Factory="Microsoft.Samples.MyWebServiceHostFactory" %>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebServiceHostFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activation.WebServiceHostFactory.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.Activation.WebServiceHostFactory" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird nicht direkt aufgerufen. Sie wird aufgerufen, wenn ein Dienst dynamisch aktiviert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateServiceHost">
      <MemberSignature Language="C#" Value="protected override System.ServiceModel.ServiceHost CreateServiceHost (Type serviceType, Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.ServiceModel.ServiceHost CreateServiceHost(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activation.WebServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceHost</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ des zu erstellenden Hosts.</param>
        <param name="baseAddresses">Ein Array von Basisadressen für den Dienst.</param>
        <summary>Erstellt eine Instanz der angegebenen abgeleiteten <see cref="T:System.ServiceModel.Web.WebServiceHost" />-Klasse mit den angegebenen Basisadressen.</summary>
        <returns>Eine Instanz einer abgeleiteten <see cref="T:System.ServiceModel.ServiceHost" />-Klasse.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben Sie diese Methode, um den erforderlichen Diensthosttyp zu erstellen, und führen Sie alle erforderlichen Verarbeitungsschritte aus.  
  
   
  
## Examples  
 Im folgenden Beispiel wird eine grundlegende Implementierung dieser Methode veranschaulicht.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
