<Type Name="RegistryAuditRule" FullName="System.Security.AccessControl.RegistryAuditRule">
  <TypeSignature Language="C#" Value="public sealed class RegistryAuditRule : System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAuditRule extends System.Security.AccessControl.AuditRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAuditRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AuditRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Reihe von Zugriffsrechten für einen Benutzer oder eine Gruppe überwacht werden. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Security.AccessControl.RegistryAuditRule> Klasse wird zu einem Satz von Klassen, die die .NET Framework bietet für die Verwaltung von Windows-zugriffssteuerungssicherheit für Registrierungsschlüssel. Einen Überblick über diese Klassen und deren Beziehungen zu den zugrunde liegenden Windows Zugriffssteuerungsstrukturen finden Sie unter <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Windows-zugriffssteuerungssicherheit kann nur auf Registrierungsschlüssel angewendet werden. Es kann nicht auf einzelne Schlüssel/Wert-Paaren, die in einem Schlüsselspeicher gespeicherte angewendet werden.  
  
 Verwenden Sie zum Abrufen einer Liste der derzeit auf einen Registrierungsschlüssel angewendeten Überwachungsregeln der <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> Methode zum Abrufen einer <xref:System.Security.AccessControl.RegistrySecurity> -Objekts und anschließendes Verwenden der <xref:System.Security.AccessControl.CommonObjectSecurity.GetAuditRules%2A> Methode zum Abrufen einer Auflistung von <xref:System.Security.AccessControl.RegistryAuditRule> Objekte.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule>Objekte zuordnen nicht eins zu eins Zugriffssteuerungseinträge in der zugrunde liegenden besitzverwalteten Zugriffssteuerungsliste (DACL). Beim Abrufen des Satzes von alle Überwachungsregeln für einen Registrierungsschlüssel, enthält der Satz die minimale Anzahl von Regeln, die derzeit erforderlich, um alle Zugriffssteuerungseinträge.  
  
> [!NOTE]
>  Die zugrunde liegenden Zugriffssteuerungseinträge ändern, da Sie Regeln anwenden oder entfernen. Die in Regeln nach Möglichkeit zusammengeführt, um die kleinste Anzahl von Zugriffssteuerungseinträgen zu gewährleisten. Daher beim Lesen der aktuellen Liste der Regeln es sieht möglicherweise nicht genau wie die Liste aller Regeln, die Sie hinzugefügt haben.  
  
 Verwendung <xref:System.Security.AccessControl.RegistryAuditRule> Objekte an, die Zugriffsrechte für einen Benutzer oder eine Gruppe überwacht werden. Verwenden Sie zum Anwenden einer Regelsatzes an einem Registrierungsschlüssel die <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> Methode zum Abrufen der <xref:System.Security.AccessControl.RegistrySecurity> Objekt. Ändern der <xref:System.Security.AccessControl.RegistrySecurity> -Objekt mithilfe seiner Methoden zum Hinzufügen der Regelnamens, und klicken Sie dann die <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> Methode, um das Sicherheitsobjekt erneut anzufügen.  
  
> [!IMPORTANT]
>  Änderungen an einer <xref:System.Security.AccessControl.RegistrySecurity> Objekt haben keinen Einfluss auf die Zugriffsebenen des Registrierungsschlüssels erst nach dem Aufruf der <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> Methode, um den Registrierungsschlüssel der geänderten Sicherheitsobjekt zuweisen.  
  
 <xref:System.Security.AccessControl.RegistryAuditRule>-Objekte sind unveränderlich. Sicherheit für einen Registrierungsschlüssel mit den Methoden der geändert wird die <xref:System.Security.AccessControl.RegistrySecurity> Klasse zum Hinzufügen oder Entfernen von Regeln, wie in diesem Fall werden die zugrunde liegenden Zugriffssteuerungseinträge geändert.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">Der Benutzer oder Gruppe, die die Regel gilt. Muss vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> oder ein Typ sein wie z. B. <see cref="T:System.Security.Principal.NTAccount" /> , die konvertiert werden kann, auf den Typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.RegistryRights" /> Werte angeben, welche Arten des Zugriffs zu überwachen.</param>
        <param name="inheritanceFlags">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.InheritanceFlags" /> Werte, die angibt, ob der Unterschlüssel des aktuellen Schlüssels Überwachungsregel gilt.</param>
        <param name="propagationFlags">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.PropagationFlags" /> Werte, die Einfluss auf die Überwachungsregel an Unterschlüssel des aktuellen Schlüssels weitergegeben wird.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.AuditFlags" /> Werte, die angibt, ob bei Erfolg, Fehler oder beides zu überwachen.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> -Klasse unter Angabe der Benutzer oder Gruppe zu überwachen, die Berechtigungen zum Überwachen, ob Vererbung berücksichtigt werden soll und ob Erfolg, Fehler oder beides zu überwachen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Registrierungsschlüssel Container sind Kennzeichen für ausschließlichen Vererbung für Registrierungsschlüssel sinnvoll ist, werden die <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType> Flag. Wenn dieses Flag nicht angegeben ist, wird die Weitergabeflags werden ignoriert, und nur der unmittelbare Schlüssel ist betroffen. Wenn das Flag vorhanden ist, wird die Regel weitergegeben, wie in der folgenden Tabelle gezeigt. Die Tabelle wird davon ausgegangen, dass ein Unterschlüssel S mit untergeordneten Unterschlüssel CS und untergeordneten Unterschlüssel GS vorhanden ist. Der Pfad für den untergeordneten Unterschlüssel ist also lautet S\CS\GS.  
  
|Weitergabeflags|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Das Muster für den untergeordneten Unterschlüssel steuert alle Unterschlüssel, die von den untergeordneten Unterschlüssel enthalten.  
  
 Z. B. wenn die <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> Flag angegeben wird, für die `inheritanceFlags` und <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> verteilungskennzeichen für angegeben werden `propagationFlags`, diese Regel gilt nicht für den unmittelbaren Unterschlüssel, aber gilt für alle unmittelbar untergeordneten Unterschlüssel und alle Unterschlüssel Sie enthalten.  
  
> [!NOTE]
>  Sie können zwar Festlegen der <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType> mit einem flag für `inheritanceFlags`, keinen Sinn in diesem Fall. Für die Zwecke der Zugriffssteuerung sind die Name/Wert-Paare in einem Unterschlüssel keine separate Objekte. Die Zugriffsrechte auf Name/Wert-Paare werden durch die Rechte des Unterschlüssels gesteuert. Darüber hinaus, da alle Unterschlüssel Container sind (d. h., sie können andere Unterschlüssel enthalten), sie sind nicht betroffen von dem <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> Flag. Schließlich angeben der <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> Flag unnötig etwas komplizierter macht die Verwaltung der Regeln, da er mit der normalen Kombination kompatibler Regeln beeinträchtigt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="flags" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="inheritanceFlags" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="propagationFlags" />Gibt einen ungültigen Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="identity" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="registryRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" />ist nicht vom Typ <see cref="T:System.Security.Principal.SecurityIdentifier" /> noch von einem Typ, z. B. <see cref="T:System.Security.Principal.NTAccount" /> , die konvertiert werden kann, auf den Typ <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAuditRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AuditFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AuditFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAuditRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="flags" Type="System.Security.AccessControl.AuditFlags" />
      </Parameters>
      <Docs>
        <param name="identity">Der Name des Benutzers oder der Gruppe gilt die Regel.</param>
        <param name="registryRights">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.RegistryRights" /> Werte angeben, welche Arten des Zugriffs zu überwachen.</param>
        <param name="inheritanceFlags">Eine Kombination von <see cref="T:System.Security.AccessControl.InheritanceFlags" /> Flags, die angibt, ob der Unterschlüssel des aktuellen Schlüssels Überwachungsregel gilt.</param>
        <param name="propagationFlags">Eine Kombination von <see cref="T:System.Security.AccessControl.PropagationFlags" /> Flags an, die Einfluss auf die Überwachungsregel an Unterschlüssel des aktuellen Schlüssels weitergegeben wird.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.AuditFlags" /> Werte, die angibt, ob bei Erfolg, Fehler oder beides zu überwachen.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Security.AccessControl.RegistryAuditRule" /> -Klasse und gibt den Namen des Benutzers oder der Gruppe zu überwachen, die Rechte zu überwachen, ob Vererbung berücksichtigt werden soll und, ob Erfolg, Fehler oder beides überwacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Registrierungsschlüssel Container sind Kennzeichen für ausschließlichen Vererbung für Registrierungsschlüssel sinnvoll ist, werden die <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType> Flag. Wenn dieses Flag nicht angegeben ist, wird die Weitergabeflags werden ignoriert, und nur der unmittelbare Schlüssel ist betroffen. Wenn das Flag vorhanden ist, wird die Regel weitergegeben, wie in der folgenden Tabelle gezeigt. Die Tabelle wird davon ausgegangen, dass ein Unterschlüssel S mit untergeordneten Unterschlüssel CS und untergeordneten Unterschlüssel GS vorhanden ist. Der Pfad für den untergeordneten Unterschlüssel ist also lautet S\CS\GS.  
  
|Weitergabeflags|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Das Muster für den untergeordneten Unterschlüssel steuert alle Unterschlüssel, die von den untergeordneten Unterschlüssel enthalten.  
  
 Z. B. wenn die <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> Flag angegeben wird, für die `inheritanceFlags` und <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> verteilungskennzeichen für angegeben werden `propagationFlags`, diese Regel gilt nicht für den unmittelbaren Unterschlüssel, aber gilt für alle unmittelbar untergeordneten Unterschlüssel und alle Unterschlüssel Sie enthalten.  
  
> [!NOTE]
>  Sie können zwar Festlegen der <xref:System.Security.AccessControl.InheritanceFlags?displayProperty=nameWithType> mit einem flag für `inheritanceFlags`, keinen Sinn in diesem Fall. Für die Zwecke der Zugriffssteuerung sind die Name/Wert-Paare in einem Unterschlüssel keine separate Objekte. Die Zugriffsrechte auf Name/Wert-Paare werden durch die Rechte des Unterschlüssels gesteuert. Darüber hinaus, da alle Unterschlüssel Container sind (d. h., sie können andere Unterschlüssel enthalten), sie sind nicht betroffen von dem <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> Flag. Schließlich angeben der <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> Flag unnötig etwas komplizierter macht die Verwaltung der Regeln, da er mit der normalen Kombination kompatibler Regeln beeinträchtigt.  
  
 Dieser Konstruktor entspricht dem Erstellen eine <xref:System.Security.Principal.NTAccount> -Objekts und durch übergeben `identity` auf die <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> -Konstruktor übergeben und die neu erstellte <xref:System.Security.Principal.NTAccount> -Objekt an die <xref:System.Security.AccessControl.RegistryAuditRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AuditFlags%29> Konstruktor.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="eventRights" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="flags" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="inheritanceFlags" />Gibt einen ungültigen Wert.  
  
 - oder -   
  
 <paramref name="propagationFlags" />Gibt einen ungültigen Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="registryRights" /> ist 0 (null).</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="identity" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="identity" /> ist eine Zeichenfolge mit der Länge 0 (null).  
  
 - oder -   
  
 <paramref name="identity" />ist länger als 512 Zeichen lang sein.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAuditRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zugriffsrechte von Überwachungsregel betroffen sind.</summary>
        <value>Eine bitweise Kombination von <see cref="T:System.Security.AccessControl.RegistryRights" /> Werte, die Rechte der Überwachungsregel betroffen angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAuditRule>-Objekte sind unveränderlich. Sie können eine neue Überwachungsregel darstellt, ein anderer Benutzer, unterschiedliche Rechte oder eine andere Kombination von erstellen <xref:System.Security.AccessControl.AuditFlags> Flags, aber Sie können eine vorhandene Überwachungsregel nicht ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
