<Type Name="BinaryServerFormatterSink" FullName="System.Runtime.Remoting.Channels.BinaryServerFormatterSink">
  <TypeSignature Language="C#" Value="public class BinaryServerFormatterSink : System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BinaryServerFormatterSink extends System.Object implements class System.Runtime.Remoting.Channels.IChannelSinkBase, class System.Runtime.Remoting.Channels.IServerChannelSink" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IServerChannelSink</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt die Implementierung für eine Formatierungssenke des Servers, der verwendet die <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Anforderungsdatenstrom wird von Server-Transport-Ereignissenke über den Server Kanal senken weitergegeben, bis er die entsprechende Formatierungssenke erreicht. Die Formatierungssenke deserialisiert die Meldung und über die Pipeline übergeben. Eine spezielle Dispatch-Ereignissenke wird am Ende der Channelsenkenkette durch eingefügt die <xref:System.Runtime.Remoting.Channels.ChannelServices.CreateServerChannelSinkChain%2A?displayProperty=nameWithType> -Methode, die vom Serverchannel So erstellen Sie den Server senkenketten Kanal aufgerufen wird. Erreicht die Nachricht die Dispatchsenke, wird Sie durch die an die Remotinginfrastruktur übergeben.  
  
 Die folgende Tabelle zeigt die Senke Konfigurationseigenschaften, die für den aktuellen Senkenanbieter angegeben werden können.  
  
|Eigenschaft|Beschreibung|  
|--------------|-----------------|  
|`includeVersions`|Gibt an, ob der Formatierer Versionsinformationen enthält. Werte `true` oder `false`.|  
|`strictBinding`|Gibt an, dass ein empfangendes Formatierungsprogramm zuerst versucht, den Typ anhand der vollständigen Versionsinformationen zu identifizieren, sofern diese vorhanden sind, bevor es nur den Typ- und den Assemblynamen ohne die Versionsinformationen verwendet. Werte `true` oder `false`. Die Standardeinstellung für beide vom System bereitgestellten Formatierungsprogramme lautet `false`.|  
|`typeFilterLevel`|Ein Zeichenfolgenwert, der die Ebene der vom Serverchannel versuchten automatischen Deserialisierung angibt. Unterstützte Werte sind `Low` (Standard) und `Full`. Einzelheiten zur Deserialisierungsebenen finden Sie unter [&#91;\< Topic://cpconAutomaticDeserializationInNETRemoting > &#93; ](http://msdn.microsoft.com/en-us/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).<br /><br /> Diese Eigenschaft wird nur von .NET Framework, Version 1.1, auf den folgenden Plattformen unterstützt: Windows 98, Windows NT 4.0, Windows Millenium Edition, Windows 2000, Windows XP Home Edition, Windows XP Professional und Windows Server 2003-Produktfamilie.|  
  
> [!IMPORTANT]
>  Verwenden eine Instanz dieses Objekts mit nicht vertrauenswürdigen Daten oder über einen unsicheren Kanal stellt ein Sicherheitsrisiko dar. Verwenden Sie dieses Objekt nur mit vertrauenswürdigen Daten und über einen sicheren Kanal. Weitere Informationen finden Sie unter [Sicherheitsrisiken für nicht vertrauenswürdige Daten](http://go.microsoft.com/fwlink/?LinkId=330378).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BinaryServerFormatterSink (System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol protocol, System.Runtime.Remoting.Channels.IServerChannelSink nextSink, System.Runtime.Remoting.Channels.IChannelReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.Remoting.Channels.BinaryServerFormatterSink/Protocol protocol, class System.Runtime.Remoting.Channels.IServerChannelSink nextSink, class System.Runtime.Remoting.Channels.IChannelReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.#ctor(System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol,System.Runtime.Remoting.Channels.IServerChannelSink,System.Runtime.Remoting.Channels.IChannelReceiver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="protocol" Type="System.Runtime.Remoting.Channels.BinaryServerFormatterSink+Protocol" />
        <Parameter Name="nextSink" Type="System.Runtime.Remoting.Channels.IServerChannelSink" />
        <Parameter Name="receiver" Type="System.Runtime.Remoting.Channels.IChannelReceiver" />
      </Parameters>
      <Docs>
        <param name="protocol">Die <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Protocol" /> , die verwendet werden wird, mit der aktuellen Instanz der <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <param name="nextSink">Die nächste Senke in der Senkenkette Kanal.</param>
        <param name="receiver">Gibt an, den Kanal, der die Nachrichten empfängt, die von der neuen Instanz der serialisiert werden <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Remoting.Channels.BinaryServerFormatterSink" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsyncProcessResponse">
      <MemberSignature Language="C#" Value="public void AsyncProcessResponse (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers, System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AsyncProcessResponse(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers, class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.AsyncProcessResponse(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Ein Stapel von senken, der zurück an den Server-Transport-Ereignissenke führende ist.</param>
        <param name="state">Informationen, die der aktuellen Senke zugeordnet, auf der Anforderungsseite generiert und auf der Antwortseite erforderlich ist.</param>
        <param name="msg">Die Antwortnachricht.</param>
        <param name="headers">Die Header der Antwortnachricht hinzugefügt, die an den Client gesendet wird.</param>
        <param name="stream">Der Stream, der an die Transportsenke gesendet wird.</param>
        <summary>Fordert die Verarbeitung der Antwort aus dem Aufruf einer Methode, der asynchron gesendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetResponseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetResponseStream (System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, System.Runtime.Remoting.Messaging.IMessage msg, System.Runtime.Remoting.Channels.ITransportHeaders headers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IO.Stream GetResponseStream(class System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack sinkStack, object state, class System.Runtime.Remoting.Messaging.IMessage msg, class System.Runtime.Remoting.Channels.ITransportHeaders headers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.GetResponseStream(System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack,System.Object,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerResponseChannelSinkStack" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="msg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="headers" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Ein Stapel von senken, der zurück an den Server-Transport-Ereignissenke führende ist.</param>
        <param name="state">Informationen, die der aktuellen Senke zugeordnet, auf der Anforderungsseite generiert und auf der Antwortseite erforderlich ist.</param>
        <param name="msg">Die Antwortnachricht zu serialisieren.</param>
        <param name="headers">Die Header in den Ausgabestream für Antworten an den Client aufgenommen werden sollen.</param>
        <summary>Gibt die <see cref="T:System.IO.Stream" /> in dem die angegebene Antwortnachricht serialisiert werden.</summary>
        <returns>Die <see cref="T:System.IO.Stream" /> in dem die angegebene Antwortnachricht serialisiert werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, wenn ein Antwortstream erstellt werden muss.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextChannelSink">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Remoting.Channels.IServerChannelSink NextChannelSink" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.NextChannelSink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.IServerChannelSink</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das nächste <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in der Senkenkette.</summary>
        <value>Das nächste <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSink" /> in der Senkenkette.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessMessage">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage (System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, System.Runtime.Remoting.Messaging.IMessage requestMsg, System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, System.IO.Stream requestStream, out System.Runtime.Remoting.Messaging.IMessage responseMsg, out System.Runtime.Remoting.Channels.ITransportHeaders responseHeaders, out System.IO.Stream responseStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Runtime.Remoting.Channels.ServerProcessing ProcessMessage(class System.Runtime.Remoting.Channels.IServerChannelSinkStack sinkStack, class System.Runtime.Remoting.Messaging.IMessage requestMsg, class System.Runtime.Remoting.Channels.ITransportHeaders requestHeaders, class System.IO.Stream requestStream, [out] class System.Runtime.Remoting.Messaging.IMessage&amp; responseMsg, [out] class System.Runtime.Remoting.Channels.ITransportHeaders&amp; responseHeaders, [out] class System.IO.Stream&amp; responseStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.ProcessMessage(System.Runtime.Remoting.Channels.IServerChannelSinkStack,System.Runtime.Remoting.Messaging.IMessage,System.Runtime.Remoting.Channels.ITransportHeaders,System.IO.Stream,System.Runtime.Remoting.Messaging.IMessage@,System.Runtime.Remoting.Channels.ITransportHeaders@,System.IO.Stream@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.Channels.ServerProcessing</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sinkStack" Type="System.Runtime.Remoting.Channels.IServerChannelSinkStack" />
        <Parameter Name="requestMsg" Type="System.Runtime.Remoting.Messaging.IMessage" />
        <Parameter Name="requestHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders" />
        <Parameter Name="requestStream" Type="System.IO.Stream" />
        <Parameter Name="responseMsg" Type="System.Runtime.Remoting.Messaging.IMessage&amp;" RefType="out" />
        <Parameter Name="responseHeaders" Type="System.Runtime.Remoting.Channels.ITransportHeaders&amp;" RefType="out" />
        <Parameter Name="responseStream" Type="System.IO.Stream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sinkStack">Ein Stapel von senken, die die aktuelle Senke aufgerufen.</param>
        <param name="requestMsg">Die Meldung, die die Anforderung enthält.</param>
        <param name="requestHeaders">Header, die aus der eingehenden Nachricht vom Client abgerufen werden.</param>
        <param name="requestStream">Der Stream, der verarbeitet und an die Deserialisierungssenke übergeben werden muss.</param>
        <param name="responseMsg">Enthält bei Rückgabe dieser Methode eine <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> , die die Antwortnachricht enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="responseHeaders">Enthält bei Rückgabe dieser Methode eine <see cref="T:System.Runtime.Remoting.Channels.ITransportHeaders" /> , enthält der Header an die Antwortnachricht hinzugefügt, die an den Client gesendet wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <param name="responseStream">Enthält bei Rückgabe dieser Methode eine <see cref="T:System.IO.Stream" /> also Spaltenüberschrift, um die Transportsenke. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Anforderungen der Nachrichtenverarbeitung von der aktuellen Senke.</summary>
        <returns>Ein <see cref="T:System.Runtime.Remoting.Channels.ServerProcessing" /> Statuswert, der enthält Informationen wie die Nachricht verarbeitet wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Proxy-Auftrag ist einen Methodenaufruf zu konvertieren, der in einer Meldung darauf aufgerufen wird. Die Nachricht, die implementiert die <xref:System.Runtime.Remoting.Messaging.IMessage> Schnittstelle, wird vom Client an den Server übergeben, durch den Aufruf <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> auf Senke Nachrichtenobjekte. Nachricht senken verkettet werden, was bedeutet, dass jede Nachricht Senke verantwortlich für das Aufrufen ist <xref:System.Runtime.Remoting.Channels.IServerChannelSink.ProcessMessage%2A> auf den nächsten Empfänger der Nachricht nach die aktuellen Nachricht Senke seine Arbeit beendet hat. Eine Synchronisierung zugehörigen Nachricht Senke möglicherweise z. B. eine Sperre abgerufen oder freigegeben und an die Senke downstreamverarbeitung von Nachrichten delegiert werden.  
  
 Wenn ruft Kanal Formatierungssenke besteht eine Meldung, die gesendet über den Kanal aufgerufen werden muss <xref:System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage%2A>, die Nachricht als Parameter übergeben. Die Formatierungssenke erstellt anschließend die Transport-Header-Array und ruft <xref:System.Runtime.Remoting.Channels.IClientChannelSink.GetRequestStream%2A> auf Formatierungssenke besteht. Dieser Aufruf wird entlang der Senkenkette weitergeleitet, und jede Senke kann einen Anforderungsstream, der zurück an die Formatierungssenken übergeben werden erstellen. Rufen Sie anschließend zurück, die Nachricht serialisiert wird, <xref:System.Runtime.Remoting.Channels.IClientChannelSink.ProcessMessage%2A> für die erste Kette in der Senkenkette aufgerufen wird und die Nachricht an den Kanal senken übergeben wird.  
  
 Nachdem der Kanal senken zum Abrufen der Meldung, sie können Daten in den Datenstrom schreibt, des Header-Arrays Header hinzu, und sich selbst auf dem Stapel hinzufügen, bevor der Aufruf an den nächsten Empfänger weitergeleitet. Erreicht der Aufruf die Transportsenke am Ende der Kette, wird die Transportsenke sendet die Header und serialisierte Meldung über den Kanal an den Server, auf dem der Prozess umgekehrt wird.  
  
 Wenn die Nachricht an die Serverseite abruft, ruft die Header ab die Transportsenke und Nachricht aus dem Stream serialisiert und diese über der Senkenkette weitergeleitet, bis die Formatierungssenke erreicht ist. Formatierungssenke besteht anschließend deserialisiert die Meldung und leitet sie an der Infrastruktur für den Remotezugriff weiter. Klicken Sie dann der Remotinginfrastruktur wird die Nachricht in einem Methodenaufruf umgewandelt und ruft das Serverobjekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IDictionary Properties" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine <see cref="T:System.Collections.IDictionary" /> von Eigenschaften für den aktuellen Kanal Senke.</summary>
        <value>Ein <see cref="T:System.Collections.IDictionary" /> von Eigenschaften für den aktuellen Kanal Senke.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter [&#91;\< Topic://cpconchannelformatterconfigurationproperties > &#93; ](http://msdn.microsoft.com/en-us/226ecf74-ebbd-4ea0-a701-dcf4441deefe).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeFilterLevel">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Serialization.Formatters.TypeFilterLevel TypeFilterLevel" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.BinaryServerFormatterSink.TypeFilterLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.TypeFilterLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die <see langword="TypeFilterLevel" /> -Wert der automatischen Deserialisierung, die der <see langword="BinaryServerFormatterSink" /> führt.</summary>
        <value>Die <see langword="TypeFilterLevel" /> , die die aktuelle Ebene der automatischen Deserialisierung darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Unterstützte Werte sind `Low` (Standard) und `Full`. Einzelheiten zur Deserialisierungsebenen finden Sie unter [automatische Deserialisierung in .NET Remoting](http://msdn.microsoft.com/en-us/313a0e88-5b2b-4a17-8391-0ddf9f7a787b).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
