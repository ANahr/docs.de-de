<Type Name="ImpersonateOnSerializingReplyMessageProperty" FullName="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty">
  <TypeSignature Language="C#" Value="public class ImpersonateOnSerializingReplyMessageProperty : System.ServiceModel.Channels.IMessageProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImpersonateOnSerializingReplyMessageProperty extends System.Object implements class System.ServiceModel.Channels.IMessageProperty" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ServiceModel.Channels.IMessageProperty</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Eine Hilfsklasse, die beim Serialisieren des Texts der Antwortnachricht für den Identitätswechsel.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.ServiceModel.Channels.IMessageProperty CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ServiceModel.Channels.IMessageProperty CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.CreateCopy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Channels.IMessageProperty</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Kopie der Nachrichteneigenschaft.</summary>
        <returns>Die Kopie die Message-Eigenschaft.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public static string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der Nachrichteneigenschaft ab.</summary>
        <value>Der Name der Nachrichteneigenschaft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartImpersonation">
      <MemberSignature Language="C#" Value="public void StartImpersonation (out IDisposable impersonationContext, out System.Security.Principal.IPrincipal originalPrincipal, out bool isThreadPrincipalSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StartImpersonation([out] class System.IDisposable&amp; impersonationContext, [out] class System.Security.Principal.IPrincipal&amp; originalPrincipal, [out] bool&amp; isThreadPrincipalSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StartImpersonation(System.IDisposable@,System.Security.Principal.IPrincipal@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="impersonationContext" Type="System.IDisposable&amp;" RefType="out" />
        <Parameter Name="originalPrincipal" Type="System.Security.Principal.IPrincipal&amp;" RefType="out" />
        <Parameter Name="isThreadPrincipalSet" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="impersonationContext">Wenn diese Methode zurückgibt, enthält der Identitätswechselkontext. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <param name="originalPrincipal">Wenn diese Methode zurückgibt, enthält die ursprüngliche Prinzipaldatenbank auf dem Thread vor dem Aufrufen dieser Methode. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <param name="isThreadPrincipalSet">Bei der Rückgabe dieser Methode enthält einen Wert, der angibt, ob der Prinzipal für den Thread von dieser Methode festgelegt wurde. Dieser Parameter gibt <see langword="false" /> , wenn der Vorgangskontext nicht für den Identitätswechsel verfügbar war. Dieser Parameter wird nicht initialisiert behandelt.</param>
        <summary>Startet, Identitätswechsel mit dem Kontext des Aufrufers, wenn der Identitätswechsel für den Dienst aktiviert ist, und legt den entsprechenden Prinzipal auf dem Thread gemäß der Dienstkonfiguration.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopImpersonation">
      <MemberSignature Language="C#" Value="public void StopImpersonation (IDisposable impersonationContext, System.Security.Principal.IPrincipal originalPrincipal, bool isThreadPrincipalSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopImpersonation(class System.IDisposable impersonationContext, class System.Security.Principal.IPrincipal originalPrincipal, bool isThreadPrincipalSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.StopImpersonation(System.IDisposable,System.Security.Principal.IPrincipal,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="impersonationContext" Type="System.IDisposable" />
        <Parameter Name="originalPrincipal" Type="System.Security.Principal.IPrincipal" />
        <Parameter Name="isThreadPrincipalSet" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="impersonationContext">Der Identitätswechselkontext zurückgesetzt werden soll.</param>
        <param name="originalPrincipal">Die ursprüngliche Prinzipaldatenbank auf dem Thread festlegen.</param>
        <param name="isThreadPrincipalSet">Ein Wert, der angibt, ob der Prinzipal des Threads während des Identitätswechsels festgelegt wurde. <see langword="true" />Wenn der Prinzipal festgelegt wurde. andernfalls <see langword="false" />.</param>
        <summary>Identitätswechsel zurückgesetzt, und legt den angegebenen ursprünglichen Prinzipal für den Thread.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public static bool TryGet (System.ServiceModel.Channels.Message message, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGet(class System.ServiceModel.Channels.Message message, [out] class System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.Message,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" />
        <Parameter Name="property" Type="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="message">Die Nachricht aus dem die Eigenschaft extrahiert werden sollen.</param>
        <param name="property">Enthält bei Rückgabe dieser Methode die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> Eigenschaft aus der Nachricht extrahiert.</param>
        <summary>Ruft die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> Eigenschaft aus der angegebenen Nachricht.</summary>
        <returns>
          <see langword="true" />Wenn die Eigenschaft gefunden wurde. andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGet">
      <MemberSignature Language="C#" Value="public static bool TryGet (System.ServiceModel.Channels.MessageProperties properties, out System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGet(class System.ServiceModel.Channels.MessageProperties properties, [out] class System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp; property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty.TryGet(System.ServiceModel.Channels.MessageProperties,System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="properties" Type="System.ServiceModel.Channels.MessageProperties" />
        <Parameter Name="property" Type="System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="properties">Die Message-Eigenschaften-Objekt, aus der die Eigenschaft extrahiert werden soll.</param>
        <param name="property">Enthält bei Rückgabe dieser Methode die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> Eigenschaft aus der Nachricht extrahiert.</param>
        <summary>Ruft die <see cref="T:System.ServiceModel.Security.ImpersonateOnSerializingReplyMessageProperty" /> Eigenschaft aus dem angegebenen <see cref="T:System.ServiceModel.Channels.MessageProperties" /> Objekt...</summary>
        <returns>
          <see langword="true" />Wenn die Eigenschaft gefunden wurde. andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
