<Type Name="WindowsClientCredential" FullName="System.ServiceModel.Security.WindowsClientCredential">
  <TypeSignature Language="C#" Value="public sealed class WindowsClientCredential" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowsClientCredential extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.WindowsClientCredential" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht Ihnen die Angabe von Eigenschaften für Windows-Anmeldeinformationen, die zum Darstellen des Clients verwendet werden sollen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.Security.WindowsClientCredential> aktiviert die Einstellung von Windows-Clienteigenschaften, die bei der Kommunikation mit einem Dienst verwendet werden. Die <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> legt die Ebene des Identitätswechsels fest, die der Dienst bei einem Identitätswechsel für den Client annehmen kann. Mit den <xref:System.ServiceModel.Security.WindowsClientCredential.ClientCredential%2A> kann ein Client mit Benutzernamen und Kennwort für den Dienst authentifiziert werden. Die <xref:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm%2A> legen fest, ob NTLM zum Authentifizieren des Clients verwendet werden kann, wenn Kerberos nicht verwendet wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Client erstellt und ein Verweis auf die <xref:System.ServiceModel.Security.WindowsClientCredential> abgerufen. Anschließend ändert der Code die <xref:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel%2A> in einen neuen Wert.  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowedImpersonationLevel">
      <MemberSignature Language="C#" Value="public System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel AllowedImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowedImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die zulässige Identitätswechselebene ab oder legt sie fest.</summary>
        <value>Einer der <see cref="T:System.Security.Principal.TokenImpersonationLevel" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt die vom Client an den Server erteilte Ebene des Identitätswechsels bei Verwendung der Windows-Authentifizierung mit SSPI-Aushandlung an. Beachten Sie, dass die vom Server beim Imitieren des Clienttokens abgerufene Ebene für den Identitätswechsel nicht nur eine Funktion dieser Einstellung ist. Sie ist auch eine Funktion der zugehörigen Berechtigungen und Domäneneinstellungen für das Konto, in dem der Dienst ausgeführt wird.  
  
 Der Client muss die zulässige Ebene für den Identitätswechsel explizit mit dieser Eigenschaft festlegen.  
  
 Wenn der Client den anonymen Identitätswechsel angibt, wird der Client immer als anonym für den Dienst authentifiziert, auch wenn im Dienst kein Identitätswechsel ausgeführt wird. Dies hängt mit zugrunde liegendem Verhalten des Windows-Betriebssystems zusammen.  
  
 [!INCLUDE[crabout](~/includes/crabout-md.md)]Windows-Identitätswechsel, wechseln Sie zu [und Zurücksetzen der Identität](http://go.microsoft.com/fwlink/?LinkId=96178). [!INCLUDE[crabout](~/includes/crabout-md.md)]Verwenden Identitätswechsel [!INCLUDE[indigo1](~/includes/indigo1-md.md)], finden Sie unter [Delegierung und Identitätswechsel](~/docs/framework/wcf/feature-details/delegation-and-impersonation-with-wcf.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird das Festlegen dieser Eigenschaft veranschaulicht.  
  
 [!code-csharp[WindowsClientCredential#1](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#1)]
 [!code-vb[WindowsClientCredential#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/windowsclientcredential/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowNtlm">
      <MemberSignature Language="C#" Value="public bool AllowNtlm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowNtlm" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.AllowNtlm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die NTLM-Authentifizierung als Windows-Authentifizierung mit SSPI-Aushandlung zulässig sein soll.</summary>
        <value>
          <see langword="true" />, wenn die NTLM-Authentifizierung als Windows-Authentifizierung mit SSPI-Aushandlung möglich sein soll, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Festlegen dieser Eigenschaft auf `true` kann die Authentifizierung auf NTLM herabgestuft werden, wenn Kerberos nicht verfügbar ist.  
  
 Das Festlegen dieser Eigenschaft auf `false` führt dazu, dass [!INCLUDE[indigo1](~/includes/indigo1-md.md)] nach dem Best-Effort-Prinzip eine Ausnahme auslöst, wenn NTLM verwendet wird. Durch das Festlegen dieser Eigenschaft auf `false` wird unter Umständen nicht verhindert, dass NTLM-Anmeldeinformationen über die Verbindung gesendet werden.  
  
 Bestimmte Bereitstellungen, wie beispielsweise Arbeitsgruppen und lokale Konten, erfordern die NTLM-Authentifizierung. Wird dieses Flag in solchen Bereitstellungen auf `false` gesetzt, kommt es bei der Verwendung von [!INCLUDE[indigo2](~/includes/indigo2-md.md)] zu Authentifizierungsfehlern. Setzen Sie dieses Flag in einer Bereitstellung, die gegenseitige Authentifizierung (nur von Kerberos unterstützt) erfordert, auf `false`.  
  
 NTLM (Windows NT LAN Manager) ist das Authentifizierungsprotokoll, das in Netzwerken, die mit dem Betriebssystem Windows NT-Systeme enthalten, sowie auf eigenständigen Systemen verwendet.  
  
 Das Microsoft Kerberos-Sicherheitspaket bietet für Systeme in Netzwerken größere Sicherheit als NTLM. Obwohl Microsoft Kerberos das gewählte Protokoll ist, wird NTLM wird weiterhin unterstützt und muss zur Netzwerkauthentifizierung, wenn das Netzwerk Systeme, die mit Versionen von Windows NT 4.0 und früheren Versionen enthält, und klicken Sie auf eigenständigen Systemen verwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientCredential">
      <MemberSignature Language="C#" Value="public System.Net.NetworkCredential ClientCredential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.NetworkCredential ClientCredential" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Security.WindowsClientCredential.ClientCredential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Windows-Clientanmeldeinformationen ab oder legt diese fest.</summary>
        <value>Die <see cref="T:System.Net.NetworkCredential" /> für den Client.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig werden die Anmeldeinformationen des aktuellen Threads von [!INCLUDE[indigo2](~/includes/indigo2-md.md)] zum Ausführen der Windows-Authentifizierung mit SSPI-Aushandlung verwendet.  
  
 Um den Client als weiteres Prinzipal zu authentifizieren, ändern Sie die Eigenschaften der Instanz der <xref:System.Net.NetworkCredential>-Klasse, die von dieser Eigenschaft zurückgegeben wird. Alternativ dazu erstellen Sie eine neue Instanz der <xref:System.Net.NetworkCredential>-Klasse, und weisen Sie sie dieser Eigenschaft zu.  
  
   
  
## Examples  
 Die folgenden Codebeispiele zeigen, wie der Client als anderer Prinzipal authentifiziert wird.  
  
 Auf diese Weise können Sie die Eigenschaften der Instanz der <xref:System.Net.NetworkCredential>-Klasse ändern, die von dieser Eigenschaft zurückgegeben wird.  
  
 [!code-csharp[WindowsClientCredential#2](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#2)]  
  
 So erstellen Sie eine neue Instanz der <xref:System.Net.NetworkCredential>-Klasse und weisen sie dieser Eigenschaft zu.  
  
 [!code-csharp[WindowsClientCredential#3](~/samples/snippets/csharp/VS_Snippets_CFX/windowsclientcredential/cs/source.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
