<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Implementiert die Extrapolierung der Position, Ausrichtung und durchschnittliche Radius eines Bearbeitungsvorgang.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> Objekt ermöglicht der Anwendung, die den Speicherort eines Elements, Ausrichtung und andere Eigenschaften zu extrapolieren, indem reales Verhalten simuliert.  
  
 Z. B. wenn ein Benutzer ein Element verschoben und gibt Sie frei, kann das Element verschieben/Verlangsamung und dann langsam. Ein Trägheitsprozessor implementiert dieses Verhalten verursacht die affinen 2D-Werte (Ursprung, Skalierung, Verschiebung und Drehung) über einen angegebenen Zeitraum bei einer angegebenen Verlangsamungsrate ändern.  
  
 Ein Trägheitsprozessor allein bewirkt nicht, ein Element zu verschieben und/Verlangsamung. Die Anwendung empfängt Informationen von einem Trägheitsprozessor und übernimmt die Werte nach Bedarf auf ein anwendungsspezifisches Element. In der Regel verwendet eine Anwendung die von einem Trägheitsprozessor empfangene Informationen um zu dem Speicherort, Größe oder Ausrichtung eines Elements zu ändern.  
  
 Trägheitsverarbeitung wird normalerweise in Verbindung mit der manipulationsverarbeitung verwendet. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D>-Klasse.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Der Zeitstempel für den Abschluss des Extrapolierens im 100-Nanosekunden-Takt.</param>
        <summary>Schließt abschließendes Extrapolieren mit dem angegebenen Zeitstempel ab und löst das <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Timestamps werden in Einheiten von 100 Nanosekunden.  
  
   
  
## Examples  
 Im folgenden Beispiel wird ein Ereignishandler für das <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> Ereignis geprüft, wenn die trägheitsverarbeitung ausgeführt wird und wenn dies der Fall ist, hält er durch Aufrufen der <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> Methode.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Zeitstempelparameter ist kleiner als der ursprüngliche oder vorherige Zeitstempel.</exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Extrapolierung abgeschlossen wurde.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn sich der Extrapolierungsursprung geändert hat oder wenn Übersetzung, Skalierung oder Drehung ausgeführt wurden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> Ereignis und die <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> Ereignis identisch sind. In der Regel können Sie den Ereignishandler für beide Ereignisse verwenden.  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt das Erweiterungsverhalten von der Trägheitsprozessor.</summary>
        <value>Das Erweiterungsverhalten von der Trägheitsprozessor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die X-Koordinate für den anfänglichen Ursprung in-Koordinate Einheiten.</summary>
        <value>Die X-Koordinate für den anfänglichen Ursprung in-Koordinate Einheiten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ursprungspunkt dargestellt, indem Sie die <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> und <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> Eigenschaften ist die mittlere Position aller Manipulatoren, die mit einem Element verknüpft sind.  
  
 Ein gültiger Wert für <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> ist eine endliche Zahl. Der Standardwert ist 0,0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die y-Koordinate für den anfänglichen Ursprung in-Koordinate Einheiten.</summary>
        <value>Die y-Koordinate für den anfänglichen Ursprung in-Koordinate Einheiten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Ursprungspunkt dargestellt, indem Sie die <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> und <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> Eigenschaften ist die mittlere Position aller Manipulatoren, die mit einem Element verknüpft sind.  
  
 Ein gültiger Wert für <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> ist eine endliche Zahl. Der Standardwert ist 0,0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob Trägheit gerade ausgeführt wird.</summary>
        <value>Ein boolescher Wert, der angibt, ob Trägheit gerade ausgeführt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird ein Ereignishandler für das <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> -Ereignis überprüft, um festzustellen, ob die trägheitsverarbeitung ausgeführt wird, und wenn dies der Fall ist, er durch Aufrufen hält der <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> Methode.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Der Zeitstempel für die Extrapolierung in Abständen von 100 Nanosekunden.</param>
        <summary>Extrapoliert die Position, die Ausrichtung und den durchschnittlichen Radius der Manipulation zum angegebenen Zeitpunkt.</summary>
        <returns>Die Position, die Ausrichtung und der durchschnittliche Radius der Manipulation zum angegebenen Zeitpunkt. <see langword="true" />, wenn die Extrapolierung noch ausgeführt wird. <see langword="false" />, wenn die Extrapolierung abgeschlossen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Timestamps werden in Einheiten von 100 Nanosekunden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Zeitstempelparameter ist kleiner als der ursprüngliche oder vorherige Zeitstempel.</exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt das Verhalten Rotation der Trägheitsprozessor.</summary>
        <value>Das von der Trägheitsprozessor Drehung-Verhalten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel die <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> Eigenschaftensatz So aktivieren Sie die trägheitsverarbeitung, um ein Objekt drei und-eine halbe Mal von der ersten Ausrichtung zu drehen.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters">Festzulegende Parameter.</param>
        <summary>Legt Parameter für den Trägheitsprozessor fest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt das Übersetzungsverhalten der Trägheitsprozessor.</summary>
        <value>Das Übersetzungsverhalten von der Trägheitsprozessor.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
