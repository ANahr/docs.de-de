<Type Name="ToolTipEventArgs" FullName="System.Windows.Controls.ToolTipEventArgs">
  <TypeSignature Language="C#" Value="public sealed class ToolTipEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ToolTipEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.ToolTipEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Ereignisinformationen für Ereignisse, die auftreten, wenn eine QuickInfo geöffnet oder geschlossen wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine QuickInfo geöffnet und geschlossen wird, stellt diese Klasse Ereignisinformationen. Das Element, das die QuickInfo gibt an, erbt von <xref:System.Windows.FrameworkElement> oder <xref:System.Windows.ContentElement>. Aus diesem Grund sind Eröffnungs- und Ereignisse auf beiden Klassen vorhanden. Die folgende Tabelle listet die Ereignisse, die diese Klasse verwenden.  
  
|Ereignisse, die auftreten, wenn eine QuickInfo geöffnet wird.|Ereignisse, die auftreten, wenn eine QuickInfo geschlossen wird.|  
|--------------------------------------------|---------------------------------------------|  
|<xref:System.Windows.FrameworkElement.ToolTipOpening?displayProperty=nameWithType>|<xref:System.Windows.FrameworkElement.ToolTipClosing?displayProperty=nameWithType>|  
|<xref:System.Windows.FrameworkContentElement.ToolTipOpening?displayProperty=nameWithType>|<xref:System.Windows.FrameworkContentElement.ToolTipClosing?displayProperty=nameWithType>|  
  
 Diese Ereignisse registriert werden, indem die <xref:System.Windows.Controls.ToolTipService> der Klasse die <xref:System.Windows.Controls.ToolTipService.ToolTipOpeningEvent> und <xref:System.Windows.Controls.ToolTipService.ToolTipClosingEvent> Felder. Die <xref:System.Windows.FrameworkElement> und <xref:System.Windows.FrameworkContentElement> beide Klassen implementieren die <xref:System.Windows.Controls.ToolTipService> und machen Sie dieses Ereignis durch die Ereignisse in der vorherigen Tabelle definieren.  
  
 Die <xref:System.Windows.Controls.ToolTipEventArgs> -Klasse überschreibt die <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> Methode. Dieser geschützte Member wird jedoch nicht angezeigt, auf die <xref:System.Windows.Controls.ToolTipEventArgs> Liste der Elemente, da die Methode versiegelt ist und kann nicht überschrieben werden, in Klassen aus <xref:System.Windows.Controls.ToolTipEventArgs>. Die Implementierung der Methode in dieser Klasse wandelt den Ereignishandlerdelegaten, die als Parameter an die Methode, die bereitgestellt wird die <xref:System.Windows.Controls.ToolTipEventHandler> Typ.  
  
 Wenn die QuickInfo als definiert ist eine <xref:System.Windows.Controls.ToolTip> -Objekt, das <xref:System.Windows.Controls.ToolTip.Opened> und <xref:System.Windows.Controls.ToolTip.Closed> Ereignisse der <xref:System.Windows.Controls.ToolTip> Klasse werden auch ausgelöst, wenn eine QuickInfo geöffnet und geschlossen wird.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.ToolTipEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="genericTarget">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
