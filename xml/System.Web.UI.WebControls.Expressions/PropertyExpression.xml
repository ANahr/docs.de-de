<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet eine Möglichkeit zum Erstellen einer <see langword="Where" /> -Klausel aus Parametern in einer <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> Auflistung.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Klasse wird verwendet, mit der <xref:System.Web.UI.WebControls.QueryExtender> Steuerelement zum Filtern von Daten in Datenfelder. Die <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> -Klasse vergleicht einen Eigenschaftswert einer Spalte mit einem angegebenen Wert. Beispielsweise können Sie einen booleschen Wert auf den Wert in der Spalte nicht mehr unterstützte, eine Produkttabelle in einer Datenbank vergleichen.  
  
 Die <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> Klasse erstellt einen Gleichheitsvergleich (==) für den Wert jedes Parameters und der entsprechenden Eigenschaft des der <xref:System.Linq.IQueryable> Datenobjekt. Wenn Sie mehr als einen Parameter angeben, die Parameter werden mit kombiniert den logischen `AND` Operator. Parameter, die einen leeren Wert enthalten nicht hinzugefügt werden die `Where` Klausel.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie die Products-Tabelle der Suche nach der AdventureWorks-Datenbank für Produkte, deren `MakeFlag` Eigenschaft (eine boolesche Spalte)-Wert von `true`. Das Wahrheitswert-Parameter wird in einem Kontrollkästchen festgelegt. Das Ergebnis der Abfrage, die von zurückgegeben wird das <xref:System.Web.UI.WebControls.LinqDataSource> Steuerelement wird angezeigt, einem <xref:System.Web.UI.WebControls.GridView> Steuerelement.  
  
 Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels, die in bereitgestellten [Exemplarische Vorgehensweise: Filtern von Daten in einer Webseite mithilfe von deklarativer Syntax](http://msdn.microsoft.com/en-us/b305ae31-1a1b-4d07-a678-51457c17614f).  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, für die Abfrage verwendet werden soll.</param>
        <summary>Wendet eine <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> Objekt unter Verwendung des angegebenen <see cref="T:System.Linq.IQueryable" /> -Datenquellenobjekt.</summary>
        <returns>Eine Instanz des Objekts, das auf die Ausdrücke angewendet wurden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kombiniert die angegebenen <xref:System.Linq.IQueryable> Objekt mit den Ausdrücken in der <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> Auflistung mithilfe des logischen `AND` Operator.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
