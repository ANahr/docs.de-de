<Type Name="ICodeGenerator" FullName="System.CodeDom.Compiler.ICodeGenerator">
  <TypeSignature Language="C#" Value="public interface ICodeGenerator" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICodeGenerator" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.ICodeGenerator" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert eine Schnittstelle zum Generieren von Code.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  In der .NET Framework-Versionen 1.0 und 1.1, bestehen Codeanbieter Implementierungen von <xref:System.CodeDom.Compiler.CodeDomProvider>, <xref:System.CodeDom.Compiler.ICodeGenerator>, <xref:System.CodeDom.Compiler.ICodeParser>, und <xref:System.CodeDom.Compiler.ICodeCompiler>. In der [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>, und <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> Methoden sind veraltet, und die Methoden der <xref:System.CodeDom.Compiler.ICodeGenerator> und <xref:System.CodeDom.Compiler.ICodeCompiler> stehen direkt in die <xref:System.CodeDom.Compiler.CodeDomProvider> Klasse. Überschreiben Sie diese Methoden in der anbieterimplementierung Code, und nicht die Basis-Methoden aufrufen.  
  
 Compiler-Entwickler können diese Schnittstelle zum Zulassen von Personen zum dynamischen Generieren von Code in einer bestimmten Sprache implementieren. Dies kann verwendet werden, für verschiedene Zwecke verwenden, z. B. das Generieren von Code-Assistenten, die von dynamischen Assemblys mit Inhalt, der debuggt werden können, erstellen und für auf Vorlagen basierende Dokumente mit eingebetteten Code, z. B. ASP.NET.  
  
 Ein <xref:System.CodeDom.Compiler.ICodeGenerator> Implementierung normalerweise erhalten Sie durch einen Aufruf der <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> Methode <xref:System.CodeDom.Compiler.CodeDomProvider>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge, die für eine geschützte ID zu erstellen.</param>
        <summary>Erstellt eine geschützte ID für den angegebenen Wert.</summary>
        <returns>Die geschützte ID für den Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier%2A>testet, ob der Bezeichner mit reservierten Konflikte oder Sprachschlüsselwörter, und wenn dies der Fall ist, gibt Sie einen äquivalenten Namen mit Escapezeichen sprachspezifische Code formatieren. Dies ist eine geschützte ID bezeichnet. Die geschützte ID enthält denselben `value` jedoch Escape Formatierung hinzugefügt, um den Bezeichner vom Schlüsselwort zu unterscheiden. Zwei Beispiele für die Implementierung vorangestellt werden die `value` mit "@" oder Einklammern der `value` mit "[" und "]".  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Die Zeichenfolge einen gültigen Bezeichner zu generieren.</param>
        <summary>Erstellt einen gültigen Bezeichner für den angegebenen Wert.</summary>
        <returns>Ein gültiger Bezeichner für den angegebenen Wert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier%2A>Tests, ob der Bezeichner Konflikte mit reservierten oder Programmiersprachen-Schlüsselwörter und gibt ein gültiger Bezeichner, der name nicht in Konflikt stehen. Der zurückgegebene Bezeichner enthält denselben `value` aber wenn es einen Konflikt mit reserviert oder Sprachschlüsselwörter, müssen die Formatierung für Escapecode hinzugefügt, um den Bezeichner vom Schlüsselwort zu unterscheiden. Wenn der Wert muss geändert werden, wird Wert in der Regel mit einem vorangestellten Unterstrich "_" zurückgegeben.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.CodeDom.CodeCompileUnit" />, für den Code generiert werden soll.</param>
        <param name="w">Die <see cref="T:System.IO.TextWriter" /> auf Code ausgegeben werden soll.</param>
        <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , die angibt, dass der Optionen zum Generieren von Code verwendet werden soll.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Kompilierungseinheit (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public void GenerateCodeFromExpression (System.CodeDom.CodeExpression e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.CodeDom.CodeExpression" /> , der den Ausdruck zum Generieren von Code für angibt.</param>
        <param name="w">Die <see cref="T:System.IO.TextWriter" /> auf Code ausgegeben werden soll.</param>
        <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , die angibt, dass der Optionen zum Generieren von Code verwendet werden soll.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Ausdruck (Code Document Object Model) und gibt diesen an den angegebenen TextWriter aus.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.CodeDom.CodeNamespace" /> , der zum Generieren von Code für den-Namespace angibt.</param>
        <param name="w">Die <see cref="T:System.IO.TextWriter" /> auf Code ausgegeben werden soll.</param>
        <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , die angibt, dass der Optionen zum Generieren von Code verwendet werden soll.</param>
        <summary>Generiert Code für den angegebenen CodeDOM-Namespace (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public void GenerateCodeFromStatement (System.CodeDom.CodeStatement e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.CodeDom.CodeStatement" /> mit CodeDOM-Elementen zu übersetzen.</param>
        <param name="w">Die <see cref="T:System.IO.TextWriter" /> auf Code ausgegeben werden soll.</param>
        <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , die angibt, dass der Optionen zum Generieren von Code verwendet werden soll.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Anweisung (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration e, System.IO.TextWriter w, System.CodeDom.Compiler.CodeGeneratorOptions o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration e, class System.IO.TextWriter w, class System.CodeDom.Compiler.CodeGeneratorOptions o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="w" Type="System.IO.TextWriter" />
        <Parameter Name="o" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.CodeDom.CodeTypeDeclaration" /> Wert vom Typ, Code zu generieren.</param>
        <param name="w">Die <see cref="T:System.IO.TextWriter" /> auf Code ausgegeben werden soll.</param>
        <param name="o">Ein <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> , die angibt, dass der Optionen zum Generieren von Code verwendet werden soll.</param>
        <summary>Generiert Code für die angegebene CodeDOM-Typdeklaration (Code Document Object Model) und gibt diesen unter Verwendung der angegebenen Optionen an den angegebenen TextWriter aus.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">Ein <see cref="T:System.CodeDom.CodeTypeReference" /> , der den Typ der zurückzugebenden angibt.</param>
        <summary>Ruft den vom angegebenen Typ ab <see cref="T:System.CodeDom.CodeTypeReference" />.</summary>
        <returns>Eine Textdarstellung des angegebenen Typs für die Sprache, die diesen Code-Generator zur Generierung von Code in konzipiert ist. Übergeben von im System. Int32-Typ in Visual Basic gibt z. B. "Integer" zurück.</returns>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert für ein gültiger Bezeichner zu testen.</param>
        <summary>Ruft einen Wert, der angibt, ob der angegebene Wert ein gültiger Bezeichner für die aktuelle Sprache ist.</summary>
        <returns>
          <see langword="true" />Wenn die <paramref name="value" /> Parameter ist ein gültiger Bezeichner ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überprüft, ob ein Bezeichner gültig ist. Bei der Implementierung <xref:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier%2A> entwerfen Sie in einer abgeleiteten Klasse die Methode zum Testen des Werts übergeben wird, und kehren zurück `true` nur, wenn der Wert den Regeln der Sprache entspricht und keine mit einem Schlüsselwort Konflikte.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" />
      </Parameters>
      <Docs>
        <param name="supports">Die Funktionen den Generator für testen.</param>
        <summary>Ruft einen Wert, der angibt, ob der Generator für die Sprachfeatures, dargestellt durch das angegebene unterstützt <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> Objekt.</summary>
        <returns>
          <see langword="true" />Wenn die angegebenen Funktionen unterstützt werden. andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann aufgerufen werden, mit einer Anzahl von <xref:System.CodeDom.Compiler.GeneratorSupport> Flags gleichzeitig für eine Reihe von Funktionen zu testen, indem Sie eine Gruppe von Flags der entsprechende Funktion zusammen mit einem Binary "Oder"-Operator (&#124;) verknüpfen.  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="ValidateIdentifier">
      <MemberSignature Language="C#" Value="public void ValidateIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ValidateIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Der zu überprüfende Bezeichner.</param>
        <summary>Löst eine Ausnahme aus, wenn der angegebene Wert kein gültiger Bezeichner ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Anstatt einen Wert zurückgibt, löst diese Methode eine Ausnahme aus, wenn der angegebene Bezeichner entsprechend die Implementierung der Methode ungültig ist. Die Ausnahme in der Regel ist ein <xref:System.ArgumentException>. Diese Methode ermöglicht, einen Codegenerator, der implementiert diese Methode, um eine informative Fehlermeldung auf Grundlage des Werts, der einen ungültigen Bezeichner zu erzeugen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Bezeichner ist ungültig.</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">für volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Dieser Member kann von nur teilweise vertrauenswürdigem Code nicht verwendet werden.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">für volle Vertrauenswürdigkeit für erben. Dieser Member kann nicht von teilweise vertrauenswürdigem Code nicht vererbt werden.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
