<Type Name="DbJoinExpression" FullName="System.Data.Common.CommandTrees.DbJoinExpression">
  <TypeSignature Language="C#" Value="public sealed class DbJoinExpression : System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DbJoinExpression extends System.Data.Common.CommandTrees.DbExpression" />
  <TypeSignature Language="DocId" Value="T:System.Data.Common.CommandTrees.DbJoinExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.CommandTrees.DbExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen inneren, linken äußeren oder vollständigen äußeren Join zwischen den angegebenen Auflistungsargumenten mit der angegebenen Joinbedingung dar.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="public override void Accept (System.Data.Common.CommandTrees.DbExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Accept(class System.Data.Common.CommandTrees.DbExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Common.CommandTrees.DbExpressionVisitor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">Eine Instanz von <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />.</param>
        <summary>Implementiert das Besuchermuster für Ausdrücke, die keinen Ergebniswert erstellen.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Accept&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public override TResultType Accept&lt;TResultType&gt; (System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt; visitor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance !!TResultType Accept&lt;TResultType&gt;(class System.Data.Common.CommandTrees.DbExpressionVisitor`1&lt;!!TResultType&gt; visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Common.CommandTrees.DbExpressionVisitor{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResultType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="visitor" Type="System.Data.Common.CommandTrees.DbExpressionVisitor&lt;TResultType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResultType">Der Typ des Ergebnisses von erzeugten <c>Besucher</c>.</typeparam>
        <param name="visitor">Eine Instanz eines typisierten <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" />, der einen Ergebniswert eines bestimmten Typs erstellt.</param>
        <summary>Implementiert das Besuchermuster für Ausdrücke, die einen Ergebniswert eines bestimmten Typs erstellen.</summary>
        <returns>Ein Ergebniswert eines bestimmten Typs, der von <see cref="T:System.Data.Common.CommandTrees.DbExpressionVisitor" /> erstellt wird.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="visitor" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="JoinCondition">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpression JoinCondition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpression JoinCondition" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbJoinExpression.JoinCondition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die anzuwendende Joinbedingung ab oder legt diese fest.</summary>
        <value>Die anzuwendende Joinbedingung.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der Ausdruck ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Der Ausdruck ist nicht mit der Befehlsstruktur des verknüpft die <see cref="T:System.Data.Common.CommandTrees.DbJoinExpression" />, oder der Ergebnistyp ist keine <see langword="Boolean" /> Typ.</exception>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpressionBinding Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpressionBinding Left" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbJoinExpression.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpressionBinding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ab, die die linke Eingabe bereitstellt.</summary>
        <value>Die <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, die die linke Eingabe bereitstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public System.Data.Common.CommandTrees.DbExpressionBinding Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.CommandTrees.DbExpressionBinding Right" />
      <MemberSignature Language="DocId" Value="P:System.Data.Common.CommandTrees.DbJoinExpression.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.CommandTrees.DbExpressionBinding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" /> ab, die die rechte Eingabe bereitstellt.</summary>
        <value>Die <see cref="T:System.Data.Common.CommandTrees.DbExpressionBinding" />, die die rechte Eingabe bereitstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
