<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Der Typ der Daten in der Datenquelle.</typeparam>
    <summary>Stellt Funktionen zur Auswertung von Abfragen für eine bestimmte Datenquelle mit bekanntem Datentyp bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Linq.IQueryable%601> Schnittstelle für die Implementierung von Abfrageanbieter vorgesehen ist.  
  
 Diese Schnittstelle erbt die <xref:System.Collections.Generic.IEnumerable%601> Schnittstelle, damit die Ergebnisse der Abfrage auf, wenn es sich um eine Abfrage darstellt, aufgelistet werden können. Enumeration erzwingt, dass die zugeordnete Ausdrucksbaumstruktur ein <xref:System.Linq.IQueryable%601> Objekt, das ausgeführt werden. Abfragen, die keine aufzählbare Ergebnisse zurückgeben werden ausgeführt. wenn die <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> Methode wird aufgerufen.  
  
 Die Definition von "Ausführen einer Ausdrucksbaumstruktur" bezieht sich auf ein Abfrageanbieter. Es kann z. B. umfassen, Übersetzen der Ausdrucksbaumstruktur in eine Abfragesprache, die für eine zugrunde liegende Datenquelle geeignet.  
  
 Die <xref:System.Linq.IQueryable%601> Schnittstelle ermöglicht, Abfragen, die polymorph sein. D. h., da eine Abfrage für ein `IQueryable` -Datenquelle wird dargestellt, wie eine Ausdrucksbaumstruktur, die für unterschiedliche Typen von Datenquellen ausgeführt werden kann.  
  
 Die `static` (`Shared` in Visual Basic) Methoden, die in der Klasse definiert <xref:System.Linq.Queryable> (mit Ausnahme von <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, und <xref:System.Linq.Queryable.ThenByDescending%2A>) erweitern Sie die Objekte der Typen, implementieren die <xref:System.Linq.IQueryable%601> Schnittstelle.  
  
 Weitere Informationen über das Erstellen eigener LINQ-Anbieters finden Sie unter [LINQ: Erstellen eines Anbieters IQueryable](http://go.microsoft.com/fwlink/?LinkID=112370) auf MSDN-Blogs.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
