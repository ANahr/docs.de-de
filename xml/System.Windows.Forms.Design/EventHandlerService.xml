<Type Name="EventHandlerService" FullName="System.Windows.Forms.Design.EventHandlerService">
  <TypeSignature Language="C#" Value="public sealed class EventHandlerService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventHandlerService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Design.EventHandlerService" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Bietet eine systematische Methode, um die Ereignishandler für das aktuelle Dokument zu verwalten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Entwickler sollten in der Lage, Code an einem Ort zu schreiben, die Ereignisse eines bestimmten Typs behandelt werden.  
  
 Darüber hinaus müssen Entwickler möglicherweise globales ändern das Verhalten der Handler für bestimmte Ereignisse oder Typen von Ereignissen, die Designer-Komponenten verteilt werden können.  
  
 Der Designer bei einem typischen Projekt sind viele verschiedene Objekte aus, damit er ist hilfreich zum Auflisten und Verweis auf diese Ereignisse von einem gemeinsamen Ort speichern.  
  
 Dieser Dienst implementiert einen "Ereignis Stapel", der den aktuellen Satz von Ereignishandlern enthält. Der Stapel möglicherweise eine Vielzahl verschiedener Typen von Handlern auf dem Stapel.  
  
 Ein Designer kann z. B. mithilfe von Push übertragen oder hinzufügen, einen Tastaturhandler und eine Maushandler im Stapel. Bei ein Designer einen Ereignishandler anfordert, findet der Dienst den obersten Handler auf dem Stapel, der die Klasse entspricht, die Sie angefordert haben.  
  
 Auf diese Weise der Dienst kann erweitert werden alle Ereignisse-Schema, und kann auch bestimmte Typen von Ereignishandlern ersetzt werden. Beispielsweise können Sie die Mausereignishandler ersetzen, ohne Auswirkung auf im Menü Ereignishandler oder die Tastatur-Ereignishandler.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventHandlerService (System.Windows.Forms.Control focusWnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control focusWnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.#ctor(System.Windows.Forms.Control)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="focusWnd" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="focusWnd">Die <see cref="T:System.Windows.Forms.Control" /> das gerade entworfen wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Design.EventHandlerService" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventHandlerChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EventHandlerChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventHandlerChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Design.EventHandlerService.EventHandlerChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Löst ein OnEventHandlerChanged-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusWindow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control FocusWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control FocusWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Design.EventHandlerService.FocusWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Steuerelement, mit der Handler angefügt sind.</summary>
        <value>Die <see cref="T:System.Windows.Forms.Control" /> die durch den Konstruktor angefügt wurde.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHandler">
      <MemberSignature Language="C#" Value="public object GetHandler (Type handlerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetHandler(class System.Type handlerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.GetHandler(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handlerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="handlerType">Der Typ des vom Handler zu erhalten.</param>
        <summary>Ruft den derzeit aktiven Ereignishandler des angegebenen Typs ab.</summary>
        <returns>Eine Instanz des Handlers, oder <see langword="null" /> , wenn kein Handler des angeforderten Typs vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Wert sollte niemals zwischengespeichert werden, da andere Komponenten geändert werden. Dieser Aufruf ist jedoch sehr schnell, insbesondere für Fälle, in denen Sie immer die gleiche Art von Handler angefordert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopHandler">
      <MemberSignature Language="C#" Value="public void PopHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PopHandler(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">Der Handler aus dem Stapel entfernt werden soll.</param>
        <summary>Ruft den angegebenen Ereignishandler vom Stapel auf.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Handler nicht die obersten Komponente auf dem Stapel ist, wird dies alle Handler bis zur und einschließlich Handler angezeigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PushHandler">
      <MemberSignature Language="C#" Value="public void PushHandler (object handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushHandler(object handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Design.EventHandlerService.PushHandler(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handler">Der Handler den Stapel hinzu.</param>
        <summary>Es wird einen neuen Ereignishandler auf dem Stapel.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Ereignishandler werden alle Komponenten verwendet werden, die einen kompatiblen Handlertyp anfordern. Wenn dieser Handler den angeforderten Typ nicht unterstützt, wird der nächste Handler auf dem Stapel verwendet werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
