<Type Name="WebClient" FullName="System.Net.WebClient">
  <TypeSignature Language="C#" Value="public class WebClient : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebClient extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Net.WebClient" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Net.WebClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt allgemeine Methoden zum Senden von Daten an und Empfangen von Daten aus einer Ressource, die von einem URI identifiziert.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient> -Klasse stellt allgemeine Methoden zum Senden von Daten an und Empfangen von Daten aus beliebigen lokalen, Intranet oder Internet-Ressource, die von einem URI identifiziert.  
  
 Die <xref:System.Net.WebClient> -Klasse verwendet die <xref:System.Net.WebRequest> Klasse, um den Zugriff auf Ressourcen. <xref:System.Net.WebClient>Instanzen können den Datenzugriff mit <xref:System.Net.WebRequest> Nachfolger registriert die <xref:System.Net.WebRequest.RegisterPrefix%2A?displayProperty=nameWithType> Methode.  
  
> [!NOTE]
>  Standardmäßig unterstützt die .NET Framework URIs, die mit beginnen `http:`, `https:`, ftp:, und `file:` scheme Bezeichner.  
  
 Die folgende Tabelle beschreibt <xref:System.Net.WebClient> Methoden zum Hochladen von Daten auf eine Ressource.  
  
|Methode|Beschreibung|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenWrite%2A>|Ruft eine <xref:System.IO.Stream> zum Senden von Daten an die Ressource verwendet.|  
|<xref:System.Net.WebClient.OpenWriteAsync%2A>|Ruft eine <xref:System.IO.Stream> verwendet, um Daten an die Ressource zu senden, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadData%2A>|Sendet ein Bytearray an die Ressource und gibt ein <xref:System.Byte> Array, das alle Antworten enthält.|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sendet eine <xref:System.Byte> Array auf die Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadFile%2A>|Sendet eine lokale Datei an die Ressource und gibt ein <xref:System.Byte> Array, das alle Antworten enthält.|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sendet eine lokale Datei an die Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadValues%2A>|Sendet eine <xref:System.Collections.Specialized.NameValueCollection> an die Ressource und gibt ein <xref:System.Byte> Array, das alle Antworten enthält.|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sendet eine <xref:System.Collections.Specialized.NameValueCollection> an die Ressource und gibt ein <xref:System.Byte> Array, das alle Antworten enthält, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadString%2A>|Sendet eine <xref:System.String> auf die Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadStringAsync%2A>|Sendet eine <xref:System.String> auf die Ressource, ohne den aufrufenden Thread zu blockieren.|  
  
 Die folgende Tabelle beschreibt <xref:System.Net.WebClient> Methoden zum Herunterladen von Daten aus einer Ressource.  
  
|Methode|Beschreibung|  
|------------|-----------------|  
|<xref:System.Net.WebClient.OpenRead%2A>|Gibt die Daten aus einer Ressource als eine <xref:System.IO.Stream>.|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|Die Daten zurückgegeben aus einer Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.DownloadData%2A>|Lädt Daten aus einer Ressource herunter und gibt ein <xref:System.Byte> Array.|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Lädt Daten aus einer Ressource herunter und gibt eine <xref:System.Byte> Arrays, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.DownloadFile%2A>|Lädt Daten aus einer Ressource in eine lokale Datei herunter.|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Lädt Daten aus einer Ressource in eine lokale Datei, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.DownloadString%2A>|Lädt eine <xref:System.String> aus einer Ressource und gibt eine <xref:System.String>.|  
|<xref:System.Net.WebClient.DownloadStringAsync%2A>|Lädt eine <xref:System.String> aus einer Ressource, ohne den aufrufenden Thread zu blockieren.|  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Ein <xref:System.Net.WebClient> Instanz sendet keine optionalen HTTP-Header in der Standardeinstellung. Wenn Ihre Anforderung einen optionalen Header erforderlich ist, müssen Sie den Header, Hinzufügen der <xref:System.Net.WebClient.Headers%2A> Auflistung. Um die Abfragen in der Antwort beizubehalten, müssen Sie z. B. einen Benutzer-Agent-Header hinzufügen. Außerdem können Server 500 (Interner Serverfehler) zurück, wenn der Benutzer-Agent-Header fehlt.  
  
 <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A>wird festgelegt, um `true` in <xref:System.Net.WebClient> Instanzen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die URI der Ressource akzeptiert, ruft es ab und zeigt die Antwort.  
  
 [!code-cpp[NCLWebClientUserAgent#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientUserAgent/CPP/useragent.cpp#1)]
 [!code-csharp[NCLWebClientUserAgent#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientUserAgent/CS/useragent.cs#1)]
 [!code-vb[NCLWebClientUserAgent#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientUserAgent/VB/useragent.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.WebPermission">Zugriffsrechte für den angeforderten URI oder einen beliebigen URI, der die Anforderung umgeleitet wurde. Zugeordnete Enumeration: <see cref="F:System.Net.NetworkAccess.Connect" />.</permission>
    <block subset="none" type="overrides">
      <para>Abgeleitete Klassen sollten die Implementierung der Basisklasse aufrufen <see cref="T:System.Net.WebClient" /> um sicherzustellen, dass die abgeleitete Klasse erwartungsgemäß funktioniert.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Net.WebClient" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardkonstruktor erstellt eine neue Instanz der dem <xref:System.Net.WebClient> Klasse. Die HTTP-Standardmethode ist GET. Die FTP-Standardmethode ist RETR. Die Standardeinstellung für <xref:System.Net.WebClient.Encoding%2A> ist <xref:System.Text.Encoding.Default%2A>. Der Standardwert von <xref:System.Net.HttpWebRequest.AllowAutoRedirect%2A> ist `true`.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Net.WebClient> Instanz und klicken Sie dann verwendet, um Daten von einem Server herunter, und zeigen Sie es in der Systemkonsole, um Daten von einem Server herunterladen und in eine Datei zu schreiben und um Formularwerte auf einen Server hochladen und die Antwort empfangen.  
  
 [!code-cpp[WebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient/CPP/webclient.cpp#1)]
 [!code-csharp[WebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient/CS/webclient.cs#1)]
 [!code-vb[WebClient#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient/VB/webclient.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowReadStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowReadStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowReadStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die von der Internetressource für gelesenen Daten gepuffert eine <see cref="T:System.Net.WebClient" /> Instanz.</summary>
        <value>Gibt <see cref="T:System.Boolean" />zurück.  
  
 <see langword="true" /> aktiviert die Zwischenspeicherung der aus der Internetressource empfangenen Daten, <see langword="false" /> deaktiviert die Zwischenspeicherung. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Net.WebClient.AllowReadStreamBuffering%2A> Eigenschaft ist `true`, die Daten im Arbeitsspeicher gepuffert werden, damit er von der app gelesen werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowWriteStreamBuffering">
      <MemberSignature Language="C#" Value="public bool AllowWriteStreamBuffering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowWriteStreamBuffering" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.AllowWriteStreamBuffering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die an die Internetressource für geschriebenen Daten gepuffert eine <see cref="T:System.Net.WebClient" /> Instanz.</summary>
        <value>Gibt <see cref="T:System.Boolean" />zurück.  
  
 <see langword="true" />So aktivieren Sie die Pufferung der Daten an die Internetressource geschrieben; <see langword="false" /> deaktiviert die Zwischenspeicherung. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Net.WebClient.AllowWriteStreamBuffering%2A> Eigenschaft ist `true`, die Daten im Arbeitsspeicher gepuffert werden, damit er an die Internetressource in größeren Blöcken effizienter geschrieben werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseAddress">
      <MemberSignature Language="C#" Value="public string BaseAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseAddress" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.BaseAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Basis-URI für Anforderungen, die durch eine <see cref="T:System.Net.WebClient" />.</summary>
        <value>Ein <see cref="T:System.String" /> , enthält den Basis-URI für Anforderungen ein <see cref="T:System.Net.WebClient" /> oder <see cref="F:System.String.Empty" /> Wenn keine Basisadresse angegeben wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft enthält einen Basis-URI, der mit einer relativen Adresse kombiniert wird. Wenn Sie eine Methode aufrufen, die hochgeladen oder lädt Daten, die <xref:System.Net.WebClient> -Objekt kombiniert diese Basis-URI mit der relativen Adresse, die Sie im Aufruf Methode angeben. Wenn Sie angeben, dass einen absoluten URI <xref:System.Net.WebClient> verwendet nicht die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaftswert.  
  
 So entfernen Sie einen zuvor festgelegten Wert, legen Sie diese Eigenschaft auf `null` oder eine leere Zeichenfolge ("").  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mithilfe von Daten aus einem Internetserver heruntergeladen und auf der Konsole angezeigt. Es wird davon ausgegangen, dass die Adresse des Servers (z. B. http://www.contoso.com) wird `hostUri` und dass der Pfad zu der Ressource (z. B./Default.htm) im `uriSuffix`.  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#1)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#1)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Net.WebClient.BaseAddress" />wird auf einen ungültigen URI festgelegt. Die innere Ausnahme enthalten möglicherweise Informationen, mit denen Sie den Fehler gefunden wird.</exception>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Anwendung Cacherichtlinie für Ressourcen, die mithilfe dieser WebClient Instanz abgerufen <see cref="T:System.Net.WebRequest" /> Objekte.</summary>
        <value>Ein <see cref="T:System.Net.Cache.RequestCachePolicy" /> Zwischenspeicherung Anforderungen Objekt, das die Anwendung darstellt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.CancelAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht einen ausstehenden asynchronen Vorgang ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Vorgang aussteht, ruft diese Methode <xref:System.Net.WebRequest.Abort%2A> für den zugrunde liegenden <xref:System.Net.WebRequest>.  
  
 Beim Aufruf <xref:System.Net.WebClient.CancelAsync%2A>, erhält die Anwendung weiterhin das Abschlussereignis, die dem Vorgang zugeordnet. Z. B. beim Aufruf <xref:System.Net.WebClient.CancelAsync%2A> auf "Abbrechen" eine <xref:System.Net.WebClient.DownloadStringAsync%2A> Vorgang, wenn Sie einen Ereignishandler für angegeben haben die <xref:System.Net.WebClient.DownloadStringCompleted> Ereignis Ereignishandler erhält eine Benachrichtigung, die der Vorgang beendet wurde. Um zu erfahren, ob der Vorgang erfolgreich abgeschlossen wurde, überprüfen Sie die <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> Eigenschaft in der Basisklasse der <xref:System.Net.DownloadDataCompletedEventArgs> im Ereignis Datenobjekt an den Ereignishandler übergeben wurden.  
  
 Wenn kein asynchroner Vorgang ausgeführt wird, wird diese Methode keine Aktion ausgeführt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Net.ICredentials Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Anmeldeinformationen für das Netzwerk, die an den Host gesendet und zum Authentifizieren der Anforderung verwendet werden.</summary>
        <value>Eine <see cref="T:System.Net.ICredentials" /> , die Anmeldeinformationen für die Authentifizierung für die Anforderung enthält. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.Credentials%2A> Eigenschaft enthält die Anmeldeinformationen für die Authentifizierung verwendet, um den Zugriff auf eine Ressource auf einem Host. In den meisten Szenarien für die clientseitige, sollten Sie verwenden die <xref:System.Net.CredentialCache.DefaultCredentials%2A>, sind die Anmeldeinformationen des angemeldeten Benutzers. Legen Sie hierzu die <xref:System.Net.WebClient.UseDefaultCredentials%2A> Eigenschaft `true` anstatt durch Festlegen dieser Eigenschaft.  
  
 Wenn die <xref:System.Net.WebClient> Klasse wird in einer Anwendung auf mittlerer Ebene, z. B. eine ASP.NET-Anwendung verwendet die <xref:System.Net.CredentialCache.DefaultCredentials%2A> für das Konto, das Ausführen der ASP-Seite (die serverseitigen Anmeldeinformationen) gehören. In der Regel würden Sie diese Eigenschaft auf die Anmeldeinformationen des Clients festlegen, in die Auftrag angefordert wird.  
  
 Aus Sicherheitsgründen beim leitet automatisch stehenden, speichern Sie die Anmeldeinformationen, die in der Umleitung in enthalten sein sollen eine <xref:System.Net.CredentialCache> und weisen sie dieser Eigenschaft. Diese Eigenschaft wird automatisch festgelegt werden, um `null` nach der Umleitung, wenn er alles außer enthält eine <xref:System.Net.CredentialCache>. Mit diesen Eigenschaftswert auf automatisch festgelegt werden `null` unter diesen Umständen verhindert, dass Anmeldeinformationen an jedes beliebige unbeabsichtigten Ziel gesendet werden.
  
## Examples  
 Das folgende Codebeispiel verwendet die Anmeldeinformationen des Benutzers System zum Authentifizieren einer Anforderung.  
  
 [!code-cpp[WebClientAuthentication#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClientAuthentication/CPP/webclientauth.cpp#1)]
 [!code-csharp[WebClientAuthentication#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClientAuthentication/CS/webclientauth.cs#1)]
 [!code-vb[WebClientAuthentication#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClientAuthentication/VB/webclientauth.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI, von dem zum Herunterladen von Daten.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem angegebenen URI.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.DownloadData%2A> Methode lädt die Ressource mit dem angegebenen URI der `address` Parameter. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadDataAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel werden Daten von einem Server angefordert und die zurückgegebenen Daten angezeigt. Es wird vorausgesetzt, dass `remoteUri` einen gültigen URI für die angeforderten Daten enthält.  
  
 [!code-cpp[WebClient_DownloadData#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadData/CPP/webclient_downloaddata.cpp#1)]
 [!code-csharp[WebClient_DownloadData#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadData/CS/webclient_downloaddata.cs#1)]
 [!code-vb[WebClient_DownloadData#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadData/VB/webclient_downloaddata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen von Daten.</exception>
        <exception cref="T:System.NotSupportedException">Die Methode wurde in mehreren Threads gleichzeitig aufgerufen wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadData">
      <MemberSignature Language="C#" Value="public byte[] DownloadData (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] DownloadData(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadData(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI, dargestellt durch die <see cref="T:System.Uri" /> Objekt, von dem zum Herunterladen von Daten.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem angegebenen URI.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.DownloadData%2A> Methode lädt die Ressource mit dem angegebenen URI der `address` Parameter. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadDataAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 **Hinweis** dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> mit dem URI zum Herunterladen.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem URI als asynchronen Vorgang angegeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die angegebene Ressource mithilfe der Standardmethode für das Protokoll, das im angegebenen URI-Schema zugeordnet `address`. Die Daten asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden heruntergeladen.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource. Um eine Ressource und ein Block herunterzuladen beim Warten auf Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadData%2A> Methoden. Wenn der Download abgeschlossen ist, die <xref:System.Net.WebClient.DownloadDataCompleted> Ereignis wird ausgelöst. Die Anwendung muss dieses Ereignis, um Benachrichtigungen zu verarbeiten. Die heruntergeladenen Daten steht in der <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> Eigenschaft.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataAsync">
      <MemberSignature Language="C#" Value="public void DownloadDataAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadDataAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> mit dem URI zum Herunterladen.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem URI als asynchronen Vorgang angegeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die angegebene Ressource mithilfe der Standardmethode für das Protokoll, das im angegebenen URI-Schema zugeordnet `address`. Die Daten asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden heruntergeladen.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource. Um eine Ressource und ein Block herunterzuladen beim Warten auf Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadData%2A> Methoden. Wenn der Download abgeschlossen ist, die <xref:System.Net.WebClient.DownloadDataCompleted> Ereignis wird ausgelöst. Die Anwendung muss dieses Ereignis, um Benachrichtigungen zu verarbeiten. Die heruntergeladenen Daten steht in der <xref:System.Net.DownloadDataCompletedEventArgs.Result%2A> Eigenschaft.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadDataCompletedEventHandler DownloadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadDataCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein asynchroner Datendownload abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Datendownload abgeschlossen ist. Asynchrone Datendownloads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.DownloadDataAsync%2A> Methoden.  
  
 Die <xref:System.Net.DownloadDataCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.DownloadDataCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#21](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#21)]
 [!code-csharp[NCLWebClientAsync#21](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#21)]
 [!code-vb[NCLWebClientAsync#21](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden.  
  
 Diese Methode ruft die angegebene Ressource mithilfe der Standardmethode für das zugeordnete URI-Schema, die im angegebenen Protokoll ab der `address` Parameter. Die Daten asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden heruntergeladen.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Im folgenden Codebeispiel werden Daten von einem Server angefordert und die zurückgegebenen Daten angezeigt. Es wird vorausgesetzt, dass `remoteUri` einen gültigen URI für die angeforderten Daten enthält.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; DownloadDataTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; DownloadDataTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadDataTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.Byte" /> Array aus dem URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden.  
  
 Diese Methode ruft die angegebene Ressource mithilfe der Standardmethode für das zugeordnete URI-Schema, die im angegebenen Protokoll ab der `address` Parameter. Die Daten asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden heruntergeladen.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 **Hinweis** dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI, von dem zum Herunterladen von Daten.</param>
        <param name="fileName">Der Name der lokalen Datei, die die Daten empfängt.</param>
        <summary>Lädt die Ressource mit dem angegebenen URI in eine lokale Datei herunter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.DownloadFile%2A> Methode, die auf Daten einer lokalen Datei aus dem angegebenen URI downloads der `address` Parameter. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadFileAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode in einer Anwendung auf mittlerer Ebene, z. B. einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, unter dem die Anwendung ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die Datei verfügt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Datei aus http://www.contoso.com auf der lokalen Festplatte heruntergeladen.  
  
 [!code-cpp[WebClient_DownloadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_DownloadFile/CPP/webclient_downloadfile.cpp#1)]
 [!code-csharp[WebClient_DownloadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_DownloadFile/CS/webclient_downloadfile.cs#1)]
 [!code-vb[WebClient_DownloadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_DownloadFile/VB/webclient_downloadfile.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="filename" /> ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.  
  
 - oder -   
  
 Die Datei ist nicht vorhanden.  
  
 – oder – Fehler beim Herunterladen von Daten.</exception>
        <exception cref="T:System.NotSupportedException">Die Methode wurde in mehreren Threads gleichzeitig aufgerufen wurde.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">um die Datei schreiben <paramref name="fileName" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFile">
      <MemberSignature Language="C#" Value="public void DownloadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFile(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI angegeben wird, als ein <see cref="T:System.String" />, von dem zum Herunterladen von Daten.</param>
        <param name="fileName">Der Name der lokalen Datei, die die Daten empfängt.</param>
        <summary>Lädt die Ressource mit dem angegebenen URI in eine lokale Datei herunter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.DownloadFile%2A> Methode, die auf Daten einer lokalen Datei aus dem angegebenen URI downloads der `address` Parameter. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadFileAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode in einer Anwendung auf mittlerer Ebene, z. B. einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, unter dem die Anwendung ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die Datei verfügt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="filename" /> ist <see langword="null" /> oder <see cref="F:System.String.Empty" />.  
  
 - oder -   
  
 Die Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Herunterladen von Daten.</exception>
        <exception cref="T:System.NotSupportedException">Die Methode wurde in mehreren Threads gleichzeitig aufgerufen wurde.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">um die Datei schreiben <paramref name="fileName" />. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <param name="fileName">Der Name der Datei auf dem lokalen Computer abgelegt werden soll.</param>
        <summary>Lädt die Ressource mit dem angegebenen URI in eine lokale Datei herunter. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode lädt die Ressource auf dem angegebenen URI der `address` Parameter. Wenn der Download erfolgreich abgeschlossen wurde, wird die heruntergeladene Datei namens `fileName` auf dem lokalen Computer. Die Datei wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn die Datei verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.DownloadFileCompleted> Ereignis.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während die Ressource heruntergeladen wird. Um während des Wartens auf den abgeschlossenen Downloads zu blockieren, gehen Sie die <xref:System.Net.WebClient.DownloadFile%2A> Methoden.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode auf einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, dem in die Seite ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die lokale Datei verfügt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Die lokale Datei <paramref name="fileName" /> wird von einem anderen Thread verwendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileAsync">
      <MemberSignature Language="C#" Value="public void DownloadFileAsync (Uri address, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadFileAsync(class System.Uri address, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileAsync(System.Uri,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <param name="fileName">Der Name der Datei auf dem lokalen Computer abgelegt werden soll.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die Ressource mit dem angegebenen URI in eine lokale Datei herunter. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode lädt die Ressource auf dem angegebenen URI der `address` Parameter. Wenn der Download erfolgreich abgeschlossen wurde, wird die heruntergeladene Datei namens `fileName` auf dem lokalen Computer. Die Datei wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn die Datei verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.DownloadFileCompleted> Ereignis.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während die Ressource heruntergeladen wird. Um während des Wartens auf den abgeschlossenen Downloads zu blockieren, gehen Sie die <xref:System.Net.WebClient.DownloadFile%2A> Methoden.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode auf einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, dem in die Seite ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die lokale Datei verfügt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Die lokale Datei <paramref name="fileName" /> wird von einem anderen Thread verwendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler DownloadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadFileCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine asynchrone Datei-Downloadvorgang abgeschlossen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchrone Datei-Download-Vorgang abgeschlossen wird. Asynchrone Datei-Downloads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.DownloadFileAsync%2A> Methoden.  
  
 Die <xref:System.ComponentModel.AsyncCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.ComponentModel.AsyncCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <param name="fileName">Der Name der Datei auf dem lokalen Computer abgelegt werden soll.</param>
        <summary>Lädt die angegebene Ressource in eine lokale Datei als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden.  
  
 Diese Methode lädt die Ressource auf dem angegebenen URI der `address` Parameter. Wenn der Download erfolgreich abgeschlossen wurde, wird die heruntergeladene Datei namens `fileName` auf dem lokalen Computer. Die Datei wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode auf einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, dem in die Seite ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die lokale Datei verfügt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Die lokale Datei <paramref name="fileName" /> wird von einem anderen Thread verwendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task DownloadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task DownloadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadFileTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <param name="fileName">Der Name der Datei auf dem lokalen Computer abgelegt werden soll.</param>
        <summary>Lädt die angegebene Ressource in eine lokale Datei als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden.  
  
 Diese Methode lädt die Ressource auf dem angegebenen URI der `address` Parameter. Wenn der Download erfolgreich abgeschlossen wurde, wird die heruntergeladene Datei namens `fileName` auf dem lokalen Computer. Die Datei wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 Bei Verwendung dieser Methode auf einer ASP.NET-Seite erhalten Sie einen Fehler, wenn das Konto, dem in die Seite ausgeführt wird, nicht über die Berechtigung zum Zugriff auf die lokale Datei verfügt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.InvalidOperationException">Die lokale Datei <paramref name="fileName" /> wird von einem anderen Thread verwendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadProgressChangedEventHandler DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn einige oder alle Daten erfolgreich über einen asynchronen Download übertragen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, der ein asynchroner Download ausgeführt wird. Dieses Ereignis wird ausgelöst, wenn Downloads mit einer der folgenden Methoden gestartet werden.  
  
|Methode|Beschreibung|  
|------------|-----------------|  
|<xref:System.Net.WebClient.DownloadDataAsync%2A>|Lädt Daten aus einer Ressource herunter und gibt eine <xref:System.Byte> Arrays, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.DownloadFileAsync%2A>|Lädt Daten aus einer Ressource in eine lokale Datei, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.OpenReadAsync%2A>|Die Daten zurückgegeben aus einer Ressource, ohne den aufrufenden Thread zu blockieren.|  
  
 Die <xref:System.Net.DownloadProgressChangedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.DownloadProgressChangedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
> [!NOTE]
>  Passive FTP-Dateiübertragung wird immer eine statusprozentsatz 0 (null), anzeigen, da der Server nicht die Dateigröße gesendet hat. Um den Fortschritt anzuzeigen, können Sie die FTP-Verbindung zu active ändern, durch Überschreiben der <xref:System.Net.WebClient.GetWebRequest%2A> virtuelle Methode:  
  
```  
internal class MyWebClient:WebClient{  
        protected override WebRequest GetWebRequest(Uri address) {  
            FtpWebRequest req = (FtpWebRequest)base.GetWebRequest(address);  
            req.UsePassive = false;  
            return req;  
        }  
    }  
```  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#19](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#19)]
 [!code-csharp[NCLWebClientAsync#19](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#19)]
 [!code-vb[NCLWebClientAsync#19](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#19)]  
  
 Das folgende Codebeispiel zeigt eine Implementierung von einem Handler für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.String" /> mit dem URI zum Herunterladen.</param>
        <summary>Lädt die angeforderte Ressource als eine <see cref="T:System.String" />. Die Ressource zum Herunterladen wird angegeben, wie eine <see cref="T:System.String" /> mit dem URI.</summary>
        <returns>Ein <see cref="T:System.String" /> mit der angeforderten Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die angegebene Ressource ab. Nach dem Download der Ressource, die Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, das Aufrufen dieser Methode.  
  
 [!code-cpp[NCLWebClientAsync#25](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#25)]
 [!code-csharp[NCLWebClientAsync#25](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#25)]
 [!code-vb[NCLWebClientAsync#25](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.NotSupportedException">Die Methode wurde in mehreren Threads gleichzeitig aufgerufen wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadString">
      <MemberSignature Language="C#" Value="public string DownloadString (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string DownloadString(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadString(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> Objekt mit dem URI zum Herunterladen.</param>
        <summary>Lädt die angeforderte Ressource als eine <see cref="T:System.String" />. Die Ressource zum Herunterladen wird angegeben, wie eine <see cref="T:System.Uri" />.</summary>
        <returns>Ein <see cref="T:System.String" /> mit der angeforderten Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die angegebene Ressource ab. Nach dem Download der Ressource, die Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert, während des Herunterladens der Ressource. Um eine Ressource herunterzuladen und fortgesetzt werden, während des Wartens auf die Antwort des Servers, verwenden Sie eines der <xref:System.Net.WebClient.DownloadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
        <exception cref="T:System.NotSupportedException">Die Methode wurde in mehreren Threads gleichzeitig aufgerufen wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> mit dem URI zum Herunterladen.</param>
        <summary>Lädt die angegebene als Ressource eine <see cref="T:System.Uri" />. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ressource wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Nach dem Herunterladen der Ressourcenanbieters an, diese Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource. Um eine Ressource und ein Block herunterzuladen beim Warten auf Antwort des Servers, verwenden Sie die <xref:System.Net.WebClient.DownloadString%2A> Methode. Wenn der Download abgeschlossen ist, die <xref:System.Net.WebClient.DownloadStringCompleted> Ereignis wird ausgelöst. Die Anwendung muss dieses Ereignis, um Benachrichtigungen zu verarbeiten. Der heruntergeladene Zeichenfolge steht in der <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> Eigenschaft.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringAsync">
      <MemberSignature Language="C#" Value="public void DownloadStringAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadStringAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> mit dem URI zum Herunterladen.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource herunter. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ressource wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Nach dem Herunterladen der Ressourcenanbieters an, diese Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource. Um eine Ressource und ein Block herunterzuladen beim Warten auf Antwort des Servers, verwenden Sie die <xref:System.Net.WebClient.DownloadString%2A> Methode. Wenn der Download abgeschlossen ist, die <xref:System.Net.WebClient.DownloadStringCompleted> Ereignis wird ausgelöst. Die Anwendung muss dieses Ereignis, um Benachrichtigungen zu verarbeiten. Der heruntergeladene Zeichenfolge steht in der <xref:System.Net.DownloadStringCompletedEventArgs.Result%2A> Eigenschaft.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.DownloadStringCompletedEventHandler DownloadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.DownloadStringCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.DownloadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein asynchrone Ressource-Downloadvorgang abgeschlossen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Vorgang zum Herunterladen einer Ressource als Zeichenfolge abgeschlossen ist. Diese Vorgänge werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.DownloadStringAsync%2A> Methoden.  
  
 Die <xref:System.Net.DownloadStringCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.DownloadStringCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#28](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#28)]
 [!code-csharp[NCLWebClientAsync#28](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#28)]
 [!code-vb[NCLWebClientAsync#28](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.String" /> aus dem URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden.  Die Ressource wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Nach dem Herunterladen der Ressourcenanbieters an, diese Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; DownloadStringTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; DownloadStringTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.DownloadStringTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Herunterladen.</param>
        <summary>Lädt die Ressource als eine <see cref="T:System.String" /> aus dem URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die heruntergeladene Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datenressource heruntergeladen wurden. Die Ressource wird heruntergeladen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Nach dem Herunterladen der Ressourcenanbieters an, diese Methode verwendet die die angegebene Codierung der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft, um die Ressource Konvertieren einer <xref:System.String>. Diese Methode blockiert den aufrufenden Thread nicht, während des Herunterladens der Ressource.  
  
 Sie können die <xref:System.Net.WebClient.CancelAsync%2A> Methode, um asynchrone Vorgänge "Abbrechen", die nicht abgeschlossen wurden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ermittelt und definiert die <see cref="T:System.Text.Encoding" /> hoch-und Herunterladens von Zeichenfolgen verwendet.</summary>
        <value>Ein <see cref="T:System.Text.Encoding" /> , der zum Codieren von Zeichenfolgen verwendet wird. Der Standardwert dieser Eigenschaft ist die Codierung zurückgegebenes <see cref="P:System.Text.Encoding.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadString%2A> und <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden verwenden diese Eigenschaft konvertiert die angegebene Zeichenfolge in eine <xref:System.Byte> Array vor dem Hochladen der Zeichenfolge. Weitere Informationen finden Sie unter der <xref:System.Text.Encoding.GetBytes%2A> Methode.  
  
 Wenn eine Zeichenfolge mit heruntergeladen wird die <xref:System.Net.WebClient.DownloadString%2A> oder <xref:System.Net.WebClient.DownloadStringAsync%2A> Methoden <xref:System.Net.WebClient> verwendet die <xref:System.Text.Encoding> zum Konvertieren des heruntergeladenen zurückgegebene <xref:System.Byte> Array in eine Zeichenfolge. Weitere Informationen finden Sie unter der <xref:System.Text.Encoding.GetString%2A> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen des Werts dieser Eigenschaft.  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebRequest">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebRequest GetWebRequest (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebRequest GetWebRequest(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebRequest(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Ein <see cref="T:System.Uri" /> , identifiziert die Ressource anfordern.</param>
        <summary>Gibt eine <see cref="T:System.Net.WebRequest" /> Objekt für die angegebene Ressource.</summary>
        <returns>Ein neues <see cref="T:System.Net.WebRequest" /> Objekt für die angegebene Ressource.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kopiert die vorhandenen <xref:System.Net.WebClient.Headers%2A>, <xref:System.Net.WebClient.Credentials%2A>, und die Methode, um das neu erstellte <xref:System.Net.WebRequest> Objekt.  
  
 Diese Methode kann aufgerufen werden, nur von Klassen, die von erben <xref:System.Net.WebClient>. Er wird bereitgestellt, um die Vererbung Zugriff auf die zugrunde liegende <xref:System.Net.WebRequest> Objekt. Abgeleitete Klassen sollten die Implementierung der Basisklasse aufrufen <xref:System.Net.WebClient.GetWebRequest%2A> um sicherzustellen, dass die Methode wie erwartet funktioniert.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#1)]
 [!code-csharp[NCLCustomWebClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
      </Parameters>
      <Docs>
        <param name="request">Ein <see cref="T:System.Net.WebRequest" /> , wird verwendet, um die Antwort zu erhalten.</param>
        <summary>Gibt den <see cref="T:System.Net.WebResponse" /> für das angegebene <see cref="T:System.Net.WebRequest" /> zurück.</summary>
        <returns>Ein <see cref="T:System.Net.WebResponse" /> , enthält die Antwort für den angegebenen <see cref="T:System.Net.WebRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das von dieser Methode zurückgegebene Objekt abgerufen wird, durch Aufrufen der <xref:System.Net.WebRequest.GetResponse%2A> Methode auf dem angegebenen <xref:System.Net.WebRequest> Objekt.  
  
 Diese Methode kann aufgerufen werden, nur von Klassen, die von erben <xref:System.Net.WebClient>. Er wird bereitgestellt, um die Vererbung Zugriff auf die zugrunde liegende <xref:System.Net.WebResponse> Objekt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#2)]
 [!code-csharp[NCLCustomWebClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWebResponse">
      <MemberSignature Language="C#" Value="protected virtual System.Net.WebResponse GetWebResponse (System.Net.WebRequest request, IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Net.WebResponse GetWebResponse(class System.Net.WebRequest request, class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Net.WebRequest" />
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="request">Ein <see cref="T:System.Net.WebRequest" /> , wird verwendet, um die Antwort zu erhalten.</param>
        <param name="result">Ein <see cref="T:System.IAsyncResult" /> Objekt abgerufen, von einem vorherigen Aufruf von <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> .</param>
        <summary>Gibt die <see cref="T:System.Net.WebResponse" /> für den angegebenen <see cref="T:System.Net.WebRequest" /> unter Verwendung des angegebenen <see cref="T:System.IAsyncResult" />.</summary>
        <returns>Ein <see cref="T:System.Net.WebResponse" /> , enthält die Antwort für den angegebenen <see cref="T:System.Net.WebRequest" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das von dieser Methode zurückgegebene Objekt abgerufen wird, durch Aufrufen der <xref:System.Net.WebRequest.EndGetResponse%2A> Methode auf dem angegebenen <xref:System.Net.WebRequest> Objekt.  
  
 Diese Methode kann aufgerufen werden, nur von Klassen, die von erben <xref:System.Net.WebClient>. Er wird bereitgestellt, um die Vererbung Zugriff auf die zugrunde liegende <xref:System.Net.WebResponse> Objekt.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#3)]
 [!code-csharp[NCLCustomWebClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection Headers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt eine Auflistung von Name/Wert-Paaren für Header der Anforderung zugeordnet ist.</summary>
        <value>Ein <see cref="T:System.Net.WebHeaderCollection" /> , die dieser Anforderung zugeordnete Name/Wert-Paaren für Header enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.Headers%2A> Eigenschaft enthält eine <xref:System.Net.WebHeaderCollection> -Instanz mit Protokollheadern, die die <xref:System.Net.WebClient> mit der Anforderung sendet.  
  
 Einige allgemeine Header gelten eingeschränkt und werden durch das System geschützt und kann nicht festgelegt oder geändert einem <xref:System.Net.WebHeaderCollection> Objekt. Jeder Versuch, eine der in dieser eingeschränkten Header festgelegt die <xref:System.Net.WebHeaderCollection> zugeordnete Objekt eine <xref:System.Net.WebClient> -Objekt löst eine Ausnahme später beim Senden der <xref:System.Net.WebClient> Anforderung.  
  
 Eingeschränkten Header, die durch das System geschützt enthalten, aber Sie sind nicht aufgeführt:  
  
-   Datum  
  
-   Host  
  
 Darüber hinaus einige andere Header sind auch eingeschränkte bei Verwendung einer <xref:System.Net.WebClient> Objekt. Dieser eingeschränkten Header enthalten, aber Sie sind nicht aufgeführt:  
  
-   Akzeptieren  
  
-   Verbindung  
  
-   Content-Length  
  
-   Erwarten, dass (wenn der Wert festgelegt wird, um "100-fortfahren"  
  
-   If-Modified-Since  
  
-   Bereich  
  
-   Transfer-Encoding  
  
 Die <xref:System.Net.HttpWebRequest> Klasse verfügt über Eigenschaften für einige der oben genannten Header festlegen. Ist es wichtig, dass eine Anwendung diese Header festlegen und dann die <xref:System.Net.HttpWebRequest> Klasse sollten verwendet werden, statt die <xref:System.Net.WebRequest> Klasse.  
  
 Sie sollten nicht davon ausgehen, dass die Headerwerte unverändert bleiben werden, da Webservern und Caches ändern oder -Header zu einer webanforderung hinzufügen können.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Net.WebClient.Headers%2A> Auflistung festzulegende die HTTP `Content-Type` Header `application/x-www-form-urlencoded,` benachrichtigt der Server, die Daten an die Bereitstellung angefügt ist.  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob eine webanforderung ausgeführt wird.</summary>
        <value>
          <see langword="true" />Wenn die webanforderung noch in Bearbeitung ist. andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadDataCompleted (System.Net.DownloadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadDataCompleted(class System.Net.DownloadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.DownloadDataCompletedEventArgs" /> -Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.DownloadDataCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.DownloadDataCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)  
  
 Mit der <xref:System.Net.WebClient.OnDownloadDataCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#4)]
 [!code-csharp[NCLCustomWebClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnDownloadDataCompleted(System.Net.DownloadDataCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadFileCompleted (System.ComponentModel.AsyncCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadFileCompleted(class System.ComponentModel.AsyncCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.AsyncCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.ComponentModel.AsyncCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.DownloadFileCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.DownloadFileCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnDownloadFileCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#5)]
 [!code-csharp[NCLCustomWebClient#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnDownloadFileCompleted(System.ComponentModel.AsyncCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadProgressChanged (System.Net.DownloadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadProgressChanged(class System.Net.DownloadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.DownloadProgressChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.DownloadProgressChanged> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnDownloadProgressChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#12](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#12)]
 [!code-csharp[NCLCustomWebClient#12](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#12)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDownloadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnDownloadStringCompleted (System.Net.DownloadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDownloadStringCompleted(class System.Net.DownloadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.DownloadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.DownloadStringCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.DownloadStringCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnDownloadStringCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#6](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#6)]
 [!code-csharp[NCLCustomWebClient#6](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenReadCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenReadCompleted (System.Net.OpenReadCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenReadCompleted(class System.Net.OpenReadCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenReadCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.OpenReadCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.OpenReadCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.OpenReadCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnOpenReadCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#7](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#7)]
 [!code-csharp[NCLCustomWebClient#7](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnOpenWriteCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenWriteCompleted (System.Net.OpenWriteCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenWriteCompleted(class System.Net.OpenWriteCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.OpenWriteCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.OpenWriteCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.OpenWriteCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnOpenWriteCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#8](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#8)]
 [!code-csharp[NCLCustomWebClient#8](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#8)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadDataCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadDataCompleted (System.Net.UploadDataCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadDataCompleted(class System.Net.UploadDataCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadDataCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.UploadDataCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.UploadDataCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.UploadDataCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnUploadDataCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#9](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#9)]
 [!code-csharp[NCLCustomWebClient#9](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#9)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnUploadDataCompleted(System.Net.UploadDataCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadFileCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadFileCompleted (System.Net.UploadFileCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadFileCompleted(class System.Net.UploadFileCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadFileCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.UploadFileCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.UploadFileCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.UploadFileCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnUploadFileCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#10](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#10)]
 [!code-csharp[NCLCustomWebClient#10](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#10)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnUploadFileCompleted(System.Net.UploadFileCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadProgressChanged (System.Net.UploadProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadProgressChanged(class System.Net.UploadProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.UploadProgressChangedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.UploadProgressChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.UploadProgressChanged> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnUploadProgressChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#13](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#13)]
 [!code-csharp[NCLCustomWebClient#13](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#13)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadStringCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadStringCompleted (System.Net.UploadStringCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadStringCompleted(class System.Net.UploadStringCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadStringCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.UploadStringCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.UploadStringCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.UploadStringCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnUploadStringCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#11](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#11)]
 [!code-csharp[NCLCustomWebClient#11](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUploadValuesCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnUploadValuesCompleted (System.Net.UploadValuesCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUploadValuesCompleted(class System.Net.UploadValuesCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.UploadValuesCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.UploadValuesCompletedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.UploadValuesCompleted" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von dieser Klasse erben können dies außer Kraft setzen Methode, um zusätzliche führen Vorgänge fest, wenn die <xref:System.Net.WebClient.UploadValuesCompleted> Ereignis auftritt.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Net.WebClient.OnUploadValuesCompleted%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Implementierung dieser Methode, die von einer Klasse abgeleitet angepasst werden können <xref:System.Net.WebClient>.  
  
 [!code-cpp[NCLCustomWebClient#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLCustomWebClient/CPP/mywebclient.cpp#14)]
 [!code-csharp[NCLCustomWebClient#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLCustomWebClient/CS/mywebclient.cs#14)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> werden Sie in einer abgeleiteten Klasse der Basisklasse aufrufen <see cref="M:System.Net.WebClient.OnUploadValuesCompleted(System.Net.UploadValuesCompletedEventArgs)" /> Methode, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnWriteStreamClosed">
      <MemberSignature Language="C#" Value="protected virtual void OnWriteStreamClosed (System.Net.WriteStreamClosedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnWriteStreamClosed(class System.Net.WriteStreamClosedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.WriteStreamClosedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Net.WriteStreamClosedEventArgs" /> Objekt, das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Net.WebClient.WriteStreamClosed" />-Ereignis aus.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI angegeben wird, als ein <see cref="T:System.String" /> aus dem zum Herunterladen von Daten.</param>
        <summary>Öffnet ein lesbaren Datenstrom für die Daten, die von einer Ressource mit dem angegebenen als URI heruntergeladenen eine <see cref="T:System.String" />.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Lesen von Daten aus einer Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenRead%2A> Methode erstellt eine <xref:System.IO.Stream> Instanz verwendet, um den Inhalt der durch die angegebene Ressource Lesen der `address` Parameter. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenReadAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> abschließend mit der <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die identifizierte Ressource geöffnet `uriString` und zeigt die Ergebnisse auf der Systemkonsole. Beachten Sie, dass die <xref:System.IO.Stream> zurückgegebenes <xref:System.Net.WebClient.OpenRead%2A> wird geschlossen, wenn die Daten gelesen wurden.  
  
 [!code-cpp[WebClient_OpenRead#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenRead/CPP/webclient_openread.cpp#1)]
 [!code-csharp[WebClient_OpenRead#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenRead/CS/webclient_openread.cs#1)]
 [!code-vb[WebClient_OpenRead#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenRead/VB/webclient_openread.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen von Daten.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenRead (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenRead(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenRead(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI angegeben wird, als ein <see cref="T:System.Uri" /> aus dem zum Herunterladen von Daten.</param>
        <summary>Öffnet ein lesbaren Datenstrom für die Daten, die von einer Ressource mit dem angegebenen als URI heruntergeladenen ein<see cref="T:System.Uri" /></summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Lesen von Daten aus einer Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenRead%2A> Methode erstellt eine <xref:System.IO.Stream> Instanz verwendet, um den Inhalt der durch die angegebene Ressource Lesen der `address` Parameter. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenReadAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> abschließend mit der <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 **Hinweis** dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen von Daten.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource abgerufen werden soll.</param>
        <summary>Öffnet einen lesbaren Datenstrom, der mit der angegebenen Ressource an. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz verwendet, um Zugriff auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen. Um benachrichtigt zu werden, wenn der Stream verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.OpenReadCompleted> Ereignis.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist. Um während des Wartens auf des Streams zu blockieren, verwenden Sie die <xref:System.Net.WebClient.OpenReadAsync%2A> Methode.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Ressource zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und Adresse ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadAsync">
      <MemberSignature Language="C#" Value="public void OpenReadAsync (Uri address, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenReadAsync(class System.Uri address, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource abgerufen werden soll.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Öffnet einen lesbaren Datenstrom, der mit der angegebenen Ressource an. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz verwendet, um Zugriff auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen. Um benachrichtigt zu werden, wenn der Stream verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.OpenReadCompleted> Ereignis.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist. Um während des Wartens auf des Streams zu blockieren, verwenden Sie die <xref:System.Net.WebClient.OpenRead%2A> Methode.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Ressource zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und Adresse ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenReadCompletedEventHandler OpenReadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenReadCompletedEventHandler OpenReadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenReadCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenReadCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei Abschluss eines asynchronen Vorgangs zum Öffnen eines Datenstroms, die eine Ressource enthält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, der ein asynchroner Vorgang zum Öffnen eines Datenstroms, der angibt, die eine Ressource abgeschlossen ist. Diese Vorgänge werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.OpenReadAsync%2A> Methoden.  
  
 Die <xref:System.Net.OpenReadCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.OpenReadCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#30](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#30)]
 [!code-csharp[NCLWebClientAsync#30](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#30)]
 [!code-vb[NCLWebClientAsync#30](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#30)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource abgerufen werden soll.</param>
        <summary>Öffnet einen lesbaren Datenstrom, der mit der angegebenen Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Lesen von Daten aus einer Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein lesbaren Datenstrom, auf die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz verwendet, um Zugriff auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Ressource zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und Adresse ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenReadTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenReadTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenReadTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenReadTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource abgerufen werden soll.</param>
        <summary>Öffnet einen lesbaren Datenstrom, der mit der angegebenen Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Lesen von Daten aus einer Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein lesbaren Datenstrom, auf die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz verwendet, um Zugriff auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt keinen absoluten URI `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Ressource zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft ist nicht `null`, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den RETR-Befehl zum Herunterladen einer FTP-Ressource. Für eine HTTP-Ressource wird die GET-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und Adresse ist ungültig.  
  
 - oder -   
  
 Fehler beim Herunterladen der Ressource.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenWrite%2A> Methodenrückgabe einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource verwendet wird. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenWriteAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird liest Daten aus der Befehlszeile aus und verwendet <xref:System.Net.WebClient.OpenWrite%2A> kein Stream zum Schreiben der Daten abgerufen. Beachten Sie, dass die <xref:System.IO.Stream> zurückgegebenes <xref:System.Net.WebClient.OpenWrite%2A> wird geschlossen, nachdem die Daten gesendet werden.  
  
 [!code-cpp[WebClient_OpenWrite2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite2/CPP/webclient_openwrite2.cpp#1)]
 [!code-csharp[WebClient_OpenWrite2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite2/CS/webclient_openwrite2.cs#1)]
 [!code-vb[WebClient_OpenWrite2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite2/VB/webclient_openwrite2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenWrite%2A> Methodenrückgabe einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource verwendet wird. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenWriteAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten in die angegebene Ressource mit der angegebenen Methode.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenWrite%2A> Methodenrückgabe einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource verwendet wird. Die zugrunde liegende Anforderung erfolgt mit der Methode angegeben, der `method` Parameter. Die Daten werden an den Server gesendet, wenn Sie den Stream schließen. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenWriteAsync%2A> Methoden.  
  
 Wenn die `method` Parameter gibt eine Methode, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` gibt eine absolute Adresse keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird liest Daten aus der Befehlszeile aus und verwendet <xref:System.Net.WebClient.OpenWrite%2A> kein Stream zum Schreiben der Daten abgerufen. Beachten Sie, dass die <xref:System.IO.Stream> zurückgegebenes <xref:System.Net.WebClient.OpenWrite%2A> muss geschlossen werden, um die Daten zu senden.  
  
 [!code-cpp[WebClient_OpenWrite#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_OpenWrite/CPP/webclient_openwrite.cpp#1)]
 [!code-csharp[WebClient_OpenWrite#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_OpenWrite/CS/webclient_openwrite.cs#1)]
 [!code-vb[WebClient_OpenWrite#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_OpenWrite/VB/webclient_openwrite.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenWrite (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenWrite(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWrite(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource mit der angegebenen Methode.</summary>
        <returns>Ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.OpenWrite%2A> Methodenrückgabe einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource verwendet wird. Diese Methode blockiert, beim Öffnen des Streams. Um den Vorgang fortzusetzen, während des Wartens auf des Streams ausführen, gehen die <xref:System.Net.WebClient.OpenWriteAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource ab. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen. Um benachrichtigt zu werden, wenn der Stream verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.OpenWriteCompleted> Ereignis. Wenn Sie den Stream schließen, wird der Thread blockiert, bis auf die Anforderung gesendet wurde `address` und eine Antwort empfangen wird.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet wird. Um während des Wartens auf des Streams zu blockieren, gehen die <xref:System.Net.WebClient.OpenWrite%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource ab. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen. Um benachrichtigt zu werden, wenn der Stream verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.OpenWriteCompleted> Ereignis. Wenn Sie den Stream schließen, wird der Thread blockiert, bis auf die Anforderung gesendet wurde `address` und eine Antwort empfangen wird.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet wird. Um während des Wartens auf des Streams zu blockieren, gehen die <xref:System.Net.WebClient.OpenWrite%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteAsync">
      <MemberSignature Language="C#" Value="public void OpenWriteAsync (Uri address, string method, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpenWriteAsync(class System.Uri address, string method, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, um die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten in die angegebene Ressource mit der angegebenen Methode. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft einen überschreibbaren Datenstrom, der zum Senden von Daten auf eine Ressource ab. Der Stream wird abgerufen, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn der Stream verfügbar ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.OpenWriteCompleted> Ereignis. Der Inhalt des Streams werden an den Server gesendet, wenn Sie den Stream schließen.  
  
 Wenn die `method` Parameter gibt eine Methode, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet wird. Um während des Wartens auf des Streams zu blockieren, gehen die <xref:System.Net.WebClient.OpenWrite%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.OpenWriteCompletedEventHandler OpenWriteCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.OpenWriteCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.OpenWriteCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei Abschluss eines asynchronen Vorgangs zum Öffnen eines Datenstroms zum Schreiben von Daten auf eine Ressource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, die Abschluss eines asynchronen Vorgangs zum Öffnen eines Datenstroms, das zum Senden von Daten auf eine Ressource verwendet wird. Diese Vorgänge werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.OpenWriteAsync%2A> Methoden.  
  
 Die <xref:System.Net.OpenWriteCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.OpenWriteCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#14](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#14)]
 [!code-csharp[NCLWebClientAsync#14](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#14)]
 [!code-vb[NCLWebClientAsync#14](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein überschreibbaren Datenstrom an die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz, die zum Schreiben von Daten auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein überschreibbaren Datenstrom an die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz, die zum Schreiben von Daten auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (string address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(string address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein überschreibbaren Datenstrom an die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz, die zum Schreiben von Daten auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Wenn die `method` Parameter gibt eine Methode, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.IO.Stream&gt; OpenWriteTaskAsync (Uri address, string method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; OpenWriteTaskAsync(class System.Uri address, string method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.OpenWriteTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <summary>Öffnet einen Stream zum Schreiben von Daten auf die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.IO.Stream" /> zum Schreiben von Daten auf die Ressource verwendet.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die ein überschreibbaren Datenstrom an die Ressource geöffnet wurde. Diese Methode blockiert den aufrufenden Thread nicht, während der Stream geöffnet ist.  
  
 Diese Methode ruft eine <xref:System.IO.Stream> Instanz, die zum Schreiben von Daten auf die Ressource, die gemäß der `address` Parameter. Der Stream wird mit Threadressourcen, die automatisch zugewiesen werden, aus dem Threadpool abgerufen.  
  
> [!NOTE]
>  Rufen Sie <xref:System.IO.Stream.Close%2A?displayProperty=nameWithType> Wenn Sie fertig sind die <xref:System.IO.Stream> knapp Systemressourcen zu vermeiden.  
  
 Wenn die `method` Parameter gibt eine Methode, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.</exception>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den von diesem verwendeten Proxy <see cref="T:System.Net.WebClient" /> Objekt.</summary>
        <value>Ein <see cref="T:System.Net.IWebProxy" /> Instanz, die zum Senden von Anforderungen verwendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.Proxy%2A> Eigenschaft identifiziert die <xref:System.Net.IWebProxy> -Instanz, die für diese mit Remoteservern kommuniziert <xref:System.Net.WebClient> Objekt. Der Proxy wird durch das System mithilfe von Konfigurationsdateien und die Internet Explorer-LAN-Einstellungen festgelegt. Um anzugeben, dass kein Proxy verwendet werden soll, legen die <xref:System.Net.WebClient.Proxy%2A> -Eigenschaft auf die Proxyinstanz, die zurückgegeben werden, indem Sie die <xref:System.Net.GlobalProxySelection.GetEmptyWebProxy%2A> Methode.  
  
 Informationen für die automatische Proxyerkennung finden Sie unter [automatische Proxyerkennung](~/docs/framework/network-programming/automatic-proxy-detection.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Für <see cref="P:System.Net.WebClient.Proxy" /> ist <see langword="null" /> festgelegt.</exception>
        <permission cref="T:System.Net.WebPermission">nicht eingeschränkt ist. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.QueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt eine Auflistung von Abfrage Name/Wert-Paaren, die der Anforderung zugeordnet.</summary>
        <value>Ein <see cref="T:System.Collections.Specialized.NameValueCollection" /> , mit der Anforderung verknüpften Abfrage-Wert-Paare enthält. Wenn keine Paare der Anforderung zugeordnet sind, ist der Wert eine leere <see cref="T:System.Collections.Specialized.NameValueCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft enthält eine <xref:System.Collections.Specialized.NameValueCollection> -Instanz mit Name/Wert-Paaren, die den URI als Abfragezeichenfolge angefügt sind. Den Inhalt des der <xref:System.Net.WebClient.QueryString%2A> Eigenschaft durch ein Fragezeichen (?) vorangestellt werden und Name/Wert-Paare voneinander getrennt sind, durch ein kaufmännisches und-Zeichen (&).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird Benutzereingaben von der Befehlszeile aus und erstellt eine <xref:System.Collections.Specialized.NameValueCollection> zugewiesen ist, die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft. Es werden dann die Antwort vom Server in eine lokale Datei heruntergeladen.  
  
 [!code-cpp[WebClient_QueryString#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_QueryString/CPP/webclient_querystring.cpp#1)]
 [!code-csharp[WebClient_QueryString#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_QueryString/CS/webclient_querystring.cs#1)]
 [!code-vb[WebClient_QueryString#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_QueryString/VB/webclient_querystring.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResponseHeaders">
      <MemberSignature Language="C#" Value="public System.Net.WebHeaderCollection ResponseHeaders { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.WebHeaderCollection ResponseHeaders" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.ResponseHeaders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.WebHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Name/Wert-Paaren für Header der Antwort zugeordnet.</summary>
        <value>Ein <see cref="T:System.Net.WebHeaderCollection" /> enthält Name/Wert-Paaren für Header der Antwort zugeordnet oder <see langword="null" /> , wenn keine Antwort empfangen wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.ResponseHeaders%2A> Eigenschaft enthält eine <xref:System.Net.WebHeaderCollection> Instanz, die Headerinformationen enthält die <xref:System.Net.WebClient> mit der Antwort empfängt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird heruntergeladen und zeigt die <xref:System.Net.WebClient.ResponseHeaders%2A> von einem Server zurückgegeben.  
  
 [!code-cpp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CPP/webclient_baseaddress_responseheaders.cpp#2)]
 [!code-csharp[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/CS/webclient_baseaddress_responseheaders.cs#2)]
 [!code-vb[WebClient_BaseAddress_ResponseHeaders#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_BaseAddress_ResponseHeaders/VB/webclient_baseaddress_responseheaders.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Lädt einen Datenpuffer auf eine Ressource, die von einem URI identifiziert hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet einen Datenpuffer auf eine Ressource.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet. Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet den Inhalt des `data` an den Server, ohne ihn zu codieren. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadDataAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird konvertiert eine Zeichenfolge, die aus der Verwaltungskonsole können Sie eine <xref:System.Byte> array erstellt und das Array mit dem angegebenen Server <xref:System.Net.WebClient.UploadData%2A>. Antwort vom Server wird in der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UpLoadData2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData2/CPP/webclient_uploaddata2.cpp#1)]
 [!code-csharp[WebClient_UpLoadData2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData2/CS/webclient_uploaddata2.cs#1)]
 [!code-vb[WebClient_UpLoadData2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData2/VB/webclient_uploaddata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Senden der Daten.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Lädt einen Datenpuffer auf eine Ressource, die von einem URI identifiziert hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet einen Datenpuffer auf eine Ressource.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet. Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet den Inhalt des `data` an den Server, ohne ihn zu codieren. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadDataAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Senden der Daten.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Daten auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Lädt einen Datenpuffer in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet einen Datenpuffer auf eine Ressource, die mithilfe der im angegebenen HTTP-Methode der `method` -Parameter, und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadDataAsync%2A> Methoden.  
  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet den Inhalt des `data` an den Server, ohne ihn zu codieren.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Zeichenfolge, die über die Konsole eingegeben wird, in ein Bytearray konvertiert und das Array mit dem angegebenen Server <xref:System.Net.WebClient.UploadData%2A>. Antwort vom Server wird in der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UpLoadData_Headers#2](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CPP/webclient_uploaddata_headers.cpp#2)]
 [!code-csharp[WebClient_UpLoadData_Headers#2](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/CS/webclient_uploaddata_headers.cs#2)]
 [!code-vb[WebClient_UpLoadData_Headers#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadData_Headers/VB/webclient_uploaddata_headers.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Hochladen der Daten.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadData">
      <MemberSignature Language="C#" Value="public byte[] UploadData (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadData(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadData(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Daten auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Lädt einen Datenpuffer in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet einen Datenpuffer auf eine Ressource, die mithilfe der im angegebenen HTTP-Methode der `method` -Parameter, und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadDataAsync%2A> Methoden.  
  
 Die <xref:System.Net.WebClient.UploadData%2A> -Methode sendet den Inhalt des `data` an den Server, ohne ihn zu codieren.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Hochladen der Daten.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer auf eine Ressource, die von einem URI, mit der POST-Methode identifiziert. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert. Um die Benachrichtigung erhalten, wenn das Hochladen der Daten abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadDataCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Daten gesendet werden. Um Daten und Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine der der <xref:System.Net.WebClient.UploadData%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer auf eine Ressource, die von einem URI, der mithilfe der angegebenen Methode identifiziert. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert. Um die Benachrichtigung erhalten, wenn das Hochladen der Daten abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadDataCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Daten gesendet werden. Um Daten und Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine der der <xref:System.Net.WebClient.UploadData%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataAsync">
      <MemberSignature Language="C#" Value="public void UploadDataAsync (Uri address, string method, byte[] data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadDataAsync(class System.Uri address, string method, unsigned int8[] data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataAsync(System.Uri,System.String,System.Byte[],System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt einen Datenpuffer auf eine Ressource, die von einem URI, der mithilfe der angegebenen Methode und zum Identifizieren von Token identifiziert hoch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert. Um die Benachrichtigung erhalten, wenn das Hochladen der Daten abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadDataCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Daten gesendet werden. Um Daten und Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine der der <xref:System.Net.WebClient.UploadData%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadDataCompletedEventHandler UploadDataCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadDataCompletedEventHandler UploadDataCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadDataCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadDataCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei Abschluss eines asynchronen Datenupload-Vorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Datenupload abgeschlossen ist. Asynchrone Datenuploads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.UploadDataAsync%2A> Methoden.  
  
 Die <xref:System.Net.UploadDataCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.UploadDataCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#36](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#36)]
 [!code-csharp[NCLWebClientAsync#36](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#36)]
 [!code-vb[NCLWebClientAsync#36](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer mit einem <see cref="T:System.Byte" /> Array an den URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn Datenpuffer hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der Datenpuffer auf die Ressource hochgeladen wurde.  
  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer mit einem <see cref="T:System.Byte" /> Array an den URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn Datenpuffer hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der Datenpuffer auf die Ressource hochgeladen wurde.  
  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (string address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(string address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer mit einem <see cref="T:System.Byte" /> Array an den URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn Datenpuffer hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der Datenpuffer auf die Ressource hochgeladen wurde.  
  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadDataTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadDataTaskAsync (Uri address, string method, byte[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadDataTaskAsync(class System.Uri address, string method, unsigned int8[] data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadDataTaskAsync(System.Uri,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource, die Daten empfangen.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="data">Der Datenpuffer zum Senden an die Ressource.</param>
        <summary>Uploads einen Datenpuffer mit einem <see cref="T:System.Byte" /> Array an den URI als asynchronen Vorgang mit einem Taskobjekt angegeben.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn Datenpuffer hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem der Datenpuffer auf die Ressource hochgeladen wurde.  
  
 Diese Methode sendet einen Datenpuffer auf eine Ressource an. Der Datenpuffer wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Die Daten sind nicht codiert.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Beispielsweise ftp://localhost/samplefile.txt.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden. Zum Beispiel: "samplefile.txt".</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource mit dem angegebenen URI.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadFile%2A> Methode sendet eine lokale Datei an eine Ressource. Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Diese Methode blockiert, während des Hochladens der das. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadFileAsync%2A> Methoden.  
  
 Die `POST` von HTTP-Methode definiert ist. Wenn die zugrunde liegende Anforderung nicht HTTP verwendet und `POST` wird nicht unterstützt durch den Server bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die angegebene Datei hochlädt, mit dem angegebenen URI <xref:System.Net.WebClient.UploadFile%2A>. Alle vom Server zurückgegebene Antwort ist in der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UpLoadFile#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile/CPP/webclient_uploadfile.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile/CS/webclient_uploadfile.cs#1)]
 [!code-vb[WebClient_UpLoadFile#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile/VB/webclient_uploadfile.vb#1)]  
  
 Das folgende Codebeispiel zeigt eine ASP.NET-Seite, der akzeptieren kann gebucht Dateien und eignet sich für die Verwendung mit der <xref:System.Net.WebClient.UploadFile%2A> Methode. Die Seite muss auf einem Webserver befinden. Seine Adresse stellt den Wert für die `address` Parameter von der <xref:System.Net.WebClient.UploadFile%2A> Methode.  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Hochladen der Datei.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Beispielsweise ftp://localhost/samplefile.txt.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden. Zum Beispiel: "samplefile.txt".</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource mit dem angegebenen URI.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadFile%2A> Methode sendet eine lokale Datei an eine Ressource. Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
 Diese Methode blockiert, während des Hochladens der das. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadFileAsync%2A> Methoden.  
  
 Die `POST` von HTTP-Methode definiert ist. Wenn die zugrunde liegende Anforderung nicht HTTP verwendet und `POST` wird nicht unterstützt durch den Server bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Hochladen der Datei.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei.</param>
        <param name="method">Die Methode verwendet, um die Datei auf die Ressource zu senden. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden.</param>
        <summary>Lädt die angegebene lokale Datei in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Adresse eine HTTP-Ressource angibt, die <xref:System.Net.WebClient.UploadFile%2A> Methode sendet eine lokale Datei auf eine Ressource, die mithilfe der im angegebenen HTTP-Methode der `method` Parameter und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der das. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadFileAsync%2A> Methoden.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die nicht vom Server interpretiert werden kann oder die `address` Ressource, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die angegebene Datei hochlädt, mit dem angegebenen URI <xref:System.Net.WebClient.UploadFile%2A>. Alle vom Server zurückgegebene Antwort ist in der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UpLoadFile2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CPP/webclient_uploadfile2.cpp#1)]
 [!code-csharp[WebClient_UpLoadFile2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UpLoadFile2/CS/webclient_uploadfile2.cs#1)]
 [!code-vb[WebClient_UpLoadFile2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UpLoadFile2/VB/webclient_uploadfile2.vb#1)]  
  
 Das folgende Codebeispiel zeigt eine ASP.NET-Seite, der akzeptieren kann gebucht Dateien und eignet sich für die Verwendung mit der <xref:System.Net.WebClient.UploadFile%2A> Methode. Die Seite muss auf einem Webserver befinden. Seine Adresse stellt den Wert für die `address` Parameter von der <xref:System.Net.WebClient.UploadFile%2A> Methode.  
  
 [!code-aspx-csharp[NCLWebClientAsp#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsp/CS/fileuploadercs.aspx#1)]
 [!code-aspx-vb[NCLWebClientAsp#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsp/VB/fileuploadervb.aspx#1)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Hochladen der Datei.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFile">
      <MemberSignature Language="C#" Value="public byte[] UploadFile (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadFile(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFile(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei.</param>
        <param name="method">Die Methode verwendet, um die Datei auf die Ressource zu senden. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden.</param>
        <summary>Lädt die angegebene lokale Datei in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Adresse eine HTTP-Ressource angibt, die <xref:System.Net.WebClient.UploadFile%2A> Methode sendet eine lokale Datei auf eine Ressource, die mithilfe der im angegebenen HTTP-Methode der `method` Parameter und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der das. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadFileAsync%2A> Methoden.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die nicht vom Server interpretiert werden kann oder die `address` Ressource, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Hochladen der Datei.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration:<see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden.</param>
        <summary>Lädt die angegebene lokale Datei in die angegebene Ressource mit der POST-Methode hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn das Hochladen der Datei abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadFileCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Datei gesendet wird. Um eine Datei und der Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine von der <xref:System.Net.WebClient.UploadFile%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden.</param>
        <summary>Lädt die angegebene lokale Datei in die angegebene Ressource mit der POST-Methode hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn das Hochladen der Datei abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadFileCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Datei gesendet wird. Um eine Datei und der Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine von der <xref:System.Net.WebClient.UploadFile%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileAsync">
      <MemberSignature Language="C#" Value="public void UploadFileAsync (Uri address, string method, string fileName, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadFileAsync(class System.Uri address, string method, string fileName, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Die Datei, auf die Ressource zu senden.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die angegebene lokale Datei in die angegebene Ressource mit der POST-Methode hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn das Hochladen der Datei abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadFileCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Datei gesendet wird. Um eine Datei und der Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eine von der <xref:System.Net.WebClient.UploadFile%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">auf die lokale Datei zugreifen zu können. Zugeordnete Enumeration: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="UploadFileCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadFileCompletedEventHandler UploadFileCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadFileCompletedEventHandler UploadFileCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadFileCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadFileCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei Abschluss eines asynchronen Dateiupload-Vorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Dateiupload abgeschlossen wird. Asynchrone Dateiuploads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.UploadFileAsync%2A> Methoden.  
  
 Die <xref:System.Net.UploadFileCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.UploadFileCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="fileName">Lokale Datei, die auf die Ressource gesendet.</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn die Datei hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datei auf die Ressource hochgeladen wurde. Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="fileName">Lokale Datei, die auf die Ressource gesendet.</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn die Datei hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datei auf die Ressource hochgeladen wurde. Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (string address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(string address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Lokale Datei, die auf die Ressource gesendet.</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn die Datei hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datei auf die Ressource hochgeladen wurde. Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 STANDARDMÄßIG verwendet diese Methode den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadFileTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadFileTaskAsync (Uri address, string method, string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadFileTaskAsync(class System.Uri address, string method, string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadFileTaskAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Datei. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die Methode zum Senden der Daten an die Ressource verwendet. Wenn <see langword="null" />, der Standardwert ist POST für http und STOR für ftp.</param>
        <param name="fileName">Lokale Datei, die auf die Ressource gesendet.</param>
        <summary>Hochladen die angegebene lokale Datei auf eine Ressource als asynchronen Vorgang mit einem Taskobjekt.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array mit den Text der Antwort von der Ressource empfangen werden, wenn die Datei hochgeladen wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Datei auf die Ressource hochgeladen wurde. Die Datei wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 STANDARDMÄßIG verwendet diese Methode den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="fileName" />ist <see langword="null" />, ist <see cref="F:System.String.Empty" />, enthält ungültige Zeichen oder der angegebene Pfad zur Datei ist nicht vorhanden.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header beginnt mit <see langword="multipart" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadProgressChanged">
      <MemberSignature Language="C#" Value="public event System.Net.UploadProgressChangedEventHandler UploadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadProgressChangedEventHandler UploadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn einige oder alle Daten erfolgreich über einen asynchronen Upload übertragen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Upload durchgeführt wird. Dieses Ereignis wird ausgelöst, wenn Uploads mit einer der folgenden Methoden gestartet werden.  
  
|Methode|Beschreibung|  
|------------|-----------------|  
|<xref:System.Net.WebClient.UploadDataAsync%2A>|Sendet eine <xref:System.Byte> Array auf die Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadFileAsync%2A>|Sendet eine lokale Datei an die Ressource, ohne den aufrufenden Thread zu blockieren.|  
|<xref:System.Net.WebClient.UploadValuesAsync%2A>|Sendet eine <xref:System.Collections.Specialized.NameValueCollection> an die Ressource und gibt ein <xref:System.Byte> Array, das alle Antworten enthält, ohne den aufrufenden Thread zu blockieren.|  
  
 Die <xref:System.Net.UploadProgressChangedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.UploadProgressChangedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#4)]
 [!code-csharp[NCLWebClientAsync#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#4)]
 [!code-vb[NCLWebClientAsync#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#4)]  
  
 Das folgende Codebeispiel zeigt eine Implementierung von einem Handler für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#42](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#42)]
 [!code-csharp[NCLWebClientAsync#42](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#42)]
 [!code-vb[NCLWebClientAsync#42](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource mit der POST-Methode hoch.</summary>
        <returns>Ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird. Verwenden Sie zum Senden einer Zeichenfolge und fortgesetzt werden, während des Wartens auf die Antwort des Servers, eines der <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, das Aufrufen dieser Methode.  
  
 [!code-cpp[NCLWebClientAsync#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#1)]
 [!code-csharp[NCLWebClientAsync#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#1)]
 [!code-vb[NCLWebClientAsync#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource mit der POST-Methode hoch.</summary>
        <returns>Ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird. Verwenden Sie zum Senden einer Zeichenfolge und fortgesetzt werden, während des Wartens auf die Antwort des Servers, eines der <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge (""), und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Dieser URI muss eine Ressource, die eine mit gesendete Anforderung akzeptieren identifizieren die <c>Methode</c> Methode.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Zeichenfolge an die Ressource gesendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird. Verwenden Sie zum Senden einer Zeichenfolge und fortgesetzt werden, während des Wartens auf die Antwort des Servers, eines der <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, das Aufrufen dieser Methode.  
  
 [!code-cpp[NCLWebClientAsync#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#2)]
 [!code-csharp[NCLWebClientAsync#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#2)]
 [!code-vb[NCLWebClientAsync#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadString">
      <MemberSignature Language="C#" Value="public string UploadString (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string UploadString(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadString(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Dieser URI muss eine Ressource, die eine mit gesendete Anforderung akzeptieren identifizieren die <c>Methode</c> Methode.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Zeichenfolge an die Ressource gesendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird. Verwenden Sie zum Senden einer Zeichenfolge und fortgesetzt werden, während des Wartens auf die Antwort des Servers, eines der <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet eine Zeichenfolge an eine Ressource. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Um die Benachrichtigung bei Abschluss des Uploads Zeichenfolge, können Sie einen Ereignishandler hinzufügen der <xref:System.Net.WebClient.UploadStringCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadString%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet eine Zeichenfolge an eine Ressource. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Um die Benachrichtigung bei Abschluss des Uploads Zeichenfolge, können Sie einen Ereignishandler hinzufügen der <xref:System.Net.WebClient.UploadStringCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadString%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringAsync">
      <MemberSignature Language="C#" Value="public void UploadStringAsync (Uri address, string method, string data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadStringAsync(class System.Uri address, string method, string data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet eine Zeichenfolge an eine Ressource. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Um die Benachrichtigung bei Abschluss des Uploads Zeichenfolge, können Sie einen Ereignishandler hinzufügen der <xref:System.Net.WebClient.UploadStringCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadString%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadStringCompletedEventHandler UploadStringCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadStringCompletedEventHandler UploadStringCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadStringCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadStringCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei Abschluss eines asynchronen Zeichenfolge-Upload-Vorgangs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, wenn ein asynchroner Upload Zeichenfolgenoperation abgeschlossen wird. Asynchrone Zeichenfolgenuploads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.UploadStringAsync%2A> Methoden.  
  
 Die <xref:System.Net.UploadStringCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.UploadStringCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen der eines ereignishandlers für dieses Ereignis.  
  
 [!code-cpp[NCLWebClientAsync#38](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#38)]
 [!code-csharp[NCLWebClientAsync#38](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#38)]
 [!code-vb[NCLWebClientAsync#38](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#38)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt hoch.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Zeichenfolge für die Ressource hochgeladen wurde. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt hoch.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Zeichenfolge für die Ressource hochgeladen wurde. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (string address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(string address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt hoch.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Zeichenfolge für die Ressource hochgeladen wurde. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadStringTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string&gt; UploadStringTaskAsync (Uri address, string method, string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;string&gt; UploadStringTaskAsync(class System.Uri address, string method, string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadStringTaskAsync(System.Uri,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der Zeichenfolge. Für HTTP-Ressourcen muss dieser URI eine Ressource identifizieren, die eine Anforderung gesendet wird, mit der POST-Methode, z. B. ein Skript oder eine ASP-Seite annehmen kann.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die Zeichenfolge, die hochgeladen werden.</param>
        <summary>Lädt die angegebene Zeichenfolge in die angegebene Ressource als asynchronen Vorgang mit einem Taskobjekt hoch.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.String" /> , enthält die Antwort vom Server gesendet werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem die Zeichenfolge für die Ressource hochgeladen wurde. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Diese Methode blockiert, während die Zeichenfolge übertragen wird.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die angegebene Name/Wert-Auflistung in die durch den angegebenen URI identifizierte Ressource hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadValues%2A> -Methode sendet eine <xref:System.Collections.Specialized.NameValueCollection> mit einem Server. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`die <xref:System.Net.WebClient.UploadValues%2A> Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird sammelt Informationen vom Benutzer (Name, Alter und Adresse) und sendet die Werte mit dem Server <xref:System.Net.WebClient.UploadValues%2A>. Antwort vom Server wird auf der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UploadValues#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues/CPP/webclient_uploadvalues.cpp#1)]
 [!code-csharp[WebClient_UploadValues#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues/CS/webclient_uploadvalues.cs#1)]
 [!code-vb[WebClient_UploadValues#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues/VB/webclient_uploadvalues.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header ist kein <see langword="null" /> oder "Application/X-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die angegebene Name/Wert-Auflistung in die durch den angegebenen URI identifizierte Ressource hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadValues%2A> -Methode sendet eine <xref:System.Collections.Specialized.NameValueCollection> mit einem Server. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`die <xref:System.Net.WebClient.UploadValues%2A> Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header ist kein <see langword="null" /> oder "Application/X-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die angegebene Name/Wert-Auflistung auf die Ressource identifiziert, die durch den angegebenen URI mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadValues%2A> -Methode sendet eine <xref:System.Collections.Specialized.NameValueCollection> auf eine Ressource mit der Methode im angegebenen der `method` Parameter und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden.  
  
 Wenn die `Content-type` Header ist `null`, <xref:System.Net.WebClient.UploadValues%2A> Methode wird auf `application/x-www-form-urlencoded`.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird sammelt Informationen vom Benutzer (Name, Alter und Adresse) und sendet die Werte mit dem Server <xref:System.Net.WebClient.UploadValues%2A>. Antwort vom Server wird auf der Konsole angezeigt.  
  
 [!code-cpp[WebClient_UploadValues2#1](~/samples/snippets/cpp/VS_Snippets_Remoting/WebClient_UploadValues2/CPP/webclient_uploadvalues2.cpp#1)]
 [!code-csharp[WebClient_UploadValues2#1](~/samples/snippets/csharp/VS_Snippets_Remoting/WebClient_UploadValues2/CS/webclient_uploadvalues2.cs#1)]
 [!code-vb[WebClient_UploadValues2#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/WebClient_UploadValues2/VB/webclient_uploadvalues2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Headerwert wird nicht <see langword="null" /> und nicht <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValues">
      <MemberSignature Language="C#" Value="public byte[] UploadValues (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] UploadValues(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValues(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Datei auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die angegebene Name/Wert-Auflistung auf die Ressource identifiziert, die durch den angegebenen URI mit der angegebenen Methode hoch.</summary>
        <returns>Ein <see cref="T:System.Byte" /> Array, das den Text der Antwort von der Ressource enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Net.WebClient.UploadValues%2A> -Methode sendet eine <xref:System.Collections.Specialized.NameValueCollection> auf eine Ressource mit der Methode im angegebenen der `method` Parameter und gibt Antwort vom Server zurück. Diese Methode blockiert, während des Hochladens der Daten. Um den Vorgang fortzusetzen, während des Wartens auf die Antwort des Servers ausführen, gehen die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden.  
  
 Wenn die `Content-type` Header ist `null`, <xref:System.Net.WebClient.UploadValues%2A> Methode wird auf `application/x-www-form-urlencoded`.  
  
 Wenn die `method` Parameter gibt an, ein Verb an, die vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="data" /> ist <see langword="null" />.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Headerwert wird nicht <see langword="null" /> und nicht <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs. Dieser URI muss eine Ressource identifizieren, die eine mit der Standardmethode gesendete Anforderung akzeptieren kann.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die Daten in der angegebenen Name/Wert-Auflistung, die durch den angegebenen URI identifizierte Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet eine Zeichenfolge an eine Ressource. Die Zeichenfolge wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Diese Methode vor dem Hochladen der Zeichenfolge, konvertiert sie in einem <xref:System.Byte> mit der Codierung im angegebenen array der <xref:System.Net.WebClient.Encoding%2A> Eigenschaft. Um die Benachrichtigung bei Abschluss des Uploads Zeichenfolge, können Sie einen Ereignishandler hinzufügen der <xref:System.Net.WebClient.UploadStringCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadString%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs. Dieser URI muss eine Ressource, die eine mit gesendete Anforderung akzeptieren identifizieren die <c>Methode</c> Methode.</param>
        <param name="method">Die Methode verwendet, um die Zeichenfolge an die Ressource gesendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Lädt die Daten in der angegebenen Name/Wert-Auflistung, die durch den angegebenen URI, der mithilfe der angegebenen Methode identifizierte Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet die Daten in einem <xref:System.Collections.Specialized.NameValueCollection> auf die `address` Ressource. Verwenden Sie diese Methode zum Senden von Daten an einen URI für die Verarbeitung. Die Daten werden mit dem Medientyp Formular codierte gesendet; der Content-Type-Headerwert muss auf "Application/X-www-form-urlencoded" festgelegt werden. Der Header wird standardmäßig ordnungsgemäß festgelegt. Die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden lösen eine <xref:System.Net.WebException> , wenn Sie diese Methode mit einer anderen Content-Type-Header festgelegte Wert in Aufrufen der <xref:System.Net.WebClient.Headers%2A> Auflistung.  
  
 Wenn die `method` Methode wird nicht unterstützt durch den Server bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Die <xref:System.Collections.Specialized.NameValueCollection> wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn der Uploadvorgang abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadValuesCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadValues%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> nicht leer ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesAsync">
      <MemberSignature Language="C#" Value="public void UploadValuesAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data, object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UploadValuesAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data, object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs. Dieser URI muss eine Ressource, die eine mit gesendete Anforderung akzeptieren identifizieren die <c>Methode</c> Methode.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Zeichenfolge an die Ressource gesendet. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <param name="userToken">Ein benutzerdefiniertes Objekt, das übergeben wird, an die Methode wird aufgerufen, wenn der asynchrone Vorgang abgeschlossen ist.</param>
        <summary>Lädt die Daten in der angegebenen Name/Wert-Auflistung, die durch den angegebenen URI, der mithilfe der angegebenen Methode identifizierte Ressource hoch. Diese Methode blockiert den aufrufenden Thread nicht, und ermöglicht es dem Aufrufer, um ein Objekt an die Methode übergeben, die aufgerufen wird, wenn der Vorgang abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sendet die Daten in einem <xref:System.Collections.Specialized.NameValueCollection> auf die `address` Ressource. Verwenden Sie diese Methode zum Senden von Daten an einen URI für die Verarbeitung. Die Daten werden mit dem Medientyp Formular codierte gesendet; der Content-Type-Headerwert muss auf "Application/X-www-form-urlencoded" festgelegt werden. Der Header wird standardmäßig ordnungsgemäß festgelegt. Die <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden lösen eine <xref:System.Net.WebException> , wenn Sie diese Methode mit einer anderen Content-Type-Header festgelegte Wert in Aufrufen der <xref:System.Net.WebClient.Headers%2A> Auflistung.  
  
 Wenn die `method` Methode wird nicht unterstützt durch den Server bestimmen die zugrunde liegenden Protokollklassen. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Die <xref:System.Collections.Specialized.NameValueCollection> wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden. Um benachrichtigt zu werden, wenn der Uploadvorgang abgeschlossen ist, fügen Sie einen Ereignishandler an das <xref:System.Net.WebClient.UploadValuesCompleted> Ereignis.  
  
 Diese Methode wird nicht durch den aufrufenden Thread blockiert, während die Zeichenfolge gesendet wird. Um eine Zeichenfolge und ein Block beim Warten auf Antwort des Servers zu senden, verwenden Sie eines der <xref:System.Net.WebClient.UploadValues%2A> Methoden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> nicht leer ist, wird dieser an angefügt `address`.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" /> und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesCompleted">
      <MemberSignature Language="C#" Value="public event System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.UploadValuesCompletedEventHandler UploadValuesCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.UploadValuesCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.UploadValuesCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein asynchroner Upload einer Name/Wert-Auflistung abgeschlossen ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal, wenn einen asynchronen Upload von einem <xref:System.Collections.Specialized.NameValueCollection> Daten des Objekts abgeschlossen ist. Diese Uploads werden gestartet, durch Aufrufen der <xref:System.Net.WebClient.UploadValuesAsync%2A> Methoden.  
  
 Die <xref:System.Net.UploadValuesCompletedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.UploadValuesCompletedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Uploads angegebene Name/Wert-Auflistung auf die Ressource, die durch den angegebenen URI als asynchronen Vorgang mit einem Taskobjekt identifiziert.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die vom Server gesendete Antwort enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem Sie Name/Wert-Auflistung auf die Ressource hochgeladen wurde. Name/Wert-Auflistung wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`, diese Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header ist kein <see langword="null" /> oder "Application/X-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Uploads angegebene Name/Wert-Auflistung auf die Ressource, die durch den angegebenen URI als asynchronen Vorgang mit einem Taskobjekt identifiziert.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die vom Server gesendete Antwort enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem Sie Name/Wert-Auflistung auf die Ressource hochgeladen wurde. Name/Wert-Auflistung wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`, diese Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Headerwert wird nicht <see langword="null" /> und nicht <see langword="application/x-www-form-urlencoded" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (string address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(string address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.String,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Sammlung auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Uploads angegebene Name/Wert-Auflistung auf die Ressource, die durch den angegebenen URI als asynchronen Vorgang mit einem Taskobjekt identifiziert.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die vom Server gesendete Antwort enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem Sie Name/Wert-Auflistung auf die Ressource hochgeladen wurde. Name/Wert-Auflistung wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`, diese Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header ist kein <see langword="null" /> oder "Application/X-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UploadValuesTaskAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;byte[]&gt; UploadValuesTaskAsync (Uri address, string method, System.Collections.Specialized.NameValueCollection data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; UploadValuesTaskAsync(class System.Uri address, string method, class System.Collections.Specialized.NameValueCollection data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.WebClient.UploadValuesTaskAsync(System.Uri,System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Uri" />
        <Parameter Name="method" Type="System.String" />
        <Parameter Name="data" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="address">Der URI der Ressource zum Empfangen der auflistungs.</param>
        <param name="method">Die HTTP-Methode verwendet, um die Sammlung auf die Ressource zu senden. Wenn der Wert null ist, ist die Standardeinstellung POST für http und STOR für ftp an.</param>
        <param name="data">Die <see cref="T:System.Collections.Specialized.NameValueCollection" /> zum Senden an die Ressource.</param>
        <summary>Uploads angegebene Name/Wert-Auflistung auf die Ressource, die durch den angegebenen URI als asynchronen Vorgang mit einem Taskobjekt identifiziert.</summary>
        <returns>Gibt <see cref="T:System.Threading.Tasks.Task`1" />zurück.  
  
 Das Aufgabenobjekt, das den asynchronen Vorgang darstellt. Die <see cref="P:System.Threading.Tasks.Task`1.Result" /> -Eigenschaft im Aufgabenobjekt gibt ein <see cref="T:System.Byte" /> Array, das die vom Server gesendete Antwort enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Vorgang wird nicht blockiert. Das zurückgegebene <xref:System.Threading.Tasks.Task%601> Objekt wird abgeschlossen, nachdem Sie Name/Wert-Auflistung auf die Ressource hochgeladen wurde. Name/Wert-Auflistung wird gesendet, asynchron aus dem Threadpool mit Threadressourcen, die automatisch zugewiesen werden.  
  
 Asynchrone Vorgänge, die nicht abgeschlossen wurden, können abgebrochen werden, mithilfe der <xref:System.Net.WebClient.CancelAsync%2A> Methode.  
  
 Wenn die zugrunde liegende Anforderung vom Server nicht verstanden wird, bestimmen die zugrunde liegenden Protokollklassen an, was geschieht. In der Regel eine <xref:System.Net.WebException> wird ausgelöst, mit der <xref:System.Net.WebException.Status%2A> Eigenschaft festgelegt wird, um den Fehler anzugeben.  
  
 Wenn der Content-Type-Header ist `null`, diese Methode wird auf "Application/X-www-form-urlencoded".  
  
 Wenn die <xref:System.Net.WebClient.BaseAddress%2A> Eigenschaft handelt es sich nicht um eine leere Zeichenfolge ("") und `address` enthält einen absoluten URI keine `address` muss ein relativer URI, der in Kombination <xref:System.Net.WebClient.BaseAddress%2A> um den absoluten URI der angeforderten Daten zu bilden. Wenn die <xref:System.Net.WebClient.QueryString%2A> Eigenschaft keine leere Zeichenfolge ist, wird dieser an angefügt `address`.  
  
 Diese Methode verwendet den STOR-Befehl zum Hochladen einer FTP-Ressource. Für eine HTTP-Ressource wird die POST-Methode verwendet.  
  
> [!NOTE]
>  Dieser Member gibt Ablaufverfolgungsinformationen aus, wenn Sie die Netzwerkablaufverfolgung in der Anwendung aktivieren. Weitere Informationen finden Sie unter [Netzwerkablaufverfolgung in .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="address" />-Parameter ist <see langword="null" />.  
  
 - oder -   
  
 Der <paramref name="data" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Net.WebException">Der URI durch Kombinieren von gebildet <see cref="P:System.Net.WebClient.BaseAddress" />, und <paramref name="address" /> ist ungültig.  
  
 - oder -   
  
 <paramref name="method" />kann nicht verwendet werden, um Inhalt zu senden.  
  
 - oder -   
  
 Es wurde keine Antwort vom Server, der die Ressource hostet.  
  
 - oder -   
  
 Fehler beim Öffnen des Streams.  
  
 - oder -   
  
 Die <see langword="Content-type" /> Header ist kein <see langword="null" /> oder "Application/X-www-form-urlencoded".</exception>
      </Docs>
    </Member>
    <Member MemberName="UseDefaultCredentials">
      <MemberSignature Language="C#" Value="public bool UseDefaultCredentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDefaultCredentials" />
      <MemberSignature Language="DocId" Value="P:System.Net.WebClient.UseDefaultCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt ihn fest ein <see cref="T:System.Boolean" /> Wert, der steuert, ob die <see cref="P:System.Net.CredentialCache.DefaultCredentials" /> mit Anforderungen gesendet werden.</summary>
        <value>
          <see langword="true" />, wenn die Standardanmeldeinformationen verwendet werden, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie diese Eigenschaft auf `true` bei Anforderungen von diesem <xref:System.Net.WebClient> Objekt sollte, wenn vom Server angefordert authentifiziert werden mithilfe der Standardanmeldeinformationen des aktuell angemeldeten Benutzers. Bei Clientanwendungen ist dies das gewünschte Verhalten in den meisten Szenarien. Für Anwendungen der mittleren Ebene, z. B. ASP.NET-Anwendungen, anstatt Sie mithilfe dieser Eigenschaft, legen Sie in der Regel die <xref:System.Net.WebClient.Credentials%2A> Eigenschaft, um die Anmeldeinformationen des Clients auf, deren Namen die Anforderung erfolgt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Festlegen dieser Eigenschaft.  
  
 [!code-cpp[NCLWebClientAsync#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLWebClientAsync/CPP/asyncmethods.cpp#3)]
 [!code-csharp[NCLWebClientAsync#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLWebClientAsync/CS/asyncmethods.cs#3)]
 [!code-vb[NCLWebClientAsync#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NCLWebClientAsync/VB/asyncmethods.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStreamClosed">
      <MemberSignature Language="C#" Value="public event System.Net.WriteStreamClosedEventHandler WriteStreamClosed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Net.WriteStreamClosedEventHandler WriteStreamClosed" />
      <MemberSignature Language="DocId" Value="E:System.Net.WebClient.WriteStreamClosed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.WebClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.WriteStreamClosedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein asynchroner Vorgang zum Schreiben von Daten in eine Ressource, die mithilfe eines Datenstroms schreiben geschlossen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird jedes Mal ausgelöst, der ein asynchroner Vorgang zum Schreiben von Daten auf eine Ressource, die mithilfe eines Datenstroms schreiben geschlossen wird. Diese Vorgänge Optimierungsfehler Aufrufe an die <xref:System.Net.WebClient.OpenWriteTaskAsync%2A> Methoden.  
  
 Die <xref:System.Net.WriteStreamClosedEventHandler> ist der Delegat für dieses Ereignis. Die <xref:System.Net.WriteStreamClosedEventArgs> -Klasse stellt den Ereignishandler mit Ereignisdaten bereit.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
