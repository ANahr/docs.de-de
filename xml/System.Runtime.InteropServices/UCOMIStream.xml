<Type Name="UCOMIStream" FullName="System.Runtime.InteropServices.UCOMIStream">
  <TypeSignature Language="C#" Value="public interface UCOMIStream" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract UCOMIStream" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.UCOMIStream" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("0000000c-0000-0000-c000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Verwenden Sie stattdessen <see cref="T:System.Runtime.InteropServices.ComTypes.IStream" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream` und `ISequentialStream` im Unterordner "com" der MSDN Library.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public void Clone (out System.Runtime.InteropServices.UCOMIStream ppstm);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clone([out] class System.Runtime.InteropServices.UCOMIStream&amp; ppstm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Clone(System.Runtime.InteropServices.UCOMIStream@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ppstm" Type="System.Runtime.InteropServices.UCOMIStream&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="ppstm">Nach erfolgreicher Rückkehr enthält das neue Datenstromobjekt.</param>
        <summary>Erstellt ein neues Datenstromobjekt mit einem eigenen Suchzeiger, der die gleichen Bytes wie der originaldatenstrom verweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::Clone` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (int grfCommitFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(int32 grfCommitFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Commit(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grfCommitFlags" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="grfCommitFlags">Steuert, wie die Änderungen am Datenstromobjekt ein Commit ausgeführt werden.</param>
        <summary>Stellt sicher, dass alle Änderungen an einem Datenstromobjekt im Transaktionsmodus geöffneten im übergeordneten Speicher widergespiegelt werden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::Commit` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Runtime.InteropServices.UCOMIStream pstm, long cb, IntPtr pcbRead, IntPtr pcbWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Runtime.InteropServices.UCOMIStream pstm, int64 cb, native int pcbRead, native int pcbWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.CopyTo(System.Runtime.InteropServices.UCOMIStream,System.Int64,System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstm" Type="System.Runtime.InteropServices.UCOMIStream" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="pcbRead" Type="System.IntPtr" />
        <Parameter Name="pcbWritten" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pstm">Verweis auf den Zieldatenstrom.</param>
        <param name="cb">Die Anzahl der Bytes, die aus dem Quelldatenstrom kopiert werden soll.</param>
        <param name="pcbRead">Enthält nach erfolgreicher Rückkehr die tatsächliche Anzahl von Bytes, die aus der Quelle gelesen wurden.</param>
        <param name="pcbWritten">Enthält nach erfolgreicher Rückkehr die tatsächliche Anzahl von Bytes, die in das Ziel geschrieben wurden.</param>
        <summary>Kopiert eine angegebene Anzahl von Bytes aus dem aktuellen Suchzeiger im Datenstrom an den aktuellen Suchzeiger in einem anderen Datenstrom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::CopyTo` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LockRegion">
      <MemberSignature Language="C#" Value="public void LockRegion (long libOffset, long cb, int dwLockType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LockRegion(int64 libOffset, int64 cb, int32 dwLockType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.LockRegion(System.Int64,System.Int64,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libOffset" Type="System.Int64" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="dwLockType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="libOffset">Der Byteoffset für den Anfang des Bereichs.</param>
        <param name="cb">Die Länge des Bereichs in Bytes, die zu beschränken.</param>
        <param name="dwLockType">Die angeforderten Einschränkungen für den Zugriff auf den Bereich.</param>
        <summary>Schränkt den Zugriff auf einen bestimmten Bereich von Bytes in den Stream.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::LockRegion` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (byte[] pv, int cb, IntPtr pcbRead);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read([out] unsigned int8[] pv, int32 cb, native int pcbRead) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Read(System.Byte[],System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.Byte[]" />
        <Parameter Name="cb" Type="System.Int32" />
        <Parameter Name="pcbRead" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pv">Enthält bei erfolgreicher Rückkehr die gelesenen Daten der Stream.</param>
        <param name="cb">Die Anzahl der Bytes, die aus dem Datenstromobjekt gelesen werden soll.</param>
        <param name="pcbRead">Zeiger auf eine <see langword="ULONG" /> Variable, die die tatsächliche Anzahl von Bytes empfängt aus dem Datenstromobjekt gelesen.</param>
        <summary>Liest eine angegebene Anzahl von Bytes aus dem Stream in den Arbeitsspeicher, beginnend beim aktuellen Suchzeiger.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `ISequentialStream::Read` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Revert">
      <MemberSignature Language="C#" Value="public void Revert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Revert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Revert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft alle Änderungen, die an einem transaktionsgebundenen Datenstrom, seit dem letzten vorgenommen wurden <see cref="M:System.Runtime.InteropServices.UCOMIStream.Commit(System.Int32)" /> aufrufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::Revert` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (long dlibMove, int dwOrigin, IntPtr plibNewPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(int64 dlibMove, int32 dwOrigin, native int plibNewPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Seek(System.Int64,System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dlibMove" Type="System.Int64" />
        <Parameter Name="dwOrigin" Type="System.Int32" />
        <Parameter Name="plibNewPosition" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dlibMove">Verschiebung hinzuzufügende <c>DwOrigin</c>.</param>
        <param name="dwOrigin">Gibt den Ausgangspunkt der Suche an. Der Ursprung kann der Anfang der Datei, der aktuellen Suchzeiger oder das Ende der Datei.</param>
        <param name="plibNewPosition">Enthält bei erfolgreicher Rückkehr den Offset des Suchzeigers vom Anfang des Datenstroms.</param>
        <summary>Verschiebt den Suchzeiger aus, um einen neuen Speicherort relativ zum Anfang des Datenstroms, bis zum Ende des Streams oder zum aktuellen Suchzeiger.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::Seek` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public void SetSize (long libNewSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSize(int64 libNewSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.SetSize(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libNewSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="libNewSize">Gibt die neue Größe des Datenstroms als Anzahl von Bytes an.</param>
        <summary>Ändert die Größe des Datenstromobjekts an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::SetSize` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Stat">
      <MemberSignature Language="C#" Value="public void Stat (out System.Runtime.InteropServices.STATSTG pstatstg, int grfStatFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stat([out] valuetype System.Runtime.InteropServices.STATSTG&amp; pstatstg, int32 grfStatFlag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Stat(System.Runtime.InteropServices.STATSTG@,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstatstg" Type="System.Runtime.InteropServices.STATSTG&amp;" RefType="out" />
        <Parameter Name="grfStatFlag" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pstatstg">Nach erfolgreicher Rückkehr enthält eine <see langword="STATSTG" /> Struktur die dieses Datenstromobjekt beschreibt.</param>
        <param name="grfStatFlag">Gibt an, einige Elemente in der <see langword="STATSTG" /> -Struktur, die von dieser Methode nicht zurückgegeben werden daher einige Arbeitsspeicher-Reservierungsoperationen speichern.</param>
        <summary>Ruft die <see cref="T:System.Runtime.InteropServices.STATSTG" /> -Struktur für diesen Datenstrom.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::Stat` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlockRegion">
      <MemberSignature Language="C#" Value="public void UnlockRegion (long libOffset, long cb, int dwLockType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnlockRegion(int64 libOffset, int64 cb, int32 dwLockType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.UnlockRegion(System.Int64,System.Int64,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libOffset" Type="System.Int64" />
        <Parameter Name="cb" Type="System.Int64" />
        <Parameter Name="dwLockType" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="libOffset">Der Byteoffset für den Anfang des Bereichs.</param>
        <param name="cb">Die Länge des einzuschränkenden Bereichs in Bytes.</param>
        <param name="dwLockType">Zuvor angewendeten zugriffseinschränkungen für den Bereich.</param>
        <summary>Entfernt die zugriffseinschränkung für einen Bereich von Bytes, die zuvor mit eingeschränkten <see cref="M:System.Runtime.InteropServices.UCOMIStream.LockRegion(System.Int64,System.Int64,System.Int32)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `IStream::UnlockRegion` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] pv, int cb, IntPtr pcbWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(unsigned int8[] pv, int32 cb, native int pcbWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.UCOMIStream.Write(System.Byte[],System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.Byte[]" />
        <Parameter Name="cb" Type="System.Int32" />
        <Parameter Name="pcbWritten" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pv">Der Puffer in den dieser Datenstrom geschrieben.</param>
        <param name="cb">Die Anzahl der Bytes, die in den Stream geschrieben werden soll.</param>
        <param name="pcbWritten">Enthält nach erfolgreicher Rückkehr die tatsächliche Anzahl von Bytes, die in das Datenstromobjekt geschrieben wurden. Der Aufrufer kann auf diesen Zeiger festgelegt <see langword="null" />, in diesem Fall diese Methode nicht die tatsächliche Anzahl der geschriebenen Bytes bereit.</param>
        <summary>Schreibt eine angegebene Anzahl von Bytes in das Datenstromobjekt beginnend beim aktuellen Suchzeiger.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Weitere Informationen finden Sie unter der vorhandenen Dokumentation für `ISequentialStream::Write` in der MSDN Library.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
