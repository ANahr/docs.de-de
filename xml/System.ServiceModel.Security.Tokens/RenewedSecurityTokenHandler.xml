<Type Name="RenewedSecurityTokenHandler" FullName="System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler">
  <TypeSignature Language="C#" Value="public delegate void RenewedSecurityTokenHandler(SecurityToken newSecurityToken, SecurityToken oldSecurityToken);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RenewedSecurityTokenHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Security.Tokens.RenewedSecurityTokenHandler" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="newSecurityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
    <Parameter Name="oldSecurityToken" Type="System.IdentityModel.Tokens.SecurityToken" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="newSecurityToken">Das erneuerte Token.</param>
    <param name="oldSecurityToken">Das abgelaufene Sicherheitstoken.</param>
    <summary>Wenn der Delegat implementiert ist, wird er aufgerufen, bevor ein erneuertes Token an den Client zurückgegeben wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Client stellt Erneuerungsanforderungen für ein Token, wenn das Token demnächst abläuft. Der Delegat stellt einen Erweiterungspunkt bereit, um die zu erneuernden Token zu überprüfen.  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
