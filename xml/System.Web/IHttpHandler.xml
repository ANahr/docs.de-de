<Type Name="IHttpHandler" FullName="System.Web.IHttpHandler">
  <TypeSignature Language="C#" Value="public interface IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert den Vertrag, den ASP.NET implementiert, um HTTP-webanforderungen mithilfe von benutzerdefinierten HTTP-Handler synchron zu verarbeiten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können benutzerdefinierte HTTP-Handler zum Verarbeiten bestimmter, vordefinierten Typen von HTTP-Anforderungen in einer Common Language Specification (CLS) kompatibel Programmiersprache schreiben. Ausführbarer Code, der definiert, der `HttpHandler` Klassen, anstatt konventionellen ASP oder ASP.NET Web Pages, reagiert auf diese bestimmten Anforderungen. HTTP-Handler bieten Ihnen eine Möglichkeit der Interaktion mit der Low-Level-Anforderung und Antwort-Dienste von IIS-Webserver und bieten Funktionen ähnlich wie ISAPI-Erweiterungen, aber ein einfacheres Programmiermodell.  
  
 Wenn der Handler Sitzungszustandswerte zugreifen, müssen Sie implementieren die <xref:System.Web.SessionState.IRequiresSessionState> Schnittstelle (eine Markierung ohne Methoden).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsReusable">
      <MemberSignature Language="C#" Value="public bool IsReusable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReusable" />
      <MemberSignature Language="DocId" Value="P:System.Web.IHttpHandler.IsReusable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, ob eine andere Anforderung verwenden, kann die <see cref="T:System.Web.IHttpHandler" /> Instanz.</summary>
        <value>
          <see langword="true" />Wenn die <see cref="T:System.Web.IHttpHandler" /> Instanz wird wiederverwendet werden, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie explizit festlegen, die <xref:System.Web.IHttpHandler.IsReusable%2A> Eigenschaft `true` oder `false` von Code, die Sie bereitstellen, überschreibt die <xref:System.Web.IHttpHandler.IsReusable%2A> Eigenschaftenaccessor (Get).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird schreibt vier Textzeilen in den HTTP-Ausgabestream als Antwort auf eine Clientanforderung für eine Seite Handler.aspx. Alle Anforderungen für handler.aspx gewartet werden, von der `MyHttpHandler` Klasse im Namespace `HandlerExample` in der Assembly HandlerTest.dll enthalten sind.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessRequest">
      <MemberSignature Language="C#" Value="public void ProcessRequest (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessRequest(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpHandler.ProcessRequest(System.Web.HttpContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Web.HttpContext" /> -Objekt, das Verweise auf die systeminternen Serverobjekte bereitstellt (z. B. <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, und <see langword="Server" />) verwendet, um HTTP-Anforderungen.</param>
        <summary>Aktiviert die Verarbeitung der HTTP-webanforderungen durch ein benutzerdefiniertes <see langword="HttpHandler" /> , implementiert die <see cref="T:System.Web.IHttpHandler" /> Schnittstelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Platzieren Sie den benutzerdefinierten `HttpHandler` code in die <xref:System.Web.IHttpHandler.ProcessRequest%2A> virtuelle Methode, wie im folgenden Beispiel gezeigt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird schreibt vier Textzeilen in den HTTP-Ausgabestream als Antwort auf eine Clientanforderung für eine Seite Handler.aspx. Alle Anforderungen für handler.aspx gewartet werden, von der `MyHttpHandler` Klasse im Namespace `HandlerExample` in der Assembly HandlerTest.dll enthalten sind.  
  
 [!code-csharp[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/CS/source.cs#1)]
 [!code-vb[Classic IHttpHandler.ProcessRequest Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic IHttpHandler.ProcessRequest Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
