<Type Name="IHttpAsyncHandler" FullName="System.Web.IHttpAsyncHandler">
  <TypeSignature Language="C#" Value="public interface IHttpAsyncHandler : System.Web.IHttpHandler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IHttpAsyncHandler implements class System.Web.IHttpHandler" />
  <TypeSignature Language="DocId" Value="T:System.Web.IHttpAsyncHandler" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.IHttpHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert den Vertrag, den HTTP-Handler für asynchrone Objekte implementieren muss.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Web.IHttpAsyncHandler> Klasse kann mit einer Dateinamenerweiterung oder einen bestimmten URL durch eine Konfigurationsdatei zugewiesen werden, der `httpHandlers` Konfigurationsabschnitt. Die ASP.NET-Infrastruktur wird dann instanziiert und den Handler aufgerufen wird, wenn die entsprechende Anforderung empfangen wird. Alternativ kann der Ereignishandler definiert werden, in einer ASHX-Datei, und wenn die entsprechende Anforderung für die ASHX-Datei empfangen wird, die ausgeführt wird, die ausgeführt werden.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginProcessRequest">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginProcessRequest(class System.Web.HttpContext context, class System.AsyncCallback cb, object extraData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpAsyncHandler.BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="cb" Type="System.AsyncCallback" />
        <Parameter Name="extraData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Web.HttpContext" /> Objekt, das Verweise auf systeminterne Serverobjekte bereitstellt (z. B. <see langword="Request" />, <see langword="Response" />, <see langword="Session" />, und <see langword="Server" />) verwendet, um HTTP-Anforderungen.</param>
        <param name="cb">Die <see cref="T:System.AsyncCallback" /> , der beim Abschluss des asynchronen Methodenaufrufs aufgerufen. Wenn <c>Cb</c> ist <see langword="null" />, der Delegat wird nicht aufgerufen.</param>
        <param name="extraData">Alle zusätzlichen unbekannten Daten, die zum Verarbeiten der Anforderung erforderlich sind.</param>
        <summary>Initiiert einen asynchronen Aufruf an den HTTP-Handler.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" /> , Informationen über den Status des Prozesses enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndProcessRequest">
      <MemberSignature Language="C#" Value="public void EndProcessRequest (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndProcessRequest(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.IHttpAsyncHandler.EndProcessRequest(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Ein <see cref="T:System.IAsyncResult" /> , Informationen über den Status des Prozesses enthält.</param>
        <summary>Stellt eine asynchronen Prozess End-Methode bereit, wenn der Prozess beendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können <xref:System.Web.IHttpAsyncHandler.EndProcessRequest%2A> alle während des asynchronen Prozesses abgefangenen Ausnahmen ausgelöst werden soll.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
