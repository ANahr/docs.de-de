<Type Name="IClientChannel" FullName="System.ServiceModel.IClientChannel">
  <TypeSignature Language="C#" Value="public interface IClientChannel : IDisposable, System.ServiceModel.IContextChannel, System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.IContextChannel&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientChannel implements class System.IDisposable, class System.ServiceModel.Channels.IChannel, class System.ServiceModel.ICommunicationObject, class System.ServiceModel.IContextChannel, class System.ServiceModel.IExtensibleObject`1&lt;class System.ServiceModel.IContextChannel&gt;" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.IClientChannel" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.IContextChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ServiceModel.IExtensibleObject&lt;System.ServiceModel.IContextChannel&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert das Verhalten ausgehender Anforderungen und von Anforderung-Antwort-Kanälen, die von der Clientanwendung verwendet werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.IClientChannel>-Schnittstelle definiert die Vorgänge, die von allen Kanälen unterstützt werden, die von einem Aufruf an <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> zurückgegeben werden. Verwenden Sie die <xref:System.ServiceModel.IClientChannel>-Methoden und -Eigenschaften, um den ausgehenden typisierten Kanal zu überprüfen und zu ändern. Die [ServiceModel Metadata Utility Tool (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) exportiert einen <xref:System.ServiceModel.ClientBase%601> Klasse und eine dienstvertragschnittstelle, indem eine Vertragsschnittstelle erstellt, die beide den zieldienstvertrag erbt und <xref:System.ServiceModel.IClientChannel>, Aktivieren Sie den erweiterten Vertrag als Proxy für den Dienst zu verwenden und auf den Clientkanal zugreifen.  
  
 Weitere Informationen finden Sie unter [WCF-Clientarchitektur](~/docs/framework/wcf/feature-details/client-architecture.md). Beispiele von der Darstellung in generierten clientcodedateien finden Sie in [Verständnis generiert Clientcode](~/docs/framework/wcf/feature-details/understanding-generated-client-code.md).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowInitializationUI">
      <MemberSignature Language="C#" Value="public bool AllowInitializationUI { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowInitializationUI" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.AllowInitializationUI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dient zum Abrufen oder Festlegen eines Werts, der angibt, ob <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" /> versucht, die <see cref="T:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer" />-Objekte in der <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.InteractiveChannelInitializers" />-Eigenschaft aufzurufen, oder der ausgelöst wird, wenn diese Sammlung nicht leer ist.</summary>
        <value>
          <see langword="true" />, wenn [!INCLUDE[indigo1](~/includes/indigo1-md.md)] interaktive Kanalinitialisierer aufrufen darf, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Legen Sie `false` fest, wenn Sie anstelle der Anzeige eines Initialisierungsdialogfelds eine Ausnahme auslösen möchten. Dies ist in einem Szenario der mittleren Ebene nützlich, wenn Sie sicherstellen möchten, dass kein Dialogfeld angezeigt wird, selbst wenn die Anwendung so konfiguriert ist, dass eins angezeigt werden sollte. Weitere Informationen finden Sie unter [beim Zugriff auf Dienste, die mithilfe eines WCF-Clients](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) und <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginDisplayInitializationUI (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDisplayInitializationUI(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">Die Methode, die beim Abschluss dieser Methode aufgerufen wird.</param>
        <param name="state">Informationen über den Zustand des Kanals.</param>
        <summary>Ein asynchroner Aufruf, um mit der Verwendung einer Benutzeroberfläche zur Abfrage der Anmeldeinformationen zu beginnen.</summary>
        <returns>Das <see cref="T:System.IAsyncResult" />, das für den Rückruf nach Abschluss der Verarbeitung verwendet wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um eine interaktive Kanalinitialisierung (z.&#160;B. CardSpace-Kartenauswahl) auszulösen. Dies wird automatisch durchgeführt, wenn der Kanal ohne den expliziten Aufruf von <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> verwendet wird. Für viele Anwendungen ist dieser Aufruf daher optional.  
  
 Wenn der Benutzer viel Zeit auf den Auswahlvorgang verwendet, kommt es zu einem Timeout bei dem Vorgang, der den automatischen Aufruf initiiert hat. Um dies zu verhindern, rufen Sie <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> oder <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> und <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A> explizit auf. Bei diesen Vorgängen kommt es nicht zu einem Timeout. Sie können zudem genau steuern, wo dieses Dialogfeld in der Anwendung angezeigt werden soll.  
  
 Diese Methode ruft ein Dialogfeld nur auf, wenn die Anwendung dementsprechend konfiguriert wurde. Wenn die Anwendung nicht für die Verwendung von CardSpace oder einem anderen interaktiven Kanalinitialisierer konfiguriert wurde, wird dieser Aufruf ohne eine Aktion zurückgegeben.  
  
 Wenn Sie diese Methode explizit aufrufen, müssen Sie vor dem Verwenden auch den Kanal explizit öffnen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidInteractiveInitialization">
      <MemberSignature Language="C#" Value="public bool DidInteractiveInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DidInteractiveInitialization" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.DidInteractiveInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Aufruf bei einer Benutzeroberfläche erfolgte, um Anmeldeinformationen zu erhalten.</summary>
        <value>
          <see langword="true" />, wenn die <see cref="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" />-Methode aufgerufen wird (oder die <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" />-Methode und <see cref="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" />-Methode), andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Vorgänge auf einem <xref:System.ServiceModel.IClientChannel> aufgerufen werden, ohne <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> und <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> aufzurufen, werden diese Methoden automatisch aufgerufen. Weitere Informationen finden Sie unter [beim Zugriff auf Dienste, die mithilfe eines WCF-Clients](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) und <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void DisplayInitializationUI ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisplayInitializationUI() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.DisplayInitializationUI" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ein Aufruf bei einer Benutzeroberfläche, um Anmeldeinformationen zu erhalten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode auf, um eine interaktive Kanalinitialisierung (z.&#160;B. CardSpace-Kartenauswahl) auszulösen. Dies wird automatisch durchgeführt, wenn der Kanal ohne den expliziten Aufruf von <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> verwendet wird. Für viele Anwendungen ist dieser Aufruf daher optional.  
  
 Wenn der Benutzer viel Zeit auf den Auswahlvorgang verwendet, kommt es zu einem Timeout bei dem Vorgang, der den automatischen Aufruf initiiert hat. Um dies zu verhindern, rufen Sie <xref:System.ServiceModel.IClientChannel.DisplayInitializationUI%2A> oder <xref:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI%2A> und <xref:System.ServiceModel.IClientChannel.EndDisplayInitializationUI%2A> explizit auf. Bei diesen Vorgängen kommt es nicht zu einem Timeout. Sie können zudem genau steuern, wo dieses Dialogfeld in der Anwendung angezeigt werden soll.  
  
 Diese Methode ruft ein Dialogfeld nur auf, wenn die Anwendung dementsprechend konfiguriert wurde. Wenn die Anwendung nicht für die Verwendung von CardSpace oder einem anderen interaktiven Kanalinitialisierer konfiguriert wurde, wird dieser Aufruf ohne eine Aktion zurückgegeben.  
  
 Wenn Sie diese Methode explizit aufrufen, müssen Sie vor dem Verwenden auch den Kanal explizit öffnen.  
  
 Weitere Informationen finden Sie unter [beim Zugriff auf Dienste, die mithilfe eines WCF-Clients](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md) und <xref:System.ServiceModel.Dispatcher.IInteractiveChannelInitializer?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDisplayInitializationUI">
      <MemberSignature Language="C#" Value="public void EndDisplayInitializationUI (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDisplayInitializationUI(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.IClientChannel.EndDisplayInitializationUI(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Die <see cref="T:System.IAsyncResult" />.</param>
        <summary>Wird aufgerufen, wenn der Aufruf von <see cref="M:System.ServiceModel.IClientChannel.BeginDisplayInitializationUI(System.AsyncCallback,System.Object)" /> beendet wurde.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnknownMessageReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ServiceModel.UnknownMessageReceivedEventArgs&gt; UnknownMessageReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ServiceModel.UnknownMessageReceivedEventArgs&gt; UnknownMessageReceived" />
      <MemberSignature Language="DocId" Value="E:System.ServiceModel.IClientChannel.UnknownMessageReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ServiceModel.UnknownMessageReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Dies ist ein reserviertes Ereignis.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Via">
      <MemberSignature Language="C#" Value="public Uri Via { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Via" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.IClientChannel.Via" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die URI ab, die die Transportadresse enthält, an die Nachrichten im Clientkanal gesendet werden.</summary>
        <value>Die <see cref="T:System.Uri" />, die die Transportadresse enthält, an die Nachrichten im Kanal gesendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.EndpointAddress> dient als endgültiges Ziel und als physikalische Adresse, wenn kein <xref:System.ServiceModel.IClientChannel.Via%2A> festgelegt ist. Wenn <xref:System.ServiceModel.IClientChannel.Via%2A> festgelegt ist, ist dies die tatsächliche physikalische Adresse, an die die Nachricht gesendet wird und über die die Nachricht laufen muss, um am Ziel einzugehen. Dieser Wert kann aus einer Konfigurationsdatei mithilfe von <xref:System.ServiceModel.Description.ClientViaBehavior?displayProperty=nameWithType> festgelegt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
