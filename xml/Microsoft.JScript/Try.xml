<Type Name="Try" FullName="Microsoft.JScript.Try">
  <TypeSignature Language="C#" Value="public sealed class Try : Microsoft.JScript.AST" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Try extends Microsoft.JScript.AST" />
  <TypeSignature Language="DocId" Value="T:Microsoft.JScript.Try" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.JScript</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.JScript.AST</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Identifiziert Blöcke von Code in die Bereiche für die Fehlerbehandlung ausgeführt. Diese Klasse gehört zur abstract Syntax Tree Kategorie.</summary>
    <remarks>To be added.</remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName="JScriptExceptionValue">
      <MemberSignature Language="C#" Value="public static object JScriptExceptionValue (object e, Microsoft.JScript.Vsa.VsaEngine engine);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object JScriptExceptionValue(object e, class Microsoft.JScript.Vsa.VsaEngine engine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.JScriptExceptionValue(System.Object,Microsoft.JScript.Vsa.VsaEngine)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Object" />
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
      </Parameters>
      <Docs>
        <param name="e">Das Objekt, das die Ausnahme darstellt.</param>
        <param name="engine">Ein Verweis auf das Skriptmodul.</param>
        <summary>Gibt das angegebene Objekt als eine Ausnahme, die Konvertierung zu einem bestimmten <see cref="T:Microsoft.JScript.JScriptException" /> Wenn dies möglich ist.</summary>
        <returns>Die Ausnahme <paramref name="e" />, umgewandelt in ein bestimmtes <see cref="T:Microsoft.JScript.JScriptException" /> Wenn dies möglich ist.</returns>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="PushHandlerScope">
      <MemberSignature Language="C#" Value="public static void PushHandlerScope (Microsoft.JScript.Vsa.VsaEngine engine, string id, int scopeId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PushHandlerScope(class Microsoft.JScript.Vsa.VsaEngine engine, string id, int32 scopeId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.JScript.Try.PushHandlerScope(Microsoft.JScript.Vsa.VsaEngine,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.JScript</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="engine" Type="Microsoft.JScript.Vsa.VsaEngine" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="scopeId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="engine">Ein Verweis auf das Skriptmodul.</param>
        <param name="id">Der Name des Bereichs der der <see langword="try" /> Block.</param>
        <param name="scopeId">Die ID des Bereichs der der <see langword="try" /> Block.</param>
        <summary>Erstellt ein neues <see cref="T:Microsoft.JScript.BlockScope" /> -Objekt für die <see langword="try" /> blockieren und auf den globalen Gültigkeitsbereich bearbeitungsstapel verschoben wird.</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
