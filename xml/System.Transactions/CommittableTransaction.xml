<Type Name="CommittableTransaction" FullName="System.Transactions.CommittableTransaction">
  <TypeSignature Language="C#" Value="public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit CommittableTransaction extends System.Transactions.Transaction implements class System.IAsyncResult, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.CommittableTransaction" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Transactions.Transaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncResult</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Beschreibt eine Transaktion, für die ein Commit ausgeführt werden kann.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Transactions.CommittableTransaction>-Klasse ermöglicht es Anwendungen, Transaktionen explizit zu verwenden, anstatt die <xref:System.Transactions.TransactionScope>-Klasse implizit zu verwenden. Im Unterschied zur <xref:System.Transactions.TransactionScope>-Klasse muss der Autor der Anwendung die <xref:System.Transactions.CommittableTransaction.Commit%2A>-Methode bzw. die <xref:System.Transactions.Transaction.Rollback%2A>-Methode aufrufen, um einen Commit der Transaktion auszuführen oder um sie abzubrechen. Die Transaktion kann jedoch nur der Ersteller einer Transaktion übergeben werden. Kopien der Transaktion ein Commit ausgeführt werden kann, deshalb erhalten, über die <xref:System.Transactions.Transaction.Clone%2A> Methode sind nicht in der Commit ausgeführt werden kann.  
  
> [!NOTE]
>  Wir empfehlen das Erstellen von impliziter Transaktionen, die mithilfe der <xref:System.Transactions.TransactionScope> Klasse, sodass der Kontext der ambient-Transaktion automatisch für Sie verwaltet wird. Verwenden Sie zudem die <xref:System.Transactions.TransactionScope> und <xref:System.Transactions.DependentTransaction> Klasse für Anwendungen, die die Verwendung der gleichen Transaktion über mehrere Funktionsaufrufe oder Aufrufe von mehreren Threads erfordern. Weitere Informationen zu diesem Modell finden Sie unter der [implementieren eine implizite Transaktion mithilfe von Transaktionsbereich](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) Thema.  
  
 Erstellen einer <xref:System.Transactions.CommittableTransaction> nicht automatisch die Ambiente-Transaktion, also den Code, in ausführt der Transaktion festgelegt. Sie können abrufen oder festlegen die Ambiente-Transaktion durch Aufrufen der statischen <xref:System.Transactions.Transaction.Current%2A?displayProperty=nameWithType> Eigenschaft des globalen <xref:System.Transactions.Transaction> Objekt. Weitere Informationen zu ambient-Transaktionen finden Sie im Abschnitt "Verwalten des Transaktionsflusses mithilfe von TransactionScopeOption" die [implementieren eine implizite Transaktion mithilfe von Transaktionsbereich](~/docs/framework/data/transactions/implementing-an-implicit-transaction-using-transaction-scope.md) Thema. Wenn die Ambiente-Transaktion nicht festgelegt ist, ist jeder Vorgang in einem Ressourcenmanager nicht Teil dieser Transaktion. Sie müssen explizit festlegen und Zurücksetzen der ambient-Transaktions um sicherzustellen, dass die Ressourcen-Manager die richtigen bereits verwendeten Transaktionskontext ausgeführt werden.  
  
 Bis eine <xref:System.Transactions.CommittableTransaction> wurde bereits ein Commit ausgeführt wurde, werden weiterhin alle Ressourcen, die mit der Transaktion beteiligten gesperrt.  
  
 Ein <xref:System.Transactions.CommittableTransaction>-Objekt kann nicht wiederverwendet werden. Nachdem sie ein Commit oder Rollback wurde, kann nicht erneut verwendet werden, in einer Transaktion oder als der aktuelle Kontext der ambient-Transaktion festgelegt.  
  
   
  
## Examples  
 Im folgende Beispiel erstellt zwei neue Instanzen von <xref:System.Transactions.CommittableTransaction>, ein Commit ausgeführt wird, und werden.  
  
  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Transactions.CommittableTransaction" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt eine neue Instanz der <xref:System.Transactions.CommittableTransaction> und führt einen Commit für sie.  
  
 [!code-csharp[Tx_CommittableTx#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_committabletx/cs/committabletxwithsql.cs#1)]
 [!code-vb[Tx_CommittableTx#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_committabletx/vb/committabletxwithsql.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Fehler beim Erstellen einer Transaktions unter Windows 98, Windows 98 Second Edition oder Windows Millennium Edition.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">Die maximale Zeitdauer, die die Transaktion vorhanden sein kann, bevor er abgebrochen wird.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Transactions.CommittableTransaction" />-Klasse mit dem angegebenen <paramref name="timeout" />-Wert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">Fehler beim Erstellen einer Transaktions unter Windows 98, Windows 98 Second Edition oder Windows Millennium Edition.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CommittableTransaction (System.Transactions.TransactionOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="System.Transactions.TransactionOptions" />
      </Parameters>
      <Docs>
        <param name="options">Ein <see cref="T:System.Transactions.TransactionOptions" /> Struktur, die die Transaktionsoptionen für die neue Transaktion beschreibt.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Transactions.CommittableTransaction" /> -Klasse mit den Optionen für die angegebene Transaktion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel erstellt eine neue Instanz der <xref:System.Transactions.CommittableTransaction> mit Optionen, und abgebrochen.  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">Fehler beim Erstellen einer Transaktions unter Windows 98, Windows 98 Second Edition oder Windows Millennium Edition.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginCommit">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCommit (AsyncCallback callback, object user_defined_state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCommit(class System.AsyncCallback callback, object user_defined_state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="user_defined_state">To be added.</param>
        <summary>Startet einen Versuch eines Commits die Transaktion asynchron.</summary>
        <returns>Ein <see cref="T:System.IAsyncResult" /> Schnittstelle, die vom Aufrufer zum Überprüfen des Status des asynchronen Vorgangs, oder warten, bis zum Abschluss des Vorgangs verwendet werden kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt sofort vor dem Abschluss der Transaktion. Die Transaktion führt anschließend einen Commit in einem anderen Thread und die `asyncCallback` Delegat wird aufgerufen, wenn er abgeschlossen wurde. Nachdem diese Methode aufgerufen wird, erhalten Sie keine das Ergebnis der Transaktion bis zum Aufruf von <xref:System.Transactions.CommittableTransaction.EndCommit%2A>.  
  
> [!NOTE]
>  Das Commit möglicherweise synchron in den Aufruf dieser Methode abzuschließen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.Commit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Versucht, die Transaktion ein Commit ausgeführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode aufgerufen wird, wird alle Objekte, die registriert haben, für die Einbeziehung in die Transaktion abgerufen werden, können ihre Stimme auf ein commit oder ein Rollback der Transaktion unabhängig angeben. Wenn sich ein Teilnehmer bestimmt, ob für die Transaktion ein Rollback auszuführen, wird ein Rollback und löst diese Methode eine <xref:System.Transactions.TransactionException> Ausnahme. Dies ist ein normales Verhalten für eine Transaktion und Ihren Code abgefangen und verarbeitet Sie solche Ausnahmen werden sollte.  
  
 <xref:System.Transactions.CommittableTransaction.Commit%2A>und <xref:System.Transactions.CommittableTransaction.EndCommit%2A> blockieren, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist. Die erste Phase nach der alle Ressourcen-Manager beendet und Eintragungen in der Transaktion für das Transaktionsergebnis gewählt haben und die <xref:System.Transactions.TransactionManager> hat dauerhaft entschieden, einen commit oder Abbruch der Transaktion. Die zweite Phase der Verarbeitung ist immer asynchron. Daher besteht keine Garantie, dass Daten nur von innerhalb einer bestimmten Transaktion ein Commit unmittelbar danach zur Verfügung stehen, wenn eine andere Transaktion nicht verwenden, um diese Daten anzuzeigen.  
  
 Da diese Methode blockiert, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist, ist Sie äußerst vorsichtig sein sollte bei Verwendung dieser Methode in einer Windows Form (WinForm)-Anwendung oder ein Deadlock auftreten können. Wenn Sie diese Methode eine WinForm-Steuerelement-Ereignis (z. B. auf eine Schaltfläche) aufrufen, und verwenden Sie die synchrone <xref:System.Windows.Forms.Control.Invoke%2A> Methode, um das Steuerelement zum Ausführen einiger Aufgaben Benutzeroberfläche (z. B. Farben zu ändern), während der Verarbeitung der Transaktions leiten eine Deadlock erfolgt. Grund hierfür ist die <xref:System.Windows.Forms.Control.Invoke%2A> Methode erfolgt synchron, und den Thread blockiert, bis im UI-Thread seine Aufgabe abgeschlossen ist. In diesem Szenario im UI-Thread jedoch auch wartet der Arbeitsthread eines Commits die Transaktion auf. Das Ergebnis ist, dass keine zu fortfahren können, und der Bereich wartet unbegrenzt des Commits abgeschlossen. Verwenden Sie <xref:System.Windows.Forms.Control.BeginInvoke%2A> statt <xref:System.Windows.Forms.Control.Invoke%2A> möglich, da es sich um asynchron und daher weniger anfällig für Deadlocks handelt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionInDoubtException">
          <see cref="M:System.Transactions.CommittableTransaction.Commit" />für eine Transaktion und der Transaktion aufgerufen wird <see cref="F:System.Transactions.TransactionStatus.InDoubt" />.</exception>
        <exception cref="T:System.Transactions.TransactionAbortedException">
          <see cref="M:System.Transactions.CommittableTransaction.Commit" />wird aufgerufen, und die Transaktion ein Rollback zum ersten Mal.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndCommit">
      <MemberSignature Language="C#" Value="public void EndCommit (IAsyncResult ar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCommit(class System.IAsyncResult ar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="ar">To be added.</param>
        <summary>Einen Versuch asynchron eines Commits die Transaktion beendet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie sollten diese Methode aufrufen, in der Rückrufdelegat, der als Parameter an die <xref:System.Transactions.CommittableTransaction.BeginCommit%2A> Methode, wenn Sie alle zugeordneten asynchronen Commit Bereinigungen abgeschlossen haben. Sie können diese Methode auch frühe aufrufen, ohne zu warten, für den Delegaten. Wenn nach der Zeit, die Sie diese Methode aufrufen, die Transaktion nicht abgeschlossen wurde, wird dessen Abschluss dieser Methode wartet.  
  
> [!CAUTION]
>  Die <xref:System.IAsyncResult.CompletedSynchronously%2A> von zurückgegebene Eigenschaft `asyncResult` ist immer `false`, selbst wenn der Vorgang synchron abgeschlossen wurde.  
  
 <xref:System.Transactions.CommittableTransaction.Commit%2A>und <xref:System.Transactions.CommittableTransaction.EndCommit%2A> blockieren, bis die erste Phase der transaktionsverarbeitung abgeschlossen ist. Die erste Phase nach der alle Ressourcen-Manager beendet und Eintragungen in der Transaktion für das Transaktionsergebnis gewählt haben und die <xref:System.Transactions.TransactionManager> hat dauerhaft entschieden, einen commit oder Abbruch der Transaktion. Die zweite Phase der Verarbeitung ist immer asynchron. Daher besteht keine Garantie, dass Daten nur von innerhalb einer bestimmten Transaktion ein Commit unmittelbar danach zur Verfügung stehen, wenn eine andere Transaktion nicht verwenden, um diese Daten anzuzeigen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Transactions.TransactionAbortedException">
          <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" />wird aufgerufen, und die Transaktion ein Rollback zum ersten Mal.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncState">
      <MemberSignature Language="C#" Value="object System.IAsyncResult.AsyncState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.IAsyncResult.AsyncState" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Objekt, das als letzter Parameter des bereitgestellten der <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> -Methodenaufruf.</summary>
        <value>Das Objekt, das als letzter Parameter des bereitgestellten der <see cref="M:System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)" /> -Methodenaufruf.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.AsyncWaitHandle">
      <MemberSignature Language="C#" Value="System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.WaitHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen <see cref="T:System.Threading.WaitHandle" /> ab, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</summary>
        <value>Ein <see cref="T:System.Threading.WaitHandle" />, der verwendet wird, um auf den Abschluss eines asynchronen Vorgangs zu warten.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.CompletedSynchronously">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.CompletedSynchronously { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.CompletedSynchronously" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Angabe darüber, ob der asynchrone Commitvorgang synchron abgeschlossen wurde.</summary>
        <value>
          <see langword="true" />Wenn der asynchrone Commitvorgang synchron abgeschlossen wurde; andernfalls <see langword="false" />. Gibt diese Eigenschaft immer <see langword="false" /> , selbst wenn der Vorgang synchron abgeschlossen wurde.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IAsyncResult.IsCompleted">
      <MemberSignature Language="C#" Value="bool System.IAsyncResult.IsCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.IAsyncResult.IsCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, ob der asynchrone Commitvorgang abgeschlossen wurde.</summary>
        <value>
          <see langword="true" />Wenn der Vorgang abgeschlossen ist; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.CommittableTransaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
