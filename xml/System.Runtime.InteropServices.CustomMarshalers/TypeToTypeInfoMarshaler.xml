<Type Name="TypeToTypeInfoMarshaler" FullName="System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler">
  <TypeSignature Language="C#" Value="public class TypeToTypeInfoMarshaler : System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeToTypeInfoMarshaler extends System.Object implements class System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler" />
  <AssemblyInfo>
    <AssemblyName>CustomMarshalers</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices.ICustomMarshaler</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Marshallt den nicht verwalteten <see langword="ITypeInfo" /> Schnittstelle, um die verwaltete <see cref="T:System.Type" /> Klasse, und die verwaltete marshallt <see cref="T:System.Type" /> Klasse, um die nicht verwaltete <see langword="ITypeInfo" /> Schnittstelle.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ITypeInfo` Schnittstelle verfügbar gemacht, für ein .NET-Typ, ein basiert auf die Metadaten, die in einer exportierten Typbibliothek angezeigt werden würden. Entsprechend der <xref:System.Type> Instanz verfügbar gemacht, für eine `ITypeInfo` Schnittstelle basiert darauf, dass die Metadaten, die in einer importierten Assembly angezeigt werden würden.  
  
 Die Markierungen Type Library Importer-Tool (Tlbimp.exe) `ITypeInfo` Parameter mit dem entsprechenden <xref:System.Runtime.InteropServices.MarshalAsAttribute> mit der <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler> Enumerationsmember beim Konvertieren von Signaturen, mit denen `ITypeInfo` Signaturen, die Parameter <xref:System.Type> Parameter.  
  
 Die gleiche Funktionalität für die Konvertierung kann ohne den benutzerdefinierten Marshaller erreicht werden, durch den Aufruf <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> und <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpManagedData (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpManagedData(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj">Das verwaltete Objekt zerstört werden.</param>
        <summary>Führt erforderlichen Cleanup der verwalteten Daten, wenn er nicht mehr benötigt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die CLR ruft diese Methode zum Bereinigen von verwaltete Daten, die der <xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public virtual void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Ein Zeiger auf nicht verwalteten Daten, die gelöscht werden.</param>
        <summary>Führt erforderlichen Cleanup der nicht verwalteten Daten, wenn er nicht mehr benötigt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die CLR ruft diese Methode zum Bereinigen nicht verwalteten Daten die <xref:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.ICustomMarshaler GetInstance (string pstrCookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.InteropServices.ICustomMarshaler GetInstance(string pstrCookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetInstance(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.ICustomMarshaler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pstrCookie" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pstrCookie">Zeichenfolge "Cookie"-Parameter, der vom benutzerdefinierten Marshaller verwendet werden kann.</param>
        <summary>Gibt eine Instanz des benutzerdefinierten Marshaller zurück.</summary>
        <returns>Eine Instanz des benutzerdefinierten Marshaller.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle benutzerdefinierten Marshaller müssen diese Methode implementieren, obwohl es nicht Teil der <xref:System.Runtime.InteropServices.ICustomMarshaler> Schnittstellendefinition.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public virtual int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.GetNativeDataSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die Größe in Bytes, der nicht verwalteten Daten, die gemarshallt werden.</summary>
        <returns>1, um anzugeben, den diese Marshaller behandelt den Typ ist ein Werttyp.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da benutzerdefinierte Marshalling von Werttypen in .NET Framework nicht unterstützt wird, gibt diese Methode immer-1 zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public virtual IntPtr MarshalManagedToNative (object pManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object pManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pManagedObj">Das verwaltete Objekt konvertiert werden.</param>
        <summary>Ein Objekt aus verwaltetem Code zu nicht verwaltetem Code marshallt.</summary>
        <returns>Ein Zeiger auf das nicht verwaltete Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die CLR ruft diese Methode mit der angegebenen Instanz eines verwalteten Objekts das Objekt aus verwaltetem Code an nicht verwalteten Code zu konvertieren, und es gibt einen Zeiger auf die entsprechende nicht verwaltete Objekte, die die COM-Ansicht des Objekts darstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pManagedObj" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public virtual object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.CustomMarshalers.TypeToTypeInfoMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>CustomMarshalers</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Ein Zeiger auf das nicht verwaltete Objekt konvertiert werden.</param>
        <summary>Ein Objekt aus nicht verwaltetem Code an verwalteten Code marshallt.</summary>
        <returns>Ein verwaltetes Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die CLR ruft diese Methode mit dem angegebenen Zeiger auf ein nicht verwaltetes Objekt dieses Objekt aus nicht verwaltetem Code zu verwaltetem Code zu konvertieren, und gibt ein verwaltetes Objekt, das die verwaltete Ansicht von nicht verwalteten Daten darstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="pNativeData" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
