<Type Name="DrawingAttributes" FullName="System.Windows.Ink.DrawingAttributes">
  <TypeSignature Language="C#" Value="public class DrawingAttributes : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DrawingAttributes extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Ink.DrawingAttributes" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Gibt die Darstellung eines <see cref="T:System.Windows.Ink.Stroke" /> an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A> Eigenschaft zur Angabe von Einstellungen wie z. B. Farbe, Breite, Transparenz und die Form des Tablettstifts Tipps für eine <xref:System.Windows.Ink.Stroke>.  
  
 Verwenden der <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> -Eigenschaft an die Zeichnungsattribute für die Striche hinzugefügt, um eine <xref:System.Windows.Controls.InkCanvas>. Einzige Striche, die nach hinzugefügt werden die <xref:System.Windows.Controls.InkCanvas.DefaultDrawingAttributes%2A> unterzogen werden Änderung Anzeigen der aktualisierten Attribute. Die Darstellung der Striche, die bereits auf dem <xref:System.Windows.Controls.InkCanvas> ändert sich nicht.  
  
 Eine Liste der anfänglichen Eigenschaftenwerte für eine Instanz der <xref:System.Windows.Ink.DrawingAttributes>-Klasse finden Sie im <xref:System.Windows.Ink.DrawingAttributes>-Konstruktor.  
  
<a name="xamlTextUsage_DrawingAttributes"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Klasse wird in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte zum Simulieren eines Stiftes und eine Hervorhebung verwenden, auf dem gleichen <xref:System.Windows.Controls.InkCanvas>. Im Beispiel wird vorausgesetzt, das Stammelement in der XAML-Datei ist eine <xref:System.Windows.Controls.DockPanel> aufgerufen `root`. Außerdem wird angenommen, dass es ist ein <xref:System.Windows.Controls.Button> aufgerufen `switchHighlighter` und dass die <xref:System.Windows.Controls.Primitives.ButtonBase.Click> Ereignis an den Ereignishandler, die in diesem Beispiel definierte verbunden ist.  
  
 [!code-csharp[DrawingAttributes#3](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#3)]
 [!code-vb[DrawingAttributes#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DrawingAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Ink.DrawingAttributes" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der folgenden Tabelle werden anfängliche Eigenschaftswerte für eine Instanz der <xref:System.Windows.Ink.DrawingAttributes>-Klasse aufgeführt.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|<xref:System.Windows.Ink.DrawingAttributes.Color%2A>|Schwarz|  
|<xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.Height%2A>|2 geräteunabhängige Pixel (DIP)|  
|<xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>|`false`|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>|<xref:System.Windows.Ink.StylusTip?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>|<xref:System.Windows.Media.Matrix.Identity%2A?displayProperty=nameWithType>|  
|<xref:System.Windows.Ink.DrawingAttributes.Width%2A>|2 DIP-ADRESSE|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPropertyData">
      <MemberSignature Language="C#" Value="public void AddPropertyData (Guid propertyDataId, object propertyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPropertyData(valuetype System.Guid propertyDataId, object propertyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.AddPropertyData(System.Guid,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
        <Parameter Name="propertyData" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" /> , die benutzerdefinierte Eigenschaft zugeordnet werden soll.</param>
        <param name="propertyData">Der Wert der benutzerdefinierten Eigenschaft. <c>PropertyData</c> muss vom Typ <see cref="T:System.Char" />, <see cref="T:System.Byte" />, <see cref="T:System.Int16" />, <see cref="T:System.UInt16" />, <see cref="T:System.Int32" />, <see cref="T:System.UInt32" />, <see cref="T:System.Int64" />, <see cref="T:System.UInt64" />, <see cref="T:System.Single" />, <see cref="T:System.Double" />, <see cref="T:System.DateTime" />, <see cref="T:System.Boolean" />, <see cref="T:System.String" />, <see cref="T:System.Decimal" /> oder ein Array dieser Daten ist es jedoch ein Array des Typs sein kann nicht <see cref="T:System.String" />.</param>
        <summary>Fügt eine benutzerdefinierte Eigenschaft, die <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Ink.DrawingAttributes.AddPropertyData%2A> Methode ermöglicht es Ihnen, benutzerdefinierte Eigenschaften zum Hinzufügen einer <xref:System.Windows.Ink.DrawingAttributes> Objekt. Dies ist hilfreich, wenn Sie eigene Striche rendern und zusätzlichen Informationen bereitstellen möchten.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Hinzufügen und Abrufen einer benutzerdefinierten Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Im Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist, einem Stift oder einem Hervorhebung. Der Code in der `ChangeColors_Click` Ereignishandler rendert eine neue Farbe für Striche auf die <xref:System.Windows.Controls.InkCanvas> , bei denen die <xref:System.Windows.Ink.DrawingAttributes> -Objekt, `inkDA`. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="propertyData" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" /> ist eine leere <see cref="T:System.Guid" />.  
  
 - oder -   
  
 <paramref name="propertyData" />ist keiner der zulässigen Datentypen aufgeführt, die der <see langword="Parameters" /> Abschnitt.</exception>
      </Docs>
    </Member>
    <Member MemberName="AttributeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler AttributeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Eigenschaft in der <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekts ändert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel verarbeitet die <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> Ereignis. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Ink.DrawingAttributes> bezeichnetes Objekt `inkDA` und dass die <xref:System.Windows.Ink.DrawingAttributes.AttributeChanged> Ereignis an den Ereignishandler, die in diesem Beispiel definierte verbunden ist.  
  
 [!code-csharp[DrawingAttributes#6](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#6)]
 [!code-vb[DrawingAttributes#6](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Ink.DrawingAttributes Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Ink.DrawingAttributes Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.DrawingAttributes</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kopiert die <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</summary>
        <returns>Eine Kopie der <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Ink.DrawingAttributes.Clone%2A> Methode erstellt ein neues <xref:System.Windows.Ink.DrawingAttributes> Objekt, und füllt sie mit die gleichen Werte wie das aktuelle Objekt. Benutzerdefinierten Eigenschaften werden ebenfalls kopiert.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Kopieren einer <xref:System.Windows.Ink.DrawingAttributes> Objekt.  
  
 [!code-csharp[DrawingAttributes#8](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#8)]
 [!code-vb[DrawingAttributes#8](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Farbe des eine <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Die Farbe des eine <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_Color"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Color%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsPropertyData">
      <MemberSignature Language="C#" Value="public bool ContainsPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.ContainsPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" /> , suchen Sie in der <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</param>
        <summary>Gibt einen Wert, der angibt, ob der Bezeichner für die angegebenen Daten in ist die <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</summary>
        <returns>
          <see langword="true" />Wenn ist der Bezeichner für die angegebenen Daten in der <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel veranschaulicht das Hinzufügen und Abrufen einer benutzerdefinierten Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Im Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist, einem Stift oder einem Hervorhebung. Die `ChangeColors_Click` Ereignishandler ändert alle Striche, die eingefügt werden, auf die <xref:System.Windows.Controls.InkCanvas> mit einem <xref:System.Windows.Ink.DrawingAttributes> aufgerufen `inkDA` auf eine neue Farbe. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">Die <see cref="T:System.Windows.Ink.DrawingAttributes" /> mit der aktuellen zu vergleichende Objekt <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt gleich der aktuellen <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</summary>
        <returns>
          <see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind gleich, wenn die folgenden Eigenschaften gleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.Equals%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften auf Gleichheit.  
  
   
  
## Examples  
 Im folgenden Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> -Objekte auf Gleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften auf `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute are gleich" angezeigt werden.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#12](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#12)]
[!code-vb[DrawingAttributes#12](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FitToCurve">
      <MemberSignature Language="C#" Value="public bool FitToCurve { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FitToCurve" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.FitToCurve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob Bézier-Glättung, zum Rendern verwendet wird der <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>
          <see langword="true" />Verwenden Sie glätten für das Rendern von Bézier der <see cref="T:System.Windows.Ink.Stroke" />andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_FitToCurve"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für einen besonderen Typ.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Object" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyData">
      <MemberSignature Language="C#" Value="public object GetPropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetPropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" /> abzurufenden benutzerdefinierten Eigenschaft zugeordnet.</param>
        <summary>Ruft den Wert der benutzerdefinierten Eigenschaft mit dem angegebenen verknüpften <see cref="T:System.Guid" />.</summary>
        <returns>Der Wert der benutzerdefinierten Eigenschaft mit dem angegebenen verknüpften <see cref="T:System.Guid" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A> Methode, um benutzerdefinierte Eigenschaften zuzugreifen, Sie hinzugefügt, um haben, eine <xref:System.Windows.Ink.DrawingAttributes> Objekt. <xref:System.Windows.Ink.DrawingAttributes.GetPropertyData%2A>Gibt den Standardwert für die integrierte Eigenschaft zurück, wenn ein Wert nicht festgelegt wurde.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Hinzufügen und Abrufen einer benutzerdefinierten Eigenschaft aus der <xref:System.Windows.Ink.DrawingAttributes> Objekt. Im Beispiel fügt eine Eigenschaft, der angibt, ob die <xref:System.Windows.Ink.DrawingAttributes> Objekt ist, einem Stift oder einem Hervorhebung. Der Code in der `ChangeColors_Click` Ereignishandler rendert eine neue Farbe für Striche auf die <xref:System.Windows.Controls.InkCanvas> , bei denen die <xref:System.Windows.Ink.DrawingAttributes> -Objekt, `inkDA`. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> mit dem Namen `inkCanvas1`, und es gibt zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte, die mit dem Namen `inkDA`, und`highlighterDA.`  
  
 [!code-csharp[DrawingAttributes#5](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#5)]
 [!code-vb[DrawingAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />ist nicht mit einer benutzerdefinierten Eigenschaft verknüpft die <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyDataIds">
      <MemberSignature Language="C#" Value="public Guid[] GetPropertyDataIds ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Guid[] GetPropertyDataIds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.GetPropertyDataIds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt die GUIDs der zugeordneten benutzerdefinierten Eigenschaften der <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <returns>Ein Array vom Typ <see cref="T:System.Guid" /> , Eigenschaftsbezeichner Daten darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die GUIDs für die integrierten Eigenschaften der <xref:System.Windows.Ink.DrawingAttributes> Klasse befinden sich in der <xref:System.Windows.Ink.DrawingAttributeIds> Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die Daten aus Eigenschaftenbezeichner der <xref:System.Windows.Ink.DrawingAttributes> Objekt. In diesem Beispiel wird vorausgesetzt, dass ein <xref:System.Windows.Ink.DrawingAttributes> aufgerufen `inkDA` deklariert wurde.  
  
 [!code-csharp[DrawingAttributes#7](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#7)]
 [!code-vb[DrawingAttributes#7](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Höhe des Tablettstifts verwendet, um das Zeichnen der <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Der Wert, der die Höhe des Tablettstifts zum Zeichnen verwendete gibt an die <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgenden Faktoren beeinflussen die Höhe und Breite des eine <xref:System.Windows.Ink.Stroke> beim Rendern, aber nicht der Wert für die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft.  
  
-   Druck auf den Tablettstift angewendet, wenn die <xref:System.Windows.Ink.Stroke> gezeichnet wird.  
  
-   Der Wert der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>-Eigenschaft.  
  
 Wenn Sie festlegen, die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft auf 0 geräteunabhängige Pixel (DIP), wird er in 2 DIP geändert.  
  
<a name="xamlTextUsage_Height"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> -Eigenschaft ist kleiner als <see cref="F:System.Double.Epsilon" /> oder <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IgnorePressure">
      <MemberSignature Language="C#" Value="public bool IgnorePressure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnorePressure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IgnorePressure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die Stärke eines gerenderten <see cref="T:System.Windows.Ink.Stroke" /> ändert sich entsprechend der Druck angewendet.</summary>
        <value>
          <see langword="true" />um anzugeben, dass die Stärke des Strichs einheitlich ist. <see langword="false" /> gibt an, dass die Stärke eines gerenderten <see cref="T:System.Windows.Ink.Stroke" /> erhöht, wenn der Druck erhöht wird. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_IgnorePressure"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHighlighter">
      <MemberSignature Language="C#" Value="public bool IsHighlighter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHighlighter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.IsHighlighter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die <see cref="T:System.Windows.Ink.Stroke" /> sieht wie ein Hervorhebung.</summary>
        <value>
          <see langword="true" />zum Rendern der <see cref="T:System.Windows.Ink.Stroke" /> als eine Hervorhebung; anderenfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> -Eigenschaftensatz auf `true`, die <xref:System.Windows.Ink.Stroke> ist etwas transparent, sodass die darunter liegenden Striche angezeigt werden.  
  
<a name="xamlTextUsage_IsHighlighter"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public static readonly double MaxHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, der größte zulässige Wert für die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MaxHeight> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässig ist die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Führen Sie dies aus, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt, dass die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft von der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public static readonly double MaxWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MaxWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, der größte zulässige Wert für die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MaxWidth> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässig ist die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Führen Sie dies aus, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt, dass die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft von der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public static readonly double MinHeight;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinHeight" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinHeight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das kleinste zulässigen Wert für die <see cref="P:System.Windows.Ink.DrawingAttributes.Height" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MinHeight> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässig ist die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft. Führen Sie dies aus, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt, dass die <xref:System.Windows.Ink.DrawingAttributes.Height%2A> Eigenschaft von der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#14](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#14)]
 [!code-vb[DrawingAttributes#14](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public static readonly double MinWidth;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly float64 MinWidth" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Ink.DrawingAttributes.MinWidth" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt das kleinste zulässigen Wert für die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.MinWidth> Feld zu überprüfen, ob ein Wert innerhalb der Grenzwerte für zulässig ist die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Führen Sie dies aus, wenn der Wert aus einer unbekannten Quelle, z. B. uneingeschränkte Benutzereingaben stammt.  
  
   
  
## Examples  
 Im folgende Beispiel wird sichergestellt, dass die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft von der <xref:System.Windows.Ink.DrawingAttributes> auf einen gültigen Wert festgelegt ist. In diesem Beispiel wird davon ausgegangen, dass es ist ein <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`.  
  
 [!code-csharp[DrawingAttributes#15](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#15)]
 [!code-vb[DrawingAttributes#15](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAttributeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAttributeChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAttributeChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Ink.DrawingAttributes.AttributeChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen.  
  
 Mit der <xref:System.Windows.Ink.DrawingAttributes.OnAttributeChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> rufen Sie in einer abgeleiteten Klasse die <see cref="M:System.Windows.Ink.DrawingAttributes.OnAttributeChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> Methode für die Basisklasse aus, um sicherzustellen, dass registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">EventArgs</param>
        <summary>Tritt auf, wenn alle <see cref="T:System.Windows.Ink.DrawingAttributes" /> -Eigenschaft ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyDataChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyDataChanged (System.Windows.Ink.PropertyDataChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyDataChanged(class System.Windows.Ink.PropertyDataChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Ink.PropertyDataChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Ink.PropertyDataChangedEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen.  
  
 Mit der <xref:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="e" /> ist <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> rufen Sie in einer abgeleiteten Klasse die <see cref="M:System.Windows.Ink.DrawingAttributes.OnPropertyDataChanged(System.Windows.Ink.PropertyDataChangedEventArgs)" /> Methode für die Basisklasse aus, um sicherzustellen, dass registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Equality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <param name="second">Das zweite zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Windows.Ink.DrawingAttributes" /> -Objekte gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Objekte gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind gleich, wenn die folgenden Eigenschaften gleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.op_Equality%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften auf Gleichheit.  
  
 Die entsprechende Methode für diesen Operator ist <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 Im folgenden Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> -Objekte auf Gleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften auf `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute are gleich" angezeigt werden.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#11](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#11)]
[!code-vb[DrawingAttributes#11](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Ink.DrawingAttributes first, System.Windows.Ink.DrawingAttributes second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Ink.DrawingAttributes first, class System.Windows.Ink.DrawingAttributes second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.op_Inequality(System.Windows.Ink.DrawingAttributes,System.Windows.Ink.DrawingAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="System.Windows.Ink.DrawingAttributes" />
        <Parameter Name="second" Type="System.Windows.Ink.DrawingAttributes" />
      </Parameters>
      <Docs>
        <param name="first">Das erste zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <param name="second">Das zweite zu vergleichende <see cref="T:System.Windows.Ink.DrawingAttributes" />-Objekt.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Windows.Ink.DrawingAttributes" /> -Objekte ungleich sind.</summary>
        <returns>
          <see langword="true" />Wenn die Objekte nicht gleich sind; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte sind nicht gleich, wenn die folgenden Eigenschaften ungleich sind:  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Color%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.FitToCurve%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Height%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IgnorePressure%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.IsHighlighter%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>  
  
-   <xref:System.Windows.Ink.DrawingAttributes.Width%2A>  
  
> [!NOTE]
>  Die <xref:System.Windows.Ink.DrawingAttributes.op_Inequality%2A> Methode überprüft nicht die benutzerdefinierten Eigenschaften auf Gleichheit.  
  
 Die entsprechende Methode für diesen Operator ist die Negation des <xref:System.Windows.Ink.DrawingAttributes.Equals%2A?displayProperty=nameWithType>.  
  
## Examples  
 Im folgenden Beispiel werden zwei <xref:System.Windows.Ink.DrawingAttributes> -Objekte auf Ungleichheit. Da die <xref:System.Windows.Ink.DrawingAttributes.Color%2A>, <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A>, <xref:System.Windows.Ink.DrawingAttributes.Height%2A>, und <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaften auf `attributes1` und `attributes2` festgelegt auf die gleichen Werte, die Meldung "Die Zeichnungsattribute are gleich" angezeigt werden.  
  
 [!code-csharp[DrawingAttributes#10](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#10)]
 [!code-vb[DrawingAttributes#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#10)]  
[!code-csharp[DrawingAttributes#13](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#13)]
[!code-vb[DrawingAttributes#13](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyDataChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Ink.PropertyDataChangedEventHandler PropertyDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Ink.DrawingAttributes.PropertyDataChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.PropertyDataChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn Eigenschaftsdaten hinzugefügt oder entfernt aus der <see cref="T:System.Windows.Ink.StrokeCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel ist Teil eines benutzerdefinierten Strichs, das einen dreidimensionalen Effekt zeichnen können. Der Strich definiert und speichert eine benutzerdefinierte Eigenschaft mit dem Namen `Shadowed`, gehört der <xref:System.Windows.Ink.Stroke.DrawingAttributes%2A>. Wenn die `Shadowed` eigenschaftenänderungen, die <xref:System.Windows.Ink.DrawingAttributes.PropertyDataChanged> Ereignishandleraufrufe die <xref:System.Windows.Ink.Stroke.OnInvalidated%2A> -Methode, die bewirkt, dass den Strich neu gezeichnet wird.  
  
 [!code-csharp[StrokeCollectionShadow#1](~/samples/snippets/csharp/VS_Snippets_Wpf/StrokeCollectionShadow/CSharp/CustomRenderedStroke.cs#1)]
 [!code-vb[StrokeCollectionShadow#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StrokeCollectionShadow/VisualBasic/CustomRenderedStroke.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePropertyData">
      <MemberSignature Language="C#" Value="public void RemovePropertyData (Guid propertyDataId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemovePropertyData(valuetype System.Guid propertyDataId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Ink.DrawingAttributes.RemovePropertyData(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyDataId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="propertyDataId">Die <see cref="T:System.Guid" /> verknüpft sind, mit der benutzerdefinierten Eigenschaft entfernen.</param>
        <summary>Entfernt die benutzerdefinierte Eigenschaft mit dem angegebenen verknüpften <see cref="T:System.Guid" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie entfernen Sie eine benutzerdefinierte Eigenschaft aus einem <xref:System.Windows.Ink.DrawingAttributes> Objekt.  
  
 [!code-csharp[DrawingAttributes#9](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#9)]
 [!code-vb[DrawingAttributes#9](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="propertyDataId" />ist nicht mit einer benutzerdefinierten Eigenschaft verknüpft die <see cref="T:System.Windows.Ink.DrawingAttributes" /> Objekt.</exception>
      </Docs>
    </Member>
    <Member MemberName="StylusTip">
      <MemberSignature Language="C#" Value="public System.Windows.Ink.StylusTip StylusTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Ink.StylusTip StylusTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Ink.StylusTip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Form des Tablettstifts verwendet, um das Zeichnen der <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Einer der <see cref="T:System.Windows.Ink.StylusShape" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_StylusTip"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.StylusTip%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylusTipTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Matrix StylusTipTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.Matrix StylusTipTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die <see cref="T:System.Windows.Media.Matrix" /> , die die Transformation zum Ausführen für Spitze des Tablettstifts angibt.</summary>
        <value>Ein <see cref="T:System.Windows.Media.Matrix" /> , die die Transformation zum Ausführen für Spitze des Tablettstifts angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> Eigenschaft drehen, neigen oder Skalieren der Tablettstiftspitze.  
  
<a name="xamlTextUsage_StylusTipTransform"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Matrix festgelegt <see cref="P:System.Windows.Ink.DrawingAttributes.StylusTipTransform" /> ist keine invertierbare Matrix.  
  
 - oder -   
  
 Die <see cref="P:System.Windows.Media.Matrix.OffsetX" /> oder <see cref="P:System.Windows.Media.Matrix.OffsetY" /> -Eigenschaft der Matrix ist nicht 0 (null).</exception>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Ink.DrawingAttributes.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Breite des Tablettstifts verwendet, um das Zeichnen der <see cref="T:System.Windows.Ink.Stroke" />.</summary>
        <value>Die Breite des Tablettstifts verwendet, um das Zeichnen der <see cref="T:System.Windows.Ink.Stroke" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die folgenden Faktoren beeinflussen die Höhe und Breite des eine <xref:System.Windows.Ink.Stroke> beim Rendern, aber nicht der Wert für die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft.  
  
-   Druck auf den Tablettstift angewendet, wenn die <xref:System.Windows.Ink.Stroke> gezeichnet wird.  
  
-   Der Wert der <xref:System.Windows.Ink.DrawingAttributes.StylusTipTransform%2A>-Eigenschaft.  
  
 Wenn Sie festlegen, die <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft auf 0 geräteunabhängige Pixel (DIP), wird er in 2 DIP geändert.  
  
<a name="xamlTextUsage_Width"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 Diese Eigenschaft ist in der Regel nicht in XAML verwendet.  
  
   
  
## Examples  
 Im folgende Beispiel veranschaulicht das Festlegen der <xref:System.Windows.Ink.DrawingAttributes.Width%2A> Eigenschaft. Im Beispiel wird davon ausgegangen, dass die Anwendung eine <xref:System.Windows.Controls.InkCanvas> aufgerufen `inkCanvas1`, und zwei <xref:System.Windows.Ink.DrawingAttributes> Objekte mit dem Namen `inkDA` und `highlighterDA`. Das vollständige Beispiel finden Sie unter der <xref:System.Windows.Ink.DrawingAttributes> -Klassenübersicht.  
  
 [!code-csharp[DrawingAttributes#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DrawingAttributes/CSharp/Window1.xaml.cs#1)]
 [!code-vb[DrawingAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DrawingAttributes/VisualBasic/Window1.xaml.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <see cref="P:System.Windows.Ink.DrawingAttributes.Width" /> -Eigenschaft ist kleiner als <see cref="F:System.Double.Epsilon" /> oder <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
