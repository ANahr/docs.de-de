<Type Name="GroupPrincipal" FullName="System.DirectoryServices.AccountManagement.GroupPrincipal">
  <TypeSignature Language="C#" Value="public class GroupPrincipal : System.DirectoryServices.AccountManagement.Principal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupPrincipal extends System.DirectoryServices.AccountManagement.Principal" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.AccountManagement.GroupPrincipal" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.DirectoryServices.AccountManagement.Principal</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.DirectoryServices.AccountManagement.DirectoryRdnPrefix("CN")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Kapselt Gruppenkonten. Gruppenkonten können beliebige Sammlungen principal-Objekte noch von Konten zu Verwaltungszwecken erstellt sein.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GroupPrincipal (System.DirectoryServices.AccountManagement.PrincipalContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.AccountManagement.PrincipalContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.AccountManagement.PrincipalContext" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" />, der den Server oder die Domäne angibt, für den bzw. die Vorgänge ausgeführt werden.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> -Klasse unter Verwendung des angegebenen Kontexts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Gruppenkonto für Dienstprinzipalname werden nicht beibehalten, während der Erstellung. Um das Konto beizubehalten, rufen Sie die <xref:System.DirectoryServices.AccountManagement.Principal.Save%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GroupPrincipal (System.DirectoryServices.AccountManagement.PrincipalContext context, string samAccountName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.AccountManagement.PrincipalContext context, string samAccountName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.#ctor(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.AccountManagement.PrincipalContext" />
        <Parameter Name="samAccountName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" />, der den Server oder die Domäne angibt, für den bzw. die Vorgänge ausgeführt werden.</param>
        <param name="samAccountName">Die SAM-Kontonamen für diesen Prinzipal.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> Klasse und des angegebenen Kontexts und SAM-Kontonamen zuweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Gruppenkonto für Dienstprinzipalname werden nicht beibehalten, während der Erstellung. Um das Konto beizubehalten, rufen Sie die <xref:System.DirectoryServices.AccountManagement.Principal.Save%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwirft die aktuelle Instanz des <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" />-Objekts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindByIdentity">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.AccountManagement.GroupPrincipal FindByIdentity (System.DirectoryServices.AccountManagement.PrincipalContext context, string identityValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.AccountManagement.GroupPrincipal FindByIdentity(class System.DirectoryServices.AccountManagement.PrincipalContext context, string identityValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AccountManagement.GroupPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.AccountManagement.PrincipalContext" />
        <Parameter Name="identityValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" />, der den Server oder die Domäne angibt, für den bzw. die Vorgänge ausgeführt werden.</param>
        <param name="identityValue">Die Identität des Gruppenprinzipals. Dieser Parameter kann ein beliebiges Format aufweisen, das in der <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" />-Enumeration enthalten ist.</param>
        <summary>Gibt eine Gruppe principal-Objekt, das den angegebenen Identitätswert entspricht.</summary>
        <returns>Ein <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" />-Objekt, das dem angegebenen Identitätswert und -typ entspricht, oder NULL, wenn keine Übereinstimmungen gefunden werden.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MultipleMatchesException">Mehrere principal Gruppenobjekte Abgleich des aktuellen Gruppenobjekts wurden gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FindByIdentity">
      <MemberSignature Language="C#" Value="public static System.DirectoryServices.AccountManagement.GroupPrincipal FindByIdentity (System.DirectoryServices.AccountManagement.PrincipalContext context, System.DirectoryServices.AccountManagement.IdentityType identityType, string identityValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.DirectoryServices.AccountManagement.GroupPrincipal FindByIdentity(class System.DirectoryServices.AccountManagement.PrincipalContext context, valuetype System.DirectoryServices.AccountManagement.IdentityType identityType, string identityValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity(System.DirectoryServices.AccountManagement.PrincipalContext,System.DirectoryServices.AccountManagement.IdentityType,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AccountManagement.GroupPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.DirectoryServices.AccountManagement.PrincipalContext" />
        <Parameter Name="identityType" Type="System.DirectoryServices.AccountManagement.IdentityType" />
        <Parameter Name="identityValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="context">Der <see cref="T:System.DirectoryServices.AccountManagement.PrincipalContext" />, der den Server oder die Domäne angibt, für den bzw. die Vorgänge ausgeführt werden.</param>
        <param name="identityType">Ein <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" /> -Enumerationswert, der angibt, das Format der <c>IdentityValue</c> Parameter.</param>
        <param name="identityValue">Die Identität des Gruppenprinzipals. Dieser Parameter kann ein beliebiges Format aufweisen, das in der <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" />-Enumeration enthalten ist.</param>
        <summary>Gibt eine Gruppe Hauptobjekt, das dem angegebenen Identitätstyp und dem Wert übereinstimmt. Diese Version der <see cref="Overlaod:System.DirectoryServices.AccountManagement.GroupPrincipal.FindByIdentity" />-Methode bestimmt das Format des Identitätswerts.</summary>
        <returns>Ein <see cref="T:System.DirectoryServices.AccountManagement.GroupPrincipal" /> , die den Wert der angegebenen Identität und Typ übereinstimmt, oder Null, wenn keine Übereinstimmungen gefunden werden.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.MultipleMatchesException">Mehrere principal Gruppenobjekte Abgleich des aktuellen Gruppenobjekts wurden gefunden.</exception>
        <exception cref="T:System.ComponenetModel.InvalidEnumerationOperatorException">Der Identitätswert ist kein gültiger <see cref="T:System.DirectoryServices.AccountManagement.IdentityType" />-Enumerationswert.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AccountManagement.PrincipalSearchResult&lt;System.DirectoryServices.AccountManagement.Principal&gt; GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.AccountManagement.PrincipalSearchResult`1&lt;class System.DirectoryServices.AccountManagement.Principal&gt; GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.GetMembers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AccountManagement.PrincipalSearchResult&lt;System.DirectoryServices.AccountManagement.Principal&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Auflistung von principal-Objekte, die enthalten sind in der Gruppe zurück.</summary>
        <returns>Ein <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> -Objekt, das principal-Objekte, die Mitglieder der Gruppe oder eine leere Auflistung sind enthält, wenn die Gruppe keine Mitglieder hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode sucht nicht die aktuelle Gruppe rekursiv. Aus diesem Grund können Gruppenobjekte in der Auflistung principal-Objekt zurückgegeben werden.  
  
 Mitglieder werden unabhängig vom Kontext zurückgegeben. Z. B. wenn ein AD DS-Kontext mit der Basis "CN SpecialUsers, DC = = Fabrikam, DC = com", außerhalb wird enthalten Gruppenmitglieder, die unter gespeichert sind "CN enthält, DC = Fabrikam, DC = = com", obwohl sie liegen in einem Bereich, der nicht Teil der Kontext, der durchsucht wird. Die zurückgegebene Auflistung für Dienstprinzipalname kann auch Elemente enthalten, die in einen anderen Speicher als die Gruppe befinden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AccountManagement.PrincipalSearchResult&lt;System.DirectoryServices.AccountManagement.Principal&gt; GetMembers (bool recursive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.DirectoryServices.AccountManagement.PrincipalSearchResult`1&lt;class System.DirectoryServices.AccountManagement.Principal&gt; GetMembers(bool recursive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.GroupPrincipal.GetMembers(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AccountManagement.PrincipalSearchResult&lt;System.DirectoryServices.AccountManagement.Principal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recursive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="recursive">Ein boolescher Wert, der angibt, ob die Gruppe rekursiv durchsucht wird.</param>
        <summary>Gibt eine Auflistung von principal-Objekte, die enthalten sind in der Gruppe zurück. Wenn das rekursive Flag festgelegt ist, auf "true", diese Methode die aktuelle Gruppe rekursiv durchsucht und gibt alle geschachtelten Gruppenmitglieder.</summary>
        <returns>Ein <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearchResult'1" /> -Objekt, das principal-Objekte, die Mitglieder der Gruppe oder eine leere Auflistung sind enthält, wenn die Gruppe keine Mitglieder hat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Auflistung für Dienstprinzipalname enthält keine Gruppenobjekte aus, wenn das rekursive Flag, um festgelegt ist `true`; nur Blattknoten werden zurückgegeben. Wenn eine Gruppe, die ein Computerobjekt und ein Gruppenobjekt (nur mit Benutzerprinzipalen) enthält, rekursiv durchsucht wird, enthält die zurückgegebene Auflistung z. B. das Computerobjekt und die Benutzer principal-Objekte in der geschachtelten Gruppe. Seit das Gruppenobjekt nicht um ein Blatt ist, selbst wenn es leer ist, wird wird es nicht in die rekursive Suche zurückgegeben.  Wenn das rekursive Flag festgelegt ist, um `false`, enthält die zurückgegebene Auflistung möglicherweise Gruppenobjekte.  
  
 Mitglieder werden unabhängig vom Kontext zurückgegeben. Z. B. wenn ein AD DS-Kontext mit der Basis "CN SpecialUsers, DC = = Fabrikam, DC = com", außerhalb wird enthalten Gruppenmitglieder, die unter gespeichert sind "CN enthält, DC = Fabrikam, DC = = com", obwohl sie liegen in einem Bereich, der nicht Teil der Kontext, der durchsucht wird. Die zurückgegebene Auflistung für Dienstprinzipalname kann auch Elemente enthalten, die in einen anderen Speicher als die Gruppe befinden.  
  
   
  
## Examples  
 Der LDAP-Domäne "fabrikam.com" mit dem Benutzernamen legen Sie auf "Administrator" und das Kennwort, legen Sie auf "SecretPwd123" der folgende Code stellt eine Verbindung her, der <xref:System.DirectoryServices.AccountManagement.PrincipalContext> Konstruktor.  
  
 Eine Suche wird ausgeführt, um finden unter dem Container angegeben wird, der Gruppe mit dem Namen "Domänen-Admins" der <xref:System.DirectoryServices.AccountManagement.PrincipalContext> Konstruktor "DC = Fabrikam, DC = com." Wenn die Gruppe gefunden wird, werden alle Prinzipale, die Mitglieder dieser Gruppe die rekursive Elemente umfasst sind, dann aufgezählt.  
  
```  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain,                                                                      
                                            "fabrikam.com",   
                                            "DC=fabrikam,DC=com",   
                                            "administrator",   
                                            "SecretPwd123");  
  
GroupPrincipal grp = GroupPrincipal.FindByIdentity(ctx,   
                                                   IdentityType.Name,   
                                                   "Domain Admins");  
  
if (grp != null)  
{  
    foreach (Principal p in grp.GetMembers(true))  
    {  
         Console.WriteLine(p.Name);  
    }  
    grp.Dispose();  
}  
  
ctx.Dispose();   
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupScope">
      <MemberSignature Language="C#" Value="public Nullable&lt;System.DirectoryServices.AccountManagement.GroupScope&gt; GroupScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype System.DirectoryServices.AccountManagement.GroupScope&gt; GroupScope" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.AccountManagement.GroupPrincipal.GroupScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.DirectoryServices.AccountManagement.GroupScope&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt ein Typ Nullable <see cref="T:System.DirectoryServices.AccountManagement.GroupScope" /> -Enumeration, der den Bereich für diesen Gruppenprinzipal angibt.</summary>
        <value>Ein auf NULL festlegbares <see cref="T:System.DirectoryServices.AccountManagement.GroupScope" /> -Enumerationswert ab, der den Bereich dieser Gruppe oder Null angibt, wenn kein Bereich festgelegt wurde.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Die Anwendung kann diese Eigenschaft nicht auf null festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSecurityGroup">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; IsSecurityGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; IsSecurityGroup" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.AccountManagement.GroupPrincipal.IsSecurityGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen NULL-Werte zu booleschen Wert, der angibt, ob die Gruppe mit aktivierter Sicherheit ist.</summary>
        <value>
          <see langword="true" />Wenn die Gruppe ist Sicherheit aktiviert, oder Null, wenn die Gruppe nicht beibehalten wurde; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Eigenschaft auf "false" zurückgibt, ist der Gruppe "vorübergehend nicht mit aktivierter Sicherheit. Wenn die <xref:System.DirectoryServices.AccountManagement.GroupPrincipal.IsSecurityGroup> Eigenschaft wird zurückgesetzt, um zu einem späteren Zeitpunkt "true", weist der Gruppe die gleichen Eigenschaften wie bevor er auf "false" festgelegt wurde.  
  
 Wenn der Prinzipal nicht im Speicher beibehalten wurde, gibt diese Eigenschaft null zurück. Der Prinzipal beibehalten wird, hängt davon ab ist die Standardeinstellung mit aktivierter Sicherheit für den Speicher. Die AD DS und AD LDS-Speicher deaktivieren neue Prinzipale diese beibehalten werden, wohingegen SAM neue Prinzipalen aktiviert, wenn sie dauerhaft gespeichert werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Die Anwendung kann diese Eigenschaft nicht auf null festgelegt.</exception>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.DirectoryServices.AccountManagement.PrincipalCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.DirectoryServices.AccountManagement.PrincipalCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.DirectoryServices.AccountManagement.GroupPrincipal.Members" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DirectoryServices.AccountManagement.PrincipalCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von principal-Objekte, die die Mitglieder der Gruppe darstellen.</summary>
        <value>Ein <see cref="T:System.DirectoryServices.AccountManagement.PrincipalCollection" /> -Objekt, das principal-Objekte enthält, die die Mitglieder der Gruppe darstellen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Für AD DS-Gruppen die <xref:System.DirectoryServices.AccountManagement.GroupPrincipal.Members%2A> Eigenschaft enthält Benutzerprinzipale, die Mitglieder der Gruppe aufgrund ihres PrimaryId-Attributs sind. Wenn die Gruppe diese Arten von Elementen enthält, gelten die folgenden Einschränkungen:  
  
-   Die <xref:System.DirectoryServices.AccountManagement.PrincipalCollection.Remove*> Methode kann nicht zum Entfernen von Mitgliedern, die Teil der Gruppe aufgrund ihres PrimaryId-Attributs verwendet werden.  
  
-   Die <xref:System.DirectoryServices.AccountManagement.PrincipalCollection.Clear*> Methode kann nicht verwendet werden, um Elemente zu löschen, die aufgrund ihres PrimaryId-Attributs Teil der Gruppe sind.  
  
   
  
## Examples  
 Der LDAP-Domäne "fabrikam.com" mit dem Benutzernamen legen Sie auf "Administrator" und das Kennwort, legen Sie auf "SecretPwd123" der folgende Code stellt eine Verbindung her, der <xref:System.DirectoryServices.AccountManagement.PrincipalContext> Konstruktor.  
  
 Eine Suche wird ausgeführt, um finden unter dem Container angegeben wird, die Gruppe mit dem Namen "Domänen-Admins" der <xref:System.DirectoryServices.AccountManagement.PrincipalContext> Konstruktor "DC = Fabrikam, DC = com." Wenn die Gruppe gefunden wird, wird der Benutzer mit Namen "John Smith" aus der Gruppe entfernt, und der Benutzer mit "Jim Daly" der Name der Gruppe hinzugefügt wird  
  
```  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain,                                                                       
                                            "fabrikam.com",                                                                               
                                            "DC=fabrikam,DC=com",                                                                 
                                            "administrator",   
                                            "SecretPwd123");  
  
GroupPrincipal grp = GroupPrincipal.FindByIdentity(ctx,   
                                                   IdentityType.Name,   
                                                   "Domain Admins");  
  
if (grp != null)  
{  
    grp.Members.Remove(ctx, IdentityType.Name, "John Smith");            
    grp.Members.Add(ctx, IdentityType.Name, "Jim Daly");  
    grp.Save();  
    grp.Dispose();  
}  
ctx.Dispose();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
