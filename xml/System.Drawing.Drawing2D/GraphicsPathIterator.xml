<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Bietet die Möglichkeit zum Durchlaufen der Pfade in einer <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> und Testen Sie die Arten von Formen, die in jedem untergeordneten Pfad enthalten. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Die <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Objekt, für die diese Hilfsklasse initialisiert werden.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> Klasse mit dem angegebenen <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Objekt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">Bei der Rückgabe enthält ein Array von <see cref="T:System.Drawing.PointF" /> Strukturen, die Punkte im Pfad darstellt.</param>
        <param name="types">Enthält bei der Rückgabe ein Array von Bytes, die Typen der Punkte im Pfad darstellt.</param>
        <param name="startIndex">Gibt den Startindex des Arrays an.</param>
        <param name="endIndex">Gibt den Endwert Index des Arrays.</param>
        <summary>Kopiert die <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> Eigenschaft und <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> Eigenschaftenarray des zugeordneten <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> in die beiden angegebenen Arrays.</summary>
        <returns>Die Anzahl von Punkten, die kopiert werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der `startIndex` und `endIndex` Parameter für einen angegebenen Bereich des ausgewählten Pfad kopieren.  
  
   
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt einen Grafikpfad.  
  
-   Mit mehreren primitive Typen und einige Marker ausgefüllt.  
  
-   Listet die Daten auf der linken Seite des Bildschirms.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPathIterator> und zurückspult es.  
  
-   Inkrementiert den Pfad Daten-Index auf der zweiten Markierung an.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> Methode, um die zwischen den Start- und End enthaltenen Pfaddaten Kopieren mit den Punkten Indizes und Typen von Arrays.  
  
-   Listet die kopierten Daten auf der rechten Seite des Bildschirms.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Punkte im Pfad.</summary>
        <value>Die Anzahl der Punkte im Pfad.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von diesem <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />-Objekt verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aufrufen von `Dispose` können die von diesem verwendeten Ressourcen <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Objekt für andere Zwecke neu reserviert werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]&amp;" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">Bei der Rückgabe enthält ein Array von <see cref="T:System.Drawing.PointF" /> Strukturen, die Punkte im Pfad darstellt.</param>
        <param name="types">Enthält bei der Rückgabe ein Array von Bytes, die Typen der Punkte im Pfad darstellt.</param>
        <summary>Kopiert die <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /> Eigenschaft und <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" /> Eigenschaftenarray des zugeordneten <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> in die beiden angegebenen Arrays.</summary>
        <returns>Die Anzahl von Punkten, die kopiert werden soll.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt einen Grafikpfad.  
  
-   Mit mehreren primitive Typen und einige Marker ausgefüllt.  
  
-   Listet die Daten auf der linken Seite des Bildschirms.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPathIterator> und zurückspult es.  
  
-   Inkrementiert den Pfad Daten-Index auf der zweiten Markierung an.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A> Methode, um die Daten zum Kopieren der `points` und `types` Arrays.  
  
-   Listet die kopierten Daten auf der rechten Seite des Bildschirms.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einem Objekt Gelegenheit zu dem Versuch, Ressourcen freizugeben und andere Bereinigungen durchzuführen, bevor es von der Garbage Collection freigegeben wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, ob der Pfad zugeordneten <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> eine Kurve enthält.</summary>
        <returns>Diese Methode gibt <see langword="true" /> , wenn der aktuelle untergeordnete Pfad eine Kurve; enthält andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Alle Kurven in einem Pfad werden als Sequenzen von Bézier-Splines gespeichert. Wenn Sie eine Ellipse, die auf einen Pfad hinzufügen, geben Sie z. B. der oberen linken Ecke, die Breite und die Höhe des umschließenden Rechtecks für die Ellipse. Diese Zahlen (linke obere Ecke, Breite und Höhe) werden nicht im Pfad gespeichert. Stattdessen; die Ellipse wird in eine Sequenz von vier Bézier-Splines konvertiert. Der Pfad gespeichert, die Endpunkte und die Steuerpunkte dieser Béziersplinekurven.  
  
 Ein Pfad speichert ein Array von Datenpunkten, von denen jedes für eine Zeile oder eine Béziersplinekurve gehört. Wenn einige der Punkte im Array zu Bézier-Splines gehören <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> gibt `true`. Wenn alle Punkte in das Array zum Verteilen von Linien, gehören <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> gibt `false`.  
  
 Bestimmte Methoden vereinfachen, einen Pfad an, was bedeutet, dass alle im Pfad die Kurven in Sequenzen vom Zeilen konvertiert werden. Nachdem Sie ein Pfad vereinfacht wurden, <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> gibt stets `false`. Aufrufen der <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A>, <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A>, oder <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> Methode der <xref:System.Drawing.Drawing2D.GraphicsPath> Klasse wird einen Pfad vereinfachen.  
  
   
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPath> Objekt `myPath`.  
  
-   Fügt drei Linien, ein Rechteck und eine Ellipse.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPathIterator> -Objekt für `myPath`.  
  
-   Überprüft, ob der aktuelle Pfad `myPath` eine Kurve enthält.  
  
-   Zeigt das Ergebnis des Tests in einem Meldungsfeld an.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path">Die <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> -Objekt, das die Punkte kopiert werden.</param>
        <summary>Dies <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> Objekt verfügt über eine <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Objekt zugeordnet. Die <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /> Methode inkrementiert die zugeordnete <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> auf den nächsten Marker im Pfad und kopiert alle Punkte zwischen der aktuellen Markierung und der nächste Marker (oder am Ende des Pfades) enthalten, wie ein zweites sind <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Objekt an den Parameter übergeben.</summary>
        <returns>Die Anzahl der Punkte zwischen diesem und dem nächsten Marker.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Methode, um Marker in einem Pfad festzulegen. Marker werden verwendet, um Gruppen von Pfade zu erstellen. Eine oder mehrere Pfade können zwischen zwei Marker liegen.  
  
   
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPath>-Objekt.  
  
-   Fügt drei Zeilen, ein Rechteck, eine Ellipse und zwei Marker.  
  
-   Listet die Werte aller der Pfad verweist auf der linken Seite des Bildschirms.  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPathIterator>-Objekt.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPath> Objekt `myPathSection`, um die kopierte Punkte zu erhalten.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> Methode, die auf den ersten Marker durchläuft und kopiert alle Punkte zwischen diesem und dem nächsten Marker zum `myPathSection`.  
  
-   Gibt die Anzahl der Punkte in kopiert `markerPoints`.  
  
-   Listet die Marker-Anzahl (den ersten Marker) und die Anzahl der Punkte, die sie mit der rechten Seite des Bildschirms enthält.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Der für diesen Parameter angegebene Ganzzahlverweis erhält den Index des Punkts, der ein Unterpfad beginnt.</param>
        <param name="endIndex">[out] Der für diesen Parameter angegebene Ganzzahlverweis erhält, den Index des Punkts, der den untergeordneten Pfad zu dem beendet <c>StartIndex</c> Punkte.</param>
        <summary>Erhöht die <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> auf den nächsten Marker im Pfad und gibt die Start- und Stoppereignisse Indizes über die [Out]-Parameter.</summary>
        <returns>Die Anzahl der Punkte zwischen diesem und dem nächsten Marker.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> Methode, um Marker in einem Pfad festzulegen. Marker werden verwendet, um Gruppen von Pfade zu erstellen. Eine oder mehrere Pfade können zwischen zwei Marker liegen.  
  
   
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPath>-Objekt.  
  
-   Fügt drei Linien, ein Rechteck und eine Ellipse ¾ mit Datenpunkten, die zwischen den einzelnen.  
  
-   Zeichnet die Werte für das Array von Punkten auf dem Bildschirm an.  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPathIterator>-Objekt.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> Methode.  
  
-   Verwendet die Werte zurückgegeben, der iterativen Aufrufen von <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> die Anfangs-und Endpunkte für jeden Marker auf dem Bildschirm.  
  
-   Zeichnet den Wert für die Gesamtzahl der Punkte auf dem Bildschirm an.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte&amp;" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">[out] Empfängt den Typ des Punkts, indem alle Punkte in der Gruppe freigegeben. Mögliche Typen abgerufen werden können, aus der <see cref="T:System.Drawing.Drawing2D.PathPointType" /> Enumeration.</param>
        <param name="startIndex">[out] Empfängt den Startindex für die Gruppe von Punkten an.</param>
        <param name="endIndex">[out] Empfängt den Endindex der Gruppe von Punkten an.</param>
        <summary>Ruft den Anfangs- und der Ende Index des nächsten Gruppe von Daten verweist, die alle den gleichen Typ aufweisen.</summary>
        <returns>Diese Methode gibt die Anzahl von Datenpunkten in der Gruppe zurück. Wenn im Pfad keine weitere Gruppen vorhanden sind, gibt diese Methode 0 zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPath>-Objekt.  
  
-   Fügt drei Linien, ein Rechteck und eine Ellipse.  
  
-   Listet die Werte aller Punkte auf der linken Seite des Bildschirms.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPathIterator> und zurückspult es.  
  
-   In einem `for` -Schleife befindet, durchläuft die Punkte, die mithilfe der <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> und <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> Methoden.  
  
-   Die aus den iterativen aufrufen zurückgegebenen Werte verwendet so Listen Sie die Anzahl der Unterpfad, die Anzahl der Punkte in diesem und den Typ der der Pfad verweist auf die rechte Seite des Bildschirms.  
  
-   Der Wert für die Gesamtzahl der Punkte auf dem Bildschirm angezeigt.  
  
 Beachten Sie, dass `ListPathPoints` ist eine Hilfsfunktion, die meisten trennt (nicht alle) des Codes für die Anzeige von Grafiken-Pfad-Code.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">Ein <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> , die besteht darin, seine Daten Datenpunkte entsprechend die Datenpunkten der abgerufenen Abbildung (untergeordneten) für diesen Iterator ab.</param>
        <param name="isClosed">[out] Gibt an, ob der aktuelle untergeordnete Pfad geschlossen wird. Es ist <see langword="true" /> Wenn der in der Abbildung ist "geschlossen", andernfalls ist es <see langword="false" />.</param>
        <summary>Ruft die nächste Abbildung (untergeordneten) aus den entsprechenden Pfad dieses <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />.</summary>
        <returns>Die Anzahl der Datenpunkte in der abgerufenen Abbildung (untergeordneten). Wenn keine weitere Figuren abzurufenden vorhanden sind, wird NULL zurückgegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPath>-Objekt.  
  
-   Fügt drei Zeilen, ein Rechteck, eine Ellipse und zwei Marker.  
  
-   Listet die Werte aller der Pfad verweist auf der linken Seite des Bildschirms.  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPathIterator>-Objekt.  
  
-   Erstellt eine <xref:System.Drawing.Drawing2D.GraphicsPath> Objekt `myPathSection`, um die kopierte Punkte zu erhalten.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> -Methode, die an den dritten untergeordneten Pfad (Abbildung) und kopiert alle Punkte in diesem untergeordneten Pfad zu der `myPathSection` Pfad sowie gibt die Anzahl der Punkte in kopiert `subpathPoints`.  
  
-   Listet die Anzahl der untergeordneten und der Anzahl von Punkten, die sie mit der rechten Seite des Bildschirms enthält.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">[out] Empfängt den Anfangsindex des nächsten untergeordneten Pfad.</param>
        <param name="endIndex">[out] Empfängt den Endindex des nächsten untergeordneten Pfad.</param>
        <param name="isClosed">[out] Gibt an, ob der Unterpfad geschlossen wird.</param>
        <summary>Verschiebt die <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> zum nächsten untergeordneten Pfad im Pfad. Der startIndex und der letzte Index der nächsten untergeordneten Pfad sind in [Out]-Parameter enthalten.</summary>
        <returns>Die Anzahl der Pfade in der <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird für die Verwendung mit Windows Forms konzipiert und erfordert <xref:System.Windows.Forms.PaintEventArgs> `e`, einem <xref:System.Windows.Forms.Form.OnPaint%2A> Ereignisobjekt. Der Code führt die folgenden Aktionen aus:  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPath>-Objekt.  
  
-   Fügt drei Linien, ein Rechteck und eine Ellipse.  
  
-   Zeichnet die Werte für das Array von Punkten auf dem Bildschirm an.  
  
-   Erstellt ein <xref:System.Drawing.Drawing2D.GraphicsPathIterator>-Objekt.  
  
-   Ruft die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Methode.  
  
-   Verwendet die Werte zurückgegeben, der iterativen Aufrufen von <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> den Anfangs-und Endwert für jeden untergeordneten Pfad auf dem Bildschirm.  
  
-   Zeichnet den Wert für die Gesamtzahl der Pfade auf dem Bildschirm an.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dies Zurückspulvorgänge <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> am Anfang seiner zugeordneten Pfad.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim ersten Aufruf der <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> -Methode eines Iterators, ruft der ersten Abbildung (untergeordneten) des entsprechenden Pfad des Iterators ab. Das zweite Mal wird die zweite Abbildung usw. abgerufen. Beim Aufrufen der <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> -Methode, die Sequenz beginnt mehr, d. h. nach dem Aufruf <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, beim nächsten Aufruf von <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Ruft die erste Abbildung im Pfad. Die <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> und <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> Methoden verhalten sich ähnlich.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Pfade in den Pfad ab.</summary>
        <value>Die Anzahl der Pfade im Pfad.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
