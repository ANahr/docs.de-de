<Type Name="SerializationInfo" FullName="System.Runtime.Serialization.SerializationInfo">
  <TypeSignature Language="C#" Value="public sealed class SerializationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SerializationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.SerializationInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Speichert die Daten, die zum Serialisieren oder Deserialisieren eines Objekts erforderlich sind. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse wird von Objekten mit benutzerdefiniertem Serialisierungsverhalten verwendet. Die <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> -Methode <xref:System.Runtime.Serialization.ISerializable> oder <xref:System.Runtime.Serialization.ISerializationSurrogate> füllt die <xref:System.Runtime.Serialization.SerializationInfo> mit Name, Typ und Wert des Transformationsprozesses Informationen, die zu serialisierenden zu speichern. Die entsprechende Funktion kann diese Informationen extrahiert werden, während der Deserialisierung wird.  
  
 Objekte werden hinzugefügt der <xref:System.Runtime.Serialization.SerializationInfo> speichern, während der Serialisierung mithilfe der <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> Methoden und extrahiert aus der <xref:System.Runtime.Serialization.SerializationInfo> speichern, während der Deserialisierung mithilfe der <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> Methoden.  
  
 Weitere Informationen zum Anpassen der Serialisierung finden Sie unter [benutzerdefinierte Serialisierung](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die <xref:System.Runtime.Serialization.SerializationInfo> für benutzerdefinierte Serialisierung und Deserialisierung mit verschiedenen Werten.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerializationInfo (Type type, System.Runtime.Serialization.IFormatterConverter converter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Runtime.Serialization.IFormatterConverter converter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="converter" Type="System.Runtime.Serialization.IFormatterConverter" />
      </Parameters>
      <Docs>
        <param name="type">Die <see cref="T:System.Type" /> der das zu serialisierende Objekt.</param>
        <param name="converter">Die <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> während der Deserialisierung verwendet.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.Serialization.IFormatterConverter> übergeben, als die `converter` Parameter konvertiert Daten aus der internen Darstellung in das Formular vom Benutzer angeforderte. Die interne Darstellung der Daten in der <xref:System.Runtime.Serialization.SerializationInfo> richtet sich nach der Formatierer, der Sie erstellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> oder <paramref name="converter" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerializationInfo (Type type, System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, class System.Runtime.Serialization.IFormatterConverter converter, bool requireSameTokenInPartialTrust) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="converter" Type="System.Runtime.Serialization.IFormatterConverter" />
        <Parameter Name="requireSameTokenInPartialTrust" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">Die <see cref="T:System.Type" /> der das zu serialisierende Objekt.</param>
        <param name="converter">Die <see cref="T:System.Runtime.Serialization.IFormatterConverter" /> während der Deserialisierung verwendet.</param>
        <param name="requireSameTokenInPartialTrust">Gibt an, ob das Objekt dasselbe Token unter teilweiser Vertrauenswürdigkeit erforderlich ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der boolesche Wert zu serialisieren.</param>
        <summary>Fügt einen booleschen Wert in der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird. Zum Beispiel:  
  
```csharp  
void ISerializable.GetObject(SerializationInfo info, StreamingContext context)  
{  
   // This will not cause an exception to be thrown.  
   info.AddValue("ABC", true);  
   info.AddValue("abc", false);  
   // However, this will cause the SerializationException to be thrown.  
   info.AddValue("XYZ", true);  
   info.AddValue("XYZ", false);  
}  
```  
  
```vb  
Private Sub GetObjectData(ByVal info As SerializationInfo, _  
ByVal context As StreamingContext)  
   ' This will not cause an exception to be thrown.  
   info.AddValue("ABC", "upper case")  
   info.AddValue("abc", "lower case")  
   ' However, this will cause the SerializationException to be thrown.  
   info.AddValue("XYZ", "same case")  
   info.AddValue("XYZ", "same case")  
End Sub  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der zu serialisierende Bytewert.</param>
        <summary>Fügt einen 8-Bit-Ganzzahlwert ohne Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der Zeichenwert zu serialisieren.</param>
        <summary>Fügt den Wert eines Unicode-Zeichens in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see cref="T:System.DateTime" /> zu serialisierende Wert.</param>
        <summary>Fügt eine <see cref="T:System.DateTime" /> Wert in der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der zu serialisierende decimal-Wert.</param>
        <summary>Fügt einen Dezimalwert in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wenn die <paramref name="name" /> Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Wenn ein Wert bereits zugeordnet wurde <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der zu serialisierende double-Wert.</param>
        <summary>Fügt einen Gleitkommawert mit doppelter Genauigkeit der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, short value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="Int16" /> zu serialisierende Wert.</param>
        <summary>Fügt eine 16-Bit-Ganzzahl mit Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="Int32" /> zu serialisierende Wert.</param>
        <summary>Fügt eine 32-Bit-Ganzzahl mit Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
   
  
## Examples  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der zu serialisierende Int64-Wert.</param>
        <summary>Fügt eine 64-Bit-Ganzzahl mit Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der Wert, der serialisiert werden. Alle untergeordneten Elemente dieses Objekts werden automatisch serialisiert.</param>
        <summary>Fügt das angegebene Objekt in der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> Speicher, in dem dem angegebenen Namen zugeordnet ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Objekt in der `value` Parameter wird als der zurückgegebene Typ serialisiert `value`.  
  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, sbyte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="Sbyte" /> zu serialisierende Wert.</param>
        <summary>Fügt eine 8-Bit-Ganzzahlwert mit Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der einzelnen zu serialisierende Wert.</param>
        <summary>Fügt einen Gleitkommawert mit einfacher Genauigkeit der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, ushort value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, unsigned int16 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="UInt16" /> zu serialisierende Wert.</param>
        <summary>Fügt einen 16-Bit-Ganzzahlwert ohne Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="UInt32" /> zu serialisierende Wert.</param>
        <summary>Fügt einen 32-Bit-Ganzzahlwert ohne Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> Methode, um die Serialisierung eines Typs anzupassen. Der Code Fügt einer Zeichenfolge und eine ganze Zahl mit einer Instanz von der <xref:System.Runtime.Serialization.SerializationInfo> -Klasse in der <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> Methode der <xref:System.Runtime.Serialization.ISerializable> Schnittstelle. Außerdem verwendet der Code die <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> Methode zum Abrufen von Werten aus der <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Die <see langword="UInt64" /> zu serialisierende Wert.</param>
        <summary>Fügt einen 64-Bit-Ganzzahlwert ohne Vorzeichen in die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string name, object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddValue(string name, object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name, mit dem Wert zuordnen, sodass er später deserialisiert werden kann.</param>
        <param name="value">Der Wert, der serialisiert werden. Alle untergeordneten Elemente dieses Objekts werden automatisch serialisiert.</param>
        <param name="type">Die <see cref="T:System.Type" /> das aktuelle Objekt zugeordnet werden soll. Dieser Parameter muss immer den Typ des Objekts selbst oder von einem der zugehörigen Basisklassen sein.</param>
        <summary>Fügt einen Wert in der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern, auf dem <paramref name="value" /> zugeordnet ist <paramref name="name" /> und als serialisiert wird, der <see cref="T:System.Type" /> <paramref name="type" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der zugewiesene Typ ist immer der Typ des Objekts oder eines seiner übergeordneten Elemente.  
  
 Wenn zwei Werte hinzugefügt werden, mit Namen, die nur von unterscheiden Fall müssen Sie keine Ausnahme wird ausgelöst, also nicht empfohlen. Hinzufügen von zwei Werten mit dem genau gleichen Namen bewirkt jedoch die <xref:System.Runtime.Serialization.SerializationException> ausgelöst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wenn <paramref name="name" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Wert wurde bereits zugeordnet <paramref name="name" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Assemblynamen des Typs zu serialisieren nur während der Serialisierung.</summary>
        <value>Der vollständige Name der Assembly des Typs zu serialisieren.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> ist identisch mit den Rückgabewert von <xref:System.Reflection.Assembly.FullName%2A> Eigenschaft der Assembly den enthaltenden Typ. Dies ist der Name der Assembly der Formatierer, verwendet Wenn Sie Typinformationen für dieses Objekt zu serialisieren.  
  
 Der Name der Assembly enthält den Namen der Assembly, Version, Kultur und einige Sicherheitsinformationen für das Objekt.  
  
 Benutzer, die die serialisierte (z. B. um einen Proxy für einen bestimmten Typ zu senden) Typ ändern möchten, werden den Wert dieser Eigenschaft festgelegt.  
  
> [!CAUTION]
>  Verwenden Sie diese Eigenschaft nicht während der Deserialisierung, da der Wert dieser Eigenschaft nicht definiert ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert ist die Eigenschaft auf festgelegt ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FullTypeName">
      <MemberSignature Language="C#" Value="public string FullTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.FullTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den vollständigen Namen der <see cref="T:System.Type" /> zu serialisieren.</summary>
        <value>Der vollständige Name des Typs zu serialisieren.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> ist identisch mit was durch den Aufruf zurückgegeben werden, würde die <xref:System.Type.FullName%2A> auf <xref:System.Type>. Dies ist der Typname, der Formatierer, verwendet Wenn Sie Typinformationen für dieses Objekt zu serialisieren.  
  
 Benutzer den Typ (z. B. ändern um einen Proxy für einen bestimmten Typ zu senden) serialisiert werden soll, zum Festlegen des Werts dieser Eigenschaft.  
  
> [!CAUTION]
>  Verwenden Sie diese Eigenschaft nicht während der Deserialisierung, da der Wert dieser Eigenschaft nicht definiert ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert dieser Eigenschaft auf festgelegt ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetBoolean">
      <MemberSignature Language="C#" Value="public bool GetBoolean (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetBoolean(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen booleschen Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Der boolesche Wert zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert ein boolescher Wert ist, oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in einen booleschen Wert konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetByte">
      <MemberSignature Language="C#" Value="public byte GetByte (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8 GetByte(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft ein 8-Bit-Ganzzahlwert ohne Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 8-Bit-Ganzzahl ohne Vorzeichen zugeordnet <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 8-Bit-Ganzzahl ohne Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 8-Bit-Ganzzahl ohne Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public char GetChar (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance char GetChar(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft den Wert eines Unicode-Zeichens aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Das Unicode-Zeichen mit <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert ein Unicode-Zeichen ist oder einer, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> in ein Unicode-Zeichen konvertiert werden kann.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDateTime">
      <MemberSignature Language="C#" Value="public DateTime GetDateTime (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.DateTime GetDateTime(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft eine <see cref="T:System.DateTime" /> Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die <see cref="T:System.DateTime" /> zugeordnete Wert <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ist der Wert eine <xref:System.DateTime>, oder konvertiert werden kann, um eine <xref:System.DateTime>, dieses Werts wird zurückgegeben, andernfalls ein <xref:System.InvalidCastException> ausgelöst. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht konvertiert werden, um eine <see cref="T:System.DateTime" /> Wert.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDecimal">
      <MemberSignature Language="C#" Value="public decimal GetDecimal (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Decimal GetDecimal(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft ab einen Dezimalwert aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Einen Dezimalwert aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine Dezimalzahl ist, oder in eine Dezimalzahl, die zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in einen Dezimalwert konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public double GetDouble (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 GetDouble(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen Gleitkommawert mit doppelter Genauigkeit den Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Der Gleitkommawert mit doppelter Genauigkeit, zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert ein Double-Wert ist oder in einen Double, den zurückgegebene Wert konvertiert werden kann; andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in einen Gleitkommawert mit doppelter Genauigkeit konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Serialization.SerializationInfoEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.SerializationInfoEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> verwendet, um die Name-Wert-Paare im Durchlaufen der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Ein <see cref="T:System.Runtime.Serialization.SerializationInfoEnumerator" /> für die Analyse von Name / Wert-Paare der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird meist von Formatierungsprogrammen verwendet werden, die die Werte durchlaufen, bevor Sie in den Stream schreiben müssen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInt16">
      <MemberSignature Language="C#" Value="public short GetInt16 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int16 GetInt16(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft eine 16-Bit-Ganzzahl mit Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 16-Bit-Ganzzahl mit Vorzeichen, die zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 16-Bit-Ganzzahl mit Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 16-Bit-Ganzzahl mit Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt32">
      <MemberSignature Language="C#" Value="public int GetInt32 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetInt32(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des abzurufenden Werts.</param>
        <summary>Ruft eine 32-Bit-Ganzzahl mit Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 32-Bit-Ganzzahl mit Vorzeichen, die zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 32-Bit-Ganzzahl mit Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
   
  
## Examples  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 32-Bit-Ganzzahl mit Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInt64">
      <MemberSignature Language="C#" Value="public long GetInt64 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 GetInt64(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft eine 64-Bit-Ganzzahl mit Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 64-Bit-Ganzzahl mit Vorzeichen, die zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 64-Bit-Ganzzahl mit Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 64-Bit-Ganzzahl mit Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSByte">
      <MemberSignature Language="C#" Value="public sbyte GetSByte (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int8 GetSByte(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen Wert 8-Bit-Ganzzahl mit Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 8-Bit-Ganzzahl mit Vorzeichen, die zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ist der Wert ein `Int8`, oder konvertiert werden kann, um ein `Int8`, dieser Wert wird zurückgegeben, andernfalls ein <xref:System.InvalidCastException> ausgelöst. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 8-Bit-Ganzzahl mit Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSingle">
      <MemberSignature Language="C#" Value="public float GetSingle (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetSingle(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des abzurufenden Werts.</param>
        <summary>Ruft einen Gleitkommawert mit einfacher Genauigkeit den Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Der Gleitkommawert mit einfacher Genauigkeit, zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine Gleitkommazahl mit einfacher Genauigkeit ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in einen Gleitkommawert mit einfacher Genauigkeit konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft eine <see cref="T:System.String" /> Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Der <see cref="T:System.String" />, der <paramref name="name" /> zugeordnet ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ist der Wert eine <xref:System.String>, oder konvertiert werden kann, um eine <xref:System.String>, dieses Werts wird zurückgegeben, andernfalls ein <xref:System.InvalidCastException> ausgelöst. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht konvertiert werden, um eine <see cref="T:System.String" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt16">
      <MemberSignature Language="C#" Value="public ushort GetUInt16 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int16 GetUInt16(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen 16-Bit-Ganzzahlwert ohne Vorzeichen aus dem <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 16-Bit-Ganzzahl ohne Vorzeichen zugeordnet <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 16-Bit-Ganzzahl ohne Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 16-Bit-Ganzzahl ohne Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt32">
      <MemberSignature Language="C#" Value="public uint GetUInt32 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int32 GetUInt32(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen 32-Bit-Ganzzahl ohne Vorzeichen-Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 32-Bit-Ganzzahl ohne Vorzeichen zugeordnet <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 32-Bit-Ganzzahl mit Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 32-Bit-Ganzzahl ohne Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUInt64">
      <MemberSignature Language="C#" Value="public ulong GetUInt64 (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int64 GetUInt64(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <summary>Ruft einen 64-Bit-Ganzzahl ohne Vorzeichen-Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Die 64-Bit-Ganzzahl ohne Vorzeichen zugeordnet <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Wert eine 64-Bit-Ganzzahl ohne Vorzeichen ist oder auf einen, der zurückgegebene Wert konvertiert werden kann. andernfalls ein <xref:System.InvalidCastException> ausgelöst wird. Alle Konvertierungen werden durch die <xref:System.Runtime.Serialization.IFormatterConverter> zugeordnete <xref:System.Runtime.Serialization.SerializationInfo>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht in eine 64-Bit-Ganzzahl ohne Vorzeichen konvertiert werden.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (string name, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(string name, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der abzurufenden Wert zugeordnet.</param>
        <param name="type">Die <see cref="T:System.Type" /> des abzurufenden Werts. Wenn der gespeicherte Wert in diesen Typ konvertiert werden kann, löst das System eine <see cref="T:System.InvalidCastException" />.</param>
        <summary>Ruft einen Wert aus der <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <returns>Das Objekt des angegebenen <see cref="T:System.Type" /> zugeordneten <paramref name="name" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Daten, in gespeichert der <xref:System.Runtime.Serialization.SerializationInfo> ist des angeforderten Typs (oder einer ihrer abgeleiteten Klassen), ist dieser Wert direkt zurückgegeben. Andernfalls <xref:System.Runtime.Serialization.IFormatterConverter.Convert%2A?displayProperty=nameWithType> wird aufgerufen, um sie in den entsprechenden Typ zu konvertieren.  
  
 Der zurückgegebene Wert den <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> Methode immer sicher umgewandelt werden kann, die im angegebenen Typ der `type` Parameter.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> Methode:  
  
 [!code-cpp[Classic SerializationInfo.GetValue Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic SerializationInfo.GetValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic SerializationInfo.GetValue Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic SerializationInfo.GetValue Example/CS/source.cs#1)]
 [!code-vb[Classic SerializationInfo.GetValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic SerializationInfo.GetValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidCastException">Der zugeordnete Wert <paramref name="name" /> kann nicht konvertiert werden, um <paramref name="type" />.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Ein Element mit dem angegebenen Namen ist in der aktuellen Instanz nicht gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAssemblyNameSetExplicit">
      <MemberSignature Language="C#" Value="public bool IsAssemblyNameSetExplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAssemblyNameSetExplicit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.IsAssemblyNameSetExplicit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob der Name der Assembly explizit festgelegt wurde.</summary>
        <value>
          <see langword="True" />Wenn der Assemblyname explizit festgelegt wurde; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFullTypeNameSetExplicit">
      <MemberSignature Language="C#" Value="public bool IsFullTypeNameSetExplicit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFullTypeNameSetExplicit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.IsFullTypeNameSetExplicit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, ob der vollständige Typname explizit festgelegt wurde.</summary>
        <value>
          <see langword="True" />Wenn der vollständige Typname explizit festgelegt wurde; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberCount">
      <MemberSignature Language="C#" Value="public int MemberCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MemberCount" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.MemberCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Elemente, die hinzugefügt wurden die <see cref="T:System.Runtime.Serialization.SerializationInfo" /> zu speichern.</summary>
        <value>Die Anzahl der Elemente, die mit dem aktuellen hinzugefügt wurden <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectType">
      <MemberSignature Language="C#" Value="public Type ObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.SerializationInfo.ObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt den Typ des Objekts, das serialisiert werden.</summary>
        <value>Der Typ des Objekts, das serialisiert wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetType">
      <MemberSignature Language="C#" Value="public void SetType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Die <see cref="T:System.Type" /> der das zu serialisierende Objekt.</param>
        <summary>Legt die <see cref="T:System.Type" /> der das zu serialisierende Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Runtime.Serialization.Formatter> ist verantwortlich für die Einstellung der <xref:System.Type> von der <xref:System.Runtime.Serialization.SerializationInfo> Instanz vor der Übergabe an <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. Benutzer, die Proxys für Objekte senden möchten, jedoch müssen so ändern Sie den Typ, der von diesem dargestellt <xref:System.Runtime.Serialization.SerializationInfo> Instanz. Mithilfe der <xref:System.Runtime.Serialization.SerializationInfo.SetType%2A> Methode entspricht dem Festlegen der <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> und <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>.  
  
   
  
## Examples  
 [!code-cpp[IObjectReference Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/IObjectReference Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[IObjectReference Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/IObjectReference Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[IObjectReference Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/IObjectReference Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="type" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
