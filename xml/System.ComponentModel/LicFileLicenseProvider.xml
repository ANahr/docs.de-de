<Type Name="LicFileLicenseProvider" FullName="System.ComponentModel.LicFileLicenseProvider">
  <TypeSignature Language="C#" Value="public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LicFileLicenseProvider extends System.ComponentModel.LicenseProvider" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.LicFileLicenseProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.LicenseProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Implementierung von einem <see cref="T:System.ComponentModel.LicenseProvider" />. Der Anbieter funktioniert in ähnlicher Weise wie die standardmäßigen Lizenzierungsmodell für Microsoft .NET Framework.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ComponentModel.LicFileLicenseProvider> bietet <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> und <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methoden. Die <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode bestimmt, ob die <xref:System.ComponentModel.License.LicenseKey%2A> abgerufen, indem die <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> Methode ungültig ist. Wenn Sie von dieser Klasse erben, können Sie überschreiben die <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode, um Ihre eigene Validierungslogik bereitzustellen.  
  
 Diese Klasse ist vorhanden, um ähnliche Funktionalität wie Lizenzierung COM-Lizenzierung bereitzustellen und Textdateien-Lizenz verwendet.  
  
 Weitere Informationen zur Lizenzierung finden Sie unter [Vorgehensweise: Lizenz-Komponenten und Steuerelementen](http://msdn.microsoft.com/library/8e66c1ed-a445-4b26-8185-990b6e2bbd57).  
  
   
  
## Examples  
 Das folgende Beispiel erstellt ein lizenziertes Steuerelement mit der <xref:System.ComponentModel.LicenseManager.Validate%2A> Methode. Er verwendet <xref:System.ComponentModel.LicFileLicenseProvider> für die Lizenz-Manager.  
  
 [!code-cpp[Classic LicenseManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic LicenseManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LicenseManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic LicenseManager Example/CS/source.cs#1)]
 [!code-vb[Classic LicenseManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic LicenseManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LicFileLicenseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ComponentModel.LicFileLicenseProvider" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKey">
      <MemberSignature Language="C#" Value="protected virtual string GetKey (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetKey(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">Der Objekttyp, den Schlüssel zurückgegeben werden soll.</param>
        <summary>Gibt einen Schlüssel für den angegebenen Typ zurück.</summary>
        <returns>Eine Bestätigung, die die <paramref name="type" /> -Parameter lizenziert ist.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLicense">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.License GetLicense(class System.ComponentModel.LicenseContext context, class System.Type type, object instance, bool allowExceptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.License</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.LicenseContext" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="allowExceptions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.LicenseContext" /> , der angibt, in dem Sie das lizenzierte Objekt verwenden können.</param>
        <param name="type">Ein <see cref="T:System.Type" /> , Anfordern von der Komponente darstellt, die <see cref="T:System.ComponentModel.License" />.</param>
        <param name="instance">Ein Objekt, das fordert die <see cref="T:System.ComponentModel.License" />.</param>
        <param name="allowExceptions">
          <see langword="true" />Wenn eine <see cref="T:System.ComponentModel.LicenseException" /> ausgelöst werden soll, wenn eine Komponente eine Lizenz; entsprochen werden kann, andernfalls <see langword="false" />.</param>
        <summary>Gibt eine Lizenz für die Instanz von der Komponente zurück, wenn ein solcher verfügbar ist.</summary>
        <returns>Ein gültiges <see cref="T:System.ComponentModel.License" />. Wenn diese Methode einen gültigen findet <see cref="T:System.ComponentModel.License" /> oder eine gültige <paramref name="context" /> Parameter, es gibt <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zur Entwurfszeit die <xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> Methode sucht nach einer Lizenzdatei namens `myClassName.LIC`, wobei `myClassName` ist die <xref:System.Type.FullName%2A> des zu erstellenden Komponente. Diese Datei muss sich im gleichen Verzeichnis wie die DLL-Datei, die die Komponente enthält.  
  
 Diese Methode überprüft als Nächstes die erste Zeile der Lizenzdatei mit einem Schlüssel, die der <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> Methode. Wenn der Schlüssel gültig ist, wird diese Zeile verwendet, als die <xref:System.ComponentModel.License.LicenseKey%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyValid">
      <MemberSignature Language="C#" Value="protected virtual bool IsKeyValid (string key, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsKeyValid(string key, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="key">Der zu überprüfende <see cref="P:System.ComponentModel.License.LicenseKey" />.</param>
        <param name="type">Ein <see cref="T:System.Type" /> , Anfordern von der Komponente darstellt, die <see cref="T:System.ComponentModel.License" />.</param>
        <summary>Bestimmt, ob der Schlüssel, die die <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> Methode ruft für den angegebenen Typ gültig ist.</summary>
        <returns>
          <see langword="true" />Wenn der Schlüssel ein gültiger <see cref="P:System.ComponentModel.License.LicenseKey" /> für den angegebenen Typ ist; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überprüft den Schlüssel auf den Ausdruck: " `myClassName is a licensed component.` ", wobei `myClassName` ist die <xref:System.Type.FullName%2A> der Komponente erstellt werden soll.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie von dieser Klasse erben, können Sie diese Methode, um Ihre eigene Validierungslogik bereitstellen überschreiben.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
