<Type Name="PropertyChangedEventManager" FullName="System.ComponentModel.PropertyChangedEventManager">
  <TypeSignature Language="C#" Value="public class PropertyChangedEventManager : System.Windows.WeakEventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyChangedEventManager extends System.Windows.WeakEventManager" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.PropertyChangedEventManager" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.WeakEventManager</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine <see cref="T:System.Windows.WeakEventManager" /> Implementierung, damit Sie das Muster "schwache Ereignislistener" verwenden können, Listener für die Verbindung der <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Damit Listener in diesem Muster werden zu können, müssen die Listenerobjekte implementieren <xref:System.Windows.IWeakEventListener>. Sie müssen nicht implementieren <xref:System.Windows.IWeakEventListener> auf die Klasse, die die Quelle der Ereignisse ist.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public static void AddHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die Quelle Objekt, mit dem löst die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</param>
        <param name="handler">Der Delegat, der verarbeitet die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</param>
        <param name="propertyName">Der Name der Eigenschaft, die auf vorhanden <c>Quelle</c> zu dem auf Änderungen überwacht. Legen Sie auf <see cref="F:System.String.Empty" /> "Eigenschaft" an.</param>
        <summary>Fügt den angegebenen Ereignishandler, der aufgerufen wird, wenn die angegebene Quelle löst die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis für die angegebene Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Methode können Sie den Ereignishandler anzugeben, verwenden zum abonnieren möchten, die <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Ereignis...  Wenn Sie diese Methode verwenden, die Listener-Objekt muss nicht zum Implementieren der <xref:System.Windows.IWeakEventListener> Schnittstelle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="handler" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Mehr als eine Methode zugeordnet ist <paramref name="handler" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddListener">
      <MemberSignature Language="C#" Value="public static void AddListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt mit dem Ereignis.</param>
        <param name="listener">Das Objekt, das als Listener hinzugefügt.</param>
        <param name="propertyName">Der Name der Eigenschaft, die auf vorhanden <c>Quelle</c> zu dem auf Änderungen überwacht. Legen Sie auf <see cref="F:System.String.Empty" /> "Eigenschaft" an.</param>
        <summary>Fügt den angegebenen Listener zur Liste der Listener für die angegebene Quelle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected override System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues Objekt zum Listener enthalten die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</summary>
        <returns>Ein neues Objekt zum Listener enthalten die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected override bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">Quellobjekt, das alle Listener zu entfernen.</param>
        <param name="data">Die Daten zu bereinigen. Dies wird erwartet eine <see cref="T:System.Collections.Specialized.HybridDictionary" />.</param>
        <param name="purgeAll">Legen Sie auf <see langword="true" /> zum Beenden der Überwachung und alle Daten vollständig zu entfernen.</param>
        <summary>Entfernt die Listener, die nicht mehr aus den Daten für die angegebene Quelle aktiv sind.</summary>
        <returns>
          <see langword="true" />Wenn einige Einträge entfernt wurden. andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public static void RemoveHandler (System.ComponentModel.INotifyPropertyChanged source, EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveHandler(class System.ComponentModel.INotifyPropertyChanged source, class System.EventHandler`1&lt;class System.ComponentModel.PropertyChangedEventArgs&gt; handler, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="handler" Type="System.EventHandler&lt;System.ComponentModel.PropertyChangedEventArgs&gt;" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Die Quelle Objekt, mit dem löst die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</param>
        <param name="handler">Der Delegat, der verarbeitet die <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis.</param>
        <param name="propertyName">Der Name der Eigenschaft, die auf vorhanden <c>Quelle</c> Grundlage für die Überwachung der Änderungen wird beendet. Legen Sie auf <see cref="F:System.String.Empty" /> "Eigenschaft" an.</param>
        <summary>Entfernt den angegebenen Ereignishandler aus der angegebenen Quelle.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="handler" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Mehr als eine Methode zugeordnet ist <paramref name="handler" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveListener">
      <MemberSignature Language="C#" Value="public static void RemoveListener (System.ComponentModel.INotifyPropertyChanged source, System.Windows.IWeakEventListener listener, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveListener(class System.ComponentModel.INotifyPropertyChanged source, class System.Windows.IWeakEventListener listener, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.ComponentModel.INotifyPropertyChanged" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt, dem der Listener zu entfernen.</param>
        <param name="listener">Der Listener zu entfernen.</param>
        <param name="propertyName">Der Name der Eigenschaft, die auf vorhanden <c>Quelle</c> Grundlage für die Überwachung der Änderungen wird beendet. Legen Sie auf <see cref="F:System.String.Empty" /> "Eigenschaft" an.</param>
        <summary>Entfernt den angegebenen Listener aus der Liste der Listener für die angegebene Quelle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected override void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Objekt auf dem mit dem Überwachen <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
        <summary>Beginnt die Überwachung der <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis in der angegebenen Quelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist eine Eigenschaft nicht angeben; nach der Ereignismanager gestartet wurde, müssen alle Eigenschaften in der Quelle <xref:System.ComponentModel.INotifyPropertyChanged.PropertyChanged> Benachrichtigung aktiviert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected override void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source">Das Quellobjekt, das für die Überwachung beendet <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.</param>
        <summary>Beendet die Überwachung der <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> Ereignis in der angegebenen Quelle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
