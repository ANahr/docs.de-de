<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Generiert automatisch Befehle für einzelne Tabellen, die verwendet werden, zum Abstimmen von Änderungen an einer <see cref="T:System.Data.DataSet" /> mit der zugeordneten SQL Server-Datenbank. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.SqlClient.SqlDataAdapter> generiert die Transact-SQL-Anweisungen zum Abstimmen von Änderungen nicht automatisch eine <xref:System.Data.DataSet> mit die zugeordnete Instanz von SQL Server. Allerdings können Sie erstellen eine <xref:System.Data.SqlClient.SqlCommandBuilder> Objekt um Transact-SQL-Anweisungen für einzelne Tabellen Updates automatisch zu generieren, wenn Sie festlegen, die <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> Eigenschaft von der <xref:System.Data.SqlClient.SqlDataAdapter>. Alle zusätzlichen Transact-SQL-Anweisungen, die Sie nicht festlegen, werden dann generiert, indem die <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 Die <xref:System.Data.SqlClient.SqlCommandBuilder> registriert sich selbst als einen Listener für <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> -Ereignisse, wenn Sie festlegen, die <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> Eigenschaft. Sie können einem nur zuordnen <xref:System.Data.SqlClient.SqlDataAdapter> oder <xref:System.Data.SqlClient.SqlCommandBuilder> Objekt gleichzeitig miteinander.  
  
 Zum Generieren von INSERT-, Update- oder DELETE-Anweisungen, die <xref:System.Data.SqlClient.SqlCommandBuilder> verwendet die <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> Eigenschaft, um einen erforderlichen Satz von Metadaten automatisch abzurufen. Wenn Sie ändern die <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> nachdem die Metadaten abgerufen wurden, z. B. nach dem ersten Update, das Sie aufrufen sollten die <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Methode, um die Metadaten zu aktualisieren.  
  
 Der `SelectCommand` muss außerdem mindestens einen Primärschlüssel oder eine eindeutige Spalte zurückgeben. Wenn keine vorhanden ist, sind eine **InvalidOperation** Ausnahme wird generiert, und die Befehle werden nicht generiert.  
  
 Die <xref:System.Data.SqlClient.SqlCommandBuilder> verwendet auch die <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>, und <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> Eigenschaften verweist die <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>. Der Benutzer sollte Aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn mindestens eine dieser Eigenschaften geändert werden, oder wenn die <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> selbst ersetzt wird. Andernfalls die <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, und <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> Eigenschaften behalten ihre vorherigen Werte.  
  
 Beim Aufrufen <xref:System.ComponentModel.Component.Dispose%2A>, <xref:System.Data.SqlClient.SqlCommandBuilder> aufgehoben ist die <xref:System.Data.SqlClient.SqlDataAdapter>, und die generierten Befehle sind nicht mehr verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Data.SqlClient.SqlCommand>gemeinsam <xref:System.Data.SqlClient.SqlDataAdapter> und <xref:System.Data.SqlClient.SqlConnection>, um Zeilen aus einer Datenquelle auszuwählen. Im Beispiel wird übergeben, eine Verbindungszeichenfolge, eine Abfragezeichenfolge, die eine Transact-SQL SELECT-Anweisung und eine Zeichenfolge, die den Namen der Datenbanktabelle ist. Klicken Sie dann das Beispiel erstellt eine <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 [!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Der Name des <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> Klasse mit dem zugeordneten <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.SqlClient.SqlCommandBuilder> registriert sich selbst als einen Listener für <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> Ereignisse, die generiert werden, indem Sie die <xref:System.Data.SqlClient.SqlDataAdapter> in dieser Eigenschaft angegeben.  
  
 Beim Erstellen einer neuen Instanz der <xref:System.Data.SqlClient.SqlCommandBuilder>, alle vorhandenen <xref:System.Data.SqlClient.SqlCommandBuilder> zugeordnete <xref:System.Data.SqlClient.SqlDataAdapter> freigegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt fest oder ruft die <see cref="T:System.Data.Common.CatalogLocation" /> für eine Instanz von der <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> Klasse.</summary>
        <value>Ein <see cref="T:System.Data.Common.CatalogLocation" />-Objekt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Legt fest oder ruft eine Zeichenfolge als Katalogtrennzeichen für eine Instanz von verwendet die <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> Klasse.</summary>
        <value>Eine Zeichenfolge, die das Katalogtrennzeichen für die Verwendung mit einer Instanz von der <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> Klasse.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> Objekt für die Transact-SQL-Anweisungen werden automatisch generiert.</summary>
        <value>Ein <see cref="T:System.Data.SqlClient.SqlDataAdapter" />-Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Data.SqlClient.SqlCommandBuilder> registriert sich selbst als einen Listener für <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> Ereignisse, die generiert werden, indem Sie die <xref:System.Data.SqlClient.SqlDataAdapter> in dieser Eigenschaft angegeben.  
  
 Beim Erstellen einer neuen Instanz der <xref:System.Data.SqlClient.SqlCommandBuilder>, alle vorhandenen <xref:System.Data.SqlClient.SqlCommandBuilder> zugeordnete <xref:System.Data.SqlClient.SqlDataAdapter> freigegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Die <see cref="T:System.Data.SqlClient.SqlCommand" /> verweisen auf die gespeicherte Prozedur, von dem die Parameterinformationen abgeleitet werden. Die abgeleiteten Parameter hinzugefügt werden die <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> Auflistung von der <see cref="T:System.Data.SqlClient.SqlCommand" />.</param>
        <summary>Ruft Parameterinformationen aus der gespeicherten Prozedur angegeben, der <see cref="T:System.Data.SqlClient.SqlCommand" /> und füllt die <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> Auflistung des angegebenen <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DeriveParameters`überschreibt alle vorhandenen Parameterinformationen für die `SqlDbCommand`.  
  
 `DeriveParameters`erfordert einen zusätzlichen Aufruf an die Datenbank, um Informationen zu erhalten. Wenn die Parameterinformationen im Voraus bekannt ist, ist es effizienter, die Parameters-Auflistung auffüllen, indem Sie die Informationen explizit festlegen.  
  
 Sie können nur `DeriveParameters` mit gespeicherten Prozeduren. Sie können keine `DeriveParameters` mit erweiterten gespeicherten Prozeduren. Sie können keine `DeriveParameters` zum Auffüllen der <xref:System.Data.SqlClient.SqlParameterCollection> mit beliebigen Transact-SQL-Anweisungen, wie z. B. eine parametrisierte SELECT-Anweisung.  
  
 Weitere Informationen finden Sie unter [Konfigurieren von Parametern und Parameterdatentypen](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Der Befehlstext ist kein Name einer gültigen gespeicherten Prozedur.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Ausführen von Löschvorgängen in der Datenbank erforderlich.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Die SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Ausführen von Löschvorgängen in der Datenbank erforderlich.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Ausführen von Löschvorgängen erforderlich.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Die SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Wenn <see langword="true" />, Parameternamen übereinstimmende Spaltennamen möglichst zu generieren. Wenn <see langword="false" />, generieren @p1, @p2und so weiter.</param>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen von Löschvorgängen in der Datenbank erforderlich ist.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen von Löschvorgängen erforderlich ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Die SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Das Standardverhalten, das beim Generieren von Parameternamen, ist die Verwendung @p1, @p2, und so weiter für die verschiedenen Parameter. Übergeben von `true` für die `useColumnsForParameterNames` Parameter können Sie erzwingen die <xref:System.Data.OleDb.OleDbCommandBuilder> Parameter basierend auf den Spaltennamen stattdessen generieren. Dies gelingt nur, wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben wurde und seine Länge ist gleich oder größer als die generierten Parameternamen.  
  
-   Der generierten Parameternamen angegebenen Kriterien entspricht der <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung regulären Ausdruck.  
  
-   Ein <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> zurückgegeben, die von der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben ist.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen von Einfügevorgängen in der Datenbank erforderlich ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Ausführen von Einfügevorgängen in der Datenbank erforderlich.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Ausführen von Einfügevorgängen erforderlich.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Wenn <see langword="true" />, Parameternamen übereinstimmende Spaltennamen möglichst zu generieren. Wenn <see langword="false" />, generieren @p1, @p2und so weiter.</param>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen von Einfügevorgängen in der Datenbank erforderlich ist.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen von Einfügevorgängen erforderlich ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Das Standardverhalten, das beim Generieren von Parameternamen, ist die Verwendung @p1, @p2, und so weiter für die verschiedenen Parameter. Übergeben von `true` für die `useColumnsForParameterNames` Parameter können Sie erzwingen die <xref:System.Data.OleDb.OleDbCommandBuilder> Parameter basierend auf den Spaltennamen stattdessen generieren. Dies gelingt nur, wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben wurde und seine Länge ist gleich oder größer als die generierten Parameternamen.  
  
-   Der generierten Parameternamen angegebenen Kriterien entspricht der <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung regulären Ausdruck.  
  
-   Ein <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> zurückgegeben, die von der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben ist.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Durchführen von Aktualisierungen für die Datenbank erforderlich.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Durchführen von Aktualisierungen für die Datenbank erforderlich.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> -Objekt, das zum Ausführen des Updates erforderlich ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Wenn <see langword="true" />, Parameternamen übereinstimmende Spaltennamen möglichst zu generieren. Wenn <see langword="false" />, generieren @p1, @p2und so weiter.</param>
        <summary>Ruft ab, die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt, das zum Durchführen von Aktualisierungen für die Datenbank erforderlich.</summary>
        <returns>Die automatisch generierte <see cref="T:System.Data.SqlClient.SqlCommand" /> Objekt erforderlich, um die Updates ausführen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Anwendung kann mithilfe der <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> Methode für die Informations- oder zur Problembehandlung zu Anzeigezwecken, da es sich bei Rückgabe der <xref:System.Data.SqlClient.SqlCommand> Objekt, das ausgeführt werden.  
  
 Sie können auch <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> als Grundlage für einen geänderten Befehl. Rufen Sie z. B. möglicherweise <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> und Ändern der <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> -Wert aus, und klicken Sie dann explizit festlegen, die auf die <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 Nachdem die Transact-SQL-Anweisung generiert wird, wird die Anwendung muss explizit aufrufen <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Wenn die Anweisung in keiner Weise geändert wird. Andernfalls die <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> wird noch Informationen aus der vorherigen Anweisung wurde möglicherweise nicht korrekt verwenden. Transact-SQL-Anweisungen werden zuerst generiert, wenn die Anwendung, entweder aufruft <xref:System.Data.Common.DbDataAdapter.Update%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Das Standardverhalten, das beim Generieren von Parameternamen, ist die Verwendung @p1, @p2, und so weiter für die verschiedenen Parameter. Übergeben von `true` für die `useColumnsForParameterNames` Parameter können Sie erzwingen die <xref:System.Data.OleDb.OleDbCommandBuilder> Parameter basierend auf den Spaltennamen stattdessen generieren. Dies gelingt nur, wenn die folgenden Bedingungen erfüllt sind:  
  
-   Die <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben wurde und seine Länge ist gleich oder größer als die generierten Parameternamen.  
  
-   Der generierten Parameternamen angegebenen Kriterien entspricht der <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> Merry der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung regulären Ausdruck.  
  
-   Ein <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> zurückgegeben, die von der **GetSchema** -Methodenaufruf, und finden Sie der <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> Auflistung angegeben ist.  
  
 Weitere Informationen finden Sie unter [Generieren von Befehlen mit CommandBuilder-Objekten](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">Der ursprüngliche Bezeichner ohne Anführungszeichen.</param>
        <summary>Gibt bei Angabe von einem Bezeichner ohne Anführungszeichen in der richtigen den richtigen Form des dieses Bezeichners. Dies schließt die ordnungsgemäß mit Escapezeichen versehen eingebetteten Anführungszeichen im Bezeichner.</summary>
        <returns>Die angegebene Version des Bezeichners. Eingebettete Anführungszeichen im Bezeichner werden ordnungsgemäß mit Escapezeichen versehen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, oder legt sie fest, ab oder der Zeichen, verwenden Sie beim Angeben von SQL Server-Datenbankobjekte, z. B. Tabellen oder Spalten, deren Namen Zeichen wie Leerzeichen oder reservierte Token enthalten.</summary>
        <value>Das Anfangszeichen oder zu verwendenden Zeichen. Der Standardwert ist eine leere Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zwar nicht ändern die <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> Eigenschaften nach einem Einfüge-, Update- oder delete-Befehl generiert wurde, können Sie ihre Einstellungen ändern, nach dem Aufruf der `Update` Methode von "DataAdapter".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Diese Eigenschaft kann nicht geändert werden, nachdem eine INSERT-, Update- oder DELETE-Befehl generiert wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, oder legt sie fest, Endwert oder der Zeichen, verwenden Sie beim Angeben von SQL Server-Datenbankobjekte, z. B. Tabellen oder Spalten, deren Namen Zeichen wie Leerzeichen oder reservierte Token enthalten.</summary>
        <value>Das letzte Zeichen oder zu verwendenden Zeichen. Der Standardwert ist eine leere Zeichenfolge.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Zwar nicht ändern die <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> oder <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> Eigenschaften nach einem Einfüge-, Update- oder delete-Vorgang generiert wurde, können Sie ihre Einstellungen ändern, nach dem Aufruf der `Update` Methode von "DataAdapter".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Diese Eigenschaft kann nicht geändert werden, nachdem eine INSERT-, Update- oder Delete-Befehl generiert wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die für das Trennzeichen zwischen der Schema-ID und andere Bezeichner verwendet werden soll.</summary>
        <value>Das Zeichen als Schematrennzeichen verwendet werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Allgemeinen wird das Schema für einen Bezeichner Datenbankserver durch die Trennung der Schemaname durch ein Zeichen vom Bezeichner angegeben. Beispielsweise verwendet SQL Server einen Zeitraum vollständige Bezeichner, z. B. Person.Kundenname, erstellt, wobei "Person" ist der Schemaname und "Kundenname" ist der Bezeichner darstellt. Durch Festlegen dieser Eigenschaft kann Entwickler dieses Verhalten zu ändern.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">Der Bezeichner, dessen eingebetteten Anführungszeichen entfernt wird.</param>
        <summary>Gibt für einen Bezeichner in Anführungszeichen die richtige Form dieses Bezeichners zurück. Dies schließt die eingebetteten Anführungszeichen im Bezeichner ordnungsgemäß sind.</summary>
        <returns>Der Bezeichner ohne Anführungszeichen, mit eingebetteten Anführungszeichen ordnungsgemäß ohne Escapezeichen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
