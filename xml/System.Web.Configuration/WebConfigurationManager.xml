<Type Name="WebConfigurationManager" FullName="System.Web.Configuration.WebConfigurationManager">
  <TypeSignature Language="C#" Value="public static class WebConfigurationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit WebConfigurationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Configuration.WebConfigurationManager" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Ermöglicht den Zugriff auf Konfigurationsdateien gelten für Webanwendungen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.Configuration.WebConfigurationManager> -Klasse ermöglicht es Ihnen, Informationen über Computer und die Anwendung.  
  
 Mithilfe von <xref:System.Web.Configuration.WebConfigurationManager> ist die bevorzugte Methode zum Arbeiten mit Konfigurationsdateien, die im Zusammenhang mit Webanwendungen. Verwenden Sie für Clientanwendungen, die <xref:System.Configuration.ConfigurationManager> Klasse.  
  
 Ihre Anwendung kann erweitern die <xref:System.Configuration> Typen oder Sie verwenden, direkt auf die um Konfigurationsinformationen zu behandeln, wie in der folgenden Liste beschrieben:  
  
-   `Handling configuration`. Um Konfigurationsinformationen mithilfe der standard-Typen zu behandeln, verwenden Sie eine der folgenden Vorgehensweisen:  
  
    -   `Accessing a section`. Um die Konfigurationsinformationen für Ihre Anwendung zugreifen zu können, müssen Sie eine der verwenden die `GetSection` bereitgestellten Methoden <xref:System.Web.Configuration.WebConfigurationManager>. Für `<appSettings>` und `<connectionStrings>`, verwenden Sie die <xref:System.Web.Configuration.WebConfigurationManager.AppSettings%2A> und <xref:System.Web.Configuration.WebConfigurationManager.ConnectionStrings%2A> Eigenschaften. Diese Methoden nur-Lese Vorgänge ausführen, verwenden Sie eine zwischengespeicherte Einzelinstanz der Konfiguration und sind multithread beachten.  
  
    -   `Accessing configuration files`. Die Anwendung kann Lese- / Konfigurationseinstellungen auf jeder Ebene, für sich selbst oder für andere Anwendungen oder für Computer, lokal oder Remote. Verwenden Sie eine von der `open` bereitgestellten Methoden <xref:System.Web.Configuration.WebConfigurationManager>. Diese Methoden zurück, eine <xref:System.Configuration.Configuration> -Objekt, das wiederum die erforderlichen Methoden und Eigenschaften zum Behandeln der zugrunde liegenden Konfigurationsdateien bereitstellt. Diese Methoden führen Lese- oder Schreibvorgänge und neu erstellen die Konfigurationsdaten werden jedes Mal, wenn eine Datei geöffnet wird.  
  
    -   `Advanced configuration`. Behandlung von erweiterten Konfigurationen wird von den Typen bereitgestellt <xref:System.Configuration.SectionInformation>, <xref:System.Configuration.PropertyInformation>, <xref:System.Configuration.PropertyInformationCollection>, <xref:System.Configuration.ElementInformation>, <xref:System.Configuration.ContextInformation>, <xref:System.Configuration.ConfigurationSectionGroup>, und <xref:System.Configuration.ConfigurationSectionGroupCollection>.  
  
-   `Extending configuration standard types`. Sie können auch benutzerdefinierte Konfigurationselemente bereitstellen, indem erweitern die Standardkonfigurationstypen wie <xref:System.Configuration.ConfigurationElement>, <xref:System.Configuration.ConfigurationElementCollection>, <xref:System.Configuration.ConfigurationProperty>, und <xref:System.Configuration.ConfigurationSection> mithilfe eines programmgesteuerten oder ein Modell der attributierten. Finden Sie in der <xref:System.Configuration.ConfigurationSection> Klasse für ein Beispiel für einen standard-Konfigurationstyp programmgesteuert zu erweitern. Finden Sie in der <xref:System.Configuration.ConfigurationElement> Klasse für ein Beispiel zum Erweitern eines Modell der attributierten mit Standardkonfiguration-Typs.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die  
  
 <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A>-Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#2)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Die <see cref="T:System.Configuration.Configuration" /> Klasse ermöglicht den programmgesteuerten Zugriff für das Bearbeiten von Konfigurationsdateien. Verwenden Sie eine der open-Methoden von bereitgestellten <see cref="T:System.Web.Configuration.WebConfigurationManager" />. Diese Methoden zurück, eine <see cref="T:System.Configuration.Configuration" /> -Objekt, das wiederum die erforderlichen Methoden und Eigenschaften zum Behandeln der zugrunde liegenden Konfigurationsdateien bereitstellt. Sie können diese Dateien zum Lesen oder Schreiben wie folgt zugreifen:  
  
 Verwenden Sie <see cref="M:System.Configuration.Configuration.GetSection(System.String)" /> oder <see cref="M:System.Configuration.Configuration.GetSectionGroup(System.String)" /> zum Lesen von Konfigurationsinformationen. Beachten Sie, dass der Benutzer oder Prozess, der liest die folgenden Berechtigungen verfügen muss:  
  
-   Read-Berechtigung für die Konfigurationsdatei an der aktuellen Ebene der Hierarchie.  
  
-   Read-Berechtigungen für das übergeordnete Element von Konfigurationsdateien.  
  
 Wenn Ihre Anwendung nur-Lese Zugriff auf seine eigene Konfiguration benötigt, sollten Sie mithilfe der <see cref="Overload:System.Web.Configuration.WebConfigurationManager.GetSection" /> Methoden. Diese Methoden ermöglichen den Zugriff auf die zwischengespeicherten Konfigurationswerte für die aktuelle Anwendung, die eine bessere Leistung als hat die <see cref="T:System.Configuration.Configuration" /> Klasse.  
  
 <block subset="none" type="note"><para>  
 Wenn Sie eine statische <see langword="GetSection" /> Methode, eine <paramref name="path" /> Parameter, der Path-Parameter muss für die Anwendung, in dem der Code ausgeführt wird; andernfalls wird der Parameter ignoriert, und die Konfigurationsinformationen für die derzeit die Ausführung verweisen Anwendung wird zurückgegeben.  
  
</para></block>  
  
 Verwenden Sie eine von der <see cref="Overload:System.Configuration.Configuration.Save" /> Methoden zum Schreiben von Konfigurationsinformationen. Beachten Sie, dass der Benutzer oder Prozess, der schreibt die folgenden Berechtigungen verfügen muss:  
  
-   Schreibberechtigung für die Konfigurationsdatei und das Verzeichnis auf der aktuellen Konfiguration Hierarchieebene.  
  
-   Leseberechtigungen Sie für alle Konfigurationsdateien.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="AppSettings">
      <MemberSignature Language="C#" Value="public static System.Collections.Specialized.NameValueCollection AppSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Specialized.NameValueCollection AppSettings" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.WebConfigurationManager.AppSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Einstellungen für die Anwendung von der Website ab.</summary>
        <value>Ein <see cref="T:System.Collections.Specialized.NameValueCollection" /> -Objekt, enthält die <see cref="T:System.Configuration.AppSettingsSection" /> Objekts für die aktuelle Webanwendung Standardkonfiguration.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Configuration.AppSettingsSection> Objekt enthält der Konfigurationsdatei `<appSettings>` Abschnitt.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.AppSettings%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#8)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Ein gültiger <see cref="T:System.Collections.Specialized.NameValueCollection" /> Objekt konnte mit den Anwendungseinstellungsdaten nicht abgerufen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionStrings">
      <MemberSignature Language="C#" Value="public static System.Configuration.ConnectionStringSettingsCollection ConnectionStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Configuration.ConnectionStringSettingsCollection ConnectionStrings" />
      <MemberSignature Language="DocId" Value="P:System.Web.Configuration.WebConfigurationManager.ConnectionStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConnectionStringSettingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Verbindungszeichenfolgen für die Website ab.</summary>
        <value>Ein <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> -Objekt, das den Inhalt des enthält die <see cref="T:System.Configuration.ConnectionStringsSection" /> Objekts für die aktuelle Webanwendung Standardkonfiguration.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie die <xref:System.Web.Configuration.WebConfigurationManager.ConnectionStrings%2A> Eigenschaft, um Zugriff auf Konfigurationsinformationen und auflisten. Verwenden Sie eine bestimmte Verbindungszeichenfolge für den Zugriff auf das zurückgegebene <xref:System.Configuration.ConnectionStringSettingsCollection> mit dem Namen der gewünschten Verbindungszeichenfolge als Indexer.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#7)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Ein gültiger <see cref="T:System.Configuration.ConnectionStringSettingsCollection" /> Objekt konnte nicht abgerufen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSection">
      <MemberSignature Language="C#" Value="public static object GetSection (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetSection(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.GetSection(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sectionName">Der Konfigurationsabschnittsname.</param>
        <summary>Ruft den angegebenen Konfigurationsabschnitt aus der Konfigurationsdatei für die aktuelle Webanwendung ab.</summary>
        <returns>Der angegebene Abschnitt Konfigurationsobjekt oder <see langword="null" /> , wenn der Abschnitt nicht vorhanden ist. Denken Sie daran, dass für die Verwendung von sicherheitseinschränkungen vorhanden <see cref="M:System.Web.Configuration.WebConfigurationManager.GetSection(System.String)" /> als Common Language Runtime-Vorgang. Sie können Zugriff auf einen zur Laufzeit für Änderungen, z. B. möglicherweise nicht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> heißt von innerhalb einer Webanwendung herankommt Abschnitt aus der Konfigurationsdatei, die vom System anhand der Webanwendung Konfiguration-Hierarchie ausgewählt.  
  
> [!CAUTION]
>  Wenn Ihre Anwendung ein anderes Protokoll als HTTP verwenden, verwendet der <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Überladung, die einen Abschnittsnamen und einen Pfad in der Parameterliste akzeptiert wird, zu verwenden. Sie müssen den Pfad der Konfigurationsdatei angeben, da das System keine Annahmen über die Hierarchieebene Konfiguration vornehmen kann. Bei Verwendung der <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Überladung, die das System nur ein Abschnittsname akzeptiert wird stets versucht die Konfigurationseinstellungen auf der Ebene zurück. Beachten Sie jedoch, dass, wenn der angegebene Pfad außerhalb der aktuellen Anwendung ist, die Überladung, die einen Pfad die gibt auch die Anwendungsebene Konfigurationseinstellungen für den aktuell ausgeführten Anwendung zurück.  
  
 Rufen Sie <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> aus einer Clientanwendung. In diesem Fall ruft der Standardabschnitt ab, aus der Konfigurationsdatei, die vom System anhand der Client-Konfiguration-Hierarchie ausgewählt wird. Normalerweise ist dies die Datei "Machine.config", es sei denn, Sie eine zugeordnete Konfiguration verfügen. Zuordnen von Konfigurationsdateien finden Sie in die Zuordnungsmethoden beschrieben.  
  
> [!NOTE]
>  Die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> ist eine Laufzeit-Methode, die für den Abschnitt einer Konfigurationsdatei auf der Hierarchieebene ausgeführt wird, in dem die Anwendung ausgeführt wird. Verwenden Sie für einen Vorgang Run-Time <xref:System.Configuration.Configuration.GetSection%2A> stattdessen. Diese Methode funktioniert auf den angegebenen Abschnitt einer Konfigurationsdatei, die Sie erhalten mithilfe einer der überladenen Methoden zum Öffnen einer Konfigurationsdatei <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A>.  
  
   
  
## Examples  
 In den Beispielen in diesem Abschnitt zeigen, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Methode.  
  
 Das folgende Beispiel zeigt einen Abschnitt, der von einer Web-Anwendung oder eine Konsolenanwendung zugegriffen werden kann.  
  
> [!NOTE]
>  In diesem Beispiel wird veranschaulicht, wie die <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> Methode zum Abrufen einer <xref:System.Configuration.ConfigurationSection> Objekt aus einer Konfigurationsdatei.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#2)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
        <block subset="none" type="overrides">
          <para>Der Rückgabewert muss vor der Verwendung der erwarteten Konfigurationstyp umgewandelt werden. Um mögliche Umwandlungsausnahmen zu vermeiden, sollten Sie eine bedingte Umwandlungsoperation wie verwenden die <see langword="as" /> Operator in c# oder der Funktion in Visual Basic.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetSection">
      <MemberSignature Language="C#" Value="public static object GetSection (string sectionName, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetSection(string sectionName, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.GetSection(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sectionName">Der Konfigurationsabschnittsname.</param>
        <param name="path">Die Konfiguration für den virtuellen Pfad.</param>
        <summary>Ruft den angegebenen Konfigurationsabschnitt aus der Web-Anwendung-Konfigurationsdatei an der angegebenen Position ab.</summary>
        <returns>Der angegebene Abschnitt Konfigurationsobjekt oder <see langword="null" /> , wenn der Abschnitt nicht vorhanden ist. Denken Sie daran, dass für die Verwendung von sicherheitseinschränkungen vorhanden <see cref="M:System.Web.Configuration.WebConfigurationManager.GetSection(System.String,System.String)" /> als Vorgang zur Laufzeit. Sie können Zugriff auf einen zur Laufzeit für Änderungen, z. B. möglicherweise nicht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> heißt von innerhalb einer Webanwendung herankommt Abschnitt aus der Konfigurationsdatei mit dem angegebenen Pfad der Konfigurationshierarchie definiert.  
  
> [!CAUTION]
>  Wenn Ihre Anwendung ein anderes Protokoll als HTTP verwenden, verwendet der <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Überladung, die einen Abschnittsnamen und einen Pfad in der Parameterliste akzeptiert wird, zu verwenden. Sie müssen den Pfad der Konfigurationsdatei angeben, da das System keine Annahmen über die Hierarchieebene Konfiguration vornehmen kann. Bei Verwendung der <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Überladung, die das System nur ein Abschnittsname akzeptiert wird stets versucht die Konfigurationseinstellungen auf der Ebene zurück. Beachten Sie jedoch, dass, wenn der angegebene Pfad außerhalb der aktuellen Anwendung ist, die Überladung, die einen Pfad die gibt auch die Anwendungsebene Konfigurationseinstellungen für den aktuell ausgeführten Anwendung zurück.  
  
 Diese Methode kann nicht aus einer Clientanwendung aufgerufen werden.  
  
 Wenn Sie den Konfigurationsabschnitt aus der Konfigurationsdatei finden Sie unter dem aktuellen Verzeichnis Webanwendungsebene, verwenden abrufen möchten die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Methode.  
  
> [!NOTE]
>  Die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> ist eine Laufzeit-Methode für den Abschnitt einer Konfigurationsdatei auf der Hierarchieebene, in dem die Anwendung ausgeführt wird. Verwenden Sie für einen Vorgang Run-Time <xref:System.Configuration.Configuration.GetSection%2A> stattdessen. Diese Methode funktioniert auf den angegebenen Abschnitt einer Konfigurationsdatei, die Sie erhalten mithilfe eines der `open` Konfigurationsmethoden für die Datei.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Methode.  
  
> [!NOTE]
>  In diesem Beispiel wird veranschaulicht, wie die <xref:System.Web.Configuration.WebConfigurationManager.GetSection%2A> Methode zum Abrufen einer <xref:System.Configuration.ConfigurationSection> Objekt aus einer bestimmten Konfigurationsdatei.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#5)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Methode wird von außerhalb einer Webanwendung aufgerufen.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
        <block subset="none" type="overrides">
          <para>Der Rückgabewert muss vor der Verwendung der erwarteten Konfigurationstyp umgewandelt werden. Um mögliche Umwandlungsausnahmen zu vermeiden, sollten Sie eine bedingte Umwandlungsoperation wie verwenden die <see langword="as" /> Operator in c# oder der Funktion in Visual Basic.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetWebApplicationSection">
      <MemberSignature Language="C#" Value="public static object GetWebApplicationSection (string sectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetWebApplicationSection(string sectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="sectionName">Der Konfigurationsabschnittsname.</param>
        <summary>Ruft den angegebenen Konfigurationsabschnitt aus der Konfigurationsdatei für die aktuelle Webanwendung ab.</summary>
        <returns>Der angegebene Abschnitt Konfigurationsobjekt oder <see langword="null" /> , wenn der Abschnitt nicht vorhanden ist, oder ein internes Objekt, wenn der Zugriff auf den Abschnitt zur Laufzeit nicht möglich ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> heißt von innerhalb einer Webanwendung herankommt Abschnitt aus der Konfigurationsdatei, die vom System anhand der Webanwendung Konfiguration-Hierarchie ausgewählt.  
  
 Rufen Sie <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> aus einer Clientanwendung. In diesem Fall ruft der Standardabschnitt ab, aus der Konfigurationsdatei, die vom System anhand der Client-Konfiguration-Hierarchie ausgewählt wird. Normalerweise ist dies die Datei "Machine.config", es sei denn, Sie eine zugeordnete Konfiguration verfügen. Zuordnen von Konfigurationsdateien finden Sie in die Zuordnungsmethoden beschrieben.  
  
> [!NOTE]
>  Die <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> Methode ist eine Laufzeit-Vorgang, der fungiert, in dem Abschnitt der Anwendungskonfigurationsdatei befindet sich auf der aktuellen Ebene. Die <xref:System.Configuration.Configuration.GetSection%2A> -Methode, ist kein Vorgang zur Laufzeit aber verhält sich auf den angegebenen Abschnitt durch eine der Methoden zum Öffnen der Konfigurationsdateien abgerufen wurde.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> Methode.  
  
> [!NOTE]
>  In diesem Beispiel wird veranschaulicht, wie die <xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A> Methode zum Abrufen einer <xref:System.Configuration.ConfigurationSection> Objekt aus der Standardkonfigurationsdatei.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#6)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
        <block subset="none" type="overrides">
          <para>Der Rückgabewert muss vor der Verwendung der erwarteten Konfigurationstyp umgewandelt werden. Um mögliche Umwandlungsausnahmen zu vermeiden, sollten Sie eine bedingte Umwandlungsoperation wie verwenden die <see langword="as" /> Operator in c# oder der Funktion in Visual Basic.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OpenMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMachineConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMachineConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Öffnet die Computerkonfigurationsdatei auf dem aktuellen Computer als ein <see cref="T:System.Configuration.Configuration" /> -Objekt, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.ConfigurationManager.OpenMachineConfiguration%2A> -Methode öffnet die Computerkonfigurationsdatei auf dem Computer, auf dem die Anwendung ausgeführt wird. Diese Datei befindet sich in der standardmäßigen windir%\Microsoft.NET\Framework\version\config %windir%\Microsoft.NET\Framework\Version\Config.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#9)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMachineConfiguration (string locationSubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMachineConfiguration(string locationSubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationSubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="locationSubPath">Der Anwendungspfad, die Konfiguration des Computers gilt.</param>
        <summary>Öffnet die Computerkonfigurationsdatei auf dem aktuellen Computer als ein <see cref="T:System.Configuration.Configuration" /> -Objekt, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode öffnet die Computerkonfigurationsdatei, die in das Verzeichnis gemäß anwendbar ist die `locationSubPath` Parameter.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#10)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMachineConfiguration (string locationSubPath, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMachineConfiguration(string locationSubPath, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="locationSubPath">Der Anwendungspfad, die für die die Konfiguration gilt.</param>
        <param name="server">Der vollqualifizierte Name des Servers, der die Konfiguration für zurück.</param>
        <summary>Öffnet die angegebene Computer-Konfigurationsdatei auf dem angegebenen Server als ein <see cref="T:System.Configuration.Configuration" /> -Objekt, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode öffnet die Computerkonfigurationsdatei, die in dem durch angegebenen Verzeichnis befindet der `locationSubPath` Parameter und auf dem Computer, die gemäß der `server` Parameter.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#11)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMachineConfiguration (string locationSubPath, string server, IntPtr userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMachineConfiguration(string locationSubPath, string server, native int userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration(System.String,System.String,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="userToken" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="locationSubPath">Der Anwendungspfad, die für die die Konfiguration gilt.</param>
        <param name="server">Der vollqualifizierte Name des Servers, der die Konfiguration für zurück.</param>
        <param name="userToken">Ein Kontotoken verwenden.</param>
        <summary>Öffnet die angegebene Computer-Konfigurationsdatei auf dem angegebenen Server als ein <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen Sicherheitskontext, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird verwendet, um eine Konfigurationsdatei mithilfe des Identitätswechsels zuzugreifen.  
  
> [!NOTE]
>  Das Kontotoken wird normalerweise von einer Instanz von abgerufen der <xref:System.Security.Principal.WindowsIdentity> Klasse oder durch einen Aufruf von nicht verwaltetem Code, z. B. einen Aufruf der Win32-API `LogonUser`. Weitere Informationen zum Aufrufen von nicht verwaltetem Code finden Sie unter [nicht verwaltete DLL-Funktionen nutzen](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#12](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#12)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#12](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Gültige Werte wurden nicht angegeben, für die <paramref name="server" /> oder <paramref name="userToken" /> Parameter.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMachineConfiguration (string locationSubPath, string server, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMachineConfiguration(string locationSubPath, string server, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="locationSubPath">Der Anwendungspfad, die für die die Konfiguration gilt.</param>
        <param name="server">Der vollqualifizierte Name des Servers, der die Konfiguration für zurück.</param>
        <param name="userName">Den vollständigen Benutzernamen (Domäne\Benutzername) beim Öffnen der Datei verwendet.</param>
        <param name="password">Das Kennwort für den Benutzernamen ein.</param>
        <summary>Öffnet die angegebene Computer-Konfigurationsdatei auf dem angegebenen Server als ein <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen Sicherheitskontext, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird verwendet, um eine Konfigurationsdatei mithilfe des Identitätswechsels zuzugreifen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#13](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#13)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <paramref name="server" /> oder <paramref name="userName" /> und <paramref name="password" /> Parameter war ungültig.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMappedMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMappedMachineConfiguration(class System.Configuration.ConfigurationFileMap fileMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileMap" Type="System.Configuration.ConfigurationFileMap" />
      </Parameters>
      <Docs>
        <param name="fileMap">Die <see cref="T:System.Configuration.ConfigurationFileMap" /> Objekt anstelle der Standarddatei für die Computer-Konfiguration verwendet.</param>
        <summary>Öffnet die Computerkonfigurationsdatei als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMappedMachineConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMappedMachineConfiguration (System.Configuration.ConfigurationFileMap fileMap, string locationSubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMappedMachineConfiguration(class System.Configuration.ConfigurationFileMap fileMap, string locationSubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMappedMachineConfiguration(System.Configuration.ConfigurationFileMap,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileMap" Type="System.Configuration.ConfigurationFileMap" />
        <Parameter Name="locationSubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileMap">Die <see cref="T:System.Configuration.ConfigurationFileMap" /> Objekt anstelle einer Standarddatei für die Computer-Konfiguration verwendet.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <summary>Öffnet die Computerkonfigurationsdatei als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung und den Speicherort, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenMappedWebConfiguration">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie verwenden der Zuordnungsmechanismus, wenn Sie Ihre virtuelle Verzeichnishierarchie mit einem physischen Verzeichnis zuordnen müssen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie eine virtuelle Verzeichnishierarchie physisch von den anderen zugeordnet. Die hier gezeigte Beispiel wird in den überladenen Membern verwendet.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#20)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenMappedWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMappedWebConfiguration (System.Web.Configuration.WebConfigurationFileMap fileMap, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMappedWebConfiguration(class System.Web.Configuration.WebConfigurationFileMap fileMap, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration(System.Web.Configuration.WebConfigurationFileMap,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileMap" Type="System.Web.Configuration.WebConfigurationFileMap" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileMap">Die <see cref="T:System.Web.Configuration.WebConfigurationFileMap" /> Objekt anstelle einer Standardkonfigurationsdatei für die Webanwendung verwendet.</param>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <summary>Öffnet die angegebene Konfigurationsdatei von Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung und den virtuellen Pfad, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration%2A>-Methode gezeigt.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#21](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#21)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#21](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#21)]  
  
 Im vorhergehende Beispiel verwendet die folgende benutzerdefinierte Methode zum Generieren einer <xref:System.Configuration.ConfigurationFileMap> Objekt.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#20](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#20)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#20](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#20)]  
  
 Verweisen auf <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> für ein Beispiel, das zeigt, wie eine virtuelle Verzeichnishierarchie physisch von den anderen zugeordnet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMappedWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMappedWebConfiguration (System.Web.Configuration.WebConfigurationFileMap fileMap, string path, string site);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMappedWebConfiguration(class System.Web.Configuration.WebConfigurationFileMap fileMap, string path, string site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration(System.Web.Configuration.WebConfigurationFileMap,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileMap" Type="System.Web.Configuration.WebConfigurationFileMap" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileMap">Die <see cref="T:System.Web.Configuration.WebConfigurationFileMap" /> Objekt, das anstelle der Zuordnung einer Standard-Konfigurationsdatei verwendet.</param>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <summary>Öffnet die angegebene Web Application-Konfigurationsdatei als einen <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung, den virtuellen Pfad und den Standortnamen, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration%2A>-Methode gezeigt.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#22](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#22)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#22](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#22)]  
  
 Verweisen auf <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> für ein Beispiel, das zeigt, wie eine virtuelle Verzeichnishierarchie physisch von den anderen zugeordnet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenMappedWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenMappedWebConfiguration (System.Web.Configuration.WebConfigurationFileMap fileMap, string path, string site, string locationSubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenMappedWebConfiguration(class System.Web.Configuration.WebConfigurationFileMap fileMap, string path, string site, string locationSubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration(System.Web.Configuration.WebConfigurationFileMap,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileMap" Type="System.Web.Configuration.WebConfigurationFileMap" />
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="locationSubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileMap">Die <see cref="T:System.Web.Configuration.WebConfigurationFileMap" /> Objekt, das anstelle der Zuordnung einer Standard-Konfigurationsdatei verwendet.</param>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <summary>Öffnet die angegebene Konfigurationsdatei von Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen dateizuordnung, virtuellen Pfad Sitename und Speicherort, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Verwendung der <xref:System.Web.Configuration.WebConfigurationManager.OpenMappedWebConfiguration%2A>-Methode gezeigt.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#23](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#23)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#23](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#23)]  
  
 Verweisen auf <xref:System.Web.Configuration.WebConfigurationManager.OpenMachineConfiguration%2A> für ein Beispiel, das zeigt, wie eine virtuelle Verzeichnishierarchie physisch von den anderen zugeordnet.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei. Wenn <see langword="null" />, der Stammdatei "Web.config" wird geöffnet.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt mit den angegebenen virtuellen Pfad, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#14](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#14)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#14](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path, string site);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path, string site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen virtuellen Pfad und -Namens, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#15](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#15)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#15](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path, string site, string locationSubPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path, string site, string locationSubPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="locationSubPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen virtuellen Pfad Sitename und Speicherort, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Ressource Codes Berechtigung "Lesen" Berechtigungen für alle Konfigurationsdateien, die von dem sie die Einstellungen erbt. Um eine Konfigurationsdatei zu aktualisieren, muss Code zusätzlich über Schreibberechtigungen für die Konfigurationsdatei und das Verzeichnis, in dem sie vorhanden ist, verfügen.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#16](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#16)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#16](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <param name="server">Der Netzwerkname des Servers die Webanwendung befindet sich auf.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen virtuellen Pfad, Standortnamen, Speicherort und Server, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Remoteressource Codes verfügen über Administratorrechte auf dem Remotecomputer.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#17](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#17)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#17](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Serverparameter war ungültig.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, IntPtr userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, native int userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String,System.String,System.String,System.String,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="userToken" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <param name="server">Der Netzwerkname des Servers die Webanwendung befindet sich auf.</param>
        <param name="userToken">Ein Kontotoken verwenden.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen virtuellen Pfad, Standortnamen, Speicherort, Server und Sicherheitskontext, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird verwendet, um eine Konfigurationsdatei mithilfe des Identitätswechsels zuzugreifen.  
  
> [!NOTE]
>  Das Kontotoken wird normalerweise von einer Instanz von abgerufen der <xref:System.Security.Principal.WindowsIdentity> Klasse oder durch einen Aufruf von nicht verwaltetem Code, z. B. einen Aufruf der Win32-API `LogonUser`. Weitere Informationen zum Aufrufen von nicht verwaltetem Code finden Sie unter [nicht verwaltete DLL-Funktionen nutzen](~/docs/framework/interop/consuming-unmanaged-dll-functions.md).  
  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Remoteressource Codes verfügen über Administratorrechte auf dem Remotecomputer.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode zum Zugriff auf Konfigurationsinformationen.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#19](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#19)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#19](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <paramref name="server" /> oder <paramref name="userToken" /> Parameter war ungültig.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenWebConfiguration">
      <MemberSignature Language="C#" Value="public static System.Configuration.Configuration OpenWebConfiguration (string path, string site, string locationSubPath, string server, string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Configuration.Configuration OpenWebConfiguration(string path, string site, string locationSubPath, string server, string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration(System.String,System.String,System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.Configuration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="site" Type="System.String" />
        <Parameter Name="locationSubPath" Type="System.String" />
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der virtuelle Pfad der Konfigurationsdatei.</param>
        <param name="site">Der Name der Anwendung-Website, wie in der Konfiguration der Internetinformationsdienste (Internet Information Services, IIS) angezeigt.</param>
        <param name="locationSubPath">Die jeweilige Ressource für die die Konfiguration gilt.</param>
        <param name="server">Der Netzwerkname des Servers die Webanwendung befindet sich auf.</param>
        <param name="userName">Den vollständigen Benutzernamen (Domäne\Benutzername) beim Öffnen der Datei verwendet.</param>
        <param name="password">Das Kennwort für den Benutzernamen ein.</param>
        <summary>Öffnet die Konfigurationsdatei der Web-Anwendung als eine <see cref="T:System.Configuration.Configuration" /> -Objekt unter Verwendung der angegebenen virtuellen Pfad, Standortnamen, Speicherort, Server und Sicherheitskontext, lassen Sie den Lese- oder Schreibvorgängen.</summary>
        <returns>Ein <see cref="T:System.Configuration.Configuration" />-Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird verwendet, um eine Konfigurationsdatei mithilfe des Identitätswechsels zuzugreifen.  
  
 Zum Abrufen der <xref:System.Configuration.Configuration> -Objekt für eine Remoteressource Codes verfügen über Administratorrechte auf dem Remotecomputer.  
  
 Müssen Sie möglicherweise Ausführen der [ASP.NET IIS-Registrierungstool (Aspnet_regiis.exe)](http://msdn.microsoft.com/library/6491c41e-e2b0-481f-9863-db3614d5f96b) mit der `-config+` Option aus, um den Zugriff auf die Konfigurationsdateien auf dem Remotecomputer aktivieren.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Konfigurationsinformationen mit Zugriff auf die <xref:System.Web.Configuration.WebConfigurationManager.OpenWebConfiguration%2A> Methode.  
  
 [!code-csharp[System.Web.Configuration.WebConfigurationManager#18](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/CS/WebConfigurationManager.cs#18)]
 [!code-vb[System.Web.Configuration.WebConfigurationManager#18](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Configuration.WebConfigurationManager/VB/WebConfigurationManager.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <paramref name="server" /> oder <paramref name="userName" /> und <paramref name="password" /> Parameter war ungültig.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Eine gültige Konfigurationsdatei konnte nicht geladen werden.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
