<Type Name="ServiceManager" FullName="System.Activities.Presentation.ServiceManager">
  <TypeSignature Language="C#" Value="public abstract class ServiceManager : IServiceProvider, System.Collections.Generic.IEnumerable&lt;Type&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ServiceManager extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt;, class System.Collections.IEnumerable, class System.IServiceProvider" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.ServiceManager" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IServiceProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Implementiert <see cref="T:System.IserviceProvider" /> und stellt den Zugriff auf Dienste bereit, die vom Bearbeitungskontext angeboten werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.Presentation.EditingContext.Services%2A> stellen Funktionen dar, die entweder vom Host für den zu verwendenden Designer bereitgestellt werden oder die vom Designer verwendet werden, um Funktionen für alle Designer innerhalb des Editors bereitzustellen. Wird von der <xref:System.Activities.Presentation.EditingContext>-Eigenschaft aus dem <xref:System.Activities.Presentation.EditingContext.Services%2A> abgerufen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ServiceManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Activities.Presentation.ServiceManager" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der zu überprüfende Diensttyp.</param>
        <summary>Gibt einen booleschen Wert zurück, der angibt, ob der Dienst-Manager einen Dienst vom angegebenen Typ enthält.</summary>
        <returns>
          <see langword="true" />Wenn ein Dienst des Typs <paramref name="serviceType" /> wurde veröffentlicht werden; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public bool Contains&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Contains``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Der zu überprüfende Diensttyp.</typeparam>
        <summary>Gibt einen booleschen Wert zurück, der angibt, ob der Dienst-Manager einen Dienst vom angegebenen Typ enthält.</summary>
        <returns>
          <see langword="true" />Wenn ein Dienst des Typs <paramref name="serviceType" /> wurde veröffentlicht werden; andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerator&lt;Type&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Type&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Enumerator ab, der zum Auflisten aller Dienste verwendet werden kann, die dieser Dienst-Manager veröffentlicht.</summary>
        <returns>Gibt das <see cref="T:System.Collections.Generic.IEnumerator`1" />-Element zurück, das eine Enumeration der veröffentlichten Dienste enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetRequiredService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetRequiredService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetRequiredService``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Der Typ des abzurufenden Diensts.</typeparam>
        <summary>Ruft den angeforderten Dienst ab.</summary>
        <returns>Gibt einen generischen Typ zurück, bei dem es sich um eine Instanz des Diensts handelt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Gegensatz zu <xref:System.Activities.Presentation.ServiceManager.GetService%2A> löst diese Methode eine <xref:System.NotSupportedException> aus, wenn der Dienst nicht verfügbar ist.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Es ist kein Dienst des angegebenen Typs vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService">
      <MemberSignature Language="C#" Value="public abstract object GetService (Type serviceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetService(class System.Type serviceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ des abzurufenden Diensts.</param>
        <summary>Ruft den angeforderten Dienst ab.  Diese Methode gibt <see langword="null" /> , wenn der Dienst nicht gefunden werden konnte.</summary>
        <returns>Gibt <see cref="T:System.Object" />, dies ist eine Instanz des Diensts oder <see langword="null" /> , wenn der Dienst nicht veröffentlicht wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetService&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public TServiceType GetService&lt;TServiceType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TServiceType GetService&lt;TServiceType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetService``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TServiceType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TServiceType">Der Typ des abzurufenden Diensts.</typeparam>
        <summary>Ruft den angeforderten Dienst ab.  Diese Methode gibt <see langword="null" /> , wenn der Dienst nicht gefunden werden konnte.</summary>
        <returns>Gibt einen generischen Typ, der eine Instanz des Diensts ist, oder <see langword="null" /> , wenn der Dienst nicht veröffentlicht wurde.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTarget">
      <MemberSignature Language="C#" Value="protected static object GetTarget (Delegate callback);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig object GetTarget(class System.Delegate callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.GetTarget(System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="callback">Der Delegat, für den das Ziel abgerufen wird.</param>
        <summary>Eine Hilfsmethode, die das Zielobjekt für einen Delegaten zurückgibt. Wenn der Delegat als Proxy für einen generischen Delegaten erstellt wurde, wird anstelle des Proxys korrekt das ursprüngliche Objekt zurückgegeben.</summary>
        <returns>Gibt ein <see cref="T:System.Object" />-Element zurück, wobei es sich um das Rückrufziel handelt. Der Rückgabewert kann <see langword="null" /> , wenn der Rückruf kein statisches Objekt darstellt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, System.Activities.Presentation.PublishServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, class System.Activities.Presentation.PublishServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Activities.Presentation.PublishServiceCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ des zu veröffentlichenden Diensts.</param>
        <param name="callback">Ein Rückruf, der aufgerufen wird, wenn eine Instanz des Diensts benötigt wird.</param>
        <summary>Veröffentlicht den angegebenen Diensttyp, deklariert jedoch keine Instanz. Wenn der Dienst angefordert wird, wird der Publish-Dienstrückruf aufgerufen, um die Instanz zu erstellen. Der Rückruf wird nur einmal aufgerufen. Danach wird die zurückgegebene Instanz zwischengespeichert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="serviceType" /> wurde bereits veröffentlicht.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish">
      <MemberSignature Language="C#" Value="public abstract void Publish (Type serviceType, object serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Publish(class System.Type serviceType, object serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish(System.Type,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="serviceInstance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ des zu veröffentlichenden Diensts.</param>
        <param name="serviceInstance">Eine Instanz des Diensts.</param>
        <summary>Veröffentlicht den angegebenen Dienst. Nach seiner Veröffentlichung bleibt die Dienstinstanz im Dienst-Manager erhalten, bis der Bearbeitungskontext verworfen wird.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> oder <paramref name="serviceInstance" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="serviceInstance" /> wird nicht von <paramref name="serviceType" /> abgeleitet bzw. implementiert diesen Typ nicht, oder <paramref name="serviceType" /> wurde bereits veröffentlicht.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(class System.Activities.Presentation.PublishServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(System.Activities.Presentation.PublishServiceCallback{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.PublishServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Der Typ des zu veröffentlichenden Diensts.</typeparam>
        <param name="callback">Ein Rückruf, der aufgerufen wird, wenn eine Instanz des Diensts benötigt wird.</param>
        <summary>Veröffentlicht den angegebenen Diensttyp, deklariert jedoch noch keine Instanz. Wenn der Dienst angefordert wird, die <see langword="PublishServiceCallback" /> wird aufgerufen, um die Instanz zu erstellen. Der Rückruf wird nur einmal aufgerufen. Danach wird die zurückgegebene Instanz zwischengespeichert.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Publish&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Publish&lt;TServiceType&gt; (TServiceType serviceInstance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Publish&lt;TServiceType&gt;(!!TServiceType serviceInstance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Publish``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="serviceInstance" Type="TServiceType" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Der Typ des zu veröffentlichenden Diensts.</typeparam>
        <param name="serviceInstance">Eine Instanz des Diensts.</param>
        <summary>Veröffentlicht den angegebenen Dienst. Nach seiner Veröffentlichung bleibt die Dienstinstanz im Dienst-Manager erhalten, bis der Bearbeitungskontext verworfen wird.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceInstance" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveCallback">
      <MemberSignature Language="C#" Value="protected static Delegate RemoveCallback (Delegate existing, Delegate toRemove);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Delegate RemoveCallback(class System.Delegate existing, class System.Delegate toRemove) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.RemoveCallback(System.Delegate,System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="existing" Type="System.Delegate" />
        <Parameter Name="toRemove" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="existing">Der bestehende Delegat, aus dem der Rückruf entfernt werden soll.</param>
        <param name="toRemove">Der zu entfernende Rückruf.</param>
        <summary>Eine Hilfsmethode, die führt eine <see langword="Delegate.Remove" /> Vorgang, und Delegaten, die Proxys für generische Rückrufe werden entpackt. Verwenden Sie diese Methode in Ihren <see cref="Overload:System.Activities.Presentation.ServiceManager.UnSubscribe" />-Implementierungen.</summary>
        <returns>Gibt <see cref="T:System.Delegate" /> zurück, wobei es sich um einen neuen Wert handelt, der dem vorhandenen Delegaten zugewiesen wird.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subscribe">
      <MemberSignature Language="C#" Value="public abstract void Subscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Subscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Typ des Diensts, der abonniert wird.</param>
        <param name="callback">Ein Rückruf, der benachrichtigt wird, wenn der Dienst verfügbar ist.</param>
        <summary>Ruft den bereitgestellten Rückruf auf, wenn der angeforderte Dienst veröffentlicht wurde. Falls der Dienst bereits verfügbar war, ruft diese Methode den Rückruf sofort auf.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Subscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Subscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Subscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Subscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Der Typ des Diensts, der abonniert wird.</typeparam>
        <param name="callback">Ein Rückruf, der benachrichtigt wird, wenn der Dienst verfügbar ist.</param>
        <summary>Ruft den bereitgestellten Rückruf auf, wenn der angeforderte Dienst veröffentlicht wurde. Falls der Dienst bereits verfügbar war, ruft diese Methode den Rückruf sofort auf.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft einen Enumerator ab, der zum Auflisten aller Dienste verwendet werden kann, die dieser Dienst-Manager veröffentlicht.</summary>
        <returns>Gibt das <see cref="T:System.Collections.IEnumerator" />-Element zurück, das eine Enumeration der veröffentlichten Dienste enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe">
      <MemberSignature Language="C#" Value="public abstract void Unsubscribe (Type serviceType, System.Activities.Presentation.SubscribeServiceCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unsubscribe(class System.Type serviceType, class System.Activities.Presentation.SubscribeServiceCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe(System.Type,System.Activities.Presentation.SubscribeServiceCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback" />
      </Parameters>
      <Docs>
        <param name="serviceType">Der Diensttyp, für den das Abonnement entfernt werden soll.</param>
        <param name="callback">Das Rückrufobjekt, das aus dem Abonnement entfernt werden soll.</param>
        <summary>Entfernt ein Abonnement für einen Diensttyp.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="serviceType" /> oder <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unsubscribe&lt;TServiceType&gt;">
      <MemberSignature Language="C#" Value="public void Unsubscribe&lt;TServiceType&gt; (System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt; callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unsubscribe&lt;TServiceType&gt;(class System.Activities.Presentation.SubscribeServiceCallback`1&lt;!!TServiceType&gt; callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.ServiceManager.Unsubscribe``1(System.Activities.Presentation.SubscribeServiceCallback{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TServiceType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.SubscribeServiceCallback&lt;TServiceType&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TServiceType">Der Diensttyp, für den das Abonnement entfernt werden soll.</typeparam>
        <param name="callback">Das Rückrufobjekt, das aus dem Abonnement entfernt werden soll.</param>
        <summary>Entfernt ein Abonnement für einen Diensttyp.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
