<Type Name="TextInfo" FullName="System.Globalization.TextInfo">
  <TypeSignature Language="C#" Value="public class TextInfo : ICloneable, System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit TextInfo extends System.Object implements class System.ICloneable, class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.TextInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiert für ein bestimmtes Schriftsystem typische Texteigenschaften und -verhaltensweisen (beispielsweise die Groß-/Kleinschreibung).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schriftsystem ist die Sammlung von Skripts und orthografische Regeln, die erforderlich sind, um einer anderen Sprache als Text darzustellen. Die <xref:System.Globalization.TextInfo> -Klasse stellt ein Schriftsystem dar.  
  
 Sollte die Anwendung verwendet die <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> -Eigenschaft zum Abrufen der <xref:System.Globalization.TextInfo> Objekt für einen bestimmten <xref:System.Globalization.CultureInfo> Objekt. Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> -Eigenschaft des Objekts zurückgegeben wird, indem Sie die <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> Eigenschaft, um sicherzustellen, dass das Verhalten des Vorgangs unabhängig von konsistent ist Einstellungen des Betriebssystems Kultur fest.  
  
## <a name="overrides"></a>Overrides  
 Der Benutzer kann den Regions- und Sprachoptionen Teil Systemsteuerung Optionen verwenden, um die Werte von der aktuellen Kultur von Windows zu überschreiben. Der Benutzer kann z. B. das Datum in einem anderen Format anzeigen oder mit einer Währung als den Standardwert für die Kultur auswählen. Wenn die <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> -Eigenschaftensatz auf `true`, die Eigenschaftswerte vom zurückgegebenen Objekte die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType>, <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=nameWithType>, und <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> Eigenschaften werden auch von den Einstellungen des Benutzers abgerufen. Wenn die benutzereinstellungen nicht kompatibel mit der Kultur zugeordnet sind die <xref:System.Globalization.CultureInfo>, z. B. ist der ausgewählten Kalender nicht eines der <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>, die Ergebnisse der Methoden und die Werte der Eigenschaften sind nicht definiert.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ANSICodePage">
      <MemberSignature Language="C#" Value="public virtual int ANSICodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ANSICodePage" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.ANSICodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die American National Standards Institute (ANSI)-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</summary>
        <value>Die ANSI-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues Objekt, das eine Kopie des aktuellen <see cref="T:System.Globalization.TextInfo" /> Objekt.</summary>
        <returns>Eine neue Instanz der <see cref="T:System.Object" /> , das die memberspezifische Klon des aktuellen <see cref="T:System.Globalization.TextInfo" /> Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der neue memberspezifische Klon ist nicht schreibgeschützt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die <xref:System.Globalization.TextInfo.Clone%2A> und <xref:System.Globalization.TextInfo.ReadOnly%2A> Methoden.  
  
 [!code-csharp[sys.glob.textinfo.clone#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.textinfo.clone/cs/ro.cs#1)]
 [!code-vb[sys.glob.textinfo.clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.textinfo.clone/vb/ro.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Namen der verknüpften mit der aktuellen Kultur <see cref="T:System.Globalization.TextInfo" /> Objekt.</summary>
        <value>Der Name einer Kultur.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Globalization.TextInfo> von einer bestimmten Kultur erstellt und die <xref:System.Globalization.TextInfo.CultureName%2A> Eigenschaft gibt den Namen dieser Kultur zurück.  
  
 Die <xref:System.Globalization.TextInfo.CultureName%2A> Eigenschaft gibt immer eine bestimmte Kultur, anstatt eine neutrale Kultur. Wenn <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> verfügt über eine neutrale Kultur als seinen Wert und dann das entsprechende <xref:System.Globalization.TextInfo.CultureName%2A> wurde als Wert eine beliebige spezifische Kultur, die die gleiche Sprache verwendet. Z. B. die <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaft "En" zurück, für die neutrale Kultur Englisch, sondern den entsprechenden <xref:System.Globalization.TextInfo.CultureName%2A> Eigenschaft möglicherweise "En-US" für die Kultur Englisch (Vereinigte Staaten) zurück. Wenn die <xref:System.Globalization.TextInfo> Objekt bezieht sich auf eine bestimmte Kultur, anstatt eine neutrale Kultur, den Wert des seine <xref:System.Globalization.TextInfo.CultureName%2A> Eigenschaft ist immer identisch mit der <xref:System.Globalization.CultureInfo.Name%2A> Eigenschaftswert, der die zugehörigen <xref:System.Globalization.CultureInfo> Objekt.  
  
 Auf ähnliche Weise die <xref:System.Globalization.TextInfo.CultureName%2A> -Eigenschaft reflektiert nie eine bestimmte Sortierung. Es entspricht immer eine Standard-Sortierreihenfolge. Die Standardsortierreihenfolge für Spanisch (Spanien) ist z. B. die internationale Sortierreihenfolge. Wenn <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> dann ist es-ES_tradnl (Spanisch mit der herkömmlichen Sortierreihenfolge) den entsprechenden <xref:System.Globalization.TextInfo.CultureName%2A> ist es-ES (Spanisch mit internationalen Standard-Sortierreihenfolge).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EBCDICCodePage">
      <MemberSignature Language="C#" Value="public virtual int EBCDICCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EBCDICCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.EBCDICCodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Extended Binary Coded Decimal Interchange Code (EBCDIC)-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</summary>
        <value>Die EBCDIC-Codepage, die durch das Schriftsystem, der vom aktuellen verwendet <see cref="T:System.Globalization.TextInfo" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Das Objekt, das mit der aktuellen <see cref="T:System.Globalization.TextInfo" /> verglichen werden soll.</param>
        <summary>Bestimmt, ob das angegebene Objekt der gleichen Schriftsystem wie die aktuelle darstellt <see cref="T:System.Globalization.TextInfo" /> Objekt.</summary>
        <returns>
          <see langword="true" />Wenn <paramref name="obj" /> stellt die gleichen Schriftsystem wie die aktuelle <see cref="T:System.Globalization.TextInfo" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.Equals%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fungiert als Hashfunktion für die aktuelle <see cref="T:System.Globalization.TextInfo" />, die sich für die Verwendung in Hashalgorithmen und -datenstrukturen eignet, z. B. in einer Hashtabelle.</summary>
        <returns>Ein Hashcode für die aktuelle <see cref="T:System.Globalization.TextInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>.  
  
 Diese Methode generiert für zwei Objekte, die gemäß der <xref:System.Globalization.TextInfo.Equals%2A>-Methode gleich sind, denselben Hashcode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die aktuelle <see cref="T:System.Globalization.TextInfo" /> Objekt ist schreibgeschützt.</summary>
        <value>
          <see langword="true" />Wenn die aktuelle <see cref="T:System.Globalization.TextInfo" /> Objekt ist schreibgeschützt ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Globalization.TextInfo.IsReadOnly%2A> Eigenschaft `true`, die Anwendung kann nicht geändert werden, die Eigenschaften des aktuellen <xref:System.Globalization.TextInfo> Objekt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die aktuelle <see cref="T:System.Globalization.TextInfo" /> Objekt darstellt, in dem sich Text von rechts nach links fließt, Schriftsystem.</summary>
        <value>
          <see langword="true" />Wenn der Text von rechts nach links; fließt andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Globalization.TextInfo.IsRightToLeft%2A> Eigenschaft gibt an, die bestimmenden Richtung von geschriebenem Text und die relative Position der Benutzeroberflächenelemente wie Schaltflächen und Bildlaufleisten.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Kulturbezeichner für die Kultur mit dem aktuellen <see cref="T:System.Globalization.TextInfo" /> Objekt.</summary>
        <value>Eine Zahl, die Kultur aus der identifiziert, aktuellen <see cref="T:System.Globalization.TextInfo" /> Objekt erstellt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bestimmte vordefinierte Kulturnamen und Bezeichner verwendet werden, indem dieser und anderen Klassen in der <xref:System.Globalization?displayProperty=nameWithType> -Namespace sowie die Windows-API. Die ausführliche kulturinformationen wird definiert, der [National Language Support (NLS) API-Referenz finden Sie in der Go Global Developer Center](http://msdn.microsoft.com/goglobal/bb896001.aspx).  
  
 Die <xref:System.Globalization.TextInfo.LCID%2A> Eigenschaft gibt immer einen bestimmten Kulturbezeichner statt eine neutrale Kultur-ID wieder. Wenn <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> festgelegt ist, zu einer neutralen Kultur-ID, den entsprechenden <xref:System.Globalization.TextInfo.LCID%2A> wurde als Wert einen beliebige spezifische Kultur-Bezeichner, der die gleiche Sprache verwendet. Z. B. die <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> Eigenschaft 0 x 0009, für die neutrale Kultur Englisch, der mit dem Namen "En" zurück. Allerdings das entsprechende <xref:System.Globalization.TextInfo.LCID%2A> Eigenschaft möglicherweise 0 x 0409 für die Kultur Englisch (Vereinigte Staaten) ist, mit der Bezeichnung de-de zurück.  
  
 Auf ähnliche Weise die <xref:System.Globalization.TextInfo.LCID%2A> Eigenschaft immer eine Standard-Sortierreihenfolge entspricht, und reflektiert nie keine bestimmte Sortierreihenfolge. Die Standardsortierreihenfolge für Spanisch (Spanien) ist z. B. die internationale Sortierreihenfolge. Wenn <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> ist festgelegt auf "0x040A" (Spanisch mit der herkömmlichen Sortierreihenfolge), das entsprechende <xref:System.Globalization.TextInfo.LCID%2A> Wert ist "0x0C0A" (Spanisch mit internationalen Standard-Sortierreihenfolge).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListSeparator">
      <MemberSignature Language="C#" Value="public virtual string ListSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ListSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.ListSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeichenfolge ab, die Elemente in einer Liste trennt, oder legt diese fest.</summary>
        <value>Die Zeichenfolge, die Elemente in einer Liste trennt.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Der Wert in einem Set-Vorgang ist null.</exception>
        <exception cref="T:System.InvalidOperationException">In einem Set-Vorgang, den aktuellen <see cref="T:System.Globalization.TextInfo" /> Objekt ist schreibgeschützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="MacCodePage">
      <MemberSignature Language="C#" Value="public virtual int MacCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MacCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.MacCodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Macintosh-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</summary>
        <value>Die Macintosh-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OEMCodePage">
      <MemberSignature Language="C#" Value="public virtual int OEMCodePage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 OEMCodePage" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.TextInfo.OEMCodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Originalgerätehersteller (OEM)-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</summary>
        <value>Die OEM-Codepage verwendet, die für das Schriftsystem, der vom aktuellen <see cref="T:System.Globalization.TextInfo" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.TextInfo ReadOnly (System.Globalization.TextInfo textInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.TextInfo ReadOnly(class System.Globalization.TextInfo textInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textInfo" Type="System.Globalization.TextInfo" />
      </Parameters>
      <Docs>
        <param name="textInfo">Ein <see cref="T:System.Globalization.TextInfo" />-Objekt.</param>
        <summary>Gibt eine schreibgeschützte Version des angegebenen <see cref="T:System.Globalization.TextInfo" /> Objekt.</summary>
        <returns>Die <see cref="T:System.Globalization.TextInfo" /> Objekt gemäß der <paramref name="textInfo" /> Parameter, wenn <paramref name="textInfo" /> ist schreibgeschützt.  
  
 - oder -   
  
 Eine nur-Lese memberspezifische Kopie der <see cref="T:System.Globalization.TextInfo" /> angegebene Objekt <paramref name="textInfo" />, wenn <paramref name="textInfo" /> nicht schreibgeschützt ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die <xref:System.Globalization.TextInfo.Clone%2A> und <xref:System.Globalization.TextInfo.ReadOnly%2A> Methoden.  
  
 [!code-csharp[sys.glob.textinfo.clone#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.textinfo.clone/cs/ro.cs#1)]
 [!code-vb[sys.glob.textinfo.clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.textinfo.clone/vb/ro.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="textInfo" /> ist NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Die Quelle des Deserialisierungsereignisses.</param>
        <summary>Löst das Deserialisierungsereignis aus, wenn die Deserialisierung abgeschlossen ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public virtual char ToLower (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ToLower(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToLower(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Das Zeichen in Kleinbuchstaben konvertiert.</param>
        <summary>Wandelt das angegebene Zeichen in einen Kleinbuchstaben um.</summary>
        <returns>Das in einen Kleinbuchstaben konvertierte angegebene Zeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schreibweise Semantik richten sich nach der Kultur verwendet. Für die invariante Kultur ist die Semantik der Schreibweise nicht kulturabhängig. Semantik der Groß-und Kleinschreibung für eine bestimmte Kultur für diese Kultur ist.  
  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> , stellen Sie sicher, dass das Verhalten unabhängig von den kultureinstellungen des Systems übereinstimmt. Allerdings muss die invariante Kultur nur von Prozessen verwendet werden, die kulturunabhängig Ergebnisse, wie z. B. Systemdiensten erfordern. Andernfalls erzeugt die Ergebnisse, die möglicherweise sprachlich falsch oder für ungeeignet.  
  
 Weitere Informationen zu Kulturen finden Sie unter <xref:System.Globalization.CultureInfo>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Groß-/Kleinschreibung einer Zeichenfolge auf der Grundlage der Kultur Englisch (Vereinigte Staaten) mit der Kultur En-US.  
  
 [!code-cpp[System.Globalization.TextInfo_casing#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CPP/textinfo_casing.cpp#1)]
 [!code-csharp[System.Globalization.TextInfo_casing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CS/textinfo_casing.cs#1)]
 [!code-vb[System.Globalization.TextInfo_casing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/VB/textinfo_casing.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToLower">
      <MemberSignature Language="C#" Value="public virtual string ToLower (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToLower(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToLower(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Die Zeichenfolge in Kleinbuchstaben konvertiert.</param>
        <summary>Wandelt die angegebene Zeichenfolge in Kleinbuchstaben um.</summary>
        <returns>Die in Kleinbuchstaben konvertierte angegebene Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeichenfolge kann unterschiedlich lang aus der Eingabezeichenfolge sind. Weitere Informationen zur Groß-und Kleinschreibung finden Sie in der Unicode-Technical Report #21 "Schreibungszuordnungen" durch das Unicode Consortium (http://www.unicode.org) veröffentlicht. Die aktuelle Implementierung behält die Länge der Zeichenfolge. Jedoch wird dieses Verhalten ist nicht garantiert und kann in zukünftigen Implementierungen ändern.  
  
 Schreibweise Semantik richten sich nach der Kultur verwendet. Für die invariante Kultur ist die Semantik der Schreibweise nicht kulturabhängig. Semantik der Groß-und Kleinschreibung für eine bestimmte Kultur für diese Kultur ist.  
  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> , stellen Sie sicher, dass das Verhalten unabhängig von den kultureinstellungen des Systems übereinstimmt. Allerdings muss die invariante Kultur nur von Prozessen verwendet werden, die kulturunabhängig Ergebnisse, wie z. B. Systemdiensten erfordern. Andernfalls erzeugt die Ergebnisse, die möglicherweise sprachlich falsch oder für ungeeignet.  
  
 Weitere Informationen zu Kulturen finden Sie unter <xref:System.Globalization.CultureInfo>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Groß-/Kleinschreibung einer Zeichenfolge auf der Grundlage der Kultur Englisch (Vereinigte Staaten) mit der Kultur En-US.  
  
 [!code-cpp[System.Globalization.TextInfo_casing#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CPP/textinfo_casing.cpp#1)]
 [!code-csharp[System.Globalization.TextInfo_casing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CS/textinfo_casing.cs#1)]
 [!code-vb[System.Globalization.TextInfo_casing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/VB/textinfo_casing.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> ist NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die das aktuelle <see cref="T:System.Globalization.TextInfo" />-Objekt darstellt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle <see cref="T:System.Globalization.TextInfo" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode überschreibt <xref:System.Object.ToString%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToTitleCase">
      <MemberSignature Language="C#" Value="public string ToTitleCase (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToTitleCase(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToTitleCase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Die Zeichenfolge in titelschreibung konvertiert.</param>
        <summary>Konvertiert die angegebene Zeichenfolge in große Anfangsbuchstaben (außer Wörtern, die vollständig in Großbuchstaben sind, die als Akronyme berücksichtigt werden.).</summary>
        <returns>Die in Schreibung mit großem Anfangsbuchstaben konvertierte angegebene Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Im Allgemeinen konvertiert titelschreibweise der erste Buchstabe eines Worts in Großbuchstaben und die restlichen Zeichen in Kleinbuchstaben. Allerdings bietet diese Methode zurzeit keine entsprechende Groß-/Kleinschreibung, um ein Wort zu konvertieren, die vollständig in Großbuchstaben, z. B. eines Akronyms ist. Die folgende Tabelle zeigt, dass die Methode mehrere Zeichenfolgen gerendert wird.  
  
|Eingabe|Sprache|Erwartetes Ergebnis|Tatsächliche Ergebnis|  
|-----------|--------------|---------------------|-------------------|  
|War und Zuverlässigkeit|Englisch|War und Zuverlässigkeit|War und Zuverlässigkeit|  
|Pro Anhalter Durch Die Galaxis|Deutsch|Pro Anhalter Durch Die Galaxis|Pro Anhalter Durch Die Galaxis|  
|LES Naufragés d'ythaq|Französisch|LES Naufragés d'Ythaq|LES Naufragés D'ythaq|  
  
 Wie oben veranschaulicht die <xref:System.Globalization.TextInfo.ToTitleCase%2A> Methode stellt eine beliebige Schreibweise Verhalten also nicht unbedingt linguistisch korrekte Schreibung bereit. Eine linguistisch korrekte Schreibung Lösung würde zusätzliche Regeln erfordern, und der aktuelle Algorithmus ist etwas einfacher und schneller. Wir behalten uns das Recht, diese langsamer API in der Zukunft.  
  
 Die aktuelle Implementierung von der <xref:System.Globalization.TextInfo.ToTitleCase%2A> -Methode ergibt eine Ausgabezeichenfolge, die die gleiche Länge wie die Eingabezeichenfolge ist. Jedoch wird dieses Verhalten wird nicht garantiert und konnte die in einer zukünftigen Implementierung geändert werden.  
  
   
  
## Examples  
 Im folgende Beispiel ändert die Groß-/Kleinschreibung einer Zeichenfolge auf der Grundlage der Kultur Englisch (Vereinigte Staaten) mit der Kultur En-US.  
  
 [!code-cpp[System.Globalization.TextInfo_casing#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CPP/textinfo_casing.cpp#1)]
 [!code-csharp[System.Globalization.TextInfo_casing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CS/textinfo_casing.cs#1)]
 [!code-vb[System.Globalization.TextInfo_casing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/VB/textinfo_casing.vb#1)]  
  
 Im folgenden Beispiel wird jede Zeichenfolge in einem Array an die <xref:System.Globalization.TextInfo.ToTitleCase%2A>-Methode übergeben. Die Zeichenfolgen enthalten sowohl Titelzeichenfolgen als auch Akronyme. Die Zeichenfolgen werden in titelschreibung konvertiert, mit den Konventionen der Kultur En-US.  
  
 [!code-csharp[System.Globalization.TextInfo.ToTitleCase#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.textinfo.totitlecase/cs/totitlecase2.cs#1)]
 [!code-vb[System.Globalization.TextInfo.ToTitleCase#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.textinfo.totitlecase/vb/totitlecase2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public virtual char ToUpper (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char ToUpper(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToUpper(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Das Zeichen in Großbuchstaben zu konvertieren.</param>
        <summary>Wandelt das angegebene Zeichen in einen Großbuchstaben um.</summary>
        <returns>Das in einen Großbuchstaben konvertierte angegebene Zeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Schreibweise Semantik richten sich nach der Kultur verwendet. Für die invariante Kultur ist die Semantik der Schreibweise nicht kulturabhängig. Semantik der Groß-und Kleinschreibung für eine bestimmte Kultur für diese Kultur ist.  
  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> , stellen Sie sicher, dass das Verhalten unabhängig von den kultureinstellungen des Systems übereinstimmt. Allerdings muss die invariante Kultur nur von Prozessen verwendet werden, die kulturunabhängig Ergebnisse, wie z. B. Systemdiensten erfordern. Andernfalls erzeugt die Ergebnisse, die möglicherweise sprachlich falsch oder für ungeeignet.  
  
 Weitere Informationen zu Kulturen finden Sie unter <xref:System.Globalization.CultureInfo>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Groß-/Kleinschreibung einer Zeichenfolge auf der Grundlage der Kultur Englisch (Vereinigte Staaten) mit der Kultur En-US.  
  
 [!code-cpp[System.Globalization.TextInfo_casing#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CPP/textinfo_casing.cpp#1)]
 [!code-csharp[System.Globalization.TextInfo_casing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CS/textinfo_casing.cs#1)]
 [!code-vb[System.Globalization.TextInfo_casing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/VB/textinfo_casing.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToUpper">
      <MemberSignature Language="C#" Value="public virtual string ToUpper (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToUpper(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.TextInfo.ToUpper(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Die Zeichenfolge in Großbuchstaben zu konvertieren.</param>
        <summary>Wandelt die angegebene Zeichenfolge in Großbuchstaben um.</summary>
        <returns>Die in Großbuchstaben konvertierte angegebene Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeichenfolge kann unterschiedlich lang aus der Eingabezeichenfolge sind. Weitere Informationen zur Groß-und Kleinschreibung finden Sie in der Unicode-Technical Report #21 "Schreibungszuordnungen" durch das Unicode Consortium (http://www.unicode.org) veröffentlicht. Die aktuelle Implementierung behält die Länge der Zeichenfolge. Jedoch wird dieses Verhalten ist nicht garantiert und kann in zukünftigen Implementierungen ändern.  
  
 Schreibweise Semantik richten sich nach der Kultur verwendet. Für die invariante Kultur ist die Semantik der Schreibweise nicht kulturabhängig. Semantik der Groß-und Kleinschreibung für eine bestimmte Kultur für diese Kultur ist.  
  
 Wenn eine sicherheitsentscheidung eines Zeichenfolgenvergleichs oder eine Änderung der Groß-/Kleinschreibung abhängig ist, sollte die Anwendung verwenden die <xref:System.Globalization.CultureInfo.InvariantCulture%2A> , stellen Sie sicher, dass das Verhalten unabhängig von den kultureinstellungen des Systems übereinstimmt. Allerdings muss die invariante Kultur nur von Prozessen verwendet werden, die kulturunabhängig Ergebnisse, wie z. B. Systemdiensten erfordern. Andernfalls erzeugt die Ergebnisse, die möglicherweise sprachlich falsch oder für ungeeignet.  
  
 Weitere Informationen zu Kulturen finden Sie unter <xref:System.Globalization.CultureInfo>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Groß-/Kleinschreibung einer Zeichenfolge auf der Grundlage der Kultur Englisch (Vereinigte Staaten) mit der Kultur En-US.  
  
 [!code-cpp[System.Globalization.TextInfo_casing#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CPP/textinfo_casing.cpp#1)]
 [!code-csharp[System.Globalization.TextInfo_casing#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/CS/textinfo_casing.cs#1)]
 [!code-vb[System.Globalization.TextInfo_casing#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.TextInfo_casing/VB/textinfo_casing.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> ist NULL.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
