<Type Name="ExceptionHandler" FullName="System.ServiceModel.Dispatcher.ExceptionHandler">
  <TypeSignature Language="C#" Value="public abstract class ExceptionHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExceptionHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.ExceptionHandler" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Erweitern der <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> Klasse, um einen Ausnahmehandler für nicht behandelte Ausnahmen zu erstellen, die in der Windows Communication Foundation (WCF)-Laufzeit auftreten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erweitern Sie die <xref:System.ServiceModel.Dispatcher.ExceptionHandler>-Klasse, und überschreiben Sie die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode, um festzulegen, ob eine Ausnahme die Anwendung beenden soll. Erstellen Sie dann eine neue Instanz Ihrer benutzerdefinierten <xref:System.ServiceModel.Dispatcher.ExceptionHandler>-Klasse, und weisen Sie diese der statischen <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>-Eigenschaft oder der <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>-Eigenschaft zu, bevor Sie [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Clients oder -Dienste erstellen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der abstrakten Klasse <xref:System.ServiceModel.Dispatcher.ExceptionHandler> veranschaulicht, die die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode überschreibt.  
  
 [!code-csharp[S_UEExceptionHandler#0](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#0)]
 [!code-vb[S_UEExceptionHandler#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#0)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie der benutzerdefinierte `MyExceptionHandler` für nicht verarbeitete Ausnahmen aktiviert wird, die innerhalb der [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Laufzeit auftreten.  
  
 [!code-csharp[S_UEExceptionHandler#1](~/samples/snippets/csharp/VS_Snippets_CFX/s_ueexceptionhandler/cs/program.cs#1)]
 [!code-vb[S_UEExceptionHandler#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/s_ueexceptionhandler/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExceptionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlwaysHandle">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AlwaysHandle" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Instanz von <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" /> ab, die alle Ausnahmen verarbeitet.</summary>
        <value>Ein <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Objekt, das <see langword="true" /> für alle Ausnahmen zurückgibt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AsynchronousThreadExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler AsynchronousThreadExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Implementierung für die Anwendungsdomäne ab, oder legt diese fest.</summary>
        <value>Weisen Sie ein benutzerdefiniertes <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Objekt zu, das nicht verarbeitete Ausnahmen empfängt, die in asynchronen [!INCLUDE[indigo1](~/includes/indigo1-md.md)]-Threads auftreten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig ist die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AsynchronousThreadExceptionHandler%2A>-Eigenschaft `null`, und nicht verarbeitete Ausnahmen in asynchronen [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Threads beenden die Anwendung.  Legen Sie diese Eigenschaft auf ein <xref:System.ServiceModel.Dispatcher.ExceptionHandler>-Objekt fest, um diese Ausnahmen zu empfangen und darauf zu reagieren.  
  
 Wenn eine nicht verarbeitete Ausnahme in einem asynchronen [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Thread auftritt und diesen Handler erreicht, kann der Zustand der Anwendungsdomäne beeinträchtigt werden.  <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>sollte keine zurückgeben `true` für diese Ausnahmen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleException">
      <MemberSignature Language="C#" Value="public abstract bool HandleException (Exception exception);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleException(class System.Exception exception) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="exception">Die Ausnahme, die innerhalb der [!INCLUDE[indigo1](~/includes/indigo1-md.md)]-Laufzeit aufgetreten ist und die die Anwendung beenden kann.</param>
        <summary>Wenn dies in einer abgeleiteten Klassen überschrieben wird, wird <see langword="true" /> zurückgegeben, wenn die Ausnahme verarbeitet wurde, oder <see langword="false" />, wenn die Ausnahme erneut ausgelöst werden und die Anwendung beendet werden soll.</summary>
        <returns>
          <see langword="true" />, wenn die Ausnahme verarbeitet wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Eigenschaft gibt `true` zurück, wenn die Ausnahme verarbeitet wurde. Wenn sie `false` zurückgibt oder eine andere Ausnahme auslöst, wird die ursprüngliche Ausnahme erneut ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung der abstrakten Klasse <xref:System.ServiceModel.Dispatcher.ExceptionHandler> veranschaulicht, die die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>-Methode überschreibt.  
  
  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie der benutzerdefinierte `MyExceptionHandler` für nicht verarbeitete Ausnahmen aktiviert wird, die innerhalb der [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Laufzeit auftreten.  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransportExceptionHandler">
      <MemberSignature Language="C#" Value="public static System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.ServiceModel.Dispatcher.ExceptionHandler TransportExceptionHandler" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.Dispatcher.ExceptionHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die aktuelle Transport-<see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Implementierung für die Anwendungsdomäne ab, oder legt diese fest.</summary>
        <value>Ein benutzerdefiniertes <see cref="T:System.ServiceModel.Dispatcher.ExceptionHandler" />-Objekt, das nicht verarbeitete Ausnahmen empfängt, die innerhalb der globalen [!INCLUDE[indigo1](~/includes/indigo1-md.md)]-Transporte auftreten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig wird die <xref:System.ServiceModel.Dispatcher.ExceptionHandler.TransportExceptionHandler%2A>-Eigenschaft auf den Wert <xref:System.ServiceModel.Dispatcher.ExceptionHandler.AlwaysHandle%2A> gesetzt. Dies bewirkt, dass nicht verarbeitete Ausnahmen in [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Transporten ignoriert werden.  Legen Sie diese Eigenschaft auf eine Instanz von <xref:System.ServiceModel.Dispatcher.ExceptionHandler> fest, um diese Ausnahmen zu empfangen und darauf zu reagieren.  
  
 Wenn eine nicht verarbeitete Ausnahme innerhalb eines globalen [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Transports auftritt und diesen Handler erreicht, besteht die Möglichkeit, dass der Zustand der Anwendungsdomäne beeinträchtigt wird. <xref:System.ServiceModel.Dispatcher.ExceptionHandler.HandleException%2A>zurückgeben können `false` für diese Ausnahmen, die dazu führen, dass die Anwendung beendet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
