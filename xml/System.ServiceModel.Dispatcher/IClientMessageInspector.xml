<Type Name="IClientMessageInspector" FullName="System.ServiceModel.Dispatcher.IClientMessageInspector">
  <TypeSignature Language="C#" Value="public interface IClientMessageInspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IClientMessageInspector" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Dispatcher.IClientMessageInspector" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiert ein Nachrichteninspektorobjekt, das der <see cref="P:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors" />-Auflistung hinzugefügt werden kann, um Nachrichten anzuzeigen oder zu ändern.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie die <xref:System.ServiceModel.Dispatcher.IClientMessageInspector>-Schnittstelle, und fügen Sie sie der <xref:System.ServiceModel.Dispatcher.ClientRuntime.MessageInspectors%2A>-Auflistung hinzu, um Nachrichten zu überprüfen oder zu ändern, während sie ein [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Clientobjekt durchlaufen. Ausführliche Informationen finden Sie unter <xref:System.ServiceModel.Dispatcher.ClientRuntime>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung veranschaulicht, die Zeichenfolgen in die Konsole ausgibt, wenn die Implementierung aufgerufen wird.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> verwendet wird, um den Clientnachrichteninspektor in den Clientendpunkt einzufügen.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Schließlich zeigt das folgende Codebeispiel, wie die Clientkonfigurationsdatei geändert werden kann, um das Endpunktverhalten mit einem bestimmten Endpunkt zu verwenden.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AfterReceiveReply">
      <MemberSignature Language="C#" Value="public void AfterReceiveReply (ref System.ServiceModel.Channels.Message reply, object correlationState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AfterReceiveReply(class System.ServiceModel.Channels.Message&amp; reply, object correlationState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reply" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="correlationState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reply">Die Nachricht, die in Typen transformiert werden und an die Clientanwendung zurückgegeben werden soll.</param>
        <param name="correlationState">Korrelationszustandsdaten.</param>
        <summary>Aktiviert die Überprüfung oder Änderung einer Nachricht, nachdem eine Antwortnachricht eingegangen ist, aber bevor diese an die Clientanwendung zurückgegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply%2A>, um eine Antwortnachricht zu überprüfen oder zu ändern, nachdem diese durch das [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Clientobjekt empfangen wurde, jedoch bevor sie in Objekte deserialisiert wird, die an die Clientanwendung zurückgegeben werden.  
  
 Der `correlationState` ist das vom Benutzer zurückgegebene Objekt, wenn <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A> für diese Nachricht aufgerufen wird. Es wird empfohlen, dies in eine <xref:System.Guid?displayProperty=nameWithType> umzuwandeln, um sicherzustellen, dass es nicht zwei gleiche `correlationState`-Objekte gibt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung veranschaulicht, die Zeichenfolgen in die Konsole ausgibt, wenn die Implementierung aufgerufen wird.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> verwendet wird, um den Clientnachrichteninspektor in den Clientendpunkt einzufügen.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Schließlich zeigt das folgende Codebeispiel, wie die Clientkonfigurationsdatei geändert werden kann, um das Endpunktverhalten mit einem bestimmten Endpunkt zu verwenden.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeSendRequest">
      <MemberSignature Language="C#" Value="public object BeforeSendRequest (ref System.ServiceModel.Channels.Message request, System.ServiceModel.IClientChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object BeforeSendRequest(class System.ServiceModel.Channels.Message&amp; request, class System.ServiceModel.IClientChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest(System.ServiceModel.Channels.Message@,System.ServiceModel.IClientChannel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
        <Parameter Name="channel" Type="System.ServiceModel.IClientChannel" />
      </Parameters>
      <Docs>
        <param name="request">Die an den Dienst zu sendende Nachricht.</param>
        <param name="channel">Der [!INCLUDE[indigo2](~/includes/indigo2-md.md)]-Clientobjektkanal.</param>
        <summary>Aktiviert die Überprüfung oder Änderung einer Nachricht, bevor eine Anforderungsnachricht an einen Dienst gesendet wird.</summary>
        <returns>Das Objekt, das als zurückgegeben werden, die <paramref name="correlationState" /> Argument der <see cref="M:System.ServiceModel.Dispatcher.IClientMessageInspector.AfterReceiveReply(System.ServiceModel.Channels.Message@,System.Object)" /> Methode. Dies ist <see langword="null" />, wenn kein Korrelationszustand verwendet wird.  
  
 Es wird empfohlen, dies in eine <see cref="T:System.Guid" /> umzuwandeln, um sicherzustellen, dass es nicht zwei gleiche <paramref name="correlationState" />-Objekte gibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementieren Sie den <xref:System.ServiceModel.Dispatcher.IClientMessageInspector.BeforeSendRequest%2A>, um eine Anforderungsnachricht zu überprüfen oder zu ändern, bevor sie gesendet wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird eine Implementierung veranschaulicht, die Zeichenfolgen in die Konsole ausgibt, wenn die Implementierung aufgerufen wird.  
  
 [!code-csharp[Interceptors#1](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#1)]
 [!code-vb[Interceptors#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> verwendet wird, um den Clientnachrichteninspektor in den Clientendpunkt einzufügen.  
  
 [!code-csharp[Interceptors#2](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#2)]
 [!code-vb[Interceptors#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#2)]  
  
 Schließlich zeigt das folgende Codebeispiel, wie die Clientkonfigurationsdatei geändert werden kann, um das Endpunktverhalten mit einem bestimmten Endpunkt zu verwenden.  
  
 [!code-xml[Interceptors#3](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/client.exe.config#3)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
