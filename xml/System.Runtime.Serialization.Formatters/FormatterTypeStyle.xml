<Type Name="FormatterTypeStyle" FullName="System.Runtime.Serialization.Formatters.FormatterTypeStyle">
  <TypeSignature Language="C#" Value="public enum FormatterTypeStyle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed FormatterTypeStyle extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.Formatters.FormatterTypeStyle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Gibt das Format, in dem Typ Beschreibungen in einem serialisierten Datenstrom angelegt werden.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="TypesAlways">
      <MemberSignature Language="C#" Value="TypesAlways" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesAlways = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesAlways" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.FormatterTypeStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, dass Typen, die für alle Member des Objekts gewährt werden können und <see cref="T:System.Runtime.Serialization.ISerializable" /> Member.</summary>
      </Docs>
    </Member>
    <Member MemberName="TypesWhenNeeded">
      <MemberSignature Language="C#" Value="TypesWhenNeeded" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle TypesWhenNeeded = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.TypesWhenNeeded" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.FormatterTypeStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, dass Typen, die nur für Arrays von Objekten, die Member des Typs angegeben werden können <see cref="T:System.Object" />, und <see cref="T:System.Runtime.Serialization.ISerializable" /> nicht primitive Typen.</summary>
      </Docs>
    </Member>
    <Member MemberName="XsdString">
      <MemberSignature Language="C#" Value="XsdString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.Serialization.Formatters.FormatterTypeStyle XsdString = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.Serialization.Formatters.FormatterTypeStyle.XsdString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.Formatters.FormatterTypeStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt an, dass Zeichenfolgen in der XSD-Format anstatt von SOAP-gewährt werden können. Es werden keine Zeichenfolgen-IDs übertragen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `XsdString` und `TypesWhenNeeded` Einstellungen beziehen sich auf hohe Leistung Serialisierung zwischen Diensten, die auf die gleiche Version von den [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. Diese beiden Werte unterstützen keine VTS (versionstolerante Serialisierung), da sie absichtlich Typinformationen auszulassen, die VTS überspringen oder Hinzufügen von optionalen Felder und Eigenschaften verwendet. Verwenden Sie nicht die `XsdString` oder `TypesWhenNeeded` geben Formate beim Serialisieren und Deserialisieren von Typen, die auf einem Computer mit einer anderen Version von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] als dem Computer, auf dem der Typ serialisiert wurde. Serialisieren und Deserialisieren von auf Computern mit verschiedenen Versionen von der [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] bewirkt, dass das Formatierungsprogramm der Serialisierung von Typinformationen, wodurch es unmöglich, für das Deserialisierungsprogramm, optionale Felder zu überspringen, wenn sie nicht in bestimmten vorhanden sind Typen, die in die andere Version der vorhanden sind, können die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]. Wenn Sie verwenden müssen `XsdString` oder `TypesWhenNeeded` in solch einem Szenario müssen Sie angeben, benutzerdefinierte Serialisierung für Typen, die von einer Version von geändert haben die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] in den anderen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
