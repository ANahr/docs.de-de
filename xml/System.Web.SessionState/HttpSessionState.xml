<Type Name="HttpSessionState" FullName="System.Web.SessionState.HttpSessionState">
  <TypeSignature Language="C#" Value="public sealed class HttpSessionState : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpSessionState extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.SessionState.HttpSessionState" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Bietet Zugriff auf sitzungsstatuswerte, Einstellungen auf Sitzungsebene und lebensdauerverwaltungsmethoden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET bietet Sitzungsstatus Management und ermöglicht das Speichern von Informationen, die eine eindeutige Browsersitzung für mehrere Anforderungen zugeordnet. Sie können eine Auflistung von Werten, die durch einen Schlüsselnamen oder numerischen Index verwiesen speichern. Zugriff auf Sitzungswerte und Funktionalität kann über die <xref:System.Web.SessionState.HttpSessionState> -Klasse, die über den möglich ist die <xref:System.Web.HttpContext.Session%2A> Eigenschaft des aktuellen <xref:System.Web.HttpContext>, oder die <xref:System.Web.UI.Page.Session%2A> Eigenschaft von der <xref:System.Web.UI.Page>.  
  
 Sitzungsdaten ist eine bestimmte Browsersitzung mithilfe eines eindeutigen Bezeichners zugeordnet. Standardmäßig ist dieser Bezeichner in einem nicht ablaufenden Sitzungscookie im Browser gespeichert, aber Sie können auch konfigurieren, die Anwendung zum Speichern von Sitzungs-ID in der URL durch Festlegen der `cookieless` -Attribut `true` oder <xref:System.Web.HttpCookieMode.UseUri> im Element der Anwendungskonfiguration Ihrer. Sie können angeben, dass ASP.NET zu bestimmen, ob der Browser Cookies unterstützt, durch die Angabe des Werts <xref:System.Web.HttpCookieMode.UseDeviceProfile> für die `cookieless` Attribut. Sie können auch festlegen, dass ASP.NET zu bestimmen, ob der Browser Cookies aktiviert sind durch Angabe des Werts <xref:System.Web.HttpCookieMode.AutoDetect> für die `cookieless` Attribut. Wenn Cookies unterstützt werden, wenn <xref:System.Web.HttpCookieMode.UseDeviceProfile> angegeben wird, oder beim aktiviert <xref:System.Web.HttpCookieMode.AutoDetect> angegeben ist, und klicken Sie dann die Sitzung Bezeichner in einem Cookie gespeichert, und andernfalls werden die Sitzungs-ID in der URL gespeichert werden.  
  
 Sitzungen sind während der ersten Anforderung gestartet und Sitzungswerte bleiben erhalten, solange eine neue Anforderung vom Browser vor der Anzahl von Minuten, die im angegebenen erfolgt die <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Eigenschaft übergeben. Wenn eine neue Sitzung beginnt, die Sitzung <xref:System.Web.SessionState.SessionStateModule.Start> Ereignis wird ausgelöst. Dieses Ereignis können Sie keine zusätzlichen Aufgaben zu Beginn einer Sitzung, wie z. B. das Festlegen von standardmäßigen Sitzungswerte erledigen. Wenn das Timeout einer Sitzungs den <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> Methode aufgerufen wird, oder die ASP.NET-Anwendung wird heruntergefahren, die Sitzung <xref:System.Web.SessionState.SessionStateModule.End> Ereignis wird ausgelöst. Sie können dieses Ereignis verwenden, alle erforderlichen cleanupmaßnahmen ausführen. Die <xref:System.Web.SessionState.SessionStateModule.End> Ereignis wird ausgelöst, nur, wenn der Sitzungsstatus `mode` festgelegt ist, um <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 Zum Verbessern der Leistung Sitzungen, die Cookies verwenden, nicht Speicherzuordnung Sitzung erst Daten tatsächlich in gespeichert werden die <xref:System.Web.UI.Page.Session%2A> Objekt. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>-Eigenschaft.  
  
 Status der Sitzung beibehalten über ASP.NET Anwendung hinweg nicht. Wenn Sie ein Browser auf eine andere Anwendung navigiert, ist die Sitzungsinformationen nicht verfügbar für die neue Anwendung.  
  
 Sitzungswerte werden standardmäßig im Arbeitsspeicher auf dem Webserver gespeichert. Sie können auch Sitzungswerte in einer SQL Server-Datenbank, ein ASP.NET-Zustandsserver oder einem benutzerdefinierten Server speichern. Dadurch können Sie die Sitzungswerte beibehalten, in denen die ASP.NET- oder IIS-Prozess oder die ASP.NET-Anwendung neu gestartet wird, und um Sitzungswerte auf allen Servern in einer Webfarm verfügbar zu machen. Dieses Verhalten wird konfiguriert, indem die `mode` -Attribut auf einen gültigen <xref:System.Web.SessionState.SessionStateMode> Wert im Element der Anwendungskonfiguration Ihrer. Weitere Informationen finden Sie unter [Sitzungszustandsmodus](http://msdn.microsoft.com/library/0bb0a3a3-650f-4c47-a0c5-b08b9b591bb4).  
  
 Alternativen zum Sitzungszustand schließen Anwendungsstatus (finden Sie unter der <xref:System.Web.HttpApplication.Application%2A> Eigenschaft) und der ASP.NET-Cache (finden Sie unter der <xref:System.Web.Caching> Namespace), die Speicher-Variablen, die von allen Benutzern der ASP.NET-Anwendung zugegriffen werden können; das ASP.NET-Profil (finden Sie unter der <xref:System.Web.Profile> Namespace), dem Benutzerwerte in einem Datenspeicher mithilfe eines Timeouts; ASP.NET <xref:System.Web.UI.WebControls?displayProperty=nameWithType>, die dauerhaft Steuerelementwerte in der <xref:System.Web.UI.Control.ViewState%2A>; <xref:System.Web.HttpResponse.Cookies%2A>; das <xref:System.Web.HttpRequest.QueryString%2A> Eigenschafts- und Felder in einem HTML-Formular, die von einem HTTP verfügbar sind `POST` mithilfe der <xref:System.Web.HttpRequest.Form%2A> Auflistung. Weitere Informationen zu den Unterschieden zwischen den Sitzungsstatus und andere alternativen State-Verwaltung finden Sie unter [ASP.NET State Management Recommendations](http://msdn.microsoft.com/library/af79fa0d-4bc8-47a6-9915-d8e355bfb732).  
  
   
  
## Examples  
 Das folgende Codebeispiel legt fest, und ruft Werte ab, aus dem Sitzungsstatus.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#30](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/session2cs.aspx#30)]
 [!code-aspx-vb[HttpSessionState#30](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/session2vb.aspx#30)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Abandon">
      <MemberSignature Language="C#" Value="public void Abandon ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abandon() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Abandon" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht die aktuelle Sitzung ab.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sobald die <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> Methode wird aufgerufen, die aktuelle Sitzung ist nicht mehr gültig und eine neue Sitzung gestartet werden kann. <xref:System.Web.SessionState.HttpSessionState.Abandon%2A>bewirkt, dass die <xref:System.Web.SessionState.SessionStateModule.End> Ereignis ausgelöst wurde. Ein neues <xref:System.Web.SessionState.SessionStateModule.Start> Ereignis wird bei der nächsten Anforderung ausgelöst werden.  
  
 Sitzungs-IDs für abgebrochen oder abgelaufene Sitzungen werden standardmäßig wiederverwendet. D. h., wenn eine Anforderung, die die Sitzungs-ID für eine Sitzung ist abgelaufen oder abgebrochenen enthält gestellt wird, wird eine neue Sitzung gestartet mit den gleichen Sitzungsbezeichner. Sie können diese deaktivieren, indem `regenerateExpiredSessionId` Attribut des Konfigurationselements auf `true`. Weitere Informationen finden Sie unter [Sitzungs-IDs](http://msdn.microsoft.com/library/146ca206-d151-4f2e-a548-bcca05ccf0cb).  
  
 Die <xref:System.Web.SessionState.SessionStateModule.End> Ereignis wird unterstützt nur, wenn die <xref:System.Web.SessionState.HttpSessionState.Mode%2A> -Eigenschaftensatz auf <xref:System.Web.SessionState.SessionStateMode.InProc>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Add(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements, das der Sitzungsstatusauflistung hinzugefügt werden soll.</param>
        <param name="value">Der Wert des Elements, das der Sitzungsstatusauflistung hinzugefügt werden soll.</param>
        <summary>Der sitzungsstatusauflistung hinzugefügt ein neues Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `name` Parameter verweist auf ein vorhandenes Session State-Element, das vorhandene Element wird überschrieben, mit dem angegebenen `value`.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Speichern von Werten im Sitzungszustand mithilfe der <xref:System.Web.SessionState.HttpSessionState.Add%2A> Methode. Außerdem wird gezeigt, wie zum Entfernen von Werten im Sitzungszustand über die <xref:System.Web.SessionState.HttpSessionState.Remove%2A> Methode. Ein <xref:System.Web.UI.WebControls.Repeater> Steuerelement wird verwendet, um den Inhalt des Sitzungszustands auf der Webseite angezeigt. Die <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Methode wird verwendet, um der sitzungsstatusauflistung durchlaufen, und füllen Sie die <xref:System.Web.UI.WebControls.Repeater> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Schlüssel und Werte aus der Sitzungszustandsauflistung.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodePage">
      <MemberSignature Language="C#" Value="public int CodePage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CodePage" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CodePage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Zeichensatzbezeichner für die aktuelle Sitzung ab oder legt diesen fest.</summary>
        <value>Der Zeichensatzbezeichner für die aktuelle Sitzung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Zeichensatz (Codepage) Dient zum Interpretieren von Multi-Byte-Zeichendaten, Bestimmen der Zeichenwert, und daher die Sortierreihenfolge. Codepage Einstellungen gelten nur für Multi-Byte-Zeichendaten enthalten, nicht mit Unicode-Daten.  
  
 Dies <xref:System.Web.SessionState.IHttpSessionState.CodePage%2A> Eigenschaft wird bereitgestellt, um die Kompatibilität mit früheren Versionen von ASP. Wenn Sie nicht benötigen, um die Abwärtskompatibilität mit ASP-Seiten zu gewährleisten, verwenden Sie die <xref:System.Web.HttpResponse.ContentEncoding%2A> Eigenschaft stattdessen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Contents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Contents" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Verweis auf das aktuelle Sitzungsstatusobjekt ab.</summary>
        <value>Der aktuelle <see cref="T:System.Web.SessionState.HttpSessionState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.SessionState.HttpSessionState.Contents%2A> Eigenschaft wird bereitgestellt, um die Kompatibilität mit früheren Versionen von ASP.  
  
   
  
## Examples  
 Das folgende Codebeispiel listet die Elementnamen und den Werten in der <xref:System.Web.SessionState.HttpSessionState.Contents%2A> Eigenschaft.  
  
 [!code-csharp[HttpSessionState#9](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#9)]
 [!code-vb[HttpSessionState#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieMode">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieMode CookieMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.HttpCookieMode CookieMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.CookieMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Anwendung für Sitzungen ohne Cookies konfiguriert ist.</summary>
        <value>Eines der <see cref="T:System.Web.HttpCookieMode" /> , der angibt, ob die Anwendung für Sitzungen ohne Cookies konfiguriert ist. Die Standardeinstellung ist <see cref="F:System.Web.HttpCookieMode.UseCookies" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A> ist `true`, die <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> -Eigenschaft gibt <xref:System.Web.HttpCookieMode.UseUri>andernfalls die <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> -Eigenschaft gibt <xref:System.Web.HttpCookieMode.UseCookies>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die `cookieless` Sitzung-Attribut, um `true` in der Datei "Web.config". Für diese Beispielkonfiguration für die Anwendung die <xref:System.Web.SessionState.HttpSessionState.CookieMode%2A> Eigenschaft zurückgeben würde <xref:System.Web.HttpCookieMode.UseUri>.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Die <see cref="T:System.Array" /> , die die Sitzungswerte empfängt.</param>
        <param name="index">Der nullbasierte Index im <c>Array</c> aus dem kopiert wird.</param>
        <summary>Kopiert die Auflistung der Sitzungsstatuswerte in ein eindimensionales Array, wobei am angegebenen Index im Array begonnen wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Elemente in der Sitzungsstatusauflistung ab.</summary>
        <value>Die Anzahl der Elemente in der Auflistung.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator zurück, mit dem alle Namen der Sitzungszustandsvariablen in der aktuellen Sitzung gelesen werden können.</summary>
        <returns>Ein <see cref="T:System.Collections.IEnumerator" /> , der die Variablennamen in der sitzungsstatusauflistung durchlaufen kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Speichern von Werten im Sitzungszustand mithilfe der <xref:System.Web.SessionState.HttpSessionState.Add%2A> Methode. Außerdem wird gezeigt, wie zum Entfernen von Werten im Sitzungszustand über die <xref:System.Web.SessionState.HttpSessionState.Remove%2A> Methode. Ein <xref:System.Web.UI.WebControls.Repeater> Steuerelement wird verwendet, um den Inhalt des Sitzungszustands auf der Webseite anzuzeigen. Die <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Methode wird verwendet, um der sitzungsstatusauflistung durchlaufen, und füllen Sie die <xref:System.Web.UI.WebControls.Repeater> Steuerelement.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCookieless">
      <MemberSignature Language="C#" Value="public bool IsCookieless { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCookieless" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsCookieless" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Sitzungs-ID in die URL eingebettet ist oder in einem HTTP-Cookie gespeichert.</summary>
        <value>
          <see langword="true" />Wenn die Sitzung in die URL eingebettet ist andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET werden Sitzungen mit jedem Browser eindeutig identifiziert. Standardmäßig ist der eindeutige Bezeichner für eine Sitzung in einem nicht ablaufenden Sitzungscookie im Browser gespeichert. Sie können angeben, dass Sitzungsbezeichner nicht in einem Cookie gespeichert werden, durch Festlegen der `cookieless` -Attribut `true` in das Konfigurationselement.  
  
> [!NOTE]
>  Um die Sicherheit Ihrer Anwendung zu verbessern, sollte Ihre Anwendung Benutzer zum Abmelden an diesem Punkt sollten sie aufrufen ermöglichen die <xref:System.Web.SessionState.HttpSessionState.Abandon%2A> Methode. Dies reduziert die Wahrscheinlichkeit einer unerwünschten Quelle mit dem eindeutigen Bezeichner in der URL zum Abrufen von privater Daten, die in der Sitzung eines Benutzers gespeichert.  
  
 ASP.NET verwaltet Sitzungszustand, indem automatisch eine eindeutige Sitzungs-ID in die URL der Seite eingefügt. Beispielsweise wurde die folgende URL durch ASP.NET für die eindeutige Sitzungs-ID lit3py55t21z5v55vlm25s55 enthalten geändert:  
  
```  
http://www.example.com/(S(4danlfat035muve4g0mvgfrr))/orderform.aspx  
```  
  
 ASP.NET ändert, die in alle angeforderten Seiten durch das Einbetten von einer Sitzungs-ID-Wert in den Links direkt vor dem Senden von jeder Seite im Browser enthaltenen Links. Sitzungszustand wird beibehalten, solange der Benutzer den Pfad des Links befolgt hat, die die Website bereitstellt. Jedoch, wenn der Benutzer-Agent eine URL ändert, die Instanz des Sitzungszustands verloren.  
  
 Die Sitzungs-ID ist in der URL eingebetteten, nach dem Schrägstrich, der den Anwendungsnamen folgt und vor jeder verbleibenden Bezeichner der Datei oder das virtuelle Verzeichnis. Dadurch können ASP.NET den Anwendungsnamen auflösen, bevor im Zusammenhang mit der <xref:System.Web.SessionState.SessionStateModule> in der Anforderung.  
  
 Standardmäßig werden die Sitzungs-IDs, die in Sitzungen ohne Cookies verwendet wiederverwendet. Das heißt, wenn eine Anforderung mit einer Sitzungs-ID erfolgt, das abgelaufen ist, wird eine neue Sitzung gestartet mithilfe der Sitzungs-ID für die Anforderung angegeben. Dieses Verhalten kann dazu führen die unerwünschte Freigabe von Sitzungsdaten, wenn eine Verknüpfung, die eine cookieless Sitzungs-ID enthält mit mehreren Browsern möglicherweise mithilfe einer Suchmaschine oder ein anderes Programm gemeinsam verwendet wird. Sie können die Möglichkeit, Sitzungsdaten, die von mehreren Clients freigegeben wird, die durch das Deaktivieren der Wiederverwendung von Sitzungs-IDs reduzieren. Legen Sie hierzu die `regenerateExpiredSessionId` Attribut des Konfigurationselements auf `true`. Dies führt zu einer neuen Sitzungs-ID, die generiert wird, wenn eine abgelaufene Sitzungs-ID cookieless Sitzung angefordert werden Beachten Sie, dass, wenn die Anforderung mit der abgelaufenen Sitzungs-ID für die HTTP verwendet `POST` -Methode, und klicken Sie dann auf alle bereitgestellten Daten verloren Wenn `regenerateExpiredSessionId` ist `true`, wie ASP.NET führt eine Weiterleitung aus, um sicherzustellen, dass der Browser die neue Sitzungs-ID in der URL verfügt.  
  
> [!NOTE]
>  Während das Festlegen der `regenerateExpiredSessionId` -Attribut auf `true` senkt die Wahrscheinlichkeit, dass unerwünschte Aufteilung der Sitzungsdaten, er bietet keinen Schutz gegen eine unerwünschte Quelle, die Zugriff auf die Sitzung eines anderen Benutzers durch Abrufen der <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Wert und Codekomponente in Anfragen an den Server. Wenn Sie private oder vertrauliche Daten im Sitzungsstatus gespeichert, wird empfohlen, dass die Verwendung von SSL zum Verschlüsseln von Kommunikation zwischen dem Browser und dem Server, enthält die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die `cookieless` Sitzung-Attribut auf "true" in der Datei "Web.config".  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNewSession">
      <MemberSignature Language="C#" Value="public bool IsNewSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNewSession" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsNewSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Sitzung mit der aktuellen Anforderung erstellt wurde.</summary>
        <value>
          <see langword="true" />Wenn die Sitzung mit der aktuellen Anforderung erstellt wurde. andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Sitzung schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />Wenn die Sitzung schreibgeschützt ist. andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob der Zugriff auf die Auflistung von Werten des Sitzungszustands synchronisiert (threadsicher).</summary>
        <value>
          <see langword="true" />Wenn der Zugriff auf die Auflistung synchronisiert (threadsicher) ist andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der numerische Index des Sitzungswerts.</param>
        <summary>Ruft ab oder legt einen Sitzungswert über einen numerischen Index.</summary>
        <value>Die am angegebenen Index gespeicherte Sitzungszustandswert oder <see langword="null" /> , wenn das Element nicht vorhanden ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string name] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Schlüsselname des Sitzungswerts.</param>
        <summary>Ruft ab oder legt einen Sitzungswert anhand des Namens.</summary>
        <value>Der sitzungsstatuswert mit dem angegebenen Namen oder <see langword="null" /> , wenn das Element nicht vorhanden ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Keys">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameObjectCollectionBase/KeysCollection Keys" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Keys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung der Schlüssel für alle Werte in der sitzungsstatusauflistung gespeichert.</summary>
        <value>Die <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection" /> , enthält die Sitzungsschlüssel.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Gebietsschemabezeichner (Locale Identifier, LCID) der aktuellen Sitzung ab oder legt ihn fest.</summary>
        <value>Ein <see cref="T:System.Globalization.CultureInfo" /> -Instanz, die Kultur der aktuellen Sitzung angibt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.SessionState.HttpSessionState.LCID%2A> Eigenschaft wird bereitgestellt, um die Kompatibilität mit früheren Versionen von ASP. Wenn Sie nicht benötigen, um die Abwärtskompatibilität mit ASP-Seiten zu gewährleisten, verwenden Sie die <xref:System.Globalization.CultureInfo.LCID%2A> Eigenschaft stattdessen.  
  
 ASP.NET nicht die Gebietsschema-ID im Sitzungszustand gespeichert. Die <xref:System.Web.SessionState.HttpSessionState.LCID%2A> Eigenschaft greift auf die <xref:System.Globalization.CultureInfo.LCID%2A> Eigenschaft zum Abrufen und Festlegen des Bezeichners.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.SessionStateMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.SessionState.SessionStateMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.SessionStateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktuellen Sitzungszustandsmodus ab.</summary>
        <value>Einer der <see cref="T:System.Web.SessionState.SessionStateMode" />-Werte.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Informationen zum Konfigurieren Ihres Servers für <xref:System.Web.SessionState.SessionStateMode.StateServer> oder <xref:System.Web.SessionState.SessionStateMode.SQLServer> sitzungszustandspeicherung, finden Sie unter [ASP.NET Session State Overview](http://msdn.microsoft.com/library/6d60d381-6521-4e1d-9089-da6464f2a9bc).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die `mode` Sitzung-Attribut, um <xref:System.Web.SessionState.SessionStateMode.SQLServer> in der Datei "Web.config". Für den Modus für SQL Server-Sitzung die `sqlConnectionString` Attribut ist auch erforderlich.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="SQLServer"  
      sqlConnectionString="Data Source=localhost;Integrated Security=SSPI"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.Remove(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements, das aus der Sitzungszustandsauflistung gelöscht werden soll.</param>
        <summary>Löscht ein Element aus der Sitzungszustandsauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Sitzungsstatus Auflistung ein Element mit dem angegebenen keinen enthält `name`, die Auflistung unverändert ist. Es werden keine Ausnahmen ausgelöst.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie zum Speichern von Werten im Sitzungszustand mithilfe der <xref:System.Web.SessionState.HttpSessionState.Add%2A> Methode. Außerdem wird gezeigt, wie zum Entfernen von Werten im Sitzungszustand über die <xref:System.Web.SessionState.HttpSessionState.Remove%2A> Methode. Ein <xref:System.Web.UI.WebControls.Repeater> Steuerelement wird verwendet, um den Inhalt des Sitzungszustands auf der Webseite anzuzeigen. Die <xref:System.Web.SessionState.HttpSessionState.GetEnumerator%2A> Methode wird verwendet, um der sitzungsstatusauflistung durchlaufen, und füllen Sie die <xref:System.Web.UI.WebControls.Repeater> Steuerelement.  
  
 [!code-aspx-csharp[HttpSessionState#13](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/HttpSessionStateAddCS.aspx#13)]
 [!code-aspx-vb[HttpSessionState#13](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/HttpSessionStateAddVB.aspx#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public void RemoveAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Schlüssel und Werte aus der Sitzungszustandsauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.SessionState.HttpSessionState.RemoveAll%2A>führt die gleiche Funktion wie <xref:System.Web.SessionState.HttpSessionState.Clear%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.SessionState.HttpSessionState.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des aus der Sitzungsstatusauflistung zu entfernenden Elements.</param>
        <summary>Löscht ein Element am angegebenen Index aus der sitzungszustandsauflistung.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> ist kleiner als Null.  
  
 \- oder –  
  
 <paramref name="index" /> ist größer oder gleich <see cref="P:System.Web.SessionState.HttpSessionState.Count" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SessionID">
      <MemberSignature Language="C#" Value="public string SessionID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SessionID" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SessionID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den eindeutigen Bezeichner für die Sitzung ab.</summary>
        <value>Der eindeutige Sitzungsbezeichner.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Eigenschaft wird verwendet, um einen Browser mit Sitzungsdaten auf dem Server eindeutig zu identifizieren. Die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Wert nach dem Zufallsprinzip von ASP.NET generiert und in einem nicht ablaufenden Sitzungscookie im Browser gespeichert. Die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Wert wird dann in einem Cookie mit jeder Anforderung an die ASP.NET-Anwendung gesendet.  
  
 Wenn Sie verwenden möchten, deaktivieren die Verwendung von Cookies in einer ASP.NET-Anwendung und weiterhin, des Sitzungszustands verwenden, können Sie Ihre Anwendung zum Speichern von Sitzungs-ID in der URL anstatt eines Cookies durch Festlegen von Konfigurieren der `cookieless` Attribut der Konfiguration Element `true`, oder <xref:System.Web.HttpCookieMode.UseUri>, in der Datei "Web.config" für Ihre Anwendung. Sie können angeben, dass ASP.NET zu bestimmen, ob der Browser Cookies unterstützt, durch die Angabe des Werts <xref:System.Web.HttpCookieMode.UseDeviceProfile> für die `cookieless` Attribut. Sie können auch festlegen, dass ASP.NET zu bestimmen, ob der Browser Cookies aktiviert sind durch Angabe des Werts <xref:System.Web.HttpCookieMode.AutoDetect> für die `cookieless` Attribut. Wenn Cookies unterstützt werden, wenn <xref:System.Web.HttpCookieMode.UseDeviceProfile> angegeben wird, oder beim aktiviert <xref:System.Web.HttpCookieMode.AutoDetect> angegeben ist, und klicken Sie dann die Sitzung Bezeichner in einem Cookie gespeichert, und andernfalls werden die Sitzungs-ID in der URL gespeichert werden. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>-Eigenschaft.  
  
 Die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> wird zwischen dem Server und den Browser gesendet, in Klartext, entweder in einem Cookie oder in der URL. Folglich eine unerwünschte Quelle konnte Zugriff auf die Sitzung eines anderen Benutzers durch Abrufen der <xref:System.Web.SessionState.HttpSessionState.SessionID%2A> Wert und der Codekomponente in Anfragen an den Server. Wenn Sie private oder vertrauliche Daten im Sitzungsstatus gespeichert, wird empfohlen, dass die Verwendung von SSL zum Verschlüsseln von Kommunikation zwischen dem Browser und dem Server, enthält die <xref:System.Web.SessionState.HttpSessionState.SessionID%2A>.  
  
 Bei Verwendung von Cookie-basierte Sitzungsstatus ASP.NET ist nicht zuordnen von Speicher für Sitzungsdaten, bis die <xref:System.Web.UI.Page.Session%2A> Objekt verwendet wird. Daher wird eine neue Sitzungs-ID für jede Seitenanforderung generiert, bis das Sitzungsobjekt zugegriffen wird. Wenn Ihre Anwendung eine statische Sitzungs-ID für die gesamte Sitzung erfordert, können Sie entweder implementieren die `Session_Start` Methode in die Datei "Global.asax" der Anwendung und Speichern der Daten in der <xref:System.Web.UI.Page.Session%2A> Objekt, das um die Sitzungs-ID zu beheben, oder verwenden Sie Code in einem anderen Teil die Anwendung explizit Speichern von Daten in die <xref:System.Web.UI.Page.Session%2A> Objekt.  
  
 Wenn Ihre Anwendung Sitzungszustand ohne Cookies verwendet, wird die Sitzungs-ID wird für die erste Seitenansicht generiert und wird aus Gründen der gesamten Sitzung beibehalten.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt eine Datei "Web.config", die Sitzungszustand Sitzungsbezeichner Verwendung konfiguriert. Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>-Eigenschaft.  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      cookieless="true"  
      regenerateExpiredSessionId="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StaticObjects">
      <MemberSignature Language="C#" Value="public System.Web.HttpStaticObjectsCollection StaticObjects { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpStaticObjectsCollection StaticObjects" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.StaticObjects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpStaticObjectsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von Objekten, die deklariert, indem <see langword="&lt;object Runat=&quot;Server&quot; Scope=&quot;Session&quot;/&gt;" /> Tags in der Datei "Global.asax" der ASP.NET-Anwendung.</summary>
        <value>Ein <see cref="T:System.Web.HttpStaticObjectsCollection" /> mit Objekten, die in der Datei "Global.asax" deklariert werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein Objekt auf einer Seite Serialisierung nicht unterstützt und <xref:System.Web.SessionState.HttpSessionState.Mode%2A> ist die Out-of-Process (<xref:System.Web.SessionState.SessionStateMode.SQLServer> oder <xref:System.Web.SessionState.SessionStateMode.StateServer>), das Objekt nicht erstellt werden und wird nicht zu dieser Auflistung hinzugefügt werden.  
  
 Die <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> Eigenschaft wird bereitgestellt, um die Kompatibilität mit früheren Versionen von ASP.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird Listen der `id` und Objekttyp der Objekte in der <xref:System.Web.SessionState.HttpSessionState.StaticObjects%2A> Auflistung.  
  
 [!code-csharp[HttpSessionState#10](~/samples/snippets/csharp/VS_Snippets_WebNet/HttpSessionState/CS/snippetscs.aspx#10)]
 [!code-vb[HttpSessionState#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/HttpSessionState/VB/snippetsvb.aspx#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt ab, mit dem der Zugriff auf die Auflistung von Sitzungszustandswerten synchronisiert werden kann.</summary>
        <value>Ein Objekt, mit dem der Zugriff auf die Auflistung synchronisiert werden kann.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeout">
      <MemberSignature Language="C#" Value="public int Timeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Timeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.SessionState.HttpSessionState.Timeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ermittelt und definiert die Zeitspanne in Minuten zwischen den Anforderungen, bevor der Sitzungsstatusanbieter die Sitzung beendet wird.</summary>
        <value>Der Timeoutzeitraum in Minuten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Eigenschaft kann festgelegt werden, in der Datei "Web.config" für eine Anwendung mit der `timeout` Attribut das Konfigurationselement, oder Sie können festlegen der <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Eigenschaftswert direkt mit einem Anwendungscode.  
  
 Die <xref:System.Web.SessionState.HttpSessionState.Timeout%2A> Eigenschaft kann nicht auf einen Wert größer als 525.600 Minuten (1 Jahr) festgelegt werden. Der Standardwert ist 20 Minuten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die `timeout` Sitzung Attribut bis 30 Minuten in der Datei "Web.config".  
  
```  
<configuration>  
  <system.web>  
    <sessionState   
      mode="InProc"  
      cookieless="true"  
      timeout="30" />  
  </system.web>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
