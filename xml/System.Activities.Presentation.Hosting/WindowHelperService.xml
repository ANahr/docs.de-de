<Type Name="WindowHelperService" FullName="System.Activities.Presentation.Hosting.WindowHelperService">
  <TypeSignature Language="C#" Value="public class WindowHelperService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WindowHelperService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.Presentation.Hosting.WindowHelperService" />
  <AssemblyInfo>
    <AssemblyName>System.Activities.Presentation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt die Funktionalitäten bereit, um die Delegaten für Ereignisbenachrichtigungen zu registrieren und deren Registrierung aufzuheben und um den Besitz für Fenster festzulegen.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowHelperService (IntPtr hwnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int hwnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.#ctor(System.IntPtr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hwnd" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwnd">Ein Handle für ein übergeordnetes Fenster.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Activities.Presentation.Hosting.WindowHelperService" />-Klasse mit dem spezifischen Handle für ein übergeordnetes Fenster.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentWindowHwnd">
      <MemberSignature Language="C#" Value="public IntPtr ParentWindowHwnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ParentWindowHwnd" />
      <MemberSignature Language="DocId" Value="P:System.Activities.Presentation.Hosting.WindowHelperService.ParentWindowHwnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Handle des übergeordneten Fensters ab oder legt dieses fest.</summary>
        <value>Gibt <see cref="T:System.IntPtr" />zurück.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool RegisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RegisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.RegisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">Der Delegat, der für Ereignisbenachrichtigungen registriert werden soll.</param>
        <summary>Registriert den angegebenen Delegaten für Ereignisbenachrichtigungen.</summary>
        <returns>
          <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="callback" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TrySetWindowOwner">
      <MemberSignature Language="C#" Value="public bool TrySetWindowOwner (System.Windows.DependencyObject source, System.Windows.Window target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TrySetWindowOwner(class System.Windows.DependencyObject source, class System.Windows.Window target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.TrySetWindowOwner(System.Windows.DependencyObject,System.Windows.Window)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Windows.DependencyObject" />
        <Parameter Name="target" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="source">Der Besitzer des <c>Ziel</c>.</param>
        <param name="target">Das Fenster, das im Besitz <c>Quelle</c>.</param>
        <summary>Weist das Fenster dem Besitzer des angegebenen Fensters zu.</summary>
        <returns>
          <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterWindowMessageHandler">
      <MemberSignature Language="C#" Value="public bool UnregisterWindowMessageHandler (System.Activities.Presentation.Hosting.WindowMessage callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool UnregisterWindowMessageHandler(class System.Activities.Presentation.Hosting.WindowMessage callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.Presentation.Hosting.WindowHelperService.UnregisterWindowMessageHandler(System.Activities.Presentation.Hosting.WindowMessage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities.Presentation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Activities.Presentation.Hosting.WindowMessage" />
      </Parameters>
      <Docs>
        <param name="callback">Der Delegat, der aus Ereignisbenachrichtigungen entfernt werden soll.</param>
        <summary>Hebt die Registrierung des angegebenen Delegaten für Ereignisbenachrichtigungen auf.</summary>
        <returns>
          <see langword="true" />, wenn der Vorgang erfolgreich ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
