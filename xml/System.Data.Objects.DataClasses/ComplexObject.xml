<Type Name="ComplexObject" FullName="System.Data.Objects.DataClasses.ComplexObject">
  <TypeSignature Language="C#" Value="public abstract class ComplexObject : System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit ComplexObject extends System.Data.Objects.DataClasses.StructuralObject" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.DataClasses.ComplexObject" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Objects.DataClasses.StructuralObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.Serialization.DataContract(IsReference=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die Basisklasse für komplexe Typen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Objects.DataClasses.ComplexObject>implementiert die grundlegende Funktionalität für komplexe Typen. Weitere Informationen finden Sie unter [komplexer Typenobjekte](http://msdn.microsoft.com/en-us/34d5c570-a891-42b8-80ae-20e96eedc3af).  
  
 Beim Implementieren benutzerdefinierter Datenklassen mit einem konzeptionellen Modell wird empfohlen, dass die Datenklassen, die komplexe Typen darstellen von erben <xref:System.Data.Objects.DataClasses.ComplexObject>. Weitere Informationen finden Sie unter [Anpassen von Objekten](http://msdn.microsoft.com/en-us/af6f07ce-2261-4c65-87cf-d018ad082921).  
  
 Ein komplexer Typ kann eine Eigenschaft eines Entitätstyps oder eines anderen komplexen Typs sein.  
  
 Komplexe Typen werden von nicht skalaren Eigenschaften von Entitätstypen zurückgegeben. Damit können skalare Eigenschaften innerhalb der Entitäten organisiert werden. Wie Entitäten bestehen komplexe Typen aus skalaren Eigenschaften oder anderen Eigenschaften von komplexem Typ. Ein komplexer Typ kann nicht ohne einen zugeordneten Entitätstyp verwendet werden. Da komplexe Typen nicht Schlüssel verfügen, können komplexer Typenobjekte ohne einen zugeordneten Entitätstyp verwaltet werden. Weitere Informationen finden Sie unter [komplexer Typenobjekte](http://msdn.microsoft.com/en-us/34d5c570-a891-42b8-80ae-20e96eedc3af).  
  
   
  
## Examples  
 Im folgenden Beispiel werden die Datenklasse fest benutzerdefinierten `OrderInfo` erbt von <xref:System.Data.Objects.DataClasses.ComplexObject> zugeordnet ist, und die `OrderInfo` komplexen Typ im konzeptionellen Modell definiert.  
  
 [!code-csharp[DP EntityObject Concepts#EntityObject](~/samples/snippets/csharp/VS_Snippets_Data/DP EntityObject Concepts/CS/SalesObjects.cs#entityobject)]
 [!code-vb[DP EntityObject Concepts#EntityObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP EntityObject Concepts/VB/SalesObjects.vb#entityobject)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ComplexObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Erstellt eine Instanz von <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanged">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanged (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanged(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">Der Name der geänderten Eigenschaft.</param>
        <summary>Benachrichtigt das System zur änderungsnachverfolgung, das eine Eigenschaft eines komplexen Objekts geändert wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein komplexer Typ von den Entity Data Model-Tools generiert wird die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A> Methode wird aufgerufen, nachdem die Änderung einer Eigenschaft auf den zwischengespeicherten Wert in einen commit der <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> als der ursprüngliche Wert der Eigenschaft.  
  
 Von dieser Methode wird die <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged%2A>-Methode im System zur Änderungsnachverfolgung aufgerufen.  
  
 Zum Nachverfolgen von Änderungen, die an einer Eigenschaft eines benutzerdefinierten komplexen Objekts vorgenommen werden, muss die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged%2A>-Methode aufgerufen werden. Dieses Vorgehen ist ratsam, wenn das komplexe Objekt von <xref:System.Data.Objects.DataClasses.ComplexObject> erbt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReportPropertyChanging">
      <MemberSignature Language="C#" Value="protected override sealed void ReportPropertyChanging (string property);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ReportPropertyChanging(string property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="property">Der Name der Eigenschaft, die geändert wird.</param>
        <summary>Benachrichtigt den Änderungsprotokollierer steht der Änderung einer Eigenschaft eines komplexen Objekts.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein komplexer Typ von den Entity Data Model-Tools generiert wird die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A> Methode wird aufgerufen, bevor die Änderung einer Eigenschaft zum Zwischenspeichern des aktuellen Wert der Eigenschaft in der <xref:System.Data.Objects.DataClasses.IEntityChangeTracker> , damit dieser Wert als der ursprüngliche Wert für die Eigenschaft verwendet werden kann.  
  
 Von dieser Methode wird die <xref:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging%2A>-Methode im System zur Änderungsnachverfolgung aufgerufen.  
  
 Zum Nachverfolgen von Änderungen, die an einer Eigenschaft eines benutzerdefinierten komplexen Objekts vorgenommen werden, muss die <xref:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging%2A>-Methode aufgerufen werden. Dieses Vorgehen ist ratsam, wenn das komplexe Objekt von <xref:System.Data.Objects.DataClasses.ComplexObject> erbt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="property" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
