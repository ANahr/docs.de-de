<Type Name="CounterSet" FullName="System.Diagnostics.PerformanceData.CounterSet">
  <TypeSignature Language="C#" Value="public class CounterSet : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CounterSet extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.PerformanceData.CounterSet" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Definiert einen Satz von logischen Indikatoren.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie die <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> Methode, wenn Sie fertig sind, um die Registrierung des Anbieters zu entfernen und alle freizugeben sind verwaltete und nicht verwalteten Ressourcen.  
  
   
  
## Examples  
 Ein Beispiel finden Sie unter <xref:System.Diagnostics.PerformanceData>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CounterSet (Guid providerGuid, Guid counterSetGuid, System.Diagnostics.PerformanceData.CounterSetInstanceType instanceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid providerGuid, valuetype System.Guid counterSetGuid, valuetype System.Diagnostics.PerformanceData.CounterSetInstanceType instanceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="providerGuid" Type="System.Guid" />
        <Parameter Name="counterSetGuid" Type="System.Guid" />
        <Parameter Name="instanceType" Type="System.Diagnostics.PerformanceData.CounterSetInstanceType" />
      </Parameters>
      <Docs>
        <param name="providerGuid">GUID, die den Anbieter der Indikatordaten eindeutig identifiziert. Verwenden Sie die Guid, die im Manifest angegeben.</param>
        <param name="counterSetGuid">GUID, die den Indikatorensatz für einen Anbieter eindeutig identifiziert. Verwenden Sie die Guid, die im Manifest angegeben.</param>
        <param name="instanceType">Identifiziert den Typ des Indikatorensatzes, z. B., ob der Indikatorensatz einem Indikatorensatz einzelner oder mehrerer-Instanz.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.PerformanceData.CounterSet" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Registriert den Anbieter. Aufrufen der <xref:System.Diagnostics.PerformanceData.CounterSet.Dispose%2A> Methode entfernt die Registrierung.  
  
   
  
## Examples  
 Ein Beispiel finden Sie unter <xref:System.Diagnostics.PerformanceData>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InsufficientMemoryException">Es ist nicht genügend Arbeitsspeicher verfügbar, um den Vorgang abzuschließen.</exception>
        <exception cref="T:System.PlatformNotSupportedException">Vor Windows Vista unterstützt nicht.</exception>
        <exception cref="T:System.ArgumentException">Einer der Parameter ist NULL oder ungültig.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Fehler bei der zugrunde liegenden Aufruf einer Win32-Funktion.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCounter">
      <MemberSignature Language="C#" Value="public void AddCounter (int counterId, System.Diagnostics.PerformanceData.CounterType counterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCounter(int32 counterId, valuetype System.Diagnostics.PerformanceData.CounterType counterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterId" Type="System.Int32" />
        <Parameter Name="counterType" Type="System.Diagnostics.PerformanceData.CounterType" />
      </Parameters>
      <Docs>
        <param name="counterId">Gibt den Zähler. Verwenden Sie denselben Wert, den Sie in das Manifest verwendet, um den Zähler definieren.</param>
        <param name="counterType">Identifiziert den Leistungsindikator. Der Leistungsindikator vom Typ bestimmt, wie die Leistungsindikatorendaten berechnet, Mittelwert gebildet und dargestellt werden.</param>
        <summary>Fügt einen Indikator mit dem Leistungsindikator festlegen, indem der angegebene Leistungsindikator-ID und den Typ an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen die vor dem Erstellen einer Instanz des Indikatorensatzes Indikatorensatz Indikatoren hinzufügen.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Bezeichner des Indikators bereits vorhanden ist, in der Menge ist ein negativer Wert, oder der Indikatortyp ist NULL oder ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Sie können Leistungsindikatoren des Indikatorensatzes nach dem Erstellen einer Instanz des Leistungsindikators hinzufügen.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddCounter">
      <MemberSignature Language="C#" Value="public void AddCounter (int counterId, System.Diagnostics.PerformanceData.CounterType counterType, string counterName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCounter(int32 counterId, valuetype System.Diagnostics.PerformanceData.CounterType counterType, string counterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="counterId" Type="System.Int32" />
        <Parameter Name="counterType" Type="System.Diagnostics.PerformanceData.CounterType" />
        <Parameter Name="counterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="counterId">Gibt den Zähler. Verwenden Sie denselben Wert, den Sie in das Manifest verwendet, um den Zähler definieren.</param>
        <param name="counterType">Identifiziert den Leistungsindikator. Der Leistungsindikator vom Typ bestimmt, wie die Leistungsindikatorendaten berechnet, Mittelwert gebildet und dargestellt werden.</param>
        <param name="counterName">Der Name des Leistungsindikators. Sie können diesen Namen verwenden, zum Indizieren des Zählers in der Instanz. (Siehe <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />.)</param>
        <summary>Fügt einen Indikator mit dem Leistungsindikator festlegen, indem der angegebene Leistungsindikator-Bezeichner und Typ und einen Anzeigenamen für den Leistungsindikator an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie müssen die vor dem Erstellen einer Instanz des Indikatorensatzes Indikatorensatz Indikatoren hinzufügen.  
  
   
  
## Examples  
 Ein Beispiel finden Sie unter <xref:System.Diagnostics.PerformanceData>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Bezeichner des Indikators bereits vorhanden ist, in der Menge ist ein negativer Wert, oder der Indikatortyp ist NULL oder ungültig.</exception>
        <exception cref="T:System.InvalidOperationException">Sie können Leistungsindikatoren des Indikatorensatzes nach dem Erstellen einer Instanz des Leistungsindikators hinzufügen.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCounterSetInstance">
      <MemberSignature Language="C#" Value="public System.Diagnostics.PerformanceData.CounterSetInstance CreateCounterSetInstance (string instanceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.PerformanceData.CounterSetInstance CreateCounterSetInstance(string instanceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.PerformanceData.CounterSetInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="instanceName">Der Name der Instanz. Der Name muss eindeutig sein.</param>
        <summary>Erstellt eine Instanz des Indikatorensatzes.</summary>
        <returns>Eine Instanz des Indikatorensatzes, die die Leistungsindikatorendaten enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode einmal für Einzelinstanz-Indikatorensätze und eine oder mehrere Male für Indikatorensätze mit mehreren Instanzen.  
  
 Der Anbieter bestimmt, wenn er eine Instanz erstellt. Wenn die Leistungsindikatordaten mehr statisch ist, kann der Anbieter eine Instanz bei der Initialisierung des erstellen. Z. B. die Anzahl der Prozessoren auf einem Computer statisch ausgedehnte damit ein Anbieters, das Leistungsindikatordaten für Prozessoren bereitstellt, eine Instanz für jeden Prozessor auf dem Computer bei der Initialisierung des erstellen konnte. Leistungsindikatoren, die dynamischerer, z. B. Datenträger oder Verarbeiten von Leistungsindikatoren, würden die Anbieter die neuen Instanzen als Antwort auf ein neues USB-Gerät hinzugefügt wird oder ein neuer Prozess erstellt wird erstellen.  
  
 Der Anbieter sollte den Zähler beibehalten, die Daten auf dem neuesten Stand durchgehend.  
  
   
  
## Examples  
 Ein Beispiel finden Sie unter <xref:System.Diagnostics.PerformanceData>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Instanzname ist NULL.</exception>
        <exception cref="T:System.InvalidOperationException">Sie müssen die vor dem Erstellen einer Instanz des Indikatorensatzes Indikatorensatz Indikatoren hinzufügen.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von diesem Objekt verwendeten nicht verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="True" />Wenn dies von der Dispose-Methode aufgerufen wurde <see langword="False" /> aus den Finalizer aufgerufen.</param>
        <summary>Versionen, die alle nicht verwaltete Ressourcen von diesem Objekt verwendeten und optional die verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CounterSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.PerformanceData.CounterSet.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt Ressourcen frei, bevor das Objekt durch die Garbagecollection freigegeben wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird automatisch von der Laufzeit aufgerufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
