<Type Name="ToolBar+ToolBarButtonCollection" FullName="System.Windows.Forms.ToolBar+ToolBarButtonCollection">
  <TypeSignature Language="C#" Value="public class ToolBar.ToolBarButtonCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ToolBar/ToolBarButtonCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Kapselt eine Auflistung von <see cref="T:System.Windows.Forms.ToolBarButton" /> Steuerelemente für die Verwendung durch die <see cref="T:System.Windows.Forms.ToolBar" /> Klasse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> ist eine nullbasierte indizierte Auflistung verwendet werden, indem Sie die <xref:System.Windows.Forms.ToolBar> Klasse zum Halten von allen die <xref:System.Windows.Forms.ToolBarButton> Steuerelemente auf der Symbolleiste zugewiesen. Verwenden der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode zum Hinzufügen von einzelnen Schaltflächen und die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> Methode zu löschen. Rufen Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methode, um alle Schaltflächen aus der Auflistung zu entfernen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird erstellt und initialisiert ein <xref:System.Windows.Forms.ToolBar> und drei <xref:System.Windows.Forms.ToolBarButton> Steuerelemente. Symbolleisten-Schaltflächen der Symbolleiste zugewiesen sind, und die Symbolleiste zum Formular hinzugefügt wird. Dieser Code erfordert, dass ein <xref:System.Windows.Forms.Form> bereits erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.Buttons Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.Buttons Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.Buttons Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.Buttons Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ToolBarButtonCollection (System.Windows.Forms.ToolBar owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ToolBar owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.#ctor(System.Windows.Forms.ToolBar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ToolBar" />
      </Parameters>
      <Docs>
        <param name="owner">Die <see cref="T:System.Windows.Forms.ToolBar" /> , der das übergeordnete Element der Auflistung von <see cref="T:System.Windows.Forms.ToolBarButton" /> Steuerelemente.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> -Klasse und der angegebenen Symbolleiste zugewiesen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellen Sie nicht in der Regel eine <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> und seinem Konstruktor explizit aufzurufen. Durch Verweisen auf die <xref:System.Windows.Forms.ToolBar.Buttons%2A> Eigenschaft von der <xref:System.Windows.Forms.ToolBar> -Steuerelement, ein <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> wird erstellt. Sie können Zugriff auf die Eigenschaften und Methoden, und weisen Sie <xref:System.Windows.Forms.ToolBarButton> Steuerelemente auf die Auflistung.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Der auf dem neuen anzuzeigende Text <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Fügt eine neue Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltfläche mit dem angegebenen <see cref="P:System.Windows.Forms.ToolBarButton.Text" /> Eigenschaftswert.</summary>
        <returns>Der nullbasierte Indexwert des der <see cref="T:System.Windows.Forms.ToolBarButton" /> der Teamprojektsammlung hinzugefügt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch neue hinzufügen <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methoden oder die andere Version der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode.  
  
 So entfernen Sie eine <xref:System.Windows.Forms.ToolBarButton> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methoden.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" /> nach allen vorhandenen Schaltflächen hinzugefügt werden.</param>
        <summary>Fügt die angegebene Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <returns>Der nullbasierte Indexwert des der <see cref="T:System.Windows.Forms.ToolBarButton" /> der Teamprojektsammlung hinzugefügt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch neue hinzufügen <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methoden oder die andere Version der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode.  
  
 So entfernen Sie eine <xref:System.Windows.Forms.ToolBarButton> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird ein neues <xref:System.Windows.Forms.ToolBarButton> die Steuerung an eine vorhandene <xref:System.Windows.Forms.ToolBar> mit vorhandenen Schaltflächen. Der Symbolleisten-Schaltfläche wird am Ende hinzugefügt werden die <xref:System.Windows.Forms.ToolBar.Buttons%2A?displayProperty=nameWithType> Auflistung.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ToolBarButton[] buttons);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ToolBarButton[] buttons) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange(System.Windows.Forms.ToolBarButton[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttons" Type="System.Windows.Forms.ToolBarButton[]" />
      </Parameters>
      <Docs>
        <param name="buttons">Die Auflistung der <see cref="T:System.Windows.Forms.ToolBarButton" /> Steuerelemente hinzufügen <see cref="T:System.Windows.Forms.ToolBar.ToolBarButtonCollection" /> in einem Array enthalten sind.</param>
        <summary>Diese Auflistung der Symbolleisten-Schaltflächen hinzugefügt eine Auflistung von Symbolleisten-Schaltflächen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton> enthaltenen Objekte der `nodes` Array an das Ende der Auflistung angefügt werden.  
  
 Können Methode zum schnellen Hinzufügen von einer Gruppe von zuvor erstellten <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung anstelle von manuell hinzufügen und <xref:System.Windows.Forms.ToolBarButton> mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> Methode.  
  
 So entfernen Sie eine <xref:System.Windows.Forms.ToolBarButton> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methoden.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle Schaltflächen aus der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methode durchläuft die Auflistung und entfernt alle Schaltflächen der Symbolleiste zugewiesen werden, um die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Um eine einzelne Symbolleisten-Schaltfläche aus der Auflistung zu entfernen, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> Methoden.  
  
 Hinzufügen neuer <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methoden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> von der <xref:System.Windows.Forms.ToolBar.Buttons%2A> vor und nach der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> -Methode aufgerufen wird. Dieser Code erfordert, dass eine <xref:System.Windows.Forms.ToolBar> mit mindestens einer <xref:System.Windows.Forms.ToolBarButton> erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Contains(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt, ob die angegebene Symbolleisten-Schaltfläche ein Member der Auflistung ist.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="T:System.Windows.Forms.ToolBarButton" /> ist ein Member der Auflistung ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen zu bestimmen, ob eine <xref:System.Windows.Forms.ToolBarButton> ist Mitglied der Sammlung, bevor Sie versuchen, die Operationen für die <xref:System.Windows.Forms.ToolBarButton>. Sie können diese Methode verwenden, um zu bestätigen, dass eine <xref:System.Windows.Forms.ToolBarButton> hinzugefügt wurde, oder ist immer noch ein Element der Auflistung.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.ContainsKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name der zu suchenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Bestimmt, ob eine <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel in der Auflistung enthalten ist.</summary>
        <returns>
          <see langword="true" />an einem <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel gefunden wird; andernfalls, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> zurückgibt`false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Schaltflächen in der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <value>Die Anzahl der <see cref="T:System.Windows.Forms.ToolBarButton" /> Steuerelemente auf der Symbolleiste zugewiesen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> Eigenschaft enthält die tatsächliche Anzahl von <xref:System.Windows.Forms.ToolBarButton> Steuerelemente, die der Auflistung zugewiesen. Es ist üblich, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> Eigenschaftswert als obere Grenze einer Schleife zum Durchlaufen einer Auflistung. Der Indexwert einer Auflistung ist ein nullbasierter Index, damit Sie von der Schleifenvariablen abziehen müssen andernfalls Sie werden die obere Grenze der Auflistung überschritten und lösen eine Ausnahme aus.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> von der <xref:System.Windows.Forms.ToolBar.Buttons%2A> vor und nach der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> -Methode aufgerufen wird. Dieser Code erfordert, dass eine <xref:System.Windows.Forms.ToolBar> mit mindestens einer <xref:System.Windows.Forms.ToolBarButton> erstellt wurde.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</summary>
        <returns>Eine <see cref="T:System.Collections.IEnumerator" /> , die die Auflistung von Strukturknoten darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Ruft den Index der angegebenen Symbolleisten-Schaltfläche in der Auflistung ab.</summary>
        <returns>Der nullbasierte Index des Elements in der Auflistung gefunden wird; andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen einfachen Zugriff auf den Indexwert des der <xref:System.Windows.Forms.ToolBarButton> in der Auflistung. Der Indexwert können Sie problemlos ermitteln, welche <xref:System.Windows.Forms.ToolBarButton> geklickt wurde, auf die <xref:System.Windows.Forms.ToolBar>. Die <xref:System.Windows.Forms.ToolBarButton> geklickt kann bestimmt werden, durch das Auswerten der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOf%2A> Wert, der die <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A?displayProperty=nameWithType> Eigenschaft.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine <xref:System.Windows.Forms.ToolBar> und drei <xref:System.Windows.Forms.ToolBarButton> Steuerelemente. Schaltflächen die Symbolleiste auf die Schaltfläche Auflistung zugewiesen sind, die Auflistung der Symbolleiste zugewiesen ist und die Symbolleiste zum Formular hinzugefügt wird. Auf der <xref:System.Windows.Forms.ToolBar.ButtonClick> -Ereignis für die Symbolleiste die <xref:System.Windows.Forms.ToolBarButtonClickEventArgs.Button%2A> Eigenschaft von der <xref:System.Windows.Forms.ToolBarButtonClickEventArgs> ausgewertet wird, und das entsprechende Dialogfeld geöffnet. Dieser Code erfordert, dass eine <xref:System.Windows.Forms.Form>, wird ein <xref:System.Windows.Forms.OpenFileDialog>, <xref:System.Windows.Forms.SaveFileDialog>, und ein <xref:System.Windows.Forms.PrintDialog> erstellt wurden.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.IndexOf Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.IndexOf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name der zu suchenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Ruft den Index des ersten Vorkommens einer <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel.</summary>
        <returns>Der Index des ersten Vorkommens einer <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel, sofern gefunden, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IndexOfKey%2A> wird aufgerufen, die letzte Index zuerst nach einer Übereinstimmung Schlüssel überprüft, und wenn keine Übereinstimmung vorhanden ist, beginnt die Suche am Anfang der Auflistung zurückgegeben.  
  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> gibt-1 zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Insert(int32 index, class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert(System.Int32,System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="index">Der indizierten Position in der Auflistung, die Symbolleisten-Schaltfläche einfügen.</param>
        <param name="button">Der einzufügende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Fügt eine vorhandene Symbolleisten-Schaltfläche in der Auflistung der Symbolleisten-Schaltfläche am angegebenen Speicherort.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können auch neue hinzufügen <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> Methoden.  
  
 So entfernen Sie eine <xref:System.Windows.Forms.ToolBarButton> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methoden.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position von der <see cref="T:System.Windows.Forms.ToolBarButton" /> in der Auflistung.</param>
        <summary>Ruft ab oder legt die Symbolleisten-Schaltfläche an der angegebenen indizierten Position in der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <value>Ein <see cref="T:System.Windows.Forms.ToolBarButton" /> , die die Symbolleisten-Schaltfläche an der angegebenen indizierten Position darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zuweisen von <xref:System.Windows.Forms.ToolBarButton> steuert daraus abgerufen oder an einem bestimmten Speicherort der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>, können Sie das Objekt mit einem bestimmten Indexwert verweisen. Der Indexwert des der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> ist ein nullbasierter Index.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die letzte Symbolleistenschaltfläche auf einer Symbolleiste ersetzt. Dieser Code erfordert, dass eine <xref:System.Windows.Forms.ToolBar> und mindestens eine <xref:System.Windows.Forms.ToolBarButton> erstellt wurden. Im Beispiel ruft die Anzahl der Schaltflächen auf der Symbolleiste und die letzte Schaltfläche durch eine neu erstellte ersetzt. Die `index` Wert der ersetzten Symbolleisten-Schaltfläche auf festgelegt ist die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> -Eigenschaft, minus 1, da die <xref:System.Windows.Forms.ToolBarButton> Auflistung ist ein nullbasierter Index.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="index" />-Wert ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <paramref name="index" /> Wert ist kleiner als 0 (null).  
  
 - oder -   
  
 Die <paramref name="index" /> Wert ist größer als die Anzahl von Schaltflächen in der Auflistung, und die Auflistung der Schaltflächen ist nicht <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ToolBarButton this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ToolBarButton Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ToolBarButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name der abzurufenden <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Ruft eine <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel aus der Auflistung.</summary>
        <value>Die <see cref="T:System.Windows.Forms.ToolBarButton" /> , deren <see cref="P:System.Windows.Forms.ToolBarButton.Name" /> -Eigenschaft mit den angegebenen Schlüssel übereinstimmt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Item%2A> gibt `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.ToolBarButton button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.ToolBarButton button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove(System.Windows.Forms.ToolBarButton)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Windows.Forms.ToolBarButton" />
      </Parameters>
      <Docs>
        <param name="button">Die aus der Auflistung zu entfernende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Entfernt eine angegebene Schaltfläche aus der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie zum Entfernen von Schaltflächen der Symbolleiste aus der Auflistung der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt%2A>, oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methoden.  
  
 Hinzufügen neuer <xref:System.Windows.Forms.ToolBarButton> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Add%2A>, <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.AddRange%2A> oder <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Insert%2A> Methoden.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt eine vorhandene <xref:System.Windows.Forms.ToolBarButton> aus einem <xref:System.Windows.Forms.ToolBar> steuern, sofern er vorhanden und fügt hinzu und fügt vier neue <xref:System.Windows.Forms.ToolBarButton> Datenbankobjekte in der <xref:System.Windows.Forms.ToolBar>. Dieses Beispiel benötigen Sie ein <xref:System.Windows.Forms.Form> mit einem <xref:System.Windows.Forms.ToolBar> Steuerelement.  
  
 [!code-cpp[ToolBar#2](~/samples/snippets/cpp/VS_Snippets_Winforms/ToolBar/CPP/mytoolbar.cpp#2)]
 [!code-csharp[ToolBar#2](~/samples/snippets/csharp/VS_Snippets_Winforms/ToolBar/CS/mytoolbar.cs#2)]
 [!code-vb[ToolBar#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ToolBar/VB/mytoolbar.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position von der <see cref="T:System.Windows.Forms.ToolBarButton" /> in der Auflistung.</param>
        <summary>Entfernt eine angegebene Schaltfläche aus der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Remove%2A> Methode entfernt die <xref:System.Windows.Forms.ToolBarButton> an der angegebenen Position in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>. Wenn Sie alle entfernen möchten <xref:System.Windows.Forms.ToolBarButton> verwenden Sie Steuerelemente aus der Auflistung der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Clear%2A> Methode.  
  
   
  
## Examples  
 Das folgende Codebeispiel entfernt die letzte <xref:System.Windows.Forms.ToolBarButton> auf eine <xref:System.Windows.Forms.ToolBar>. Der Indexwert der entfernten Symbolleisten-Schaltfläche gleich festgelegt ist die <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection.Count%2A> -Eigenschaft, minus 1, da die <xref:System.Windows.Forms.ToolBarButton> Auflistung ist ein nullbasierter Index.  
  
 [!code-cpp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic ToolBar.ToolBarButtonCollection.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ToolBar.ToolBarButtonCollection.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die <paramref name="index" /> Wert ist kleiner als 0 oder größer als die Anzahl von Schaltflächen in der Auflistung.</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.RemoveByKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des der <see cref="T:System.Windows.Forms.ToolBarButton" /> aus der Auflistung zu entfernen.</param>
        <summary>Entfernt die <see cref="T:System.Windows.Forms.ToolBarButton" /> mit dem angegebenen Schlüssel aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ToolBarButton.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.ToolBarButton> in der <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Das eindimensionale <see cref="T:System.Array" />, das das Ziel der aus der <see cref="T:System.Collections.ICollection" /> kopierten Elemente ist. Für das <see cref="T:System.Array" /> muss eine nullbasierte Indizierung verwendet werden.</param>
        <param name="index">Der nullbasierte Index im <c>Dest</c> an dem der Kopiervorgang beginnt.</param>
        <summary>Kopiert die Elemente der <see cref="T:System.Collections.ICollection" /> in ein <see cref="T:System.Array" />, beginnend bei einem bestimmten <see cref="T:System.Array" />-Index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Zugriff auf die Auflistung synchronisiert ist (threadsicher).</summary>
        <value>
          <see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein Objekt, das zum Synchronisieren des Zugriffs auf die Auflistung von Schaltflächen verwendet werden kann.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Die <see cref="T:System.Windows.Forms.ToolBarButton" /> nach allen vorhandenen Schaltflächen hinzugefügt werden.</param>
        <summary>Fügt die angegebene Symbolleisten-Schaltfläche am Ende der Auflistung der Symbolleisten-Schaltfläche.</summary>
        <returns>Der nullbasierte Indexwert des der <see cref="T:System.Windows.Forms.ToolBarButton" /> der Teamprojektsammlung hinzugefügt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> ist keine <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Das Element in der Auflistung gesucht werden soll.</param>
        <summary>Ermittelt, ob die Auflistung einen bestimmten Wert enthält.</summary>
        <returns>
          <see langword="true" />Wenn das Element in der Auflistung gefunden wurde. andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Das Element in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt den Index eines bestimmten Elements in der Auflistung.</summary>
        <returns>Der Index von <paramref name="button" />, wenn das Element in der Liste gefunden wird, andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Der indizierten Position in der Auflistung, die Symbolleisten-Schaltfläche einfügen.</param>
        <param name="button">Der einzufügende <see cref="T:System.Windows.Forms.ToolBarButton" />.</param>
        <summary>Fügt eine vorhandene Symbolleisten-Schaltfläche in der Auflistung der Symbolleisten-Schaltfläche am angegebenen Speicherort.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="button" /> ist keine <see cref="T:System.Windows.Forms.ToolBarButton" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung eine feste Größe aufweist.</summary>
        <value>
          <see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des Elements, das abgerufen oder festgelegt werden soll.</param>
        <summary>Ruft ab oder legt das Element am angegebenen Index fest.</summary>
        <value>Das Element am angegebenen Index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object button);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object button) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ToolBar.ToolBarButtonCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="button">Der <see cref="T:System.Object" />, der aus der <see cref="T:System.Collections.IList" /> entfernt werden soll.</param>
        <summary>Entfernt das erste Vorkommen eines Elements aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn das <xref:System.Windows.Forms.ToolBar.ToolBarButtonCollection> in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
