<Type Name="Menu+MenuItemCollection" FullName="System.Windows.Forms.Menu+MenuItemCollection">
  <TypeSignature Language="C#" Value="public class Menu.MenuItemCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Menu/MenuItemCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu.MenuItemCollection" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine Auflistung von<see cref="T:System.Windows.Forms.MenuItem" />-Objekten dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse stellt die Auflistung der <xref:System.Windows.Forms.MenuItem> in gespeicherten Objekte eine <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, oder <xref:System.Windows.Forms.MenuItem>. Für die <xref:System.Windows.Forms.MainMenu> und <xref:System.Windows.Forms.ContextMenu> Klassen, die diese Auflistung stellt die gesamte Menüstruktur für das Steuerelement dar. Für die <xref:System.Windows.Forms.MenuItem> -Klasse, die dieser Auflistung stellt die Liste der zugeordneten Untermenüelemente der <xref:System.Windows.Forms.MenuItem>.  
  
 Die <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> und <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methoden ermöglichen es Ihnen, hinzufügen und entfernen einzelne Menüelemente aus der Auflistung. Sie können auch die <xref:System.Windows.Forms.Menu.MenuItemCollection.Clear%2A> Methode, um alle Menüelemente aus der Auflistung zu entfernen.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItemCollection (System.Windows.Forms.Menu owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Menu owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.#ctor(System.Windows.Forms.Menu)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="owner">Die <see cref="T:System.Windows.Forms.Menu" /> , die Besitzer dieser Sammlung ist.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Klasse erfordert, dass Sie die Sammlung einer Klasse zugeordnet, die abgeleitet <xref:System.Windows.Forms.Menu>, wie z. B. die <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, oder <xref:System.Windows.Forms.MenuItem> Klasse. Da Sie ein Menü, die dieser Sammlung zugeordnet ist angeben müssen, können nicht Sie Auflistungen mit mehreren Menüelementen erstellen und Zuordnen eines Menüs nach Bedarf. Um die Menüelemente zugeordneten ein Menü zu wechseln, müssen Sie die Auflistung von Elementen deaktivieren und Hinzufügen der Menüelemente, die der Auflistung angezeigt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="caption">Die Beschriftung des Menüelements.</param>
        <summary>Fügt ein neues <see cref="T:System.Windows.Forms.MenuItem" />, bis zum Ende des aktuellen Menüs, mit einer angegebenen Beschriftung.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.MenuItem" /> , der dem Menüelement, das der Auflistung hinzugefügte darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.MenuItem> kann nur in einem Menü enthalten sein und kann nicht mehr als einmal auf das gleiche Menü hinzugefügt werden. Wiederverwenden einer <xref:System.Windows.Forms.MenuItem> in mehr als einem Menü verwenden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode der <xref:System.Windows.Forms.MenuItem> Klasse. So entfernen Sie eine <xref:System.Windows.Forms.MenuItem> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die abgeleitete Klasse verwendet <xref:System.Windows.Forms.MainMenu> zum Erstellen von einem Hauptmenü stammt, `mainMenu1`, zwei <xref:System.Windows.Forms.MenuItem> hinzugefügten Objekte seiner <xref:System.Windows.Forms.Menu.MenuItems%2A> Auflistung. Der Code weist dann `mainMenu1` auf die <xref:System.Windows.Forms.Form.Menu%2A> Eigenschaft der <xref:System.Windows.Forms.Form>. Dieses Beispiel benötigen Sie, dass der Code in diesem Beispiel definierte in einem Formular befindet.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">Das hinzuzufügende <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <summary>Fügt ein zuvor erstelltes <see cref="T:System.Windows.Forms.MenuItem" /> bis zum Ende des aktuellen Menüs.</summary>
        <returns>Der nullbasierte Index, in dem das Element in der Auflistung gespeichert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.MenuItem> kann nur in einem Menü enthalten sein und kann nicht mehr als einmal auf das gleiche Menü hinzugefügt werden. Wiederverwenden einer <xref:System.Windows.Forms.MenuItem> in mehr als einem Menü verwenden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode der <xref:System.Windows.Forms.MenuItem> Klasse. So entfernen Sie eine <xref:System.Windows.Forms.MenuItem> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode.  
  
 Diese Version von der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode können Sie hinzuzufügende zuvor erstellte <xref:System.Windows.Forms.MenuItem> Objekte bis zum Ende des Menüs-Elementauflistung.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz der abgeleiteten Klasse <xref:System.Windows.Forms.MainMenu>, und fügt eine <xref:System.Windows.Forms.MenuItem> auf die Auflistung von <xref:System.Windows.Forms.MenuItem> Objekte. Dieses Beispiel erfordert, dass die in diesem Beispiel definierte Methode innerhalb der Klasse für ein Formular und von einer Methode in dieser Form-Klasse aufgerufen wird.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (int index, System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(int32 index, class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Int32,System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="index">Die Position, an das neue Element hinzugefügt werden soll.</param>
        <param name="item">Das hinzuzufügende <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <summary>Fügt ein zuvor erstelltes <see cref="T:System.Windows.Forms.MenuItem" /> am angegebenen Index in die Auflistung von Menüelementen.</summary>
        <returns>Der nullbasierte Index, in dem das Element in der Auflistung gespeichert wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.MenuItem> kann nur in einem Menü enthalten sein und kann nicht mehr als einmal auf das gleiche Menü hinzugefügt werden. Wiederverwenden einer <xref:System.Windows.Forms.MenuItem> in mehr als einem Menü verwenden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode der <xref:System.Windows.Forms.MenuItem> Klasse. So entfernen Sie eine <xref:System.Windows.Forms.MenuItem> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode.  
  
 Diese Version von der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode können Sie hinzuzufügende zuvor erstellte <xref:System.Windows.Forms.MenuItem> Objekte einer bestimmten Indexposition in der Auflistung. Alle <xref:System.Windows.Forms.MenuItem> befindet sich derzeit in dieser Index enthält, und alle <xref:System.Windows.Forms.MenuItem> Objekte nach dem entsprechenden Index bis zum nächsten niedrigsten Index in der Auflistung verschoben werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt eine Instanz der abgeleiteten Klasse <xref:System.Windows.Forms.MainMenu>, und fügt eine <xref:System.Windows.Forms.MenuItem> Objekt der Auflistung der <xref:System.Windows.Forms.MenuItem> Objekte an einer bestimmten Stelle im Menü-Elementauflistung. Dieses Beispiel erfordert, dass die in diesem Beispiel definierte Methode innerhalb der Klasse für ein Formular und von einer Methode in dieser Form-Klasse aufgerufen wird.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Die <see cref="T:System.Windows.Forms.MenuItem" /> hinzugefügte wird bereits verwendet.</exception>
        <exception cref="T:System.ArgumentException">Der Index angegeben wird, der <paramref name="index" /> Parameter ist größer als die Größe der Auflistung.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.EventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="caption">Die Beschriftung des Menüelements.</param>
        <param name="onClick">Ein <see cref="T:System.EventHandler" /> , das den Ereignishandler, die aufgerufen wird, wenn der Benutzer das Element geklickt wird oder wenn ein Benutzer eine Zugriffstaste oder im Kontextmenü für das Menüelement drückt darstellt.</param>
        <summary>Fügt ein neues <see cref="T:System.Windows.Forms.MenuItem" /> bis zum Ende des aktuellen Menüs mit einer angegebenen Beschriftung und einem angegebenen Ereignishandler für das <see cref="E:System.Windows.Forms.MenuItem.Click" /> Ereignis.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.MenuItem" /> , der dem Menüelement, das der Auflistung hinzugefügte darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.MenuItem> kann nur in einem Menü enthalten sein und kann nicht mehr als einmal auf das gleiche Menü hinzugefügt werden. Wiederverwenden einer <xref:System.Windows.Forms.MenuItem> in mehr als einem Menü verwenden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode der <xref:System.Windows.Forms.MenuItem> Klasse. So entfernen Sie eine <xref:System.Windows.Forms.MenuItem> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode.  
  
 Diese Version von den <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode ermöglicht Ihnen die Angabe eine Beschriftung für das Menüelement und einen Delegaten zur Behandlung der <xref:System.Windows.Forms.MenuItem.Click> Ereignis. Können Sie diese Version von den <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode, wenn die Anwendung bereits einen Ereignishandler zur Behandlung der <xref:System.Windows.Forms.MenuItem.Click> Ereignis.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.MenuItem.Click> Ereignis wird nicht für eine <xref:System.Windows.Forms.MenuItem> Untermenüelemente enthält.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die abgeleitete Klasse verwendet <xref:System.Windows.Forms.MainMenu> zum Erstellen von einem Hauptmenü stammt, `mainMenu1`, zwei <xref:System.Windows.Forms.MenuItem> hinzugefügten Objekte seiner <xref:System.Windows.Forms.Menu.MenuItems%2A> Auflistung. Der Code verwendet diese Version von den <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode, um einen Ereignishandler für definieren die <xref:System.Windows.Forms.MenuItem.Click> -Ereignis für das zweite Menüelement der Auflistung hinzugefügt. Der Code weist dann `mainMenu1` auf die <xref:System.Windows.Forms.Form.Menu%2A> Eigenschaft der <xref:System.Windows.Forms.Form>. Dieses Beispiel benötigen Sie, dass der Code in diesem Beispiel definierte in einem Formular befindet.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="caption">Die Beschriftung des Menüelements.</param>
        <param name="items">Ein Array von <see cref="T:System.Windows.Forms.MenuItem" /> Objekte, die von diesem <see cref="T:System.Windows.Forms.MenuItem" /> enthält.</param>
        <summary>Fügt ein neues <see cref="T:System.Windows.Forms.MenuItem" /> bis zum Ende des Menüs mit der angegebenen Beschriftung <see cref="E:System.Windows.Forms.MenuItem.Click" /> Ereignishandler und Elemente.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.MenuItem" /> , der dem Menüelement, das der Auflistung hinzugefügte darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Forms.MenuItem> kann nur in einem Menü enthalten sein und kann nicht mehr als einmal auf das gleiche Menü hinzugefügt werden. Wiederverwenden einer <xref:System.Windows.Forms.MenuItem> in mehr als einem Menü verwenden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode der <xref:System.Windows.Forms.MenuItem> Klasse. So entfernen Sie eine <xref:System.Windows.Forms.MenuItem> , die Sie zuvor hinzugefügt haben, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode.  
  
 Diese Version von den <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode ermöglicht Ihnen die Angabe eine Beschriftung für das Menüelement und einen Delegaten, die behandelt die <xref:System.Windows.Forms.MenuItem.Click> Ereignis. Können Sie diese Version von den <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode, wenn die Anwendung bereits einen Ereignishandler zur Behandlung der <xref:System.Windows.Forms.MenuItem.Click> Ereignis. Diese Version der Methode auch können Sie an ein Array von zuvor erstellten <xref:System.Windows.Forms.MenuItem> Objekte, die der Auflistung hinzugefügt werden sollen. Sie können dieses Feature verwenden, um vorhandene wiederverwenden <xref:System.Windows.Forms.MenuItem> Objekte, die mit geklont wurden die <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> Methode. Wenn die `items` Parameter ist nicht leer oder `null`die <xref:System.Windows.Forms.MenuItem> Untermenüelemente enthält, die der Auflistung hinzugefügt wird.  
  
> [!NOTE]
>  Die <xref:System.Windows.Forms.MenuItem.Click> Ereignis wird nicht für eine <xref:System.Windows.Forms.MenuItem> Untermenüelemente enthält.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.AddRange(System.Windows.Forms.MenuItem[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Ein Array von <see cref="T:System.Windows.Forms.MenuItem" /> Objekten, die die Menüelemente der Auflistung hinzuzufügende darstellen.</param>
        <summary>Fügt ein Array von zuvor erstellten <see cref="T:System.Windows.Forms.MenuItem" /> -Objekte der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Methode zum schnellen Hinzufügen von einer Gruppe von zuvor erstellten <xref:System.Windows.Forms.MenuItem> -Objekte der Auflistung anstelle von manuell hinzufügen und <xref:System.Windows.Forms.MenuItem> mithilfe der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode. Wenn die Auflistung bereits enthält <xref:System.Windows.Forms.MenuItem> Objekte, die beim Aufrufen dieser Methode wird die neue hinzufügen <xref:System.Windows.Forms.MenuItem> Objekte an das Ende der Auflistung.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Array und kopiert die <xref:System.Windows.Forms.Menu.MenuItemCollection> Objekte aus zwei <xref:System.Windows.Forms.MenuItem> Objekte im Array. Im Beispiel kopiert dann das Array von <xref:System.Windows.Forms.MenuItem> Objekte in die Auflistung der Steuerelemente für eine <xref:System.Windows.Forms.ContextMenu> mit dem Namen `contextMenu1`. Dieses Beispiel benötigen Sie, dass es zwei existieren <xref:System.Windows.Forms.MenuItem> Objekte, die mit dem Namen Untermenüelemente `menuItem1` und `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt alle <see cref="T:System.Windows.Forms.MenuItem" /> Objekte aus dem Menü-Elementauflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode können Sie um die gesamte Auflistung von Menüelementen aus einem Menü zu löschen. Um ein einzelnes Menüelement aus der Auflistung zu entfernen, verwenden Sie die <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> Methode. Hinzufügen neuer <xref:System.Windows.Forms.MenuItem> -Objekte der Auflistung mithilfe der <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> Methode.  
  
   
  
## Examples  
 In diesem Beispiel erstellen Sie eine Hauptmenü `myMainMenu`, mit zwei <xref:System.Windows.Forms.MenuItem> Objekte `File` und `Edit`. Die `File` Menü verfügt über drei Untermenüelemente `New`, `Open`, und `Exit`. Mithilfe der `Clear` -Methode, Sie entfernen Sie alle der <xref:System.Windows.Forms.MenuItem> Objekte in der `File` Menü-Auflistung. Dieses Programm erfordert, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[ClearItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClearItems/CPP/clearitems.cpp#1)]
 [!code-csharp[ClearItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClearItems/CS/clearitems.cs#1)]
 [!code-vb[ClearItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClearItems/VB/clearitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Contains(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">Die <see cref="T:System.Windows.Forms.MenuItem" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Bestimmt, ob das angegebene <see cref="T:System.Windows.Forms.MenuItem" /> ist ein Member der Auflistung.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="T:System.Windows.Forms.MenuItem" /> ist ein Member der Auflistung ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ermöglicht Ihnen zu bestimmen, ob eine <xref:System.Windows.Forms.MenuItem> ist Mitglied der Sammlung, bevor Sie versuchen, die Operationen für die <xref:System.Windows.Forms.MenuItem>. Sie können diese Methode verwenden, um zu bestätigen, dass eine <xref:System.Windows.Forms.MenuItem> hinzugefügt wurde, oder ist immer noch ein Element der Auflistung.  
  
   
  
## Examples  
 In diesem Beispiel erstellen Sie eine Hauptmenü `myMainMenu`, mit zwei <xref:System.Windows.Forms.MenuItem> Objekte `File` und `Edit`. Die `File` Menü verfügt über drei Untermenüelemente `New`, `Open`, und `Exit`. Mithilfe der <xref:System.Windows.Forms.Menu.MenuItemCollection.Contains%2A> -Methode wird überprüft, um festzustellen, wenn die `File` Menü Auflistung enthält das Element `Open`. Wenn das Element vorhanden ist, wird das Ergebnis in einem Textfeld angezeigt. Dieses Programm erfordert, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[ContainsItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ContainsItems/CPP/containsitems.cpp#1)]
 [!code-csharp[ContainsItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ContainsItems/CS/containsitems.cs#1)]
 [!code-vb[ContainsItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ContainsItems/VB/containsitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Elements, das gesucht werden soll.</param>
        <summary>Bestimmt, ob die Auflistung ein Element mit dem angegebenen Schlüssel enthält.</summary>
        <returns>
          <see langword="true" />Wenn die Auflistung ein Element mit dem angegebenen Schlüssel, andernfalls enthält <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Menu.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.MenuItem> in der <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey%2A> zurückgibt`false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Das Zielarray.</param>
        <param name="index">Der Index im Zielarray, ab dem gespeichert wird.</param>
        <summary>Kopiert die gesamte Auflistung in ein vorhandenes Array an einer angegebenen Position innerhalb des Arrays.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Methode zum Kombinieren <xref:System.Windows.Forms.MenuItem> Objekte aus mehreren Sammlungen in ein einzelnes Array. Dieses Feature ermöglicht es Ihnen, leicht Kombinieren von mindestens zwei Sätze von Menüelementen zur Verwendung in einem <xref:System.Windows.Forms.ContextMenu> oder <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Das folgende Codebeispiel erstellt ein Array und kopiert die <xref:System.Windows.Forms.Menu.MenuItemCollection> Objekte aus zwei <xref:System.Windows.Forms.MenuItem> Objekte im Array. Im Beispiel kopiert dann das Array von <xref:System.Windows.Forms.MenuItem> Objekte in die Auflistung der Steuerelemente für eine <xref:System.Windows.Forms.ContextMenu> mit dem Namen `contextMenu1`. Dieses Beispiel benötigen Sie, dass es zwei existieren <xref:System.Windows.Forms.MenuItem> Objekte, die mit dem Namen Untermenüelemente `menuItem1` und `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, der Gesamtzahl der <see cref="T:System.Windows.Forms.MenuItem" /> Objekte in der Auflistung.</summary>
        <value>Die Anzahl von <see cref="T:System.Windows.Forms.MenuItem" />-Objekten in der Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Count` Eigenschaft enthält die Anzahl der <xref:System.Windows.Forms.MenuItem> zugewiesenen Objekte an der Auflistung. Sie können die `Count` Eigenschaftswert als obere Grenze einer Schleife zum Durchlaufen einer Auflistung. Beachten Sie, der Indexwert, der eine Auflistung ist ein nullbasierter Index, damit Sie von der Schleifenvariablen abziehen müssen. Wenn Sie nicht für dieses Konto, Sie die obere Grenze der Auflistung überschritten und eine Ausnahme auslösen.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Hauptmenü erstellen `myMainMenu`, mit einem <xref:System.Windows.Forms.MenuItem>, `File`, dessen drei Untermenüelemente: `New`, `Open`, und `Exit`. Mithilfe der `Count` -Eigenschaft, Sie zählen die Anzahl der Objekte in der `File` Menü und diese Zahl in einem Meldungsfeld angezeigt. Dieses Beispiel benötigen Sie, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[CountProperty#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CountProperty/CPP/countitems.cpp#1)]
 [!code-csharp[CountProperty#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CountProperty/CS/countitems.cs#1)]
 [!code-vb[CountProperty#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CountProperty/VB/countitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Find(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden Menüelements.</param>
        <param name="searchAllChildren">
          <see langword="true" />untergeordnete Menüelemente gesucht werden soll. andernfalls <see langword="false" />.</param>
        <summary>Sucht die Elemente mit dem angegebenen Schlüssel, die optional die Untermenüelemente suchen</summary>
        <returns>Ein Array von <see cref="T:System.Windows.Forms.MenuItem" /> -Objekte, deren <see cref="P:System.Windows.Forms.Menu.Name" /> Eigenschaft entspricht dem angegebenen <paramref name="key" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge ist, oder es sind keine Übereinstimmungen <xref:System.Windows.Forms.Menu.MenuItemCollection.Find%2A> ein leeres Array zurück.  
  
 Die <xref:System.Windows.Forms.Menu.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.MenuItem> in der <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Der <paramref name="key" /> ist <see langword="null" /> oder eine leere Zeichenfolge.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Enumerator, der zum Durchlaufen der Auflistung von Menüelementen verwendet werden kann.</summary>
        <returns>Eine <see cref="T:System.Collections.IEnumerator" /> , die die Auflistung von Menüelementen darstellt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOf(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">Die <see cref="T:System.Windows.Forms.MenuItem" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Ruft den Index eines bestimmten Elements in der Auflistung ab.</summary>
        <returns>Der nullbasierte Index des Elements in der Auflistung gefunden wird; andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Hauptmenü erstellen `myMainMenu`, mit zwei <xref:System.Windows.Forms.MenuItem> Objekte `File` und `Edit`. Die `File` Menü enthält drei Untermenüelemente: `New`, `Open`, und `Exit`. Mithilfe der <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOf%2A> Methode Sie abrufen, den Index des der `Exit` Element in der `File` Menü-Auflistung, und dessen Wert dann in einem Meldungsfeld angezeigt. Dieses Beispiel benötigen Sie, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[IndexOf#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[IndexOf#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IndexOf/CS/indexof.cs#1)]
 [!code-vb[IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des zu suchenden Menüelements.</param>
        <summary>Sucht den Index des ersten Vorkommens eines Menüelements mit dem angegebenen Schlüssel.</summary>
        <returns>Der nullbasierte Index des ersten Menüelements mit dem angegebenen Schlüssel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> wird aufgerufen, die letzte Index zuerst nach einer Übereinstimmung Schlüssel überprüft, und wenn keine Übereinstimmung vorhanden ist, beginnt die Suche am Anfang der Auflistung zurückgegeben.  
  
 Die <xref:System.Windows.Forms.Menu.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.MenuItem> in der <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge, oder es sind keine Übereinstimmungen <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> gibt-1 zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Auflistung schreibgeschützt ist.</summary>
        <value>
          <see langword="true" />, wenn die Auflistung schreibgeschützt ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Die indizierte Position von der <see cref="T:System.Windows.Forms.MenuItem" /> in der Auflistung.</param>
        <summary>Ruft die <see cref="T:System.Windows.Forms.MenuItem" /> an der angegebenen indizierten Position in der Auflistung.</summary>
        <value>Die <see cref="T:System.Windows.Forms.MenuItem" /> an der angegebenen Position.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zuweisen von <xref:System.Windows.Forms.MenuItem> Objekte daraus abgerufen oder an einem bestimmten Speicherort der <xref:System.Windows.Forms.Menu.MenuItemCollection>, können Sie das Objekt mit einem bestimmten Indexwert verweisen. Der Indexwert des der <xref:System.Windows.Forms.Menu.MenuItemCollection> ist ein nullbasierter Index.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der <paramref name="value" />-Parameter ist <see langword="null" />.  
  
 oder  
  
 Die <paramref name="index" /> Parameter ist kleiner als 0 (null).  
  
 oder  
  
 Die <paramref name="index" /> -Parameters ist größer als die Anzahl der Menüelemente in der Auflistung, und die Auflistung von Menüelementen ist nicht <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Elements, das aus der Auflistung abgerufen werden soll.</param>
        <summary>Ruft ein Element mit dem angegebenen Schlüssel aus der Auflistung ab.</summary>
        <value>Das <see cref="T:System.Windows.Forms.MenuItem" /> mit dem angegebenen Schlüssel.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Menu.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.MenuItem> in der <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet. Wenn die `key` Parameter ist `null` oder eine leere Zeichenfolge <xref:System.Windows.Forms.Menu.MenuItemCollection.Item%2A> zurückgibt`null.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">Das zu entfernende <see cref="T:System.Windows.Forms.MenuItem" />-Element.</param>
        <summary>Entfernt das angegebene <see cref="T:System.Windows.Forms.MenuItem" /> aus der Auflistung von Menüelementen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Windows.Forms.MenuItem> aus der Auflistung von Menüelementen, Menü für alle nachfolgenden Elemente verschoben werden, um eine Position in der Auflistung entfernt wird. Können Sie diese Version von den `Remove` zum Entfernen einer bestimmten <xref:System.Windows.Forms.MenuItem> aus der Auflistung, die mit einem Verweis auf die <xref:System.Windows.Forms.MenuItem> entfernt werden soll. Wenn Sie einen Verweis auf keine der <xref:System.Windows.Forms.MenuItem> , dass Sie entfernen möchten, können Sie die andere Version dieser Methode, die als Parameter verwendet, einen Index entspricht akzeptiert die <xref:System.Windows.Forms.MenuItem> entfernt werden soll.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Hauptmenü erstellen `myMainMenu`, mit zwei <xref:System.Windows.Forms.MenuItem> Objekte `File` und `Edit`. Die `File` Menü enthält drei Untermenüelemente: `New`, `Open`, und `Exit`. Mithilfe der `Remove` -Methode, die Sie entfernen die `Open` Element aus der `File` Menü-Auflistung. Dieses Beispiel benötigen Sie, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[RemoveMenuItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveMenuItems/CPP/removeitems.cpp#1)]
 [!code-csharp[RemoveMenuItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveMenuItems/CS/removeitems.cs#1)]
 [!code-vb[RemoveMenuItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveMenuItems/VB/removeitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der Index des der <see cref="T:System.Windows.Forms.MenuItem" /> zu entfernen.</param>
        <summary>Entfernt eine <see cref="T:System.Windows.Forms.MenuItem" /> aus der Auflistung von Menüelementen am angegebenen Index.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn ein <xref:System.Windows.Forms.MenuItem> aus der Auflistung von Menüelementen, Menü für alle nachfolgenden Elemente verschoben werden, um eine Position in der Auflistung entfernt wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie ein Hauptmenü erstellen `myMainMenu`, mit zwei <xref:System.Windows.Forms.MenuItem> Objekte `File` und `Edit`. Die `File` Menü enthält drei Untermenüelemente: `New`, `Open`, und `Exit`. Mithilfe der `RemoveAt` -Methode, die Sie entfernen die `Exit` Element aus der `File` Menü-Auflistung, die mit der entsprechenden Indexnummer. Dieses Beispiel benötigen Sie, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[RemoveAt#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveAt/CPP/removeat.cpp#1)]
 [!code-csharp[RemoveAt#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveAt/CS/removeat.cs#1)]
 [!code-vb[RemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveAt/VB/removeat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveByKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Der Name des Menüelements zu entfernen.</param>
        <summary>Entfernt das Menüelement mit dem angegebenen Schlüssel aus der Auflistung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.Menu.Name%2A> Eigenschaft entspricht dem Schlüssel für eine <xref:System.Windows.Forms.MenuItem> in der <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Der Schlüsselvergleich ist nicht in der Groß-/Kleinschreibung beachtet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value>
          <see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#SyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Ein Objekt, mit dem der Zugriff auf die <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> synchronisiert werden kann.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.ICollection>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Add(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Der der Auflistung hinzuzufügende <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>Die Position, an der die <see cref="T:System.Windows.Forms.MenuItem" /> eingefügt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das Objekt, das in der Auflistung gesucht werden soll.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
        <returns>
          <see langword="true" />Wenn das angegebene Objekt eine <see cref="T:System.Windows.Forms.MenuItem" /> in der Auflistung befindet, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Die <see cref="T:System.Windows.Forms.MenuItem" />, die in der Auflistung gesucht werden soll.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
        <returns>Der nullbasierte Index Wenn <paramref name="value" /> ist eine <see cref="T:System.Windows.Forms.MenuItem" /> in der Auflistung ist; andernfalls -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index, an dem die <see cref="T:System.Windows.Forms.MenuItem" /> eingefügt werden soll.</param>
        <param name="value">Die <see cref="T:System.Windows.Forms.MenuItem" /> zum Einfügen in die <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value>
          <see langword="false" /> in allen Fällen.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Der nullbasierte Index des abzurufenden Elements.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
        <value>Der <see cref="T:System.Windows.Forms.MenuItem" /> am angegebenen Index.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Das zu entfernende <see cref="T:System.Windows.Forms.MenuItem" />-Element.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Forms.Menu.MenuItemCollection>-Instanz in eine <xref:System.Collections.IList>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
