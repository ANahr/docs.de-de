<Type Name="ImageIndexConverter" FullName="System.Windows.Forms.ImageIndexConverter">
  <TypeSignature Language="C#" Value="public class ImageIndexConverter : System.ComponentModel.Int32Converter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageIndexConverter extends System.ComponentModel.Int32Converter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ImageIndexConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Int32Converter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt einen Typkonverter zum Konvertieren von Daten für einen Abbildindex in und aus einer Zeichenfolge.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.ImageIndexConverter> Klasse wird verwendet, um die Indexwerte des Konvertieren einer <xref:System.Windows.Forms.ImageList> in und aus anderen Datentypen in der Regel <xref:System.String>. Weitere Informationen zu den Einsatz von Typkonvertern, finden Sie unter der <xref:System.ComponentModel.TypeConverter> Basisklasse und [Vorgehensweise: Implementieren eines Typkonverters](http://msdn.microsoft.com/library/90373a3f-d8c8-492d-841c-945d62393c56).  
  
> [!NOTE]
>  Normalerweise werden nicht direkt erstellen Sie eine Instanz von einem <xref:System.Windows.Forms.ImageIndexConverter>. Rufen Sie stattdessen die <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> Methode <xref:System.ComponentModel.TypeDescriptor>. Weitere Informationen finden Sie in den Beispielen in der <xref:System.ComponentModel.TypeConverter> Basisklasse.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageIndexConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert und die Instanz von der <see cref="T:System.Windows.Forms.ImageIndexConverter" /> Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Normalerweise werden nicht direkt erstellen Sie eine Instanz von einem <xref:System.Windows.Forms.ImageIndexConverter>. Rufen Sie stattdessen die <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> Methode <xref:System.ComponentModel.TypeDescriptor>. Weitere Informationen finden Sie in den Beispielen in der <xref:System.ComponentModel.TypeConverter> Basisklasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatierungskontext bereitstellt.</param>
        <param name="culture">Ein <see cref="T:System.Globalization.CultureInfo" /> für das Bereitstellen von Gebietsschemainformationen.</param>
        <param name="value">Die zu konvertierende <see cref="T:System.Object" />.</param>
        <summary>Konvertiert das angegebene Wertobjekt in ein 32-Bit-Ganzzahlobjekt mit Vorzeichen.</summary>
        <returns>Ein <see cref="T:System.Object" /> , die das konvertierte darstellt <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konverter kann nur ein 32-Bit-Ganzzahlobjekt mit Vorzeichen in und aus einer Zeichenfolge konvertieren.  
  
 Die `context` können verwendet werden, um zusätzliche Informationen über die Umgebung extrahiert, aus dieser Konverter aufgerufen wurde werden. Dies ist möglicherweise `null`, daher immer überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben `null`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Die Konvertierung kann nicht ausgeführt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatkontext bereitstellt, der zum Extrahieren von weiteren Informationen über die Umgebung verwendet werden kann, aus der dieser Konverter aufgerufen wurde. Dieser Parameter oder Eigenschaften dieses Parameters können gleich <see langword="null" /> sein.</param>
        <param name="culture">Eine <see cref="T:System.Globalization.CultureInfo" />, die Gebietsschemainformationen bereitstellt.</param>
        <param name="value">Das zu konvertierende Objekt, in der Regel ein Index, der als eine <see cref="T:System.Int32" />-Zahl dargestellt wird.</param>
        <param name="destinationType">Der Typ, in den das Objekt konvertiert werden soll, häufig ein <see cref="T:System.String" />.</param>
        <summary>Konvertiert das angegebene Objekt in den angegebenen Zieltyp.</summary>
        <returns>Ein <see cref="T:System.Object" /> , die das konvertierte darstellt <paramref name="value" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die standardmäßige Implementierung dieser Methode kann nur einen Indexwert, dargestellt als Konvertieren einer <xref:System.Int32> zu einem <xref:System.String>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">Das angegebene <paramref name="value" /> konnte nicht konvertiert werden in den angegebenen <paramref name="destinationType" />.</exception>
        <block subset="none" type="overrides">
          <para>Überschreiben Sie diese Methode, um eigene Funktionen bereitstellen.  
  
 Die <paramref name="context" /> Parameter kann verwendet werden, um zusätzliche Informationen über die Umgebung extrahiert, aus dieser Konverter aufgerufen wurde werden. Dies ist möglicherweise <see langword="null" />, sodass Sie immer auf diesem Rückgabewert überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatkontext bereitstellt, der zum Extrahieren von weiteren Informationen über die Umgebung verwendet werden kann, aus der dieser Konverter aufgerufen wurde. Dieser Parameter oder Eigenschaften dieses Parameters können gleich <see langword="null" /> sein.</param>
        <summary>Gibt eine Auflistung von standardmäßigen Indexwerten für die Bildliste zurück, die dem angegebenen Formatkontext zugeordnet ist.</summary>
        <returns>Ein <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> , die einen Standardsatz gültiger Indexwerte enthält. Wenn keine Bildliste gefunden wird, enthält diese Auflistung ein einzelnes Objekt mit einem Wert von -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt eine Auflistung von Indexwerten für Bilderliste für das zugeordnete der <xref:System.ComponentModel.ITypeDescriptorContext.Instance%2A?displayProperty=nameWithType> Eigenschaft von der `context` Parameter. Wenn ein <xref:System.Windows.Forms.ImageList> nicht gefunden wird, und klicken Sie dann das übergeordnete Element der Komponente für eine solche Liste gesucht werden soll.  
  
 In der Regel die <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValuesSupported%2A> Methode aufgerufen, bevor versucht wird, verwenden die <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValues%2A> und <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValuesExclusive%2A> Methoden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesExclusive">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesExclusive (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesExclusive(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein Formatierungsprogramm-Kontext.</param>
        <summary>Bestimmt, ob die Liste von Standardwerten zurückgegeben, aus der <see cref="Overload:System.Windows.Forms.ImageIndexConverter.GetStandardValues" /> Methode ist eine exklusive Liste darstellt.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="Overload:System.Windows.Forms.ImageIndexConverter.GetStandardValues" /> Methodenrückgabe eine exklusive Liste gültiger Werte ist, andernfalls <see langword="false" />. Diese Implementierung gibt immer <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Liste, durch zurückgegeben die <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValues%2A> Methode exklusiv ist, und klicken Sie dann keine anderen Werte gültig sind. Dies ist typisch für enumerierten Datentyps. Wenn die Liste nicht exklusiv ist, sind neben der Liste der standardmäßigen, die Werte den weiteren gültigen Werten <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValues%2A> bereitstellt.  
  
 Wie in diesem Typkonverter implementiert wird, gibt diese Methode immer `false`.  
  
 In der Regel die <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValuesSupported%2A> Methode aufgerufen, bevor versucht wird, verwenden die <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValues%2A> und <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValuesExclusive%2A> Methoden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ImageIndexConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" />, der einen Formatkontext bereitstellt, der zum Extrahieren von weiteren Informationen über die Umgebung verwendet werden kann, aus der dieser Konverter aufgerufen wurde. Dieser Parameter oder Eigenschaften dieses Parameters können gleich <see langword="null" /> sein.</param>
        <summary>Bestimmt, ob der Typkonverter einen Standardsatz von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="Overload:System.Windows.Forms.ImageIndexConverter.GetStandardValues" /> Methodenrückgabe einen Standard von Werten festgelegt wurde, andernfalls <see langword="false" />. Gibt immer <see langword="true" /> zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wie in dieser Klasse implementiert <xref:System.Windows.Forms.ImageIndexConverter.GetStandardValuesSupported%2A> gibt immer `true` da dieses Objekt einen Standardsatz von Indexwerten für Bilder unterstützt, die aus einer Liste ausgewählt werden können.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeNoneAsStandardValue">
      <MemberSignature Language="C#" Value="protected virtual bool IncludeNoneAsStandardValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeNoneAsStandardValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ImageIndexConverter.IncludeNoneAsStandardValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob ein <see langword="none" /> oder <see langword="null" /> Wert ist gültig, in der <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> Auflistung.</summary>
        <value>
          <see langword="true" />Wenn eine <see langword="none" /> oder <see langword="null" /> Wert ist in der Auflistung von Standardwerten gültig ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Implementierung in dieser Klasse wird immer gibt `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
