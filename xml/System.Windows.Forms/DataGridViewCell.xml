<Type Name="DataGridViewCell" FullName="System.Windows.Forms.DataGridViewCell">
  <TypeSignature Language="C#" Value="public abstract class DataGridViewCell : System.Windows.Forms.DataGridViewElement, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit DataGridViewCell extends System.Windows.Forms.DataGridViewElement implements class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.DataGridViewCell" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.DataGridViewElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.DataGridViewCellConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt eine einzelne Zelle in einem <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell> Klasse stellt eine einzelne Zelle in einem <xref:System.Windows.Forms.DataGridView> Steuerelement. Sie können Zellen durch Abrufen der <xref:System.Windows.Forms.DataGridViewRow.Cells%2A> Auflistung von einem <xref:System.Windows.Forms.DataGridViewRow>.  
  
 Die Zeile und Spalte für eine <xref:System.Windows.Forms.DataGridViewCell> identifizieren Sie die Position der Zelle in der <xref:System.Windows.Forms.DataGridView>. Eine typische Zelle enthält Daten, die spezifisch für die Zeilen und Spalten, die in dem es enthalten ist. Die Zelle kann auf vielfältige Weise angepasst werden, durch Festlegen der Eigenschaften und Behandeln der Ereignisse zugeordnet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieses Typs. Weitere Informationen zu diesem Beispiel finden Sie unter [wie: Hinzufügen von QuickInfos zu einzelnen Zellen im DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/add-tooltips-to-individual-cells-in-a-wf-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/cpp/datagridviewcell.tooltiptext.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/CS/datagridviewcell.tooltiptext.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/VB/datagridviewcell.tooltiptext.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Beim Ableiten von <see cref="T:System.Windows.Forms.DataGridViewCell" /> und der abgeleiteten Klasse neue Eigenschaften hinzugefügt haben, achten Sie darauf, dass Sie überschreiben die <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> Methode, um die neuen Eigenschaften bei Klonvorgängen kopiert. Sie sollten auch der Basisklasse aufrufen, <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> Methode, damit die Eigenschaften der Basisklasse in die neue Zelle kopiert werden.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataGridViewCell ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Forms.DataGridViewCell" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> zugewiesen werden, um die <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <value>Die <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> zugewiesen werden, um die <see cref="T:System.Windows.Forms.DataGridViewCell" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Instanz, die von dieser Methode zurückgegebene überschreiben, um die <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> Methode.  
  
 Wenn dem Steuerelement gerade kein <xref:System.Windows.Forms.AccessibleObject> zugewiesen ist, wird eine neue Instanz davon erstellt.  
  
> [!NOTE]
>  Zum Abrufen oder Festlegen der <xref:System.Windows.Forms.Control.AccessibilityObject%2A> -Eigenschaft, müssen Sie einen Verweis zum Hinzufügen der `Accessibility` mit installierte Assembly die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 Weitere Informationen zu barrierefreiheitsobjekten finden Sie unter den im Abschnitt "Active Accessibility" in der MSDN Library unter [http://msdn.microsoft.com/library](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustCellBorderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustCellBorderStyle (System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewAdvancedBorderStyle AdjustCellBorderStyle(class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStyleInput, class System.Windows.Forms.DataGridViewAdvancedBorderStyle dataGridViewAdvancedBorderStylePlaceholder, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle(System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewAdvancedBorderStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewAdvancedBorderStyleInput" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="dataGridViewAdvancedBorderStylePlaceholder" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataGridViewAdvancedBorderStyleInput">Ein <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> , so ändern Sie die Zellrahmenart darstellt.</param>
        <param name="dataGridViewAdvancedBorderStylePlaceholder">Ein <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> dient außerdem zur zwischenänderungen an die Zellrahmenart gespeichert.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" />So fügen der Zelle eine vertikale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" />So fügen der Zelle eine horizontale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" />Wenn sich die Hostzelle in der ersten sichtbaren Spalte befindet; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" />Wenn sich die Hostzelle in der ersten sichtbaren Zeile befindet; andernfalls <see langword="false" />.</param>
        <summary>Ändert die Rahmenart Eingabefeld gemäß den angegebenen Kriterien.</summary>
        <returns>Das geänderte <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridView> -Steuerelement intern Ruft die <xref:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle%2A> Methode, um die Darstellung der Zellrahmen zu bestimmen. Die <xref:System.Windows.Forms.DataGridView> Steuerelement in der Regel verwendet den Wert der <xref:System.Windows.Forms.DataGridView.AdvancedCellBorderStyle%2A> -Eigenschaft für die `dataGridViewAdvancedBorderStyleInput` Parameter.  
  
 Die <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle?displayProperty=nameWithType> Wert wird nicht unterstützt, wie ein input-Format für Zellen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Windows.Forms.DataGridViewCell.AdjustCellBorderStyle%2A> Methode, um die Rahmen der Zellen anzupassen. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels für die <xref:System.Windows.Forms.DataGridViewAdvancedBorderStyle> Klasse.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewAdvancedBorderStyle#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/CS/advancedborderstyle.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewAdvancedBorderStyle#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewAdvancedBorderStyle/VB/advancedborderstyle.vb#20)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Überschreiben Sie diese Methode, wenn Sie die Darstellung der Zellrahmen anpassen möchten.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="BorderWidths">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle BorderWidths (System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle BorderWidths(class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.BorderWidths(System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Parameters>
      <Docs>
        <param name="advancedBorderStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> , die die Ränder berechnet werden sollen.</param>
        <summary>Gibt eine <see cref="T:System.Drawing.Rectangle" /> , das die Breite der Zellenränder darstellt.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" /> , das die Breite der Zellenränder darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Standardbreite des Zellenrahmens beträgt ein Pixel. Verwenden Sie die folgenden <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle> Werte, um die Breite des Rahmens zu ändern:  
  
-   Die <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.None> Wert gibt eine Breite von 0 Pixeln.  
  
-   Die <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.OutsetDouble> oder <xref:System.Windows.Forms.DataGridViewAdvancedCellBorderStyle.InsetDouble> Werte erhöhen die Standardbreite 1 Pixel.  
  
 Darüber hinaus, wenn die <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A> für die Zelle, Zeile Besitzer des-Eigenschaft festgelegt ist, wird die Höhe des Rechtecks nach dem Wert der erhöht <xref:System.Windows.Forms.DataGridViewRow.DividerHeight%2A>. Wenn die <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A> Eigenschaft für dem besitzende Spalte der Zelle festgelegt ist, erhöht der Breite des Rechtecks nach dem Wert der <xref:System.Windows.Forms.DataGridViewColumn.DividerWidth%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.BorderWidths%2A> Methode der <xref:System.Windows.Forms.DataGridViewCell> Klasse, um die verfügbare Zeichenbereich in einer Zelle bestimmt. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels [Vorgehensweise: Deaktivieren von Schaltflächen in einer Schaltflächenspalte im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> zu übergeben, die die Daten der <see cref="M:System.Windows.Forms.DataGridViewCell.OnClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> Methode.</param>
        <summary>Gibt an, ob die Freigabe für die Zeile der Zelle aufgehoben wird, wenn auf die Zelle geklickt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.ClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnClick%2A> wirkt sich die Freigabe der Zeile der Zelle. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine genaue Kopie dieser Zelle.</summary>
        <returns>Ein <see cref="T:System.Object" />, das die geklonte <see cref="T:System.Windows.Forms.DataGridViewCell" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben der <xref:System.Windows.Forms.DataGridViewCell.Clone%2A> -Methode auf, wenn beim Ableiten von der <xref:System.Windows.Forms.DataGridViewCell> -Klasse und der abgeleiteten Klasse neue Eigenschaften hinzufügen.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zum Überschreiben der <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> Methodenaufruf in einer abgeleiteten Klasse der Basisklasse <see cref="M:System.Windows.Forms.DataGridViewCell.Clone" /> Methode, damit die Eigenschaften der Basisklasse in die neue Zelle kopiert werden, und achten Sie darauf, dass Sie auch die Werte der Eigenschaften kopieren, die der abgeleiteten Klasse hinzugefügt wurden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ColumnIndex">
      <MemberSignature Language="C#" Value="public int ColumnIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Spaltenindex für diese Zelle ab.</summary>
        <value>Der Index der Spalte, die die Zelle enthält. Wenn die Zelle nicht in einer Spalte enthalten ist: -1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Spaltenindex für die Zeile, die die Zeilenheader enthält hat den Wert-1 zurück.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.ColumnIndex%2A> Eigenschaft, um zu bestimmen, welche Spalten für ganzzahlige Werte überprüfen. In diesem Beispiel werden die Zellen in der `Description` Spalte werden ignoriert, wenn der Inhalt der ausgewählten Zellen summiert werden. In diesem Beispiel ist Teil eines umfangreicheren Beispiels zur Verfügung, in dem <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ContentBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ContentBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ContentBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das den Inhaltsbereich der Zelle umschließende Rechteck ab.</summary>
        <value>Die <see cref="T:System.Drawing.Rectangle" /> , die den Inhalt der Zelle umschließt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene Rechteck Clientkoordinaten in Pixel.  
  
 Diese Eigenschaft ruft die <xref:System.Windows.Forms.DataGridViewCell.GetContentBounds%2A> Methode, um den Wert abrufen. Für die Basis <xref:System.Windows.Forms.DataGridViewCell> handelt, dieser Wert ist <xref:System.Drawing.Rectangle.Empty>.  
  
 Um das umschließende Rechteck der Zelle anstelle der Zelleninhalt abzurufen, verwenden die <xref:System.Windows.Forms.DataGridView.GetCellDisplayRectangle%2A?displayProperty=nameWithType> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
        <exception cref="T:System.InvalidOperationException">Der Wert, der die <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> -Eigenschaft ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="ContentClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ContentClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ContentClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ContentClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> zu übergeben, die die Daten der <see cref="M:System.Windows.Forms.DataGridViewCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> Methode.</param>
        <summary>Gibt an, ob die Freigabe für die Zeile der Zelle aufgehoben wird, wenn auf den Inhalt der Zelle geklickt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.ContentClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnContentClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnContentClick%2A> wirkt sich die Freigabe der Zeile der Zelle. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentDoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool ContentDoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ContentDoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ContentDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> zu übergeben, die die Daten der <see cref="M:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> Methode.</param>
        <summary>Gibt an, ob die Freigabe für die Zeile der Zelle aufgehoben wird, wenn auf den Inhalt der Zelle doppelgeklickt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.ContentDoubleClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick%2A> wirkt sich die Freigabe der Zeile der Zelle. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt das Kontextmenü der Zelle zugeordnet.</summary>
        <value>Die <see cref="T:System.Windows.Forms.ContextMenuStrip" /> der Zelle zugeordnet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt an, das Kontextmenü, das in der Regel angezeigt wird, wenn der Benutzer die Zelle klickt.  
  
 Wenn der <xref:System.Windows.Forms.DataGridView> Steuerelement <xref:System.Windows.Forms.DataGridView.DataSource%2A> festgelegt wird oder den zugehörigen <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> Eigenschaft ist `true`, Abrufen des Werts für die <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> -Eigenschaft löst der <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> -Ereignisses des Steuerelements und gibt den Wert der der <xref:System.Windows.Forms.DataGridViewCellContextMenuStripNeededEventArgs.ContextMenuStrip%2A?displayProperty=nameWithType> -Eigenschaft im Ereignishandler angegeben. Wenn kein Handler für das Ereignis vorhanden sind, Abrufen des Werts für die <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> -Eigenschaft zurück, der zuvor angegebene Wert oder den Standardwert `null`.  
  
 Behandlung von der <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> Ereignis ist primär nützlich, bei der Arbeit mit großen Datenmengen um Leistungseinbußen zu vermeiden, der zum Einstellen der Zelle <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> Wert für mehrere Zellen. Weitere Informationen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 Löst das Ändern dieser Eigenschaft die <xref:System.Windows.Forms.DataGridView.CellContextMenuStripChanged> -Ereignis für die besitzende <xref:System.Windows.Forms.DataGridView>, falls vorhanden.  
  
 Sie können auch Kontextmenüs angeben, für einzelne Zeilen statt einzelne Zellen durch Festlegen der zeilenupdates <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> Eigenschaft oder die Behandlung der <xref:System.Windows.Forms.DataGridView> des Steuerelements <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> Ereignis. Die Zelle <xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A> Einstellung der Eigenschaft überschreibt die Zeile <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> Einstellung der Eigenschaft, und die <xref:System.Windows.Forms.DataGridView.CellContextMenuStripNeeded> Außerkraftsetzungen von Ereignissen sowohl die <xref:System.Windows.Forms.DataGridView.RowContextMenuStripNeeded> Ereignis und die Zeile <xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A> Einstellung der Eigenschaft. Sie können angeben, `null` für eine Zelle im Kontextmenü, jedoch zu verhindern, dass ein Kontextmenü Zeile überschrieben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.CreateAccessibilityInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt ein neues barrierefreies Objekt für die <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <returns>Ein neues <see cref="T:System.Windows.Forms.DataGridViewCell.DataGridViewCellAccessibleObject" /> für die <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie die <xref:System.Windows.Forms.DataGridViewCell.CreateAccessibilityInstance%2A>-Methode nicht explizit aufrufen, wird sie beim Verweis auf die <xref:System.Windows.Forms.DataGridViewCell.AccessibilityObject%2A>-Eigenschaft aufgerufen.  
  
> [!NOTE]
>  Zum Abrufen oder festlegen <xref:System.Windows.Forms.DataGridViewCell.AccessibilityObject%2A>, müssen Sie einen Verweis zum Hinzufügen der `Accessibility` mit installierte Assembly die [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultNewRowValue">
      <MemberSignature Language="C#" Value="public virtual object DefaultNewRowValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultNewRowValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Standardwert für eine Zelle in der Zeile für neue Datensätze ab.</summary>
        <value>Ein <see cref="T:System.Object" /> , den Standardwert darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> Eigenschaft in der Basisklasse <xref:System.Windows.Forms.DataGridViewCell> gibt immer `null`. Allerdings kann diese Eigenschaft in abgeleitete Zellenklassen zurückzugebenden andere Standardwerte überschrieben werden.  
  
 Der von dieser Eigenschaft zurückgegebene Wert wird angezeigt, wenn die Zelle in der Zeile für neue Datensätze. Dieser Wert kann überschrieben werden, durch einen Handler für das <xref:System.Windows.Forms.DataGridView.DefaultValuesNeeded?displayProperty=nameWithType> Ereignis aus, wenn der Fokus die Zeile für neue Datensätze eingibt.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Windows.Forms.DataGridViewCell.DefaultNewRowValue%2A> Eigenschaft in einer `CalendarCell` von abgeleitete Klasse <xref:System.Windows.Forms.DataGridViewTextBoxCell>. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich im [wie: Hosten-Steuerelementen in Windows Forms-DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetachEditingControl">
      <MemberSignature Language="C#" Value="public virtual void DetachEditingControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DetachEditingControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.DetachEditingControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt das Bearbeitungssteuerelement der Zelle aus der <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridView> diese Methode aufgerufen, wenn die aktuelle Zelle ein Steuerelement bearbeiten und der Bearbeitungsmodus endet hostet. Diese Methode entfernt die <xref:System.Windows.Forms.DataGridView.EditingControl%2A> aus der <xref:System.Windows.Forms.DataGridView.EditingPanel%2A>, und entfernt dann die <xref:System.Windows.Forms.DataGridView.EditingPanel%2A> aus der <xref:System.Windows.Forms.Control.Controls%2A> Auflistung von der <xref:System.Windows.Forms.DataGridView>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Diese Zelle ist nicht verknüpft mit einem <see cref="T:System.Windows.Forms.DataGridView" />.  
  
 - oder -   
  
 Die <see cref="P:System.Windows.Forms.DataGridView.EditingControl" /> Eigenschaft der zugeordneten <see cref="T:System.Windows.Forms.DataGridView" /> hat den Wert <see langword="null" />. Dies ist der Fall, z. B., wenn das Steuerelement nicht im Bearbeitungsmodus befindet.</exception>
      </Docs>
    </Member>
    <Member MemberName="Displayed">
      <MemberSignature Language="C#" Value="public virtual bool Displayed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Displayed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Displayed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob die Zelle momentan auf dem Bildschirm angezeigt wird.</summary>
        <value>
          <see langword="true" />, wenn die Zelle vollständig oder teilweise auf dem Bildschirm angezeigt wird, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diese Eigenschaft, um festzustellen, ob eine bestimmte Zelle außerhalb des Bildschirms ein Bildlauf durchgeführt wurde.  
  
 Wenn der Zelle <xref:System.Windows.Forms.DataGridViewCell.Visible%2A> Eigenschaftswert ist `false`, wird diese Eigenschaft zurückgeben `false` ebenfalls.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Windows.Forms.DataGridViewCell" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> auf, wenn Sie <xref:System.Windows.Forms.DataGridViewCell> nicht mehr benötigen. Die <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A>-Methode bewirkt, dass <xref:System.Windows.Forms.DataGridViewCell> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A>, müssen Sie alle Verweise auf Freigeben der <xref:System.Windows.Forms.DataGridViewCell> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Windows.Forms.DataGridViewCell> belegt wurde. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Windows.Forms.DataGridViewCell> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Windows.Forms.DataGridViewCell>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Gibt die von <see cref="T:System.Windows.Forms.DataGridViewCell" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, der öffentlich `Dispose` Methode und die <xref:System.Object.Finalize%2A> Methode. `Dispose`Ruft die geschützte `Dispose(Boolean)` Methode mit dem `disposing` Parametersatz auf `true`. <xref:System.Object.Finalize%2A>Ruft `Dispose` mit `disposing` festgelegt `false`.  
  
 Wenn der `disposing`-Parameter `true` ist, gibt diese Methode sämtliche Ressourcen frei, die für verwaltete Objekte reserviert sind, auf die dieser <xref:System.Windows.Forms.DataGridViewCell> verweist. Diese Methode ruft die `Dispose`-Methode aller Objekte auf, auf die verwiesen wird.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> kann von anderen Objekten mehrmals aufgerufen werden. Zum Überschreiben <see langword="Dispose(Boolean)" /> Achten Sie darauf, dass Sie nicht auf Objekte verweisen, die einen früheren Aufruf freigegeben wurden <see langword="Dispose" />. Weitere Informationen zum Implementieren <see langword="Dispose(Boolean)" />, finden Sie unter [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Weitere Informationen zu <see langword="Dispose" /> und <see cref="M:System.Object.Finalize" />, finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Überschreiben der Finalize-Methode](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.DoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Die <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" /> zu übergeben, die die Daten der <see cref="M:System.Windows.Forms.DataGridViewCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" /> Methode.</param>
        <summary>Gibt an, ob die Freigabe für die Zeile der Zelle aufgehoben wird, wenn auf die Zelle doppelgeklickt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.DoubleClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnDoubleClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnDoubleClick%2A> wirkt sich die Freigabe der Zeile der Zelle. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditedFormattedValue">
      <MemberSignature Language="C#" Value="public object EditedFormattedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditedFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.EditedFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft der aktuellen, formatierte Wert der Zelle, unabhängig davon, ob die Zelle im Bearbeitungsmodus befindet und der Wert wurde kein Commit ausgeführt wurde.</summary>
        <value>Die aktuellen, formatierten Wert der <see cref="T:System.Windows.Forms.DataGridViewCell" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt den aktuellen Wert der Zelle oder Steuerelement bearbeiten, wenn die Zelle im Bearbeitungsmodus befindet. Konvertiert, andernfalls Abrufen des Werts dieser Eigenschaft der Wert der Zelle in eine entsprechende Anzeigewert des Typs, angegeben durch die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft. Dies löst die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis, das Sie, zum Anpassen der wertkonvertierung behandeln können.  
  
 Wenn die Formatierung nicht erfolgreich ist, ist die <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> Ereignis auftritt. Wenn kein für dieses Ereignis oder der Handler legt Handler die <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> Eigenschaft `true`, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.EditedFormattedValue%2A> Eigenschaft. In diesem Beispiel wird die <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> Eigenschaft wird verwendet, um zu bestimmen, ob der Inhalt der aktuellen Zelle bearbeitet wurden, kein Commit ausgeführt wurde, und, wenn die Zelle geändert wurde, wird die bearbeitete Wert verwendet. In diesem Beispiel ist Teil eines umfangreicheren Beispiels zur Verfügung, in dem <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.Exception">Fehler beim Formatieren und entweder liegt kein Handler für die <see cref="E:System.Windows.Forms.DataGridView.DataError" /> -Ereignis für die <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement oder der Handler Festlegen der <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> Eigenschaft, um <see langword="true" />. Das Ausnahmeobjekt kann in der Regel in den Typ <see cref="T:System.FormatException" /> umgewandelt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="EditType">
      <MemberSignature Language="C#" Value="public virtual Type EditType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type EditType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.EditType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des Bearbeitungssteuerelement der Zelle ab.</summary>
        <value>Ein <see cref="T:System.Type" /> darstellt der <see cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" /> Typ.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Typ abgeleitete Zelle überschreibt diese Eigenschaft, um den Typ des gehosteten Bearbeitungssteuerelements zurückzugeben. Wenn die Zelle nicht mit einem Bearbeitungssteuerelement verfügt wie bei <xref:System.Windows.Forms.DataGridViewButtonCell>, <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> -Eigenschaft gibt `null`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> Eigenschaft in einer `CalendarCell` von abgeleitete Klasse <xref:System.Windows.Forms.DataGridViewTextBoxCell>. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich im [wie: Hosten-Steuerelementen in Windows Forms-DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnterUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool EnterUnsharesRow (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool EnterUnsharesRow(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.EnterUnsharesRow(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="throughMouseClick">
          <see langword="true" />Wenn ein Eingreifen des Benutzers auf die Zelle den Fokus verschoben. <see langword="false" /> ein programmgesteuerter Vorgang auf die Zelle den Fokus verschoben.</param>
        <summary>Gibt an, ob die Freigabe der übergeordneten Zeile aufgehoben wird, wenn die Zelle den Fokus erhält.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben wird; andernfalls <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.EnterUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnEnter%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnEnter%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorIconBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ErrorIconBounds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ErrorIconBounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ErrorIconBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Begrenzungen des Fehlersymbols für die Zelle ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Rectangle" /> , das die Begrenzungen des Fehlersymbols für die aktuelle darstellt <see cref="T:System.Windows.Forms.DataGridViewCell" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das zurückgegebene Rechteck Clientkoordinaten in Pixel.  
  
 Wenn die <xref:System.Windows.Forms.DataGridView.ShowCellErrors%2A?displayProperty=nameWithType> Eigenschaft `false`, der Wert dieser Eigenschaft ist <xref:System.Drawing.Rectangle.Empty>.  
  
 Diese Eigenschaft ruft die <xref:System.Windows.Forms.DataGridViewCell.GetErrorIconBounds%2A> Methode, um den Wert abrufen. Für die Basis <xref:System.Windows.Forms.DataGridViewCell> handelt, dieser Wert ist immer <xref:System.Drawing.Rectangle.Empty>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zelle gehört nicht zu einem <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.  
  
 - oder -   
  
 <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
      </Docs>
    </Member>
    <Member MemberName="ErrorText">
      <MemberSignature Language="C#" Value="public string ErrorText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ErrorText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Text, der mit der Zelle zugeordneten Fehlerzustand beschreibt.</summary>
        <value>Der Text, mit dem ein der Zelle zugeordneter Fehlerzustand beschrieben wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> Eigenschaft wird verwendet, bei der Verarbeitung von der <xref:System.Windows.Forms.DataGridView.CellValidating> -Ereignis für die <xref:System.Windows.Forms.DataGridView>. Festgelegt, wenn der Wert der Zelle einige Überprüfungskriterien fehlschlägt, die <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> Eigenschaft und "Abbrechen", den Commitvorgang durch Festlegen der <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft von der <xref:System.Windows.Forms.DataGridViewCellValidatingEventArgs> auf `true`. Der Text, die Sie angeben, wird dann angezeigt, die <xref:System.Windows.Forms.DataGridView>, und der Benutzer wird aufgefordert, zum Beheben des Fehlers in der Zelle Daten.  
  
 Wenn die <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> Eigenschaft der <xref:System.Windows.Forms.DataGridView> ist `true`, können Sie Fehlertext für Zeilen und Zellen mit Bereitstellen der <xref:System.Windows.Forms.DataGridView.RowErrorTextNeeded> und <xref:System.Windows.Forms.DataGridView.CellErrorTextNeeded> Ereignisse.  
  
 Wenn Sie ein anderes zuweisen <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> Zeichenfolge in eine Zelle der <xref:System.Windows.Forms.DataGridView.CellErrorTextChanged> -Ereignis für die <xref:System.Windows.Forms.DataGridView> Steuerelement ausgelöst wird.  
  
 Beginnend mit .NET Framework 4.5.2, Ändern der Größe des Fehlersymbols durch das System-DPI-Einstellung richtet sich bei der Datei "App.config" den folgenden Eintrag enthält:  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
```  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie diese Eigenschaft verwendet, bei der Behandlung von fehlerbedingungen in einer nicht gebundenen <xref:System.Windows.Forms.DataGridView>. Die `AnnotateCell` Methode legt die Zeichenfolge mit einer Fehlermeldung auf die <xref:System.Windows.Forms.DataGridViewCell.ErrorText%2A> Eigenschaft.  
  
 [!code-cpp[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CPP/form1.cpp#9)]
 [!code-csharp[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.GridViewUnbound#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.GridViewUnbound/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~DataGridViewCell ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Die nicht verwalteten Ressourcen frei und führt andere Bereinigungsvorgänge vor der <see cref="T:System.Windows.Forms.DataGridViewCell" /> durch die Garbagecollection wieder zugänglich gemacht.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft die <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> Methode mit `false` als Parameter.  
  
 Diese Methode überschreibt <xref:System.Object.Finalize%2A>. Diese Methode sollte nicht von Anwendungscode aufgerufen werden. ein Objekt `Finalize` Methode wird automatisch während der Garbagecollection aufgerufen, durch einen Aufruf von seiner Finalisierung verfolgt, durch den Garbage Collector deaktiviert wurde die <xref:System.GC.SuppressFinalize%2A> Methode.  
  
 Weitere Informationen finden Sie unter [Finalize-Methoden und Destruktoren](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70), [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md), und [Überschreiben der Finalize-Methode](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattedValue">
      <MemberSignature Language="C#" Value="public object FormattedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.FormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den zum Anzeigen formatierten Wert der Zelle ab.</summary>
        <value>Der formatierte Wert der Zelle oder <see langword="null" /> , wenn die Zelle gehört nicht zu einem <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.Value%2A> Eigenschaft das tatsächliche Datenobjekt, das von der Zelle enthalten ist, während die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> formatierte Darstellung dieses Objekts ist. Die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> und <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaften entsprechen den Datentypen der entsprechenden Werte.  
  
 Abrufen des Werts dieser Eigenschaft ruft die <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> Methode, um den Zellenwert in eine entsprechende Anzeigewert der vom angegebenen Typ konvertieren die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft. Dies löst die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis, das Sie, zum Anpassen der wertkonvertierung behandeln können.  
  
 Wenn die Formatierung nicht erfolgreich ist, ist die <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> Ereignis auftritt. Wenn kein für dieses Ereignis oder der Handler legt Handler die <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> Eigenschaft `true`, wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> Eigenschaft. In diesem Beispiel wird die <xref:System.Windows.Forms.DataGridView.IsCurrentCellDirty%2A> Eigenschaft wird verwendet, um festzustellen, ob der aktuelle Zelleninhalt bearbeitet wurden, kein Commit ausgeführt wurde und die Zelle geändert wurde, die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> verwendet wird. In diesem Beispiel ist Teil eines umfangreicheren Beispiels zur Verfügung, in dem <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
        <exception cref="T:System.Exception">Fehler beim Formatieren und entweder liegt kein Handler für die <see cref="E:System.Windows.Forms.DataGridView.DataError" /> -Ereignis für die <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement oder der Handler Festlegen der <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> Eigenschaft, um <see langword="true" />. Das Ausnahmeobjekt kann in der Regel in den Typ <see cref="T:System.FormatException" /> umgewandelt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormattedValueType">
      <MemberSignature Language="C#" Value="public virtual Type FormattedValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type FormattedValueType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Typ des formatierten Werts ab, der der Zelle zugeordnet ist.</summary>
        <value>Ein <see cref="T:System.Type" /> Wert formatierten, der den Typ der Zelle darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.Value%2A> Eigenschaft das tatsächliche Datenobjekt, das von der Zelle enthalten ist, während die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> Eigenschaft ist das formatierte Darstellung der Daten. Die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> und <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaften entsprechen den Datentypen der entsprechenden Werte.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft zum Bestimmen des Typs, der den Zelleninhalt. In diesem Beispiel wird die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft wird verwendet, um zu bestimmen, ob die Zelle enthält eine <xref:System.String> vor dem Versuch, den Wert zu konvertieren. In diesem Beispiel ist Teil eines umfangreicheren Beispiels zur Verfügung, in dem <xref:System.Windows.Forms.DataGridView.SelectionChanged?displayProperty=nameWithType> Ereignis.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewSelectionSum#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewSelectionSum/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Frozen">
      <MemberSignature Language="C#" Value="public virtual bool Frozen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Frozen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Frozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Zelle fixiert ist.</summary>
        <value>
          <see langword="true" />Wenn die Zelle fixiert ist; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.Windows.Forms.DataGridViewCell.Frozen%2A> Eigenschaft hängt vom Zustand der übergeordneten Zeile und Spalte der Zelle. Wenn die `Frozen` der Zeile oder Spalte ist-Eigenschaftensatz auf `true`, der Zelle <xref:System.Windows.Forms.DataGridViewCell.Frozen%2A> Eigenschaft werden auch `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClipboardContent">
      <MemberSignature Language="C#" Value="protected virtual object GetClipboardContent (int rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetClipboardContent(int32 rowIndex, bool firstCell, bool lastCell, bool inFirstRow, bool inLastRow, string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetClipboardContent(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="firstCell" Type="System.Boolean" />
        <Parameter Name="lastCell" Type="System.Boolean" />
        <Parameter Name="inFirstRow" Type="System.Boolean" />
        <Parameter Name="inLastRow" Type="System.Boolean" />
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der auf 0 (null) basierende Index der Zeile, die die Zelle enthält.</param>
        <param name="firstCell">
          <see langword="true" />um anzugeben, dass die Zelle in der ersten Spalte des durch die ausgewählten Zellen definierten Bereichs befindet. andernfalls <see langword="false" />.</param>
        <param name="lastCell">
          <see langword="true" />um anzugeben, dass die Zelle die letzte Spalte der durch die ausgewählten Zellen definierten Bereichs ist. andernfalls <see langword="false" />.</param>
        <param name="inFirstRow">
          <see langword="true" />um anzugeben, dass die Zelle in der ersten Zeile des Bereichs, durch die ausgewählten Zellen definiert ist. andernfalls <see langword="false" />.</param>
        <param name="inLastRow">
          <see langword="true" />um anzugeben, dass die Zelle in der letzten Zeile des Bereichs, durch die ausgewählten Zellen definiert ist. andernfalls <see langword="false" />.</param>
        <param name="format">Die aktuelle Formatzeichenfolge der Zelle.</param>
        <summary>Ruft den formatierten Wert der Zelle, die zum Kopieren der <see cref="T:System.Windows.Forms.Clipboard" />.</summary>
        <returns>Ein <see cref="T:System.Object" /> , die den Wert der Zelle, die zum Kopieren darstellt der <see cref="T:System.Windows.Forms.Clipboard" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird aufgerufen, indem Sie die <xref:System.Windows.Forms.DataGridView.GetClipboardContent%2A?displayProperty=nameWithType> Methode, um eine Zwischenablage formatierten Wert abzurufen, das der Wert der Zelle darstellt.  
  
 Der Wert der Zelle wird zuerst abgerufen, in seiner Anzeigeformat aus der <xref:System.Windows.Forms.DataGridViewCell.GetEditedFormattedValue%2A> Methode. Dadurch wird möglicherweise ausgelöst, die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis zum Formatieren des Werts und die <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> Ereignis, wenn die Formatierung nicht erfolgreich ist.  
  
 Die Position im Zusammenhang Parameter dieser Methode anzugeben, wo sich diese Zelle befindet, in der Tabelle der Daten, die durch die ausgewählten Zellen im definierten Bereich darstellen der <xref:System.Windows.Forms.DataGridView> Steuerelement. Je nach den Zellposition kann zusätzliche Formatierungsinformationen von dieser Methode zusammen mit der Anzeige formatiert Zellenwert zurückgegeben werden. Das HTML-Format für eine Zelle in der ersten Spalte einer Zeile wird angenommen, das Tag enthalten, das den Anfang einer Zeile angibt.  
  
 Die unterstützten Zwischenablageformate <xref:System.Windows.Forms.DataFormats.Text?displayProperty=nameWithType>, <xref:System.Windows.Forms.DataFormats.UnicodeText?displayProperty=nameWithType>, <xref:System.Windows.Forms.DataFormats.Html?displayProperty=nameWithType>, und <xref:System.Windows.Forms.DataFormats.CommaSeparatedValue?displayProperty=nameWithType>.  
  
 Weitere Informationen finden Sie in den Ausführungen zur <xref:System.Windows.Forms.Clipboard>-Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" />ist kleiner als 0 oder größer als oder gleich der Anzahl der Zeilen im Steuerelement.</exception>
        <exception cref="T:System.InvalidOperationException">Der Wert der Zelle <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> Eigenschaft ist <see langword="null" />.  
  
 - oder -   
  
 <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.Exception">Fehler beim Formatieren und entweder liegt kein Handler für die <see cref="E:System.Windows.Forms.DataGridView.DataError" /> -Ereignis für die <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement oder der Handler Festlegen der <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> Eigenschaft, um <see langword="true" />. Das Ausnahmeobjekt kann in der Regel in den Typ <see cref="T:System.FormatException" /> umgewandelt werden.</exception>
        <block subset="none" type="overrides">
          <para>Überschreiben Sie diese Methode zum Bereitstellen von benutzerdefinierter Werten der Zwischenablage ein. Beispielsweise konnten Sie diese Methode, um das Kopieren von Werten aus benutzerdefinierten Zelltypen unterstützen überschreiben.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetContentBounds (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetContentBounds(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetContentBounds(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt das umschließende Rechteck, das die Zelle mit dem Standardwert Inhaltsbereich <see cref="T:System.Drawing.Graphics" /> und derzeit für die Zelle.</summary>
        <returns>Die <see cref="T:System.Drawing.Rectangle" /> , die den Inhalt der Zelle umschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Größe der Inhalt der Zelle wird dynamisch berechnet, wenn diese Methode aufgerufen wird. Gibt die basisklassenimplementierung immer <xref:System.Drawing.Rectangle?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das angegebene <paramref name="rowIndex" /> ist kleiner als 0 oder größer als die Anzahl der Zeilen im Steuerelement minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetContentBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetContentBounds (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetContentBounds(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetContentBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">Der Grafikkontext für die Zelle.</param>
        <param name="cellStyle">Die <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> auf die Zelle angewendet werden soll.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt das umschließende Rechteck, das die Zelle Inhaltsbereichs Zellstils berechnet wird unter Verwendung des angegebenen <see cref="T:System.Drawing.Graphics" /> und Stil der Zelle.</summary>
        <returns>Die <see cref="T:System.Drawing.Rectangle" /> , die den Inhalt der Zelle umschließt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Größe der Inhalt der Zelle wird dynamisch berechnet, wenn diese Methode aufgerufen wird. Gibt die basisklassenimplementierung immer <xref:System.Drawing.Rectangle?displayProperty=nameWithType>.  
  
 Diese Methode wird intern aufgerufen, wenn die <xref:System.Windows.Forms.DataGridViewCell.ContentBounds%2A> -Eigenschaft schreibgeschützt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEditedFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditedFormattedValue (int rowIndex, System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetEditedFormattedValue(int32 rowIndex, valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetEditedFormattedValue(System.Int32,System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Zeilenindex der Zelle.</param>
        <param name="context">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> Werten, die den Datenkontext für den Fehler angibt.</param>
        <summary>Gibt den aktuellen, formatierten Wert der Zelle zurück, unabhängig davon, ob sich die Zelle im Bearbeitungsmodus befindet und dass kein Commit für den Wert ausgeführt wurde.</summary>
        <returns>Die aktuellen, formatierten Wert der <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt den aktuellen Wert von der bearbeiteten Zelle oder Steuerelement bearbeiten, wenn die Zelle im Bearbeitungsmodus befindet. Diese Methode konvertiert, andernfalls der Wert der Zelle in eine entsprechende Anzeigewert des Typs, angegeben durch die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft. Dies löst die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis, das Sie, zum Anpassen der wertkonvertierung behandeln können.  
  
 Wenn die Formatierung nicht erfolgreich ist, ist die <xref:System.Windows.Forms.DataGridView.DataError?displayProperty=nameWithType> Ereignis auftritt. Wenn kein für dieses Ereignis oder der Handler legt Handler die <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> Eigenschaft `true`, wird eine Ausnahme ausgelöst.  
  
 Abgeleitete Klassen, die diese Methode überschreiben, in der Regel eine Zeichenfolgendarstellung der Wert der Zelle zurück, wenn die `context` -Argument enthält den <xref:System.Windows.Forms.DataGridViewDataErrorContexts.ClipboardContent> Wert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Das angegebene <paramref name="rowIndex" /> ist kleiner als 0 oder größer als die Anzahl der Zeilen im Steuerelement minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.Exception">Fehler beim Formatieren und entweder liegt kein Handler für die <see cref="E:System.Windows.Forms.DataGridView.DataError" /> -Ereignis für die <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement oder der Handler Festlegen der <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> Eigenschaft, um <see langword="true" />. Das Ausnahmeobjekt kann in der Regel in den Typ <see cref="T:System.FormatException" /> umgewandelt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetErrorIconBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetErrorIconBounds (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetErrorIconBounds(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetErrorIconBounds(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="graphics">Der Grafikkontext für die Zelle.</param>
        <param name="cellStyle">Die <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> auf die Zelle angewendet werden soll.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt das das Fehlersymbol der Zelle, sofern angezeigt, umschließende Rechteck zurück.</summary>
        <returns>Die <see cref="T:System.Drawing.Rectangle" /> , das das Fehlersymbol der Zelle, sofern angezeigt, andernfalls <see cref="F:System.Drawing.Rectangle.Empty" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Größe der Zelle Fehler Symbolbereich wird dynamisch berechnet, wenn diese Methode aufgerufen wird. Gibt die basisklassenimplementierung immer <xref:System.Drawing.Rectangle?displayProperty=nameWithType>.  
  
 Diese Methode wird intern aufgerufen, wenn die <xref:System.Windows.Forms.DataGridViewCell.ErrorIconBounds%2A> -Eigenschaft schreibgeschützt ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrorText">
      <MemberSignature Language="C#" Value="protected virtual string GetErrorText (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string GetErrorText(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetErrorText(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Zeilenindex der Zelle.</param>
        <summary>Gibt eine Zeichenfolge zurück, die den Fehler für die Zelle darstellt.</summary>
        <returns>Eine Zeichenfolge, die Beschreibung des Fehlers für die aktuelle <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormattedValue">
      <MemberSignature Language="C#" Value="protected virtual object GetFormattedValue (object value, int rowIndex, ref System.Windows.Forms.DataGridViewCellStyle cellStyle, System.ComponentModel.TypeConverter valueTypeConverter, System.ComponentModel.TypeConverter formattedValueTypeConverter, System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetFormattedValue(object value, int32 rowIndex, class System.Windows.Forms.DataGridViewCellStyle&amp; cellStyle, class System.ComponentModel.TypeConverter valueTypeConverter, class System.ComponentModel.TypeConverter formattedValueTypeConverter, valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetFormattedValue(System.Object,System.Int32,System.Windows.Forms.DataGridViewCellStyle@,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter,System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle&amp;" RefType="ref" />
        <Parameter Name="valueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="formattedValueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="value">Der Wert, der formatiert werden.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="cellStyle">Die <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> für die Zelle.</param>
        <param name="valueTypeConverter">Ein <see cref="T:System.ComponentModel.TypeConverter" /> Werttyps, der benutzerdefinierte Konvertierung in den Typ der formatierte Wert zugeordnet oder <see langword="null" /> wenn solch eine benutzerdefinierte Konvertierung erforderlich ist.</param>
        <param name="formattedValueTypeConverter">Ein <see cref="T:System.ComponentModel.TypeConverter" /> formatierte Werttyps, der benutzerdefinierte Konvertierung aus dem Werttyp ermöglicht zugeordnet oder <see langword="null" /> wenn solch eine benutzerdefinierte Konvertierung erforderlich ist.</param>
        <param name="context">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> Werte beschreibt den Kontext, in dem der formatierte Wert benötigt wird.</param>
        <summary>Ruft den zum Anzeigen formatierten Wert der Zelle ab.</summary>
        <returns>Der formatierte Wert der Zelle oder <see langword="null" /> , wenn die Zelle gehört nicht zu einem <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridView> Steuerelement ruft diese Methode, um einen Zellenwert in eine entsprechende Anzeigewert der vom angegebenen Typ konvertieren die <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaft. Das Steuerelement übergibt der Wert der Zelle an diese Methode in der `value` Parameter.  
  
 Diese Methode löst die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis. Ein Handler für dieses Ereignis kann beide ändern die `value` und `cellStyle` Parameter. Wenn der Handler nicht festgelegt ist die <xref:System.Windows.Forms.DataGridViewCellFormattingEventArgs.FormattingApplied%2A?displayProperty=nameWithType> Eigenschaft `true`, diese Methode jedoch formatiert `value` mithilfe der Formatierungseigenschaften des der `cellStyle` Objekt.  
  
> [!NOTE]
>  Diese Methode nicht konvertiert `value` auf die <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A?displayProperty=nameWithType> Eigenschaftswert für Werte, die gleich der <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A?displayProperty=nameWithType> Eigenschaftswert, wenn <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> außer auf einen Wert festgelegt ist <xref:System.DBNull.Value?displayProperty=nameWithType> oder `null`. In diesem Fall können Sie behandeln die <xref:System.Windows.Forms.DataGridView.CellFormatting?displayProperty=nameWithType> Ereignis zum Anzeigen der <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A> Eigenschaftswert. Weitere Informationen finden Sie im Codebeispiel unter <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>.  
  
 Wenn die Formatierung nicht erfolgreich ist, ist die <xref:System.Windows.Forms.DataGridView.DataError> Ereignis auftritt. Wenn kein für dieses Ereignis oder der Handler legt Handler die <xref:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException%2A?displayProperty=nameWithType> Eigenschaft `true`, wird eine Ausnahme ausgelöst.  
  
 Abgeleitete Klassen, die diese Methode überschreiben, in der Regel eine Zeichenfolgendarstellung der Wert der Zelle zurück, wenn die `context` -Argument enthält den <xref:System.Windows.Forms.DataGridViewDataErrorContexts.ClipboardContent> Wert.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Fehler beim Formatieren und entweder liegt kein Handler für die <see cref="E:System.Windows.Forms.DataGridView.DataError" /> -Ereignis für die <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement oder der Handler Festlegen der <see cref="P:System.Windows.Forms.DataGridViewDataErrorEventArgs.ThrowException" /> Eigenschaft, um <see langword="true" />. Das Ausnahmeobjekt kann in der Regel in den Typ <see cref="T:System.FormatException" /> umgewandelt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInheritedContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip GetInheritedContextMenuStrip (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.ContextMenuStrip GetInheritedContextMenuStrip(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedContextMenuStrip(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Zeilenindex der aktuellen Zelle.</param>
        <summary>Ruft das geerbte Kontextmenü für die aktuelle Zelle ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.ContextMenuStrip" /> Wenn das übergeordnete Element <see cref="T:System.Windows.Forms.DataGridView" />, <see cref="T:System.Windows.Forms.DataGridViewRow" />, oder <see cref="T:System.Windows.Forms.DataGridViewColumn" /> verfügt über eine <see cref="T:System.Windows.Forms.ContextMenuStrip" /> zugewiesen ist, andernfalls <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die Zelle nicht über eine zugeordnete <xref:System.Windows.Forms.ContextMenuStrip>, erbt Sie von der übergeordneten Klassen, mit der folgenden Rangfolge:  
  
1.  Diese Zelle<xref:System.Windows.Forms.DataGridViewCell.ContextMenuStrip%2A>  
  
2.  Die übergeordneten Zeile<xref:System.Windows.Forms.DataGridViewRow.ContextMenuStrip%2A?displayProperty=nameWithType>  
  
3.  Der besitzenden Spaltenwerts<xref:System.Windows.Forms.DataGridViewColumn.ContextMenuStrip%2A?displayProperty=nameWithType>  
  
4.  Der übergeordneten Tabelle<xref:System.Windows.Forms.ContextMenuStrip?displayProperty=nameWithType>  
  
 Kontextmenüs sind systemeigene Microsoft Windows-Ressourcen, deren Lebensdauer werden in der Regel durch weitergeleitet, die <xref:System.Windows.Forms.DataGridViewCell.Dispose%2A> Methode oder den Destruktor.  
  
 Übergeben Sie die <xref:System.Windows.Forms.DataGridViewCell.GetInheritedContextMenuStrip%2A> Methode Index der Zeile, die Sie zum Abrufen der <xref:System.Windows.Forms.DataGridViewCell>. Verwenden Sie nicht die <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> -Eigenschaft für die `rowIndex` Parameter. Wenn die Zeile freigegeben ist, <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> ist-1 und kein gültiger Wert ist für `rowIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert der <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> -Eigenschaft der Zelle ist nicht <see langword="null" /> und der angegebenen <paramref name="rowIndex" /> ist kleiner als 0 oder größer als die Anzahl der Zeilen im Steuerelement minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInheritedState">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewElementStates GetInheritedState (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Windows.Forms.DataGridViewElementStates GetInheritedState(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedState(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der Zeile, die die Zelle enthält.</param>
        <summary>Gibt einen Wert zurück, der den aktuellen Zustand der Zelle angibt, der vom Zustand der entsprechenden Zeile und Spalte geerbt wurde.</summary>
        <returns>Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> Werte, der den aktuellen Zustand der Zelle darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist nützlich zum Ermitteln des Status einer Zelle in eine freigegebene Zeile. Freigegebene Zeilen haben <xref:System.Windows.Forms.DataGridViewBand.Index%2A> Werte-1 verwendet, die Sie verhindert, dass die <xref:System.Windows.Forms.DataGridViewCell.InheritedState%2A> Eigenschaft mit Zellen in freigegebene Zeilen. Übergeben Sie zur Verwendung dieser Methode die tatsächliche Index der Zeile, die diese Zelle enthält. Sie können den tatsächlichen Index eine freigegebene Zeile abrufen, durch Aufrufen der <xref:System.Windows.Forms.DataGridViewRowCollection.IndexOf%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die Zelle befindet sich nicht innerhalb einer <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement und <paramref name="rowIndex" /> ist nicht-1.  
  
 - oder -   
  
 <paramref name="rowIndex" />ist nicht der Index der Zeile, die diese Zelle enthält.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In die Zelle enthalten ist ein <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement und <paramref name="rowIndex" /> liegt außerhalb des gültigen Bereichs von 0 bis zur Anzahl der Zeilen im Steuerelement minus 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetInheritedStyle">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DataGridViewCellStyle GetInheritedStyle (System.Windows.Forms.DataGridViewCellStyle inheritedCellStyle, int rowIndex, bool includeColors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.DataGridViewCellStyle GetInheritedStyle(class System.Windows.Forms.DataGridViewCellStyle inheritedCellStyle, int32 rowIndex, bool includeColors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetInheritedStyle(System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inheritedCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="includeColors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inheritedCellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> mit dem geerbten Zellstil gefüllt werden.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="includeColors">
          <see langword="true" />So enthalten die geerbte Farben in den zurückgegebenen Zellenstil aus; andernfalls <see langword="false" />.</param>
        <summary>Ruft den auf die Zelle angewendeten Stil ab.</summary>
        <returns>Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , umfasst die stileinstellungen der Zelle geerbt von der übergeordneten Zeile der Zelle, Spalte und <see cref="T:System.Windows.Forms.DataGridView" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gibt eine <xref:System.Windows.Forms.DataGridViewCellStyle> , erbt die Einstellungen aus der <xref:System.Windows.Forms.DataGridViewCellStyle> Objekte von der Zelle übergeordneten Zeile und Spalte und <xref:System.Windows.Forms.DataGridView>. Weitere Informationen finden Sie unter [Zellstile im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zelle verfügt über kein zugeordnetes <see cref="T:System.Windows.Forms.DataGridView" />.  
  
 - oder -   
  
 <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" />ist kleiner als 0 oder größer als oder gleich der Anzahl der Zeilen im übergeordneten <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size GetPreferredSize (System.Drawing.Graphics graphics, System.Windows.Forms.DataGridViewCellStyle cellStyle, int rowIndex, System.Drawing.Size constraintSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(class System.Drawing.Graphics graphics, class System.Windows.Forms.DataGridViewCellStyle cellStyle, int32 rowIndex, valuetype System.Drawing.Size constraintSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetPreferredSize(System.Drawing.Graphics,System.Windows.Forms.DataGridViewCellStyle,System.Int32,System.Drawing.Size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="constraintSize" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> zum Zeichnen der Zelle verwendet.</param>
        <param name="cellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , der den Stil der Zelle darstellt.</param>
        <param name="rowIndex">Der auf 0 (null) basierende Zeilenindex der Zelle.</param>
        <param name="constraintSize">Die maximal zulässige Größe der Zelle.</param>
        <summary>Berechnet die geeignete Größe der Zelle (in Pixel).</summary>
        <returns>Ein <see cref="T:System.Drawing.Size" /> , das die bevorzugte Größe der Zelle in Pixel darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.GetPreferredSize%2A> Methode in der Basisklasse <xref:System.Windows.Forms.DataGridViewCell> gibt immer eine <xref:System.Drawing.Size> mit einer Breite und Höhe "-1". Diese Methode wird jedoch in die abgeleitete Zellenklassen zum Zurückgeben von entsprechender Werten überschrieben.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size GetSize (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size GetSize(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetSize(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Ruft die Größe der Zelle ab.</summary>
        <returns>Ein <see cref="T:System.Drawing.Size" /> , die Dimensionen der Zelle darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode kann nicht mit einer Zelle in einer freigegebenen Zeile verwendet werden.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="rowIndex" />ist-1</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="protected virtual object GetValue (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance object GetValue(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.GetValue(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Ruft den Wert der Zelle ab.</summary>
        <returns>Der Wert in der <see cref="T:System.Windows.Forms.DataGridViewCell" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Übergeben Sie die <xref:System.Windows.Forms.DataGridViewCell.GetValue%2A> Methode Index der Zeile, die Sie zum Abrufen der <xref:System.Windows.Forms.DataGridViewCell>. Verwenden Sie nicht die <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> -Eigenschaft für die `rowIndex` Parameter. Wenn die Zeile freigegeben ist, <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> ist-1 und kein gültiger Wert ist für `rowIndex`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der Wert der <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> Eigenschaft der Zelle ist nicht <see langword="null" /> und <paramref name="rowIndex" /> ist kleiner als 0 oder größer als oder gleich der Anzahl der Zeilen im übergeordneten <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.InvalidOperationException">Der Wert des der <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> -Eigenschaft der Zelle ist nicht <see langword="null" /> und der Wert des der <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> -Eigenschaft ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="HasStyle">
      <MemberSignature Language="C#" Value="public bool HasStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.HasStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> Eigenschaft festgelegt wurde.</summary>
        <value>
          <see langword="true" />Wenn die <see cref="P:System.Windows.Forms.DataGridViewCell.Style" /> Eigenschaft festgelegt wurde, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Abrufen des Werts für die <xref:System.Windows.Forms.DataGridViewCell.Style%2A> Eigenschaft instanziiert automatisch ein neues <xref:System.Windows.Forms.DataGridViewCellStyle> Wenn die Eigenschaft nicht zuvor zugegriffen wurde. Deshalb müssen Sie verwenden die <xref:System.Windows.Forms.DataGridViewCell.HasStyle%2A> -Eigenschaft können Sie bestimmen, ob die <xref:System.Windows.Forms.DataGridViewCell.Style%2A> -Eigenschaft auf festgelegt ist eine <xref:System.Windows.Forms.DataGridViewCellStyle> Instanz. Dies ist hilfreich, um zu bestimmen, welche Eigenschaften des Objekts zurückgegeben, indem die <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> Eigenschaft darstellen, Stile, die speziell für die Zelle festgelegt.  
  
 Weitere Informationen zur Vererbung von Zellenstilen finden Sie unter [Zellstile im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritedState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewElementStates InheritedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataGridViewElementStates InheritedState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.InheritedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewElementStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den aktuellen Zustand der Zelle ab, der vom Zustand ihrer Zeile und Spalte geerbt wurde.</summary>
        <value>Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> Werte, der den aktuellen Zustand der Zelle darstellt.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Die Zelle befindet sich nicht innerhalb einer <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement und dem Wert des seine <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> Eigenschaft ist für nicht -1.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">In die Zelle enthalten ist ein <see cref="T:System.Windows.Forms.DataGridView" /> -Steuerelement und dem Wert von dessen <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" /> Eigenschaft ist-1.</exception>
      </Docs>
    </Member>
    <Member MemberName="InheritedStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle InheritedStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle InheritedStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.InheritedStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die derzeit auf die Zelle angewendeten Stil ab.</summary>
        <value>Die <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> derzeit auf die Zelle angewendet.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridView> -Steuerelement zeigt seine Zellen mithilfe der Stile an, die von der Zelle angegeben <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> -Eigenschaft, die Stile aus anderen Eigenschaften vom Typ erbt <xref:System.Windows.Forms.DataGridViewCellStyle>. Die Stile, die über die <xref:System.Windows.Forms.DataGridViewCell.Style%2A> Eigenschaft überschreiben die Stile, die durch alle anderen Zellstil Eigenschaften angegeben, aber nicht notwendigerweise, alle Stile an, die zur Darstellung der Zelle beitragen.  
  
 Weitere Informationen finden Sie unter [Zellstile im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zelle gehört nicht zu einem <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.  
  
 - oder -   
  
 <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
      </Docs>
    </Member>
    <Member MemberName="InitializeEditingControl">
      <MemberSignature Language="C#" Value="public virtual void InitializeEditingControl (int rowIndex, object initialFormattedValue, System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InitializeEditingControl(int32 rowIndex, object initialFormattedValue, class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.InitializeEditingControl(System.Int32,System.Object,System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="initialFormattedValue" Type="System.Object" />
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der nullbasierte Zeilenindex der Position der Zelle.</param>
        <param name="initialFormattedValue">Ein <see cref="T:System.Object" /> , den beim Starten der Bearbeitung der Zelle angezeigten Wert darstellt.</param>
        <param name="dataGridViewCellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , der den Stil der Zelle darstellt.</param>
        <summary>Initialisiert das Steuerelement zum Bearbeiten der Zelle.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine leistungsoptimierung in der Regel alle Zellen des gleichen Typs und in derselben <xref:System.Windows.Forms.DataGridView> Freigeben einer einzelnen gehosteten Bearbeitungssteuerelement. Bevor das Steuerelement von einer Zelle verwendet wird, muss Sie jedoch initialisiert werden, indem Sie die <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> Methode. Das erste Mal aufgerufen wird, diese Methode fügt das Steuerelement zur Liste der Steuerelemente in seinem übergeordneten Element bearbeiten <xref:System.Windows.Forms.DataGridView>. Es initialisiert einige visuelle Eigenschaften der Zelle. Beispielsweise <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> legt die Hintergrundfarbe des Bearbeitungsbereichs entsprechend den angegebenen Zelle Style-Parameter fest. Nachfolgende Aufrufe <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> nichts Unternehmen.  
  
 Verwenden Sie diese Methode zum Hosten einer Instanz der abgeleitete Klassen der <xref:System.Windows.Forms.Control> Klasse, deren Typ entspricht. Z. B. eine Tabelle, eine oder mehrere enthält <xref:System.Windows.Forms.DataGridViewTextBoxCell> Objekte ruft diese Methode ein einzelnes hinzuzufügende <xref:System.Windows.Forms.TextBox> Bearbeitungssteuerelement, das besitzende <xref:System.Windows.Forms.DataGridView>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Windows.Forms.DataGridViewTextBoxCell.InitializeEditingControl%2A> Methode in einer einfachen Klasse, die von abgeleitet ist die <xref:System.Windows.Forms.DataGridViewTextBoxCell> Klasse. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich im [wie: Hosten-Steuerelementen in Windows Forms-DataGridView-Zellen](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#200)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#200](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Es ist keine zugeordnete <see cref="T:System.Windows.Forms.DataGridView" /> oder sofern eins vorhanden ist, hat kein Bearbeitungssteuerelement zugeordnet.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsInEditMode">
      <MemberSignature Language="C#" Value="public bool IsInEditMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInEditMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.IsInEditMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob diese Zelle derzeit bearbeitet wird.</summary>
        <value>
          <see langword="true" />Wenn die Zelle im Bearbeitungsmodus befindet; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft ist nützlich, wenn Sie direkt mit zelleninstanzen arbeiten. Die andere Möglichkeit besteht darin, die <xref:System.Windows.Forms.DataGridView.IsCurrentCellInEditMode%2A?displayProperty=nameWithType>-Eigenschaft zu verwenden. Sie können auch behandeln die <xref:System.Windows.Forms.DataGridView.CellBeginEdit?displayProperty=nameWithType> Ereignis, um zu bestimmen, wenn der Benutzer den Bearbeitungsmodus wechselt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.</exception>
      </Docs>
    </Member>
    <Member MemberName="KeyDownUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyDownUnsharesRow (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyDownUnsharesRow(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyDownUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt an, ob die Freigabe der übergeordneten Zeile aufgehoben wird, wenn der Benutzer eine Taste drückt, während sich der Fokus in der Zelle befindet.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.KeyDownUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnKeyDown%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnKeyDown%2A> mit dem gleichen <xref:System.Windows.Forms.KeyEventArgs> Argument wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyEntersEditMode">
      <MemberSignature Language="C#" Value="public virtual bool KeyEntersEditMode (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool KeyEntersEditMode(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyEntersEditMode(System.Windows.Forms.KeyEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" /> , die die gedrückte Taste darstellt.</param>
        <summary>Bestimmt, ob der Bearbeitungsmodus mit der angegebenen Taste gestartet werden soll.</summary>
        <returns>
          <see langword="true" />Wenn bearbeiten gestartet werden soll; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überschreiben Sie diese Methode zum Erstellen einer benutzerdefinierten Zelle, die bearbeitet werden kann.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPressUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyPressUnsharesRow (System.Windows.Forms.KeyPressEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyPressUnsharesRow(class System.Windows.Forms.KeyPressEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyPressEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn eine Taste gedrückt wird, während eine Zelle in der Zeile den Fokus besitzt.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.KeyPressUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnKeyPress%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnKeyPress%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyUpUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool KeyUpUnsharesRow (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool KeyUpUnsharesRow(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.KeyUpUnsharesRow(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt an, ob die Freigabe der übergeordneten Zeile aufgehoben wird, wenn der Benutzer eine Taste loslässt, während sich der Fokus in der Zelle befindet.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.KeyUpUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnKeyUp%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnKeyUp%2A> mit dem gleichen <xref:System.Windows.Forms.KeyEventArgs> Argument wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool LeaveUnsharesRow (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LeaveUnsharesRow(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.LeaveUnsharesRow(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="throughMouseClick">
          <see langword="true" />Wenn ein Eingreifen des Benutzers auf die Zelle den Fokus verschoben. <see langword="false" /> ein programmgesteuerter Vorgang auf die Zelle den Fokus verschoben.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn eine Zelle in der Zeile den Fokus verliert.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.LeaveUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnLeave%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnLeave%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureTextHeight">
      <MemberSignature Language="C#" Value="public static int MeasureTextHeight (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxWidth, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextHeight(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxWidth, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextHeight(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxWidth" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, um den Text zu rendern.</param>
        <param name="text">Der zu bemessende Text.</param>
        <param name="font">Die <see cref="T:System.Drawing.Font" /> auf den Text angewendet.</param>
        <param name="maxWidth">Die maximale Breite des Texts.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werten, die auf den Text angewendet.</param>
        <summary>Ruft die Höhe des angegebenen Texts in Pixel mit den angegebenen Eigenschaften ab.</summary>
        <returns>Die Höhe des Texts in Pixel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehrere Zeilen erforderlich sind, und die angegebene Formatierung es ermöglicht, ist die zurückgegebene Höhe die Gesamthöhe aller Zeilen an.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="font" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxWidth" /> ist kleiner als 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" />ist keine gültige bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="MeasureTextHeight">
      <MemberSignature Language="C#" Value="public static int MeasureTextHeight (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxWidth, System.Windows.Forms.TextFormatFlags flags, out bool widthTruncated);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextHeight(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxWidth, valuetype System.Windows.Forms.TextFormatFlags flags, [out] bool&amp; widthTruncated) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextHeight(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxWidth" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
        <Parameter Name="widthTruncated" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, um den Text zu rendern.</param>
        <param name="text">Der zu bemessende Text.</param>
        <param name="font">Die <see cref="T:System.Drawing.Font" /> auf den Text angewendet.</param>
        <param name="maxWidth">Die maximale Breite des Texts.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werten, die auf den Text angewendet.</param>
        <param name="widthTruncated">Legen Sie auf <see langword="true" /> ist die erforderliche Breite des Texts größer als <c>MaxWidth</c>.</param>
        <summary>Ruft die Höhe des angegebenen Texts in Pixel mit den angegebenen Eigenschaften ab. Gibt außerdem an, ob die erforderliche Breite größer als die angegebene maximale Breite ist.</summary>
        <returns>Die Höhe des Texts in Pixel.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehrere Zeilen erforderlich sind, und die angegebene Formatierung es ermöglicht, ist die zurückgegebene Höhe die Gesamthöhe aller Zeilen an.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="font" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxWidth" /> ist kleiner als 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" />ist keine gültige bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="MeasureTextPreferredSize">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureTextPreferredSize (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, float maxRatio, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureTextPreferredSize(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, float32 maxRatio, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextPreferredSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Single,System.Windows.Forms.TextFormatFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxRatio" Type="System.Single" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, um den Text zu rendern.</param>
        <param name="text">Der zu bemessende Text.</param>
        <param name="font">Die <see cref="T:System.Drawing.Font" /> auf den Text angewendet.</param>
        <param name="maxRatio">Das maximale Verhältnis von Breite zu Höhe des Textblocks.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werten, die auf den Text angewendet.</param>
        <summary>Ruft die ideale Höhe und Breite des angegebenen Texts mit den angegebenen Eigenschaften ab.</summary>
        <returns>Ein <see cref="T:System.Drawing.Size" /> , das die bevorzugte Höhe und Breite des Texts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehrere Zeilen erforderlich sind, und die angegebene Formatierung es ermöglicht, enthält die zurückgegebene Größe die Gesamthöhe aller Zeilen an.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="font" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxRatio" /> ist kleiner oder gleich 0.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" />ist keine gültige bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="MeasureTextSize">
      <MemberSignature Language="C#" Value="public static System.Drawing.Size MeasureTextSize (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Drawing.Size MeasureTextSize(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextSize(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, um den Text zu rendern.</param>
        <param name="text">Der zu bemessende Text.</param>
        <param name="font">Die <see cref="T:System.Drawing.Font" /> auf den Text angewendet.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werten, die auf den Text angewendet.</param>
        <summary>Ruft die Höhe und Breite des angegebenen Texts mit den angegebenen Eigenschaften ab.</summary>
        <returns>Ein <see cref="T:System.Drawing.Size" /> , die die Höhe und Breite des Texts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehrere Zeilen erforderlich sind, und die angegebene Formatierung es ermöglicht, enthält die zurückgegebene Größe die Gesamthöhe aller Zeilen an.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="font" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" />ist keine gültige bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="MeasureTextWidth">
      <MemberSignature Language="C#" Value="public static int MeasureTextWidth (System.Drawing.Graphics graphics, string text, System.Drawing.Font font, int maxHeight, System.Windows.Forms.TextFormatFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 MeasureTextWidth(class System.Drawing.Graphics graphics, string text, class System.Drawing.Font font, int32 maxHeight, valuetype System.Windows.Forms.TextFormatFlags flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MeasureTextWidth(System.Drawing.Graphics,System.String,System.Drawing.Font,System.Int32,System.Windows.Forms.TextFormatFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="font" Type="System.Drawing.Font" />
        <Parameter Name="maxHeight" Type="System.Int32" />
        <Parameter Name="flags" Type="System.Windows.Forms.TextFormatFlags" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, um den Text zu rendern.</param>
        <param name="text">Der zu bemessende Text.</param>
        <param name="font">Die <see cref="T:System.Drawing.Font" /> auf den Text angewendet.</param>
        <param name="maxHeight">Die maximale Höhe des Texts.</param>
        <param name="flags">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werten, die auf den Text angewendet.</param>
        <summary>Ruft die Breite des angegebenen Texts in Pixel mit den angegebenen Eigenschaften ab.</summary>
        <returns>Die Breite des Texts in Pixel.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="graphics" /> ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="font" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="maxHeight" /> ist kleiner als 1.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="flags" />ist keine gültige bitweise Kombination von <see cref="T:System.Windows.Forms.TextFormatFlags" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="MouseClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseClickUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseClickUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Benutzer eine Maustaste drückt, während sich der Mauszeiger in einer Zelle der Zeile befindet.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseClick%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClickUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseDoubleClickUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseDoubleClickUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Benutzer auf eine Zelle in der Zeile doppelklickt.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseDoubleClickUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick%2A> Methode. Sie muss zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDownUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseDownUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseDownUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Benutzer eine Maustaste gedrückt hält, während sich der Mauszeiger in einer Zelle der Zeile befindet.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseDownUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseDown%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseDown%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseEnterUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseEnterUnsharesRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseEnterUnsharesRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Mauszeiger über eine Zelle in der Zeile bewegt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseEnterUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseEnter%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseEnter%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseLeaveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseLeaveUnsharesRow (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseLeaveUnsharesRow(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Mauszeiger aus der Zeile heraus bewegt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseLeaveUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseLeave%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseLeave%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseMoveUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseMoveUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseMoveUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Mauszeiger über eine Zelle in der Zeile bewegt wird.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseMoveUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseMove%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseMove%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseUpUnsharesRow">
      <MemberSignature Language="C#" Value="protected virtual bool MouseUpUnsharesRow (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool MouseUpUnsharesRow(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Gibt an, ob die Freigabe einer Zeile aufgehoben wird, wenn der Benutzer eine Maustaste loslässt, während sich der Mauszeiger in einer Zelle der Zeile befindet.</summary>
        <returns>
          <see langword="true" />Wenn die Zeile aufgehoben ist, andernfalls werden <see langword="false" />. Die Basis <see cref="T:System.Windows.Forms.DataGridViewCell" /> immer zurück <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.MouseUpUnsharesRow%2A> wird aufgerufen, kurz vor dem Ausführen der <xref:System.Windows.Forms.DataGridViewCell.OnMouseUp%2A> Methode. Sie muss in abgeleiteten Klassen zurückgeben `true` Wenn der Aufruf von <xref:System.Windows.Forms.DataGridViewCell.OnMouseUp%2A> wirkt sich die Freigabe der Zeile, die die Zelle enthält. Andernfalls sollte die zurückgeben `false`.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird beim Klicken auf die Zelle aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentClick">
      <MemberSignature Language="C#" Value="protected virtual void OnContentClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnContentClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird beim Klicken auf den Inhalt der Zelle aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellContentClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellContentClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContentDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnContentDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContentDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnContentDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird beim Doppelklicken auf den Inhalt der Zelle aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellContentDoubleClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellContentDoubleClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataGridViewChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataGridViewChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataGridViewChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnDataGridViewChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn die <see cref="P:System.Windows.Forms.DataGridViewElement.DataGridView" /> Eigenschaft der Zelle ändert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (System.Windows.Forms.DataGridViewCellEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.Windows.Forms.DataGridViewCellEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnDoubleClick(System.Windows.Forms.DataGridViewCellEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird beim Doppelklicken auf die Zelle aufgerufen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellDoubleClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellDoubleClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnEnter(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="throughMouseClick">
          <see langword="true" />Wenn ein Eingreifen des Benutzers auf die Zelle den Fokus verschoben. <see langword="false" /> ein programmgesteuerter Vorgang auf die Zelle den Fokus verschoben.</param>
        <summary>Wird aufgerufen, wenn eine Zelle den Fokus erhält.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellEnter%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellEnter?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyDown(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Wird aufgerufen, wenn eine Zeichentaste gedrückt wird, während der Fokus auf einer Zelle ist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.Control.OnKeyDown%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.Control.KeyDown> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyPress(System.Windows.Forms.KeyPressEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyPressEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Wird aufgerufen, wenn eine Taste gedrückt wird, während sich der Fokus auf einer Zelle befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.Control.OnKeyPress%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.Control.KeyPress> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e, int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e, int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnKeyUp(System.Windows.Forms.KeyEventArgs,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.KeyEventArgs" />, das die Ereignisdaten enthält.</param>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Wird aufgerufen, wenn eine Zeichentaste losgelassen wird, während der Fokus auf einer Zelle liegt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.Control.OnKeyUp%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.Control.KeyUp> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (int rowIndex, bool throughMouseClick);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(int32 rowIndex, bool throughMouseClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnLeave(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="throughMouseClick" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="throughMouseClick">
          <see langword="true" />Wenn eine Benutzeraktion von der Zelle den Fokus; <see langword="false" /> Wenn ein programmgesteuerter Vorgang aus der Zelle den Fokus verliert.</param>
        <summary>Wird aufgerufen, wenn eine Zelle den Fokus verliert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellLeave%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellLeave?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn der Benutzer eine Maustaste drückt, während sich der Mauszeiger in einer Zelle befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird die Verwendung dieser Methode veranschaulicht.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#10)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseDoubleClick(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn der Benutzer einen Doppelklick mit einer Maustaste ausführt, während sich der Mauszeiger in einer Zelle befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseDoubleClick%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseDoubleClick?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseDown(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn der Benutzer eine Maustaste gedrückt hält, während sich der Mauszeiger in einer Zelle befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseDown%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseDown?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseEnter(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Wird aufgerufen, wenn der Mauszeiger über eine Zelle bewegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseEnter%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseEnter?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieser Methode. In diesem Beispiel ist Teil eines umfangreicheren Beispiels in [wie: Anpassen von Zellen und Spalten in Windows Forms-DataGridView-Steuerelements durch Erweitern von deren Verhalten und Aussehen](~/docs/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (int rowIndex);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(int32 rowIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseLeave(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <summary>Wird aufgerufen, wenn der Mauszeiger den Bereich der Zelle verlässt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseLeave%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseLeave?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieser Methode. In diesem Beispiel ist Teil eines umfangreicheren Beispiels in [wie: Anpassen von Zellen und Spalten in Windows Forms-DataGridView-Steuerelements durch Erweitern von deren Verhalten und Aussehen](~/docs/framework/winforms/controls/customize-cells-and-columns-in-the-datagrid-by-extending-behavior.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/CS/rollovercell.cs#220)]
 [!code-vb[System.Windows.Forms.DataGridViewRolloverCell#220](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewRolloverCell/VB/rollovercell.vb#220)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseMove(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn der Mauszeiger innerhalb einer Zelle bewegt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseMove%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseMove?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.DataGridViewCellMouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.DataGridViewCellMouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.OnMouseUp(System.Windows.Forms.DataGridViewCellMouseEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DataGridViewCellMouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Windows.Forms.DataGridViewCellMouseEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Wird aufgerufen, wenn der Benutzer eine Maustaste loslässt, während sich der Mauszeiger in einer Zelle befindet.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ähnelt der <xref:System.Windows.Forms.DataGridView.OnCellMouseUp%2A?displayProperty=nameWithType> Methode. Wird aufgerufen, in der gleichen Umständen, unter denen eine <xref:System.Windows.Forms.DataGridView.CellMouseUp?displayProperty=nameWithType> Ereignis wird ausgelöst, aber wird nicht tatsächlich das Ereignis ausgelöst.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwningColumn">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewColumn OwningColumn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewColumn OwningColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.OwningColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewColumn</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die diese Zelle enthaltende Spalte ab.</summary>
        <value>Die <see cref="T:System.Windows.Forms.DataGridViewColumn" /> , die die Zelle enthält, oder <see langword="null" /> , wenn die Zelle nicht in einer Spalte ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OwningRow">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewRow OwningRow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewRow OwningRow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.OwningRow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewRow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Zeile, die diese Zelle enthält.</summary>
        <value>Die <see cref="T:System.Windows.Forms.DataGridViewRow" /> , die die Zelle enthält, oder <see langword="null" /> , wenn die Zelle nicht in einer Zeile befindet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="protected virtual void Paint (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle cellBounds, int rowIndex, System.Windows.Forms.DataGridViewElementStates cellState, object value, object formattedValue, string errorText, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle, System.Windows.Forms.DataGridViewPaintParts paintParts);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Paint(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle cellBounds, int32 rowIndex, valuetype System.Windows.Forms.DataGridViewElementStates cellState, object value, object formattedValue, string errorText, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle, valuetype System.Windows.Forms.DataGridViewPaintParts paintParts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.Paint(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Int32,System.Windows.Forms.DataGridViewElementStates,System.Object,System.Object,System.String,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle,System.Windows.Forms.DataGridViewPaintParts)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="cellState" Type="System.Windows.Forms.DataGridViewElementStates" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="formattedValue" Type="System.Object" />
        <Parameter Name="errorText" Type="System.String" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
        <Parameter Name="paintParts" Type="System.Windows.Forms.DataGridViewPaintParts" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> zum Zeichnen verwendet die <see cref="T:System.Windows.Forms.DataGridViewCell" />.</param>
        <param name="clipBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , das den Clientbereich darstellt der <see cref="T:System.Windows.Forms.DataGridView" /> , die neu gezeichnet werden muss.</param>
        <param name="cellBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , das die Grenzen des enthält die <see cref="T:System.Windows.Forms.DataGridViewCell" /> , die gezeichnet wird.</param>
        <param name="rowIndex">Der Zeilenindex der gezeichneten Zelle.</param>
        <param name="cellState">Eine bitweise Kombination von <see cref="T:System.Windows.Forms.DataGridViewElementStates" /> Werte, die den Status der Zelle angibt.</param>
        <param name="value">Die Daten von der <see cref="T:System.Windows.Forms.DataGridViewCell" /> , die gezeichnet wird.</param>
        <param name="formattedValue">Die formatierten Daten der der <see cref="T:System.Windows.Forms.DataGridViewCell" /> , die gezeichnet wird.</param>
        <param name="errorText">Eine Fehlermeldung, die der Zelle zugeordnet ist.</param>
        <param name="cellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , formatierungs- und Formatinformationen Informationen über die Zelle enthält.</param>
        <param name="advancedBorderStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> mit Rahmenarten für die Zelle, die gezeichnet wird.</param>
        <param name="paintParts">Eine bitweise Kombination der <see cref="T:System.Windows.Forms.DataGridViewPaintParts" /> Werte, der angibt, welche Teile der Zelle gezeichnet werden müssen.</param>
        <summary>Zeichnet die aktuelle <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Windows.Forms.DataGridViewCell.Paint%2A> Methode von einer <xref:System.Windows.Forms.DataGridViewButtonCell>. Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels [Vorgehensweise: Deaktivieren von Schaltflächen in einer Schaltflächenspalte im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintBorder">
      <MemberSignature Language="C#" Value="protected virtual void PaintBorder (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle bounds, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintBorder(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle bounds, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.Windows.Forms.DataGridViewAdvancedBorderStyle advancedBorderStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PaintBorder(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Windows.Forms.DataGridViewAdvancedBorderStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="advancedBorderStyle" Type="System.Windows.Forms.DataGridViewAdvancedBorderStyle" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, die zum Zeichnen des Rahmens.</param>
        <param name="clipBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , das den Clientbereich darstellt der <see cref="T:System.Windows.Forms.DataGridView" /> , die neu gezeichnet werden muss.</param>
        <param name="bounds">Ein <see cref="T:System.Drawing.Rectangle" /> , enthält den Bereich des Rahmens, die gezeichnet wird.</param>
        <param name="cellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , formatierungs- und Formatinformationen Informationen über die aktuelle Zelle enthält.</param>
        <param name="advancedBorderStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewAdvancedBorderStyle" /> mit Rahmenarten des Rahmens, die gezeichnet wird.</param>
        <summary>Zeichnet den Rahmen des aktuellen <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieser Methode. In diesem Beispiel ist Teil eines umfangreicheren Beispiels in [Vorgehensweise: Deaktivieren von Schaltflächen in einer Schaltflächenspalte im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/disable-buttons-in-a-button-column-in-the-datagrid.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/CS/form1.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridView.DisabledButtons#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.DisabledButtons/VB/form1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaintErrorIcon">
      <MemberSignature Language="C#" Value="protected virtual void PaintErrorIcon (System.Drawing.Graphics graphics, System.Drawing.Rectangle clipBounds, System.Drawing.Rectangle cellValueBounds, string errorText);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void PaintErrorIcon(class System.Drawing.Graphics graphics, valuetype System.Drawing.Rectangle clipBounds, valuetype System.Drawing.Rectangle cellValueBounds, string errorText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PaintErrorIcon(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
        <Parameter Name="clipBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellValueBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="errorText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="graphics">Die <see cref="T:System.Drawing.Graphics" /> verwendet, die zum Zeichnen des Rahmens.</param>
        <param name="clipBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , das den Clientbereich darstellt der <see cref="T:System.Windows.Forms.DataGridView" /> , die neu gezeichnet werden muss.</param>
        <param name="cellValueBounds">Das umschließende <see cref="T:System.Drawing.Rectangle" /> , das Inhaltsbereich der Zelle einschließt.</param>
        <param name="errorText">Eine Fehlermeldung, die der Zelle zugeordnet ist.</param>
        <summary>Zeichnet das Fehlersymbol der aktuellen <see cref="T:System.Windows.Forms.DataGridViewCell" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `errorText` -Parameter signalisiert das Vorhandensein eines Fehlers. Wenn `errorText` ist `null` oder <xref:System.String?displayProperty=nameWithType>die <xref:System.Windows.Forms.DataGridViewCell.PaintErrorIcon%2A> Methode hat keine Funktion.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseFormattedValue">
      <MemberSignature Language="C#" Value="public virtual object ParseFormattedValue (object formattedValue, System.Windows.Forms.DataGridViewCellStyle cellStyle, System.ComponentModel.TypeConverter formattedValueTypeConverter, System.ComponentModel.TypeConverter valueTypeConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ParseFormattedValue(object formattedValue, class System.Windows.Forms.DataGridViewCellStyle cellStyle, class System.ComponentModel.TypeConverter formattedValueTypeConverter, class System.ComponentModel.TypeConverter valueTypeConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ParseFormattedValue(System.Object,System.Windows.Forms.DataGridViewCellStyle,System.ComponentModel.TypeConverter,System.ComponentModel.TypeConverter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formattedValue" Type="System.Object" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="formattedValueTypeConverter" Type="System.ComponentModel.TypeConverter" />
        <Parameter Name="valueTypeConverter" Type="System.ComponentModel.TypeConverter" />
      </Parameters>
      <Docs>
        <param name="formattedValue">Der Anzeigewert der Zelle.</param>
        <param name="cellStyle">Die <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> für die Zelle.</param>
        <param name="formattedValueTypeConverter">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den Anzeigewerttyp oder <see langword="null" /> , der Standardkonverter verwendet.</param>
        <param name="valueTypeConverter">Ein <see cref="T:System.ComponentModel.TypeConverter" /> für den Zellwerttyp oder <see langword="null" /> , der Standardkonverter verwendet.</param>
        <summary>Konvertiert einen zum Anzeigen formatierten Wert in einen tatsächlichen Zellwert.</summary>
        <returns>Der Zellwert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn der Benutzer einen Zellwert bearbeitet und führt einen Commit für die Änderung der <xref:System.Windows.Forms.DataGridView> Steuerelement ruft diese Methode zum Konvertieren des angezeigten Wert aus der <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> auf die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A>. Das Steuerelement legt dann die zugrunde liegenden Zellenwert oder Datenquellenwert dem konvertierten Wert fest.  
  
 Die standardmäßige Implementierung dieser Methode analysiert die `formattedValue` Parameter mithilfe der <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A>, und <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> Eigenschaften der Zellenstil erkennbar die `cellStyle` Parameter.  
  
 Wenn `formattedValue` gleich <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, diese Methode gibt den Wert der die <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> Eigenschaft oder `null` Wenn <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A> ist <xref:System.DBNull.Value?displayProperty=nameWithType> und die Zelle <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> einen Referenztyp darstellt.  
  
 Wenn `formattedValue` stimmt nicht mit <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A>, diese Methode analysiert `formattedValue` mithilfe der <xref:System.Windows.Forms.DataGridViewCellStyle.FormatProvider%2A> -Eigenschaft und der angegebenen oder Standard-Typkonverter.  
  
 Wenn die Zelle <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> ist NULL-Werte zulässt, diese Methode umschließt den Rückgabewert als ein <xref:System.Nullable%601> Typ.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="cellStyle" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">Die <see cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" /> Eigenschaftswert ist <see langword="null" />.  
  
 - oder -   
  
 Die <see cref="P:System.Windows.Forms.DataGridViewCell.ValueType" /> Eigenschaftswert ist <see langword="null" />.  
  
 - oder -   
  
 <paramref name="formattedValue" /> kann nicht konvertiert werden.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="formattedValue" /> ist <see langword="null" />.  
  
 - oder -   
  
 Der Typ des <paramref name="formattedValue" /> entspricht nicht den vom angegebenen Typ der <see cref="P:System.Windows.Forms.DataGridViewCell.FormattedValueType" /> Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="PositionEditingControl">
      <MemberSignature Language="C#" Value="public virtual void PositionEditingControl (bool setLocation, bool setSize, System.Drawing.Rectangle cellBounds, System.Drawing.Rectangle cellClip, System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PositionEditingControl(bool setLocation, bool setSize, valuetype System.Drawing.Rectangle cellBounds, valuetype System.Drawing.Rectangle cellClip, class System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PositionEditingControl(System.Boolean,System.Boolean,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="setLocation" Type="System.Boolean" />
        <Parameter Name="setSize" Type="System.Boolean" />
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellClip" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="setLocation">
          <see langword="true" />um das Steuerelement wie durch andere Argumente angegeben platziert haben. <see langword="false" /> auf das Steuerelement selbst platzieren kann.</param>
        <param name="setSize">
          <see langword="true" />um die Größe anzugeben; <see langword="false" /> , damit das Steuerelement seine Größe selbst festlegen kann.</param>
        <param name="cellBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , die die zellbegrenzungen definiert.</param>
        <param name="cellClip">Der Bereich, der zum Zeichnen des Bearbeitungssteuerelements verwendet wird.</param>
        <param name="cellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , der den Stil der bearbeiteten Zelle darstellt.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" />So fügen der Zelle eine vertikale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" />So fügen der Zelle eine horizontale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" />Wenn sich die Hostzelle in der ersten sichtbaren Spalte befindet; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" />Wenn sich die Hostzelle in der ersten sichtbaren Zeile befindet; andernfalls <see langword="false" />.</param>
        <summary>Legt die Position und Größe des Bearbeitungssteuerelements gehostet werden, indem Sie eine Zelle in der <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Einige Klassen abgeleitet werden, aus der <xref:System.Windows.Forms.DataGridViewCell> Klasse, z. B. <xref:System.Windows.Forms.DataGridViewComboBoxCell>, hosten Sie ein Steuerelement in der ausgewählten Zelle. Die <xref:System.Windows.Forms.DataGridViewCell.PositionEditingControl%2A> -Methode positioniert das Bearbeitungssteuerelement in der Host-Zelle platzieren. Da das Bearbeitungssteuerelement mehr Platz als eine einzelne Zelle in Anspruch nehmen kann, muss möglicherweise neu anders positioniert werden, wenn eine Zelle in der ersten sichtbaren Spalte oder der ersten sichtbaren Zeile bearbeiten, damit er nicht außerhalb zeichnet die <xref:System.Windows.Forms.DataGridView>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zelle befindet sich nicht innerhalb einer <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</exception>
      </Docs>
    </Member>
    <Member MemberName="PositionEditingPanel">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle PositionEditingPanel (System.Drawing.Rectangle cellBounds, System.Drawing.Rectangle cellClip, System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Rectangle PositionEditingPanel(valuetype System.Drawing.Rectangle cellBounds, valuetype System.Drawing.Rectangle cellClip, class System.Windows.Forms.DataGridViewCellStyle cellStyle, bool singleVerticalBorderAdded, bool singleHorizontalBorderAdded, bool isFirstDisplayedColumn, bool isFirstDisplayedRow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.PositionEditingPanel(System.Drawing.Rectangle,System.Drawing.Rectangle,System.Windows.Forms.DataGridViewCellStyle,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellBounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellClip" Type="System.Drawing.Rectangle" />
        <Parameter Name="cellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
        <Parameter Name="singleVerticalBorderAdded" Type="System.Boolean" />
        <Parameter Name="singleHorizontalBorderAdded" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedColumn" Type="System.Boolean" />
        <Parameter Name="isFirstDisplayedRow" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cellBounds">Ein <see cref="T:System.Drawing.Rectangle" /> , die die zellbegrenzungen definiert.</param>
        <param name="cellClip">Der Bereich, der zum Zeichnen des Bearbeitungsbereichs verwendet wird.</param>
        <param name="cellStyle">Ein <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> , der den Stil der bearbeiteten Zelle darstellt.</param>
        <param name="singleVerticalBorderAdded">
          <see langword="true" />So fügen der Zelle eine vertikale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="singleHorizontalBorderAdded">
          <see langword="true" />So fügen der Zelle eine horizontale Rahmenlinie hinzu; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedColumn">
          <see langword="true" />Wenn die Zelle in der ersten Spalte, die derzeit im Steuerelement angezeigte; andernfalls <see langword="false" />.</param>
        <param name="isFirstDisplayedRow">
          <see langword="true" />Wenn die Zelle in der ersten Zeile, die derzeit im Steuerelement angezeigte; andernfalls <see langword="false" />.</param>
        <summary>Legt die Position und die Größe des von der Zelle gehosteten Bearbeitungsbereichs fest und gibt die normalen Begrenzungen des Bearbeitungssteuerelements im Bearbeitungsbereich zurück.</summary>
        <returns>Ein <see cref="T:System.Drawing.Rectangle" /> , die die normalen Begrenzungen des Bearbeitungssteuerelements im Bearbeitungsbereich darstellt.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Die Zelle nicht hinzugefügt wurde eine <see cref="T:System.Windows.Forms.DataGridView" /> Steuerelement.</exception>
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe in Pixel eines rechteckigen Bereichs, in den die Zelle eingepasst werden kann.</summary>
        <value>Eine <see cref="T:System.Drawing.Size" />, die die Höhe und Breite in Pixel enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.PreferredSize%2A> Eigenschaft gibt die natürliche Größe der Zelle berechnet, indem die Zelle der Zeilen- und Besitzer. <xref:System.Windows.Forms.DataGridViewCell.PreferredSize%2A>Gibt eine <xref:System.Drawing.Size> mit einer Breite und Höhe des 1, wenn die Zelle nicht in einer Tabelle enthalten ist.  
  
 Wenn die Zelle in einer <xref:System.Windows.Forms.DataGridViewColumn> mit dem seine <xref:System.Windows.Forms.DataGridViewColumn.Resizable%2A> -Eigenschaftensatz auf `false`, für die Breite wird-1 zurückgegeben.  
  
 Diese Methode verwendet die <xref:System.Windows.Forms.DataGridViewCell.GetFormattedValue%2A> Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die Zelle Daten bearbeitet werden können.</summary>
        <value>
          <see langword="true" />Wenn Daten für die Zelle können nicht bearbeitet werden. andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> Eigenschaft gibt an, ob die von der Zelle angezeigten Daten bearbeitet werden können. Sie können festlegen, <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> für einzelne Zellen, oder Sie eine ganze Zeile oder Spalte von Zellen schreibgeschützt sind und durch Festlegen, stellen können die <xref:System.Windows.Forms.DataGridViewRow.ReadOnly%2A?displayProperty=nameWithType> oder <xref:System.Windows.Forms.DataGridViewColumn.ReadOnly%2A?displayProperty=nameWithType> Eigenschaften. Standardmäßig übernehmen die untergeordneten Zellen, wenn eine Zelle der übergeordneten Zeile oder Spalte schreibgeschützt festgelegt ist den gleichen Wert. Sie können dieses Standardverhalten überschreiben, indem Sie die Einstellung <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A> für einzelne Zellen.  
  
 Können Sie zu einer schreibgeschützten Zelle navigieren, und Sie können eine nur-Lese Zelle der aktiven Zelle zu festlegen.  
  
 <xref:System.Windows.Forms.DataGridViewCell.ReadOnly%2A>wirkt sich nur auf, ob eine Zelle bearbeitet werden kann; Dies beeinflusst nicht, ob der Benutzer Zeilen löschen kann.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Es ist keine übergeordnete Zeile beim Festlegen dieser Eigenschaft.  
  
 - oder -   
  
 Die besitzende Zeile wird freigegeben, beim Festlegen dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="Resizable">
      <MemberSignature Language="C#" Value="public virtual bool Resizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Resizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Resizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Zelle angepasst werden kann.</summary>
        <value>
          <see langword="true" />Wenn die Zelle angepasst werden kann. andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert, der die <xref:System.Windows.Forms.DataGridViewCell.Resizable%2A> Eigenschaft wird festgelegt, indem Sie die Zelle der übergeordneten Zeile oder Spalte.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowIndex">
      <MemberSignature Language="C#" Value="public int RowIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index der übergeordneten Zeile der Zelle ab.</summary>
        <value>Der Index der Zeile, die die Zelle enthält; -1, wenn keine übergeordnete Zeile vorhanden ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.DataGridViewCell.RowIndex%2A> Eigenschaft gibt-1 zurück, die Zelle ist entweder eine Spaltenüberschrift oder Zeile der Zelle ist freigegeben.  
  
 Weitere Informationen zum Freigeben von Zeilen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieser Eigenschaft.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc#080](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/CS/datagridviewmisc.cs#080)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc#080](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc/VB/datagridviewmisc.vb#080)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die Zelle ausgewählt wurde.</summary>
        <value>
          <see langword="true" />Wenn die Zelle verfügt über ausgewählt wurde. andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Es ist keine zugeordnete <see cref="T:System.Windows.Forms.DataGridView" /> beim Festlegen dieser Eigenschaft.  
  
 - oder -   
  
 Die besitzende Zeile wird freigegeben, beim Festlegen dieser Eigenschaft.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="protected virtual bool SetValue (int rowIndex, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool SetValue(int32 rowIndex, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.SetValue(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowIndex" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="rowIndex">Der Index der übergeordneten Zeile der Zelle.</param>
        <param name="value">Der festzulegende Zellwert.</param>
        <summary>Legt den Wert der Zelle fest.</summary>
        <returns>
          <see langword="true" />Wenn der Wert festgelegt wurde. andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="rowIndex" />ist kleiner als 0 oder größer als oder gleich der Anzahl der Zeilen im übergeordneten <see cref="T:System.Windows.Forms.DataGridView" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" /> ist kleiner als 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Größe der Zelle ab.</summary>
        <value>Ein <see cref="T:System.Drawing.Size" /> auf die übergeordnete Zeile Höhe und Breite der besitzenden Spalte festgelegt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keiner die Zelle zugeordnet ist eine <xref:System.Windows.Forms.DataGridView> -Steuerelement, das <xref:System.Windows.Forms.DataGridViewCell.Size%2A> -Eigenschaft gibt eine <xref:System.Drawing.Size> mit einer Breite und Höhe "-1".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Zeile, die die Zelle enthält, ist eine freigegebene Zeile.  
  
 - oder -   
  
 Die Zelle ist eine Spaltenheaderzelle.</exception>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridViewCellStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridViewCellStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridViewCellStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Stil für die Zelle fest.</summary>
        <value>Der Stil, der der Zelle zugeordnet ist.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Forms.DataGridView> -Steuerelement zeigt seine Zellen mithilfe der Stile an, die von der Zelle angegeben <xref:System.Windows.Forms.DataGridViewCell.InheritedStyle%2A> -Eigenschaft, die Stile aus anderen Eigenschaften vom Typ erbt <xref:System.Windows.Forms.DataGridViewCellStyle>. Die Stile, die über die <xref:System.Windows.Forms.DataGridViewCell.Style%2A> Eigenschaft überschreiben die Stile, die durch alle anderen Zellstil Eigenschaften angegeben, aber nicht notwendigerweise, alle Stile an, die zur Darstellung der Zelle beitragen.  
  
 Weitere Informationen finden Sie unter [Zellstile im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/cell-styles-in-the-windows-forms-datagridview-control.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Windows.Forms.DataGridViewCell.Style%2A> Eigenschaft, um die Hintergrundfarbe einer Zelle abzurufen. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich für die <xref:System.Windows.Forms.DataGridViewColumn> Klasse.  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewColumnDemo.cpp#120)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewColumnDemo.cs#120)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#120](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewcolumndemo.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt das Objekt, das zusätzliche Daten zur Zelle enthält.</summary>
        <value>Ein <see cref="T:System.Object" /> , das Daten über die Zelle enthält. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeder Typ abgeleitet wurde. die <xref:System.Object> Klasse kann diese Eigenschaft zugewiesen werden. Die <xref:System.Windows.Forms.DataGridViewCell.Tag%2A> Eigenschaft wird häufig verwendet, um Daten zu speichern, die eng mit dem Wert der Zelle angezeigten anfallen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipText">
      <MemberSignature Language="C#" Value="public string ToolTipText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ToolTipText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ToolTipText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den dieser Zelle zugeordneten QuickInfo-Text ab oder legt diesen fest.</summary>
        <value>Der der Zelle zugeordnete QuickInfo-Text. Die Standardeinstellung ist <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Eigenschaft wird als QuickInfo der Zelle angezeigt, wenn der Mauszeiger über der Zelle und der Eigenschaftswert nicht ist <xref:System.String.Empty>. Wenn der Wert dieser Eigenschaft ist <xref:System.String.Empty>, die Zelle wird als QuickInfo angezeigt, die den Wert der Zelle enthält, wenn der Wert, andernfalls in der Zellenanzeige abgeschnitten ist angezeigt, die Zelle wird nicht in einer QuickInfo angezeigt. Sie können auch zu verhindern, dass die Anzeige der QuickInfo durch Festlegen der <xref:System.Windows.Forms.DataGridView.ShowCellToolTips%2A?displayProperty=nameWithType> Eigenschaft `false`.  
  
 Wenn der <xref:System.Windows.Forms.DataGridView> Steuerelement <xref:System.Windows.Forms.DataGridView.DataSource%2A> festgelegt wird oder den zugehörigen <xref:System.Windows.Forms.DataGridView.VirtualMode%2A> Eigenschaft ist `true`, Abrufen des Werts für die <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> -Eigenschaft löst der <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> -Ereignisses des Steuerelements und gibt den Wert der der <xref:System.Windows.Forms.DataGridViewCellToolTipTextNeededEventArgs.ToolTipText%2A?displayProperty=nameWithType> -Eigenschaft im Ereignishandler angegeben. Wenn kein Handler für das Ereignis vorhanden sind, Abrufen des Werts für die <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> -Eigenschaft zurück, der zuvor angegebene Wert oder den Standardwert <xref:System.String.Empty>.  
  
 Behandlung von der <xref:System.Windows.Forms.DataGridView.CellToolTipTextNeeded> Ereignis ist primär nützlich, bei der Arbeit mit großen Datenmengen um Leistungseinbußen zu vermeiden, der zum Einstellen der Zelle <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> Wert für mehrere Zellen. Weitere Informationen finden Sie unter [Best Practices zum Skalieren des DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/best-practices-for-scaling-the-windows-forms-datagridview-control.md).  
  
 Löst das Ändern dieser Eigenschaft die <xref:System.Windows.Forms.DataGridView.CellToolTipTextChanged> -Ereignis für die besitzende <xref:System.Windows.Forms.DataGridView>, falls vorhanden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Festlegen der <xref:System.Windows.Forms.DataGridViewCell.ToolTipText%2A> Eigenschaft in einem Ereignishandler für das <xref:System.Windows.Forms.DataGridView.CellFormatting> Ereignis. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich im [wie: Hinzufügen von QuickInfos zu einzelnen Zellen im DataGridView-Steuerelements in Windows Forms](~/docs/framework/winforms/controls/add-tooltips-to-individual-cells-in-a-wf-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/cpp/datagridviewcell.tooltiptext.cpp#1)]
 [!code-csharp[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/CS/datagridviewcell.tooltiptext.cs#1)]
 [!code-vb[System.Windows.Forms.DataGridViewCell.ToolTipText#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCell.ToolTipText/VB/datagridviewcell.tooltiptext.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.DataGridViewCell.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge zurück, die das aktuelle Objekt beschreibt.</summary>
        <returns>Eine Zeichenfolge, die das aktuelle Objekt darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sofern nicht anders angegeben, die <xref:System.Windows.Forms.DataGridViewCell.ToString%2A> Methode für die verschiedenen Zelltypen gibt eine Zeichenfolge der Form im folgenden Codebeispiel gezeigt zurück:  
  
 `Classname {RowIndex = #, ColumnIndex = #}`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Wert dieser Zelle zugeordneten fest.</summary>
        <value>Ruft die von der Zelle anzuzeigenden Daten ab oder legt sie fest. Die Standardeinstellung ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Zuweisung von eines anderen Werts in eine Zelle der <xref:System.Windows.Forms.DataGridView.CellValueChanged> -Ereignis für die <xref:System.Windows.Forms.DataGridView> Steuerelement ausgelöst wird.  
  
 Die <xref:System.Windows.Forms.DataGridViewCell.Value%2A> Eigenschaft das tatsächliche Datenobjekt, das von der Zelle enthalten ist, während die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> Eigenschaft ist das formatierte Darstellung der Daten. Die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> und <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaften entsprechen den Datentypen der entsprechenden Werte.  
  
 Beim Festlegen der <xref:System.Windows.Forms.DataGridViewCell.Value%2A> -Eigenschaft angegebene Wert ist nicht automatisch von einem formatierten konvertiert, Anzeigewert in einen zugrunde liegenden Zellenwert. Z. B. die <xref:System.Windows.Forms.DataGridViewCellStyle> faktisch für die Zelle ignoriert wird, sodass festlegen <xref:System.Windows.Forms.DataGridViewCell.Value%2A> auf <xref:System.Windows.Forms.DataGridViewCellStyle.NullValue%2A?displayProperty=nameWithType> führt nicht zu einem Eigenschaftswert des <xref:System.Windows.Forms.DataGridViewCellStyle.DataSourceNullValue%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie aktualisieren Sie den Inhalt einer Zelle mit dem <xref:System.Windows.Forms.DataGridViewCell.Value%2A> Eigenschaft. In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das sich im [Vorgehensweise: Bearbeiten von Zeilen im DataGridView-Steuerelement von Windows Forms](~/docs/framework/winforms/controls/how-to-manipulate-rows-in-the-windows-forms-datagridview-control.md).  
  
 [!code-cpp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CPP/DataGridViewRowDemo.cpp#211)]
 [!code-csharp[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/CS/DataGridViewRowDemo.cs#211)]
 [!code-vb[System.Windows.Forms.DataGridView.ButtonDemos#211](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridView.ButtonDemos/VB/datagridviewrowdemo.vb#211)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />liegt außerhalb des gültigen Bereichs von 0 bis zur Anzahl der Zeilen im Steuerelement minus 1.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.DataGridViewCell.ColumnIndex" />ist kleiner als 0 (null) gibt an, dass die Zelle eine Zeilenheaderzelle ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public virtual Type ValueType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Datentyp der Werte in der Zelle ab oder legt ihn fest.</summary>
        <value>Ein <see cref="T:System.Type" /> , das den Datentyp des Werts in der Zelle darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> Eigenschaft für die Zelle nicht festgelegt wurde, die <xref:System.Windows.Forms.DataGridViewColumn.ValueType%2A?displayProperty=nameWithType> Eigenschaft für die besitzende Spalte verwendet wird, falls vorhanden.  
  
 Die <xref:System.Windows.Forms.DataGridViewCell.Value%2A> Eigenschaft das tatsächliche Datenobjekt, das von der Zelle enthalten ist, während die <xref:System.Windows.Forms.DataGridViewCell.FormattedValue%2A> Eigenschaft ist das formatierte Darstellung der Daten. Die <xref:System.Windows.Forms.DataGridViewCell.ValueType%2A> und <xref:System.Windows.Forms.DataGridViewCell.FormattedValueType%2A> Eigenschaften entsprechen den Datentypen der entsprechenden Werte.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung dieser Eigenschaft.  
  
 [!code-csharp[System.Windows.Forms.DataGridViewMisc2#20](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/cs/misc2.cs#20)]
 [!code-vb[System.Windows.Forms.DataGridViewMisc2#20](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewMisc2/vb/misc2.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.DataGridViewCell.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob die Zelle ist in einer Zeile oder Spalte, die ausgeblendet wurden.</summary>
        <value>
          <see langword="true" />Wenn die Zelle sichtbar ist; andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt an, ob die Zelle in einer Zeile oder eine Spalte mit ist seine <xref:System.Windows.Forms.DataGridViewBand.Visible%2A> -Eigenschaftensatz auf `false`. Es gibt nicht an, ob die Zelle außerhalb des Bildschirms ein Bildlauf durchgeführt wurde. Um zu bestimmen, ob eine Zelle in den Anzeigebereich des Steuerelements sichtbar ist, verwenden die <xref:System.Windows.Forms.DataGridViewCell.Displayed%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
