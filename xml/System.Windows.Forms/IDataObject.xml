<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Bietet einen Mechanismus unabhängig Format zum Übertragen von Daten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `IDataObject` Schnittstelle wird verwendet, durch die <xref:System.Windows.Forms.Clipboard> Klasse und Drag & Drop-Operationen.  
  
 Beim Implementieren in einer Klasse, die <xref:System.Windows.Forms.IDataObject> Methoden ermöglichen es den Benutzer zum Speichern von Daten in mehreren Formaten in einer Instanz der Klasse. Speichern von Daten in mehrere Format erhöht die Wahrscheinlichkeit, dass eine Zielanwendung, dessen formatanforderungen, die Sie möglicherweise nicht bekannt, die gespeicherten Daten abrufen kann. Zum Speichern von Daten in einer Instanz von <xref:System.Windows.Forms.IDataObject>, rufen Sie die <xref:System.Windows.Forms.IDataObject.SetData%2A> Methode, und geben Sie das Datenformat in der `format` Parameter. Legen Sie die `autoConvert` Parameter `false` , wenn Sie nicht gespeicherte Daten in ein anderes Format konvertiert werden, beim abrufen möchten. Aufrufen <xref:System.Windows.Forms.IDataObject.SetData%2A> mehrere Male auf einer Instanz von <xref:System.Windows.Forms.IDataObject> zum Speichern von Daten in mehreren Formaten.  
  
 Rufen Sie gespeicherte Daten aus einer <xref:System.Windows.Forms.IDataObject> durch Aufrufen der <xref:System.Windows.Forms.IDataObject.GetData%2A> -Methode und Angeben der Daten zu formatieren, der `format` Parameter. Legen Sie die `autoConvert` Parameter `false` nur Daten abgerufen, die im angegebenen Format gespeichert wurde. Legen Sie zum Konvertieren der gespeicherten Daten in das angegebene Format `autoConvert` auf `true`, oder verwenden Sie keine `autoConvert`.  
  
 Um zu bestimmen, die Formate für die Daten aus einer <xref:System.Windows.Forms.IDataObject>, verwenden Sie die folgenden <xref:System.Windows.Forms.IDataObject> Methoden.  
  
-   Rufen Sie die <xref:System.Windows.Forms.IDataObject.GetFormats%2A> Methode, um ein Array abzurufen, der alle Formate in der die Daten verfügbar sind. Legen Sie die `autoConvert` Parameter `false` abzurufenden nur die Formate, in dem die Daten gespeichert ist. Um alle Formate erhalten, in dem die Daten verfügbar sind, legen Sie `autoConvert` auf `true`, oder verwenden Sie diesen Parameter nicht.  
  
-   Rufen Sie die <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> Methode, um zu bestimmen, ob die gespeicherte Daten in einem bestimmten Format verfügbar ist. Wenn Sie nicht gespeicherte Daten in das angegebene Format konvertiert werden sollen, legen Sie die `autoConvert` Parameter `false`.  
  
 Finden Sie unter der <xref:System.Windows.Forms.DataObject> Klasse für eine Implementierung dieser Schnittstelle. Finden Sie unter der <xref:System.Windows.Forms.DataFormats> Klasse für die vordefinierten <xref:System.Windows.Forms.Clipboard> Datenformate.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <summary>Ruft die dem angegebenen Datenformat zugeordneten Daten ab.</summary>
        <returns>Die Daten, die dem angegebenen Format zugeordnet oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode die Daten im angegebenen Format nicht finden kann, versucht die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, gibt diese Methode `null`.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject,` zum Veranschaulichen der Verwendung von der `GetData` Methode. Die Methode wird verwendet, um die in gespeicherten Daten abrufen `myDataObject`, die zugeordnet ist die `Text` Format. Im Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" /> , die das Format der abzurufenden Daten darstellt. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <summary>Ruft den Klassentyp angegebenen Format zugeordneten Daten ab.</summary>
        <returns>Die Daten, die dem angegebenen Format zugeordnet oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn diese Methode die Daten im angegebenen Format nicht finden kann, versucht die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, gibt diese Methode `null`.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetData` Methode. Die Methode wird verwendet, um die in gespeicherten Daten abrufen `myObject`, einen bestimmten Typ zugeordnet ist `myType`. Der Typ der abgerufenen Daten wird in einem Meldungsfeld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das Format der abzurufenden Daten. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <param name="autoConvert">
          <see langword="true" />um die Daten in das angegebene Format zu konvertieren; andernfalls <see langword="false" />.</param>
        <summary>Ruft die dem angegebenen Datenformat mithilfe eines booleschen bestimmt, ob die Daten in das Format konvertiert zugeordneten Daten ab.</summary>
        <returns>Die Daten, die dem angegebenen Format zugeordnet oder <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die `autoConvert` Parameter ist `true` und diese Methode kann nicht gefunden werden Daten im angegebenen Format, versucht wird, die Daten in das Format zu konvertieren. Wenn die Daten in das angegebene Format konvertiert werden können, oder wenn die Daten mit gespeichert wurde die `autoConvert` Parametersatz auf `false`, gibt diese Methode `null`.  
  
 Wenn die `autoConvert` Parameter ist `false`, diese Methode gibt Daten zurück, in dem angegebenen Format oder `null` Wenn keine Daten in dieses Format nicht gefunden werden können.  
  
 Um zu bestimmen, ob Daten zugeordnet ist, oder in ein Format konvertiert werden können, rufen <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> eine Liste der gültigen Formate für die in dieser Instanz gespeicherten Daten.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetData` Methode. Im Beispiel ruft die in gespeicherten Daten ab einem `DataObject`unter Verwendung der `autoConvert` Parameter an, ob das Datenformat konvertieren. Erstens `myDataObject` mit Textdaten erstellt wird. Das Beispiel versucht zweimal, um die Daten abzurufen. In der ersten Testversion gibt es das Format als eine Zeichenfolge und legt die `autoConvert` Parameter `false`. Dieser Versuch schlägt fehl, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #1". In der zweiten Test der, im Beispiel werden die gleichen Daten mit abgerufen der `autoConvert` Parametersatz auf `true`. Diese Testversion ist erfolgreich, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #2". Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Das Format für die überprüft werden soll. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <summary>Bestimmt, ob in dieser Instanz gespeicherte Daten zugeordnet ist, oder in das angegebene Format konvertiert werden können.</summary>
        <returns>
          <see langword="true" />Wenn Daten, in gespeichert dieser Instanz zugeordnet ist, oder in das angegebene Format konvertiert werden kann; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetDataPresent` Methode. Zuerst erstellt ein Objekt mit einer Zeichenfolge und der `Text` Format. Und es wird überprüft, dass die Daten im ist die `Text` formatieren und die Ergebnisse in einem Meldungsfeld angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" /> , die das Format für die zu überprüfende darstellt. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <summary>Bestimmt, ob in dieser Instanz gespeicherte Daten zugeordnet ist, oder in das angegebene Format konvertiert werden können.</summary>
        <returns>
          <see langword="true" />Wenn Daten, in gespeichert dieser Instanz zugeordnet ist, oder in das angegebene Format konvertiert werden kann; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetDataPresent` Methode. Zunächst wird eine Komponente erstellt (`myComponent`) und speichert ihn in ein Datenobjekt (`myDataObject`). Anschließend wird geprüft, ob die angegebenen Daten, in gespeichert werden `myDataObject`. Wenn der Test ergibt `true`, er das Ergebnis in einem Meldungsfeld wird angezeigt und zeigt den Datentyp in einem Textfeld. In diesem Beispiel wird davon ausgegangen, dass Sie bereits erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1` und ein <xref:System.Windows.Forms.TextBox> mit dem Namen `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Das Format für die überprüft werden soll. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <param name="autoConvert">
          <see langword="true" />um festzustellen, ob die Daten in dieser Instanz gespeicherten können in das angegebene Format konvertiert werden. <see langword="false" /> prüfen, ob die Daten im angegebenen Format.</param>
        <summary>Bestimmt, ob in dieser Instanz gespeicherte Daten mithilfe eines booleschen Werts zu bestimmen, ob die Daten in das Format konvertiert das angegebene Format zugeordnet ist.</summary>
        <returns>
          <see langword="true" />Wenn die Daten befindet sich in oder in das angegebene Format konvertiert werden können. andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode, um zu bestimmen, ob ein Format vorhanden, in diesem ist <xref:System.Windows.Forms.DataObject> vor dem Aufruf <xref:System.Windows.Forms.IDataObject.GetData%2A>. Rufen Sie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> für die Formate, die in dieser Instanz verfügbar sind.  
  
 Diese Methode gibt `true` wenn:  
  
-   Die `autoConvert` Parameter ist `true` und die Daten in einem Format, das in das entsprechende Format konvertiert werden kann.  
  
-   Die `autoConvert` Parameter ist `false` und die Daten im entsprechenden Format.  
  
 Diese Methode gibt `false` wenn:  
  
-   Die `autoConvert` Parameter ist `true` und diese Methode kann nicht gefunden werden Daten im angegebenen Format und in das angegebene Format konvertiert oder die Daten mit gespeichert wurde `autoConvert` festgelegt `false`.  
  
-   Die `autoConvert` Parameter ist `false`, und Daten in dieser Instanz im angegebenen Format nicht vorhanden.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetDataPresent` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und der `Text` Format. Anschließend es das Objekt für die zugeordneten Daten fragt der `Text` Format, mit der `autoConvert` Parametersatz auf `false`. Dieser Versuch schlägt fehl, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #1". In der zweiten Testversion wird die `autoConvert` Parameter `true`. Diese Testversion ist erfolgreich, und das Ergebnis wird angezeigt, in einem Meldungsfeld mit der Bezeichnung "Meldung #2". Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Liste aller Formate, die in dieser Instanz gespeicherte Daten zugeordnet ist, oder konvertiert werden können.</summary>
        <returns>Ein Array der Namen, eine Liste aller Formate darstellt, die durch die in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode zum Abrufen der unterstützten Datenformate vor dem Aufruf der <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode. Finden Sie unter der <xref:System.Windows.Forms.DataFormats> Klasse für die vordefinierten Formate.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetFormats` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und der `Text` Format. Anschließend ruft alle Datenformate und Datenformate der Konvertierung in das Datenobjekt ab und zeigt die Ergebnisliste in einem Meldungsfeld an. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">
          <see langword="true" />alle Formate Abrufen dieser Daten in dieser Instanz gespeicherten zugeordnet ist oder konvertiert werden können; <see langword="false" /> nur systemeigene Datenformate abgerufen.</param>
        <summary>Ruft eine Liste aller Formate, die in dieser Instanz gespeicherte Daten zugeordnet ist, oder konvertiert werden können, verwenden einen booleschen Wert um zu bestimmen, ob alle Formate, denen die Daten konvertiert werden können oder nur systemeigenen Daten abzurufen formatiert.</summary>
        <returns>Ein Array der Namen, eine Liste aller Formate darstellt, die durch die in diesem Objekt gespeicherten Daten unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode zum Abrufen der unterstützten Datenformate vor dem Aufruf der <xref:System.Windows.Forms.IDataObject.GetData%2A> Methode. Finden Sie unter der <xref:System.Windows.Forms.DataFormats> Klasse für die vordefinierten Formate.  
  
> [!NOTE]
>  Daten können in ein anderes Format konvertiert werden, wenn es gespeichert wurde, gibt an, dass die Konvertierung zulässig ist und das angeforderte Format mit dem gespeicherten Format kompatibel ist. Z. B. Daten gespeichert werden als Unicode-Text konvertiert werden kann.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `GetFormats` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) mit einer Zeichenfolge und der `UnicodeText` Format. Anschließend werden zwei Abfragen zum Abrufen der Formate, die den Daten zugeordnet. In der ersten Abfrage wird der `autoConvert` Parameter `false` : in diesem Fall wird nur das systemeigene Format der Daten zurückgegeben. In der zweiten Abfrage wird der `autoConvert` Parameter `true`, sodass er ruft die Liste der Formate, einschließlich der Formate, die in die Daten konvertiert werden können. In jedem Fall wird die resultierende Liste in einem Meldungsfeld angezeigt. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Die Daten zu speichern.</param>
        <summary>Speichert die angegebenen Daten in dieser Instanz, mit die Klasse der Daten für das Format an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Format wird von der Klasse abgeleitet.  
  
 Mit dieser Methode gespeicherte Daten können in einem kompatiblen Format konvertiert werden, beim Abrufen.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `SetData` Methode. Zunächst wird eine Komponente erstellt (`myComponent`) und speichert ihn in ein Datenobjekt (`myDataObject`). Anschließend wird überprüft, ob die angegebenen Daten in das Datenobjekt gespeichert, und das Ergebnis in einem Meldungsfeld wird angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <param name="data">Die Daten zu speichern.</param>
        <summary>Speichert die angegebenen Daten und das zugeordnete Format in dieser Instanz an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Mit dieser Methode gespeicherte Daten können in einem kompatiblen Format konvertiert werden, beim Abrufen.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `SetData` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) und speichert eine Zeichenfolge im Objekt zur Angabe der `UnicodeText` Format. Dann abgerufen, beim Angeben von Objekt gespeicherten Daten der `Text` zu formatieren, damit die Daten konvertiert werden, um die `Text` Format. Das Ergebnis wird in einem Meldungsfeld angezeigt. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Ein <see cref="T:System.Type" /> , die die Daten zugeordnete Format darstellt. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <param name="data">Die Daten zu speichern.</param>
        <summary>Speichert die angegebenen Daten und den zugeordneten Klassentyp in dieser Instanz an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Mit dieser Methode gespeicherte Daten können in einem kompatiblen Format konvertiert werden, beim Abrufen.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `SetData` Methode. Zunächst wird eine Komponente erstellt (`myComponent`) und speichert ihn in ein Datenobjekt (`myDataObject`), wobei `myType` Datenformat anzugeben. Anschließend wird überprüft, ob die Daten des angegebenen Typs, die in dem Objekt gespeichert ist, und das Ergebnis in einem Meldungsfeld wird angezeigt. Im Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Das den Daten zugeordnete Format. Finden Sie unter <see cref="T:System.Windows.Forms.DataFormats" /> für vordefinierte Formate.</param>
        <param name="autoConvert">
          <see langword="true" />um die Daten in ein anderes Format konvertiert werden können. andernfalls <see langword="false" />.</param>
        <param name="data">Die Daten zu speichern.</param>
        <summary>Speichert die angegebenen Daten und das zugeordnete Format in dieser Instanz, die mit einem booleschen Wert an, ob die Daten in ein anderes Format konvertiert werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie nicht das Format der Zielanwendung kennen, können Sie Daten in verschiedenen Formaten, die mit dieser Methode speichern.  
  
 Eine Implementierung dieser Methode finden Sie <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die <xref:System.Windows.Forms.DataObject> Klasse `IDataObject`, um zu veranschaulichen die Verwendung von der `SetData` Methode. Zunächst erstellt er ein Datenobjekt (`myDataObject`) und speichert eine `UnicodeText` Zeichenfolge, mit der `autoConvert` Parametersatz auf `false`. Klicken Sie dann die Formate abgerufen, die im Objekt gespeicherten Daten zugeordnet, und das Ergebnis in einem Meldungsfeld angezeigt wird. Das einzige Format, die den Daten zugeordnet ist die `UnicodeText` Format. In diesem Beispiel wird davon ausgegangen, dass Sie erstellt haben eine <xref:System.Windows.Forms.Form> mit dem Namen `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
