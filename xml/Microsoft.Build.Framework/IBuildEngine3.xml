<Type Name="IBuildEngine3" FullName="Microsoft.Build.Framework.IBuildEngine3">
  <TypeSignature Language="C#" Value="public interface IBuildEngine3 : Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBuildEngine3 implements class Microsoft.Build.Framework.IBuildEngine, class Microsoft.Build.Framework.IBuildEngine2" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Framework.IBuildEngine3" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build.Framework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Build.Framework.IBuildEngine2</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Diese Schnittstelle erweitert IBuildEngine, um eine Methode ermöglichen die Erstellung von Projekt Dateien parallel zur Verfügung.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildProjectFilesInParallel">
      <MemberSignature Language="C#" Value="public Microsoft.Build.Framework.BuildEngineResult BuildProjectFilesInParallel (string[] projectFileNames, string[] targetNames, System.Collections.IDictionary[] globalProperties, System.Collections.Generic.IList&lt;string&gt;[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Microsoft.Build.Framework.BuildEngineResult BuildProjectFilesInParallel(string[] projectFileNames, string[] targetNames, class System.Collections.IDictionary[] globalProperties, class System.Collections.Generic.IList`1&lt;string&gt;[] removeGlobalProperties, string[] toolsVersion, bool returnTargetOutputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.BuildProjectFilesInParallel(System.String[],System.String[],System.Collections.IDictionary[],System.Collections.Generic.IList{System.String}[],System.String[],System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Build.Framework.BuildEngineResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projectFileNames" Type="System.String[]" />
        <Parameter Name="targetNames" Type="System.String[]" />
        <Parameter Name="globalProperties" Type="System.Collections.IDictionary[]" />
        <Parameter Name="removeGlobalProperties" Type="System.Collections.Generic.IList&lt;System.String&gt;[]" />
        <Parameter Name="toolsVersion" Type="System.String[]" />
        <Parameter Name="returnTargetOutputs" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="projectFileNames">Das zu erstellende Projekt.</param>
        <param name="targetNames">Die Ziele in das zu erstellende Projekt (kann null sein).</param>
        <param name="globalProperties">Ein Array von <see cref="T:System.Collections.IDictionary" /> von zusätzlichen globale Eigenschaften auf das untergeordnete Projekt angewendet (Arrayeinträge können null sein).  
  
 Die Schlüssel und Werte müssen Zeichenfolgen sein.</param>
        <param name="removeGlobalProperties">Eine Liste der globalen Eigenschaften, die entfernt werden soll.</param>
        <param name="toolsVersion">Eine ToolsVersion erkannt, durch das Modul, die während dieses Builds verwendet werden (kann null sein).</param>
        <param name="returnTargetOutputs">Die Zielausgaben in den BuildEngineResult zurückgegeben werden soll.</param>
        <summary>Aufgaben zum Starten eines Build für eine Projektdatei ermöglicht</summary>
        <returns>Wenn der Build erfolgreich erstellt wurde, werden die Ausgaben der angegebenen Ziele zurückgegeben.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reacquire">
      <MemberSignature Language="C#" Value="public void Reacquire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reacquire() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.Reacquire" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wartet, nach der Rückgabe Steuerelement zurückzuerhalten.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Yield">
      <MemberSignature Language="C#" Value="public void Yield ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Yield() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Build.Framework.IBuildEngine3.Yield" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Build.Framework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Informiert das System an, dass diese Aufgabe besteht aus einer lang andauernden Out-of-Process-Komponente und andere arbeiten, im Build ausgeführt werden, kann während die Arbeit abgeschlossen hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es ist nur ein Knoten (msbuild.exe-Prozess) pro CPU. Nur ein Projekt, Ziel und Aufgaben können auf einem Knoten zu einem beliebigen Zeitpunkt erstellen. Wenn ein Task darauf wartet, kann z. B. für eine generierte Tool oder ein anderes Ereignis auf den Abschluss die Aufgabe Yield, aufrufen, wird sofort zurückgegeben. Dadurch können die Knoten, ein anderes Ziel in einem anderen Projekt erstellen, sofern welche verfügbar sind.  Wenn die Aufgabe zum Fortfahren ist, rufen sie <xref:Microsoft.Build.Framework.IBuildEngine3.Reacquire%2A>. Als grobe Regel, wenn eine Aufgabe erwartet, dass ein Vorgang mehr als 20 oder 30 Sekunden dauert auch aufrufen, `Yield` vor dem Beginn des Vorgangs und `Reaquire` Wenn der Vorgang abgeschlossen ist.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
