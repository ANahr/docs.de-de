<Type Name="InputScopeConverter" FullName="System.Windows.Input.InputScopeConverter">
  <TypeSignature Language="C#" Value="public class InputScopeConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputScopeConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputScopeConverter" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Konvertiert einen <see cref="T:System.Windows.Input.InputScope" /> in und aus anderen Datentypen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_InputScopeConverter"></a>   
## <a name="xaml-text-usage"></a>Verwendung von XAML-Text  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputScopeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Windows.Input.InputScopeConverter" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein Objekt, das einen Typdeskriptorkontext beschreibt.  Dieses Objekt muss die <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Schnittstelle implementieren.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="sourceType">Ein <see cref="T:System.Type" /> für die Konvertierung Kompatibilität überprüft.</param>
        <summary>Bestimmt, ob ein <see cref="T:System.Windows.Input.InputScope" /> Objekt aus einem Objekt eines angegebenen Typs konvertiert werden kann.</summary>
        <returns>
          <see langword="true" />Wenn <paramref name="sourceType" /> Typ <see cref="T:System.String" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein Objekt, das einen Typdeskriptorkontext beschreibt.  Dieses Objekt muss die <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Schnittstelle implementieren.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="destinationType">Ein <see cref="T:System.Type" /> für die Konvertierung Kompatibilität überprüft.</param>
        <summary>Bestimmt, ob ein <see cref="T:System.Windows.Input.InputScope" /> Objekt in ein Objekt eines angegebenen Typs konvertiert werden kann.</summary>
        <returns>
          <see langword="true" />Wenn <paramref name="destinationType" /> Typ <see cref="T:System.String" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Ein Objekt, das einen Typdeskriptorkontext beschreibt.  Dieses Objekt muss die <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Schnittstelle implementieren.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="culture">Ein <see cref="T:System.Globalization.CultureInfo" /> Objekt, das alle kulturellen Kontext für die Konvertierung enthält.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="source">Ein Quellobjekt zum Konvertieren von.  Dieses Objekt muss eine Zeichenfolge sein.</param>
        <summary>Konvertiert ein Quellobjekt (Zeichenfolge) in ein <see cref="T:System.Windows.Input.InputScope" /> Objekt.</summary>
        <returns>Ein <see cref="T:System.Windows.Input.InputScope" /> Objekt aus dem angegebenen Quellobjekt konvertiert.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputScopeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein Objekt, das einen Typdeskriptorkontext beschreibt.  Dieses Objekt muss die <see cref="T:System.ComponentModel.ITypeDescriptorContext" />-Schnittstelle implementieren.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="culture">Ein <see cref="T:System.Globalization.CultureInfo" /> Objekt, das alle kulturellen Kontext für die Konvertierung enthält.  Dieser Parameter kann <see langword="null" /> sein.</param>
        <param name="value">Eine zu konvertierende Objekt.  Dieses Objekt muss vom Typ <see cref="T:System.Windows.Input.InputScope" />.</param>
        <param name="destinationType">Ein Zieltyp Typen konvertiert werden soll.  Dieser Typ muss die Zeichenfolge sein.</param>
        <summary>Konvertiert ein <see cref="T:System.Windows.Input.InputScope" /> Objekt in einen angegebenen Objekttyp (Zeichenfolge).</summary>
        <returns>Ein neues Objekt des angegebenen Typs (Zeichenfolge) konvertiert, die aus der angegebenen <see cref="T:System.Windows.Input.InputScope" /> Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `destinationType`muss <xref:System.String>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
