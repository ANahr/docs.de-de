<Type Name="TouchDevice" FullName="System.Windows.Input.TouchDevice">
  <TypeSignature Language="C#" Value="public abstract class TouchDevice : System.Windows.Input.InputDevice, System.Windows.Input.IManipulator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TouchDevice extends System.Windows.Input.InputDevice implements class System.Windows.Input.IManipulator" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.TouchDevice" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputDevice</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.IManipulator</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Stellt eine einzelne Fingereingabe auf einem Touchscreen dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie in der Regel Zugriff auf eine <xref:System.Windows.Input.TouchDevice> mithilfe der <xref:System.Windows.Input.TouchEventArgs.TouchDevice%2A?displayProperty=nameWithType> Eigenschaft. Ein <xref:System.Windows.Input.TouchDevice> stellt eine einzelne Fingereingabe auf einem Bildschirm. Wenn mehrere Fingereingaben vorhanden sind, verwenden Sie die <xref:System.Windows.Input.TouchDevice.Id%2A> Eigenschaft unterschieden.  
  
> [!NOTE]
>  Diese Klasse enthält eine vererbungsanforderung auf Klassenebene, die für alle Member gilt. Ein <xref:System.Security.SecurityException> wird ausgelöst, wenn die abgeleitete Klasse keinen volle Vertrauenswürdigkeit. Weitere Informationen zu Sicherheitsberechtigungen finden Sie unter [Verknüpfungsaufrufe](~/docs/framework/misc/link-demands.md) und [Vererbungsanforderungen](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 Im folgende Beispiel ermöglicht Ihnen die Erstellung von einfachen Muster auf eine <xref:System.Windows.Controls.Canvas> durch Ziehen von zwei Fingern auf einem Touchscreen dar. Jede Fingereingabe dargestellte eine <xref:System.Windows.Input.TouchDevice> in der <xref:System.Windows.Input.TouchEventArgs>. Das Muster wird erstellt, indem eine Linie zwischen den Berührungspunkte, die von den Fingereingaben bereitgestellt werden. Dieses Beispiel benötigen Sie einen Windows Touch-kompatiblen Bildschirm.  
  
 Das folgende Markup erstellt die Benutzeroberfläche besteht aus einem <xref:System.Windows.Controls.Canvas> , die in einem Raster zentriert ist und fügt die Ereignishandler für die Berührungsereignisse.  
  
 [!code-xaml[TouchEventsSample#000](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml#000)]  
  
 Der folgende Code behandelt die Berührungsereignisse. Wenn eine Fingereingabe auf gedrückt wird die <xref:System.Windows.Controls.Canvas>, die <xref:System.Windows.Input.TouchDevice> aufgezeichnet wird, um die <xref:System.Windows.Controls.Canvas>. Wenn die Fingereingabe beendet wird, die <xref:System.Windows.Input.TouchDevice> freigegeben wird. Wenn eine Fingereingabe verschoben wird, auf die <xref:System.Windows.Controls.Canvas>, die <xref:System.Windows.Input.TouchDevice.Id%2A> aktiviert ist. Wenn das Verschieben aus dem ersten Touch geliefert wurde, wird dessen Speicherort aufgezeichnet. Wenn das Verschieben von einem zweiten geliefert wurde, wird eine Linie von der Position der ersten Fingereingabe auf die Position des zweiten Fingereingabe gezeichnet.  
  
 [!code-csharp[TouchEventsSample#100](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#100)]
 [!code-vb[TouchEventsSample#100](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#100)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.UIPermission">für die von dieser Klasse ableiten. Sicherheitsaktion: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Zugeordnete Enumeration:<see cref="F:System.Security.Permissions.PermissionState.Unrestricted" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TouchDevice (int deviceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(int32 deviceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="deviceId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceId">Ein eindeutiger Bezeichner für die Touch-Geräte.</param>
        <summary>Aufgerufen von Konstruktoren in abgeleiteten Klassen zum Initialisieren der <see cref="T:System.Windows.Input.TouchDevice" /> Klasse.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">erfordert volle Vertrauenswürdigkeit für den unmittelbaren Aufrufer. Diese Klasse kann nicht von teilweise vertrauenswürdigem oder transparentem Code verwendet werden.</permission>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="protected void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Fügt der <see cref="T:System.Windows.Input.TouchDevice" /> mit der Eingabe messaging-Systems.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben <xref:System.Windows.Input.TouchDevice> aufrufen, sollten diese Methode, um das aktuelle Gerät zu aktivieren.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Gerät ist bereits aktiviert.</exception>
      </Docs>
    </Member>
    <Member MemberName="Activated">
      <MemberSignature Language="C#" Value="public event EventHandler Activated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Activated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.TouchDevice.Activated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das <see cref="T:System.Windows.Input.TouchDevice" /> dem Eingabemessagingsystem hinzugefügt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSource">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.PresentationSource ActiveSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource ActiveSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.ActiveSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Windows.PresentationSource" /> , die Eingabe für dieses Gerät meldet.</summary>
        <value>Die Quelle, die Eingaben für dieses Gerät meldet.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture (System.Windows.IInputElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Capture(class System.Windows.IInputElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="element">Das Element, das die Fingereingabe aufzeichnet.</param>
        <summary>Erfasst eine Fingereingabe für das angegebene Element mit dem <see cref="F:System.Windows.Input.CaptureMode.Element" /> Aufzeichnungsmodus.</summary>
        <returns>
          <see langword="true" />Wenn das Element einem erfassen konnte; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.TouchDevice> können nicht auf ein Element aufgezeichnet werden, wenn es bereits für ein anderes Element erfasst wird.  
  
   
  
## Examples  
 Das folgende Beispiel verarbeitet die <xref:System.Windows.UIElement.TouchDown> Ereignisse eine <xref:System.Windows.Controls.Canvas>. Wenn eine Fingereingabe auf gedrückt wird die <xref:System.Windows.Controls.Canvas>, die <xref:System.Windows.Input.TouchDevice> aufgezeichnet wird, um die <xref:System.Windows.Controls.Canvas>.  
  
 In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das in verfügbar ist die <xref:System.Windows.Input.TouchDevice> -Klassenübersicht.  
  
 [!code-csharp[TouchEventsSample#110](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#110)]
 [!code-vb[TouchEventsSample#110](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="element" />ist eine <see cref="T:System.Windows.UIElement" />, <see cref="T:System.Windows.UIElement3D" />, oder <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Capture(class System.Windows.IInputElement element, valuetype System.Windows.Input.CaptureMode captureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.Capture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
        <Parameter Name="captureMode" Type="System.Windows.Input.CaptureMode" />
      </Parameters>
      <Docs>
        <param name="element">Das Element, das die Fingereingabe erfasst.</param>
        <param name="captureMode">Die zu verwendende Erfassungsrichtlinie.</param>
        <summary>Erfasst eine Fingereingabe für das angegebene Element unter Verwendung des angegebenen <see cref="T:System.Windows.Input.CaptureMode" />.</summary>
        <returns>
          <see langword="true" />Wenn das Element einem erfassen konnte; andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.TouchDevice> können nicht auf ein Element aufgezeichnet werden, wenn es bereits für ein anderes Element erfasst wird.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="element" />ist eine <see cref="T:System.Windows.UIElement" />, <see cref="T:System.Windows.UIElement3D" />, oder <see cref="T:System.Windows.ContentElement" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Captured">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement Captured { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement Captured" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.Captured" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element, das erfasst die <see cref="T:System.Windows.Input.TouchDevice" />.</summary>
        <value>Das Element, das erfasst die <see cref="T:System.Windows.Input.TouchDevice" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel verarbeitet die <xref:System.Windows.UIElement.TouchUp> Ereignisse eine <xref:System.Windows.Controls.Canvas>. Er überprüft die <xref:System.Windows.Input.TouchDevice.Captured%2A> Eigenschaft, um sicherzustellen, dass das Gerät, das das Ereignis ausgelöst hat, erfasst wird die <xref:System.Windows.Controls.Canvas>. Wenn dies der Fall, die <xref:System.Windows.Input.TouchDevice> freigegeben wird.  
  
 In diesem Beispiel ist Teil eines umfangreicheren Beispiels, das in verfügbar ist die <xref:System.Windows.Input.TouchDevice> -Klassenübersicht.  
  
 [!code-csharp[TouchEventsSample#130](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#130)]
 [!code-vb[TouchEventsSample#130](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#130)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CaptureMode">
      <MemberSignature Language="C#" Value="public System.Windows.Input.CaptureMode CaptureMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.CaptureMode CaptureMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.CaptureMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.CaptureMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Erfassungsrichtlinie für die <see cref="T:System.Windows.Input.TouchDevice" />.</summary>
        <value>Die Erfassungsrichtlinie für die <see cref="T:System.Windows.Input.TouchDevice" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deactivate">
      <MemberSignature Language="C#" Value="protected void Deactivate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Deactivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.Deactivate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Entfernt die <see cref="T:System.Windows.Input.TouchDevice" /> aus der Eingabe messaging-Systems.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben <xref:System.Windows.Input.TouchDevice> aufrufen, sollten diese Methode, um das aktuelle Gerät zu deaktivieren.  
  
 Ein <xref:System.Windows.UIElement.TouchLeave> Ereignis wird ausgelöst, ohne die entsprechende <xref:System.Windows.UIElement.TouchUp> Ereignis.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Das Gerät ist nicht aktiviert.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deactivated">
      <MemberSignature Language="C#" Value="public event EventHandler Deactivated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Deactivated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.TouchDevice.Deactivated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see cref="T:System.Windows.Input.TouchDevice" /> aus der Eingabe messaging-System entfernt wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectlyOver">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement DirectlyOver { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement DirectlyOver" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.DirectlyOver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element, dem direkt über die Fingereingabe Kontaktpunkte ist.</summary>
        <value>Das Element, dem direkt über die Fingereingabe Kontaktpunkte ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIntermediateTouchPoints">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Input.TouchPointCollection GetIntermediateTouchPoints(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.GetIntermediateTouchPoints(System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPointCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">Das Element, das den Koordinatenbereich definiert.</param>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse alle Berührungspunkte, die zwischen dem aktuellen und vorherigen gesammelt werden Berührungsereignisse zurück.</summary>
        <returns>Alle Berührungspunkte, die zwischen dem aktuellen und vorherigen erfasst wurden Berührungsereignisse.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTouchPoint">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Input.TouchPoint GetTouchPoint (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Input.TouchPoint GetTouchPoint(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.GetTouchPoint(System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.TouchPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">Das Element, das den Koordinatenbereich definiert.</param>
        <summary>Gibt die aktuelle Position des Geräts Touch relativ zum angegebenen Element zurück.</summary>
        <returns>Die aktuelle Position des Geräts Touch relativ zum angegebenen Element.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public int Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den eindeutigen Bezeichner von die <see cref="T:System.Windows.Input.TouchDevice" />, wie vom Betriebssystem bereitgestellt.</summary>
        <value>Der eindeutige Bezeichner der <see cref="T:System.Windows.Input.TouchDevice" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Windows.Input.TouchDevice> stellt eine einzelne Fingereingabe auf einem Bildschirm. Wenn mehrere Fingereingaben vorhanden sind, verwenden Sie die <xref:System.Windows.Input.TouchDevice.Id%2A> Eigenschaft unterschieden.  
  
   
  
## Examples  
 Das folgende Beispiel verarbeitet die <xref:System.Windows.UIElement.TouchMove> Ereignisse eine <xref:System.Windows.Controls.Canvas>. Wenn eine Fingereingabe verschoben wird, auf die <xref:System.Windows.Controls.Canvas>, die <xref:System.Windows.Input.TouchDevice.Id%2A> aktiviert ist. Wenn das Verschieben aus dem ersten Touch geliefert wurde, wird dessen Speicherort aufgezeichnet. Wenn das Verschieben von einem zweiten geliefert wurde, wird eine Linie von der Position der ersten Fingereingabe auf die Position des zweiten Fingereingabe gezeichnet.  
  
 In diesem Beispiel ist Teil eines umfangreicheren Beispiels zur Verfügung, in der <xref:System.Windows.Input.TouchDevice> -Klassenübersicht.  
  
 [!code-csharp[TouchEventsSample#120](~/samples/snippets/csharp/VS_Snippets_Wpf/toucheventssample/cs/mainwindow.xaml.cs#120)]
 [!code-vb[TouchEventsSample#120](~/samples/snippets/visualbasic/VS_Snippets_Wpf/toucheventssample/vb/mainwindow.xaml.vb#120)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsActive">
      <MemberSignature Language="C#" Value="public bool IsActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsActive" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.IsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert, der angibt, ob das Gerät aktiv ist.</summary>
        <value>
          <see langword="true" />Wenn das Gerät aktiv ist; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCapture">
      <MemberSignature Language="C#" Value="protected virtual void OnCapture (System.Windows.IInputElement element, System.Windows.Input.CaptureMode captureMode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCapture(class System.Windows.IInputElement element, valuetype System.Windows.Input.CaptureMode captureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.OnCapture(System.Windows.IInputElement,System.Windows.Input.CaptureMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.IInputElement" />
        <Parameter Name="captureMode" Type="System.Windows.Input.CaptureMode" />
      </Parameters>
      <Docs>
        <param name="element">Das Element, das die Fingereingabe aufzeichnet.</param>
        <param name="captureMode">Die Erfassungsrichtlinie.</param>
        <summary>Wird aufgerufen, wenn eine Fingereingabe auf ein Element erfasst wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.TouchDevice.OnCapture%2A> Methode hat keine Standardimplementierung. Sie können in einer abgeleiteten Klasse für alle Aktionen, die erforderlich sind, wenn die Fingereingabe erfasst sind, überschrieben werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationEnded">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationEnded (bool cancel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationEnded(bool cancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.OnManipulationEnded(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cancel">
          <see langword="true" />zum Abbrechen der Aktion; andernfalls <see langword="false" />.</param>
        <summary>Wird aufgerufen, wenn eine Änderung beendet wurde.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnManipulationStarted">
      <MemberSignature Language="C#" Value="protected virtual void OnManipulationStarted ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnManipulationStarted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.OnManipulationStarted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn eine Manipulation gestartet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Windows.Input.TouchDevice.OnManipulationStarted%2A> Methode hat keine Standardimplementierung. Sie können überschrieben werden, in einer abgeleiteten Klasse für alle Aktionen, die erforderlich sind, wenn Touch Manipulation gestartet wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportDown">
      <MemberSignature Language="C#" Value="protected bool ReportDown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ReportDown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.ReportDown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, dass eine Fingereingabe auf einem Element gedrückt wird.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="E:System.Windows.UIElement.TouchDown" /> Ereignis behandelt wurde andernfalls, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben <xref:System.Windows.Input.TouchDevice> sollten diese Methode zum Auslösen von Aufrufen der <xref:System.Windows.UIElement.TouchDown> Ereignis. Ein <xref:System.Windows.UIElement.TouchEnter> Ereignis wird ausgelöst, bevor die <xref:System.Windows.UIElement.TouchDown> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportMove">
      <MemberSignature Language="C#" Value="protected bool ReportMove ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ReportMove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.ReportMove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, dass eine Fingereingabe auf ein Element verschoben werden.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="E:System.Windows.UIElement.TouchMove" /> Ereignis behandelt wurde andernfalls, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben <xref:System.Windows.Input.TouchDevice> sollten diese Methode zum Auslösen von Aufrufen der <xref:System.Windows.UIElement.TouchMove> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportUp">
      <MemberSignature Language="C#" Value="protected bool ReportUp ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool ReportUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.ReportUp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt an, dass eine Fingereingabe aus einem Element beendet wurde.</summary>
        <returns>
          <see langword="true" />Wenn die <see cref="E:System.Windows.UIElement.TouchUp" /> Ereignis behandelt wurde andernfalls, <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klassen, die von erben <xref:System.Windows.Input.TouchDevice> sollten diese Methode zum Auslösen von Aufrufen der <xref:System.Windows.UIElement.TouchUp> Ereignis. Ein <xref:System.Windows.UIElement.TouchLeave> Ereignis wird ausgelöst, nachdem die <xref:System.Windows.UIElement.TouchUp> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActiveSource">
      <MemberSignature Language="C#" Value="protected void SetActiveSource (System.Windows.PresentationSource activeSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetActiveSource(class System.Windows.PresentationSource activeSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.SetActiveSource(System.Windows.PresentationSource)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activeSource" Type="System.Windows.PresentationSource" />
      </Parameters>
      <Docs>
        <param name="activeSource">Die Quelle, die Berichte geben Sie für dieses Gerät.</param>
        <summary>Legt die <see cref="T:System.Windows.PresentationSource" /> , die Eingabe für dieses Gerät meldet.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public void Synchronize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Synchronize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.Synchronize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erzwingt, dass die <see cref="T:System.Windows.Input.TouchDevice" /> zum Synchronisieren die Benutzeroberfläche mit der zugrunde liegenden Punkte berühren.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Synchronisieren die Benutzeroberfläche mit den zugrunde liegenden Touch Positionen möglicherweise <xref:System.Windows.UIElement.TouchMove> Ereignisse ausgelöst werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.IManipulator.GetPosition">
      <MemberSignature Language="C#" Value="System.Windows.Point IManipulator.GetPosition (System.Windows.IInputElement relativeTo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Windows.Point System.Windows.Input.IManipulator.GetPosition(class System.Windows.IInputElement relativeTo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#GetPosition(System.Windows.IInputElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relativeTo" Type="System.Windows.IInputElement" />
      </Parameters>
      <Docs>
        <param name="relativeTo">Das Element, das als Referenzrahmen zum Berechnen der Position des verwenden die <see cref="T:System.Windows.Input.IManipulator" />.</param>
        <summary>Gibt die Position der <see cref="T:System.Windows.Input.IManipulator" /> Objekt.</summary>
        <returns>Die Position der <see cref="T:System.Windows.Input.IManipulator" /> Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.TouchDevice>-Instanz in eine <xref:System.Windows.Input.IManipulator>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.IManipulator.Id">
      <MemberSignature Language="C#" Value="int System.Windows.Input.IManipulator.Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Windows.Input.IManipulator.Id" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den eindeutigen Bezeichner von die <see cref="T:System.Windows.Input.TouchDevice" /> wie vom Betriebssystem bereitgestellt.</summary>
        <value>Der eindeutige Bezeichner der <see cref="T:System.Windows.Input.TouchDevice" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.TouchDevice>-Instanz in eine <xref:System.Windows.Input.IManipulator>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Input.IManipulator.ManipulationEnded">
      <MemberSignature Language="C#" Value="void IManipulator.ManipulationEnded (bool cancel);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Input.IManipulator.ManipulationEnded(bool cancel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.TouchDevice.System#Windows#Input#IManipulator#ManipulationEnded(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="cancel">
          <see langword="true" />zum Abbrechen der Aktion; andernfalls <see langword="false" />.</param>
        <summary>Tritt auf, wenn eine Änderung beendet wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Windows.Input.TouchDevice>-Instanz in eine <xref:System.Windows.Input.IManipulator>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.IInputElement Target { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement Target" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.TouchDevice.Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das Element, Eingaben von empfängt, den <see cref="T:System.Windows.Input.TouchDevice" />.</summary>
        <value>Das Element, Eingaben von empfängt, den <see cref="T:System.Windows.Input.TouchDevice" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Updated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.TouchDevice.Updated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn eine Touch-Nachricht gesendet wird.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
