<Type Name="SettingsProvider" FullName="System.Configuration.SettingsProvider">
  <TypeSignature Language="C#" Value="public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SettingsProvider extends System.Configuration.Provider.ProviderBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.SettingsProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Provider.ProviderBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Fungiert als Basisklasse für benutzerdefinierte Einstellungsanbieter in die Architektur der Anwendungseinstellungen ableiten.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Einstellungsanbieter definiert den Mechanismus zum Speichern von Konfigurationsdaten in die Architektur der Anwendungseinstellungen verwendet. .NET Framework enthält einen einzelnen Standardeinstellungsanbieter <xref:System.Configuration.LocalFileSettingsProvider>, der Konfigurationsdaten im lokalen Dateisystem gespeichert. Allerdings können Sie alternative Speichermechanismen erstellen, durch das Ableiten von der abstrakten <xref:System.Configuration.SettingsProvider> Klasse. Anbieter, eine Wrapperklasse verwendet, werden, indem die Wrapperklasse mit richtet die <xref:System.Configuration.SettingsProviderAttribute>. Wenn dieses Attribut nicht standardmäßig angegeben ist, <xref:System.Configuration.LocalFileSettingsProvider>, verwendet wird.  
  
 Wenn Sie mindestens einen benutzerdefinierten Einstellungsanbieter erstellen, müssen Sie angeben, dass Implementierungen für die drei Methoden dieser Klasse: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>, <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> und <xref:System.Configuration.SettingsProvider.ApplicationName%2A>.  
  
 Bei Clientanwendungen, können Sie mehr standardisierte Funktionalität zu einem benutzerdefinierten Anbieter hinzufügen, indem Sie zusätzliche implementieren die <xref:System.Configuration.IApplicationSettingsProvider> Schnittstelle. Diese Schnittstelle spiegelt Methoden in der <xref:System.Configuration.ApplicationSettingsBase> Klasse, die hauptsächlich versionsunterstützung ermöglicht.  
  
 Entwerfen Sie in der Regel Einstellungsanbieter werden Einzelinstanz-Speicher-Ressourcenkonflikte zu vermeiden. Anbieter sollten auch threadsicher sein, da sie gleichzeitig von mehreren Wrapper-Instanzen in einer einzelnen Anwendungsdomäne oder aus mehreren Anwendungen in unterschiedlichen Domänen aufgerufen werden können.  
  
 Ein Einstellungsanbieter muss mindestens drei Attribute erkennen –<xref:System.Configuration.ApplicationScopedSettingAttribute>, <xref:System.Configuration.UserScopedSettingAttribute>, und <xref:System.Configuration.DefaultSettingValueAttribute>. Eine vollständige Liste der Attribute, die auf Anwendungseinstellungen angewendet werden können, finden Sie unter [Application Settings Attributes](~/docs/framework/winforms/advanced/application-settings-attributes.md). Ein benutzerdefinierte Einstellungsanbieter sollten Attribute auf folgende Weise Einstellungseigenschaften angewendet werden aufgelöst:  
  
1.  Wenn der Anbieter die vom Attribut implizierte Anforderung erfüllen kann, sollten offensichtlich sie dies tun.  
  
2.  Wenn der Anbieter die Anforderung nicht erfüllen kann, sollte er sie ignorieren.  
  
3.  Wenn zwei oder mehr Eigenschaften einen Konflikt verursacht werden; Angenommen, eine Eigenschaft, die mit beiden ergänzt wird <xref:System.Configuration.ApplicationScopedSettingAttribute> und <xref:System.Configuration.UserScopedSettingAttribute>; der Anbieter sollte Auslösen einer <xref:System.Configuration.ConfigurationException>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SettingsProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine Instanz der <see cref="T:System.Configuration.SettingsProvider" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist dieser geschützten Standardkonstruktor für diese abstrakte Klasse. Abgeleitete benutzerdefinierte Einstellungsanbieter müssen keine expliziten Konstruktor bereitstellen, da die <xref:System.Configuration.Provider.ProviderBase.Initialize%2A> Methode führt normalerweise alle Initialisierung.  
  
 Clientcode ist in der Regel nicht direkt einen Einstellungsanbieter instanziiert werden. Stattdessen verwenden Sie das folgende Verfahren einen Einstellungsanbieter für eine bestimmte Einstellungseigenschaft finden:  
  
1.  Rufen Sie die <xref:System.ComponentModel.Component.GetService%2A> Methode mit dem aktuellen <xref:System.ComponentModel.Component> oder <xref:System.ComponentModel.ISite> zum Zurückgeben eines Verweises auf den aktuellen <xref:System.Configuration.ISettingsProviderService>.  
  
2.  Rufen Sie die <xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A> Methode der <xref:System.Configuration.ISettingsProviderService> im ersten Schritt den Einstellungsanbieter zurückzugebenden abgerufen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public abstract string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.SettingsProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Namen der aktuell ausgeführten Anwendung fest.</summary>
        <value>Ein <see cref="T:System.String" /> , enthält die Anwendung verkürzten Namen, die keinen vollständigen Pfad oder eine Erweiterung, z. B., <c>SimpleAppSettings</c>.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.SettingsProvider.ApplicationName%2A> und <xref:System.Configuration.Provider.ProviderBase.Name%2A> Eigenschaften – Hilfe zur auf um entsprechend benannten Festlegen von Eigenschaften in verschiedenen Anwendungen zu unterscheiden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Configuration.SettingsPropertyValueCollection GetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SettingsPropertyValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" /> , beschreibt die Anwendungsverwendung der aktuellen.</param>
        <param name="collection">Ein <see cref="T:System.Configuration.SettingsPropertyCollection" /> , enthält die Einstellungsgruppe für die Eigenschaft, deren Werte abgerufen werden sollen.</param>
        <summary>Gibt die Auflistung der Einstellungen für die angegebene Instanz und-Einstellungen Eigenschaft Anwendungsgruppe zurück.</summary>
        <returns>Ein <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> mit den Werten für die angegebene Eigenschaft Einstellungsgruppe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A> Methode muss implementiert werden, um spezielle Einstellungen zu behandeln, die mit markierten <xref:System.Configuration.SpecialSettingAttribute>sowie Anwendungs- und benutzereinstellungen abstimmen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPropertyValues">
      <MemberSignature Language="C#" Value="public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPropertyValues(class System.Configuration.SettingsContext context, class System.Configuration.SettingsPropertyValueCollection collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Configuration.SettingsContext" />
        <Parameter Name="collection" Type="System.Configuration.SettingsPropertyValueCollection" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.Configuration.SettingsContext" /> , beschreibt die Anwendungsverwendung der aktuellen.</param>
        <param name="collection">Ein <see cref="T:System.Configuration.SettingsPropertyValueCollection" /> , das die Gruppe der eigenschafteneinstellungen festzulegende darstellt.</param>
        <summary>Legt die Werte der angegebenen Gruppe von Einstellungen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Configuration.ApplicationSettingsBase>enthält die <xref:System.Configuration.ApplicationSettingsBase.Save%2A> -Methode, die aufgerufen wird, um die Werte aller Einstellungseigenschaften beizubehalten. Diese Methode durchläuft alle Einstellungen Anbieter zugeordnete seine Eigenschaften und Aufrufe der <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> Methode für die einzelnen <xref:System.Configuration.SettingsProvider> zum Ausführen des Vorgangs für die Serialisierung.  
  
 Die <xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> Methode sollte unter Berücksichtigung von Sicherheitsaspekten implementiert werden:  
  
-   Nur vollständig vertrauenswürdiger Code zugelassen werden sollte, um Anwendungseinstellungen zu aktualisieren. Teilweise vertrauenswürdiger Code zugelassen werden sollte, um nur Benutzeranwendungseinstellungen zu aktualisieren. Nicht vertrauenswürdiger Code ist in der Regel beim Aktualisieren der Anwendungseinstellungen für die nicht zulässig.  
  
-   Kontingente sollten zum Schutz gegen Angriffe Ressource durch teilweise vertrauenswürdigen Anwendungen berücksichtigt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
