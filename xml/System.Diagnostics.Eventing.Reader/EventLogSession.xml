<Type Name="EventLogSession" FullName="System.Diagnostics.Eventing.Reader.EventLogSession">
  <TypeSignature Language="C#" Value="public class EventLogSession : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogSession extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogSession" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Verwendet, um den Ereignisprotokolldienst auf dem lokalen Computer oder einem Remotecomputer zugreifen, so können Sie verwalten und Sammeln von Informationen über die Ereignisprotokolle und Ereignisanbieter auf dem Computer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [How To: Abfrage nach Ereignissen](http://msdn.microsoft.com/en-us/5231a436-4cf2-4539-90d2-a04813aba069), [wie: Abrufen von Informationen über ein Ereignisherausgeber](http://msdn.microsoft.com/en-us/2a3e897f-25a9-4dad-8541-171ac49970a3) oder [Vorgehensweise: Konfigurieren und lesen die Ereignisprotokolleigenschaften](http://msdn.microsoft.com/en-us/2d2b00b3-2d1d-4567-a47e-3f5a7c1955ac).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> Objekt, stellt eine Verbindung mit dem lokalen Ereignisprotokolldienst her.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogSession (string server);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string server) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="server" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="server">Der Name des Computers, auf dem eine Verbindung mit dem Ereignisprotokolldienst hergestellt werden soll.</param>
        <summary>Initialisiert eine neue <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> -Objekt und stellt eine Verbindung mit dem Ereignisprotokolldienst auf dem angegebenen Computer her. Die Anmeldeinformationen (Benutzername und Kennwort) des Benutzers, der die Methode aufgerufen wird für die Anmeldeinformationen verwendet, auf den Remotecomputer zuzugreifen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogSession (string server, string domain, string user, System.Security.SecureString password, System.Diagnostics.Eventing.Reader.SessionAuthentication logOnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string server, string domain, string user, class System.Security.SecureString password, valuetype System.Diagnostics.Eventing.Reader.SessionAuthentication logOnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="server" Type="System.String" />
        <Parameter Name="domain" Type="System.String" />
        <Parameter Name="user" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="logOnType" Type="System.Diagnostics.Eventing.Reader.SessionAuthentication" />
      </Parameters>
      <Docs>
        <param name="server">Der Name des Computers, auf dem eine Verbindung mit dem Ereignisprotokolldienst hergestellt werden soll.</param>
        <param name="domain">Die Domäne des angegebenen Benutzers.</param>
        <param name="user">Der Benutzername, der für die Verbindung mit dem Remotecomputer verwendet wird.</param>
        <param name="password">Das Kennwort für die Verbindung mit dem Remotecomputer verwendet wird.</param>
        <param name="logOnType">Der Typ der Verbindung, die für die Verbindung mit dem Remotecomputer verwenden.</param>
        <summary>Initialisiert eine neue <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> -Objekt und stellt eine Verbindung mit dem Ereignisprotokolldienst auf dem angegebenen Computer her. Die angegebenen Anmeldeinformationen (Benutzername und Kennwort) werden für die Anmeldeinformationen verwendet, auf den Remotecomputer zuzugreifen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelCurrentOperations">
      <MemberSignature Language="C#" Value="public void CancelCurrentOperations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelCurrentOperations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht alle Vorgänge (z. B. ein Ereignisprotokoll lesen oder in ein Ereignisprotokoll abonnieren), die für den Ereignisprotokolldienst derzeit aktiv sind, denen mit diesem Sitzungsobjekt verbunden ist.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearLog">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Löscht Ereignisse aus dem angegebenen Ereignisprotokoll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [Vorgehensweise: exportieren, archivieren und Löschen von Ereignisprotokollen](http://msdn.microsoft.com/en-us/7753ff87-f402-41ac-ac64-767e04dd1773).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearLog">
      <MemberSignature Language="C#" Value="public void ClearLog (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearLog(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Der Name des Ereignisprotokolls, deaktivieren Sie alle Ereignisse aus.</param>
        <summary>Löscht Ereignisse aus dem angegebenen Ereignisprotokoll.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [Vorgehensweise: exportieren, archivieren und Löschen von Ereignisprotokollen](http://msdn.microsoft.com/en-us/7753ff87-f402-41ac-ac64-767e04dd1773).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearLog">
      <MemberSignature Language="C#" Value="public void ClearLog (string logName, string backupPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearLog(string logName, string backupPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="backupPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Der Name des Ereignisprotokolls, deaktivieren Sie alle Ereignisse aus.</param>
        <param name="backupPath">Der Pfad zur Datei, in der die gelöschten Ereignisse gespeichert werden. Die Datei sollte in EVTX beendet werden.</param>
        <summary>Löscht Ereignisse aus dem angegebenen Ereignisprotokoll und speichert die gelöschten Ereignisse in der angegebenen Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [Vorgehensweise: exportieren, archivieren und Löschen von Ereignisprotokollen](http://msdn.microsoft.com/en-us/7753ff87-f402-41ac-ac64-767e04dd1773).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle von diesem Objekt verwendeten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
        <summary>Die von diesem Objekt verwendeten nicht verwalteten Ressourcen frei, und optional die verwalteten Ressourcen frei.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportLog">
      <MemberSignature Language="C#" Value="public void ExportLog (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportLog(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="targetFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolls, aus dem Ereignisse exportiert werden sollen, oder der Pfad zu der Ereignisprotokolldatei, aus der Ereignisse exportiert werden sollen.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <param name="query">Die Abfrage, die zum Auswählen der zu exportierenden Ereignisse verwendet wird.  Nur die von dieser Abfrage zurückgegebenen Ereignisse werden exportiert.</param>
        <param name="targetFilePath">Der Pfad zu der Protokolldatei (mit der Dateiendung EVTX), in der die exportierten Ereignisse gespeichert werden, nachdem diese Methode ausgeführt wurde.</param>
        <summary>Exportiert Ereignisse in eine externe Protokolldatei an. Die Ereignisse werden ohne die ereignismeldungen gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportLog">
      <MemberSignature Language="C#" Value="public void ExportLog (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportLog(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="targetFilePath" Type="System.String" />
        <Parameter Name="tolerateQueryErrors" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolls, aus dem Ereignisse exportiert werden sollen, oder der Pfad zu der Ereignisprotokolldatei, aus der Ereignisse exportiert werden sollen.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <param name="query">Die Abfrage, die zum Auswählen der zu exportierenden Ereignisse verwendet wird. Nur die von dieser Abfrage zurückgegebenen Ereignisse werden exportiert.</param>
        <param name="targetFilePath">Der Pfad zu der Protokolldatei (mit der Dateiendung EVTX), in der die exportierten Ereignisse gespeichert werden, nachdem diese Methode ausgeführt wurde.</param>
        <param name="tolerateQueryErrors">
          <see langword="true" /> gibt an, dass die Methode weiterhin Ereignisse exportiert, auch wenn bei der angegebenen Abfrage bei einigen Protokollen ein Fehler auftritt, und <see langword="false" /> gibt an, dass die Methode nicht fortgesetzt wird, wenn bei der angegebenen Abfrage ein Fehler auftritt.</param>
        <summary>Exportiert Ereignisse in eine externe Protokolldatei an. Es kann ein Flag gesetzt werden, um anzugeben, dass die Methode weiterhin Ereignisse exportiert, auch wenn bei der angegebenen Abfrage bei einigen Protokollen ein Fehler auftritt. Die Ereignisse werden ohne die ereignismeldungen gespeichert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportLogAndMessages">
      <MemberSignature Language="C#" Value="public void ExportLogAndMessages (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportLogAndMessages(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="targetFilePath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolls, aus dem Ereignisse exportiert werden sollen, oder der Pfad zu der Ereignisprotokolldatei, aus der Ereignisse exportiert werden sollen.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <param name="query">Die Abfrage, die zum Auswählen der zu exportierenden Ereignisse verwendet wird.  Nur die von dieser Abfrage zurückgegebenen Ereignisse werden exportiert.</param>
        <param name="targetFilePath">Der Pfad zu der Protokolldatei (mit der Dateiendung EVTX), in der die exportierten Ereignisse gespeichert werden, nachdem diese Methode ausgeführt wurde.</param>
        <summary>Exportiert Ereignisse und die zugehörigen Meldungen in eine externe Protokolldatei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ereignisnachrichten werden in der Standardsprache exportiert.  
  
   
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [Vorgehensweise: exportieren, archivieren und Löschen von Ereignisprotokollen](https://msdn.microsoft.com/library/bb671203.aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportLogAndMessages">
      <MemberSignature Language="C#" Value="public void ExportLogAndMessages (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors, System.Globalization.CultureInfo targetCultureInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExportLogAndMessages(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query, string targetFilePath, bool tolerateQueryErrors, class System.Globalization.CultureInfo targetCultureInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="targetFilePath" Type="System.String" />
        <Parameter Name="tolerateQueryErrors" Type="System.Boolean" />
        <Parameter Name="targetCultureInfo" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolls, aus dem Ereignisse exportiert werden sollen, oder der Pfad zu der Ereignisprotokolldatei, aus der Ereignisse exportiert werden sollen.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <param name="query">Die Abfrage, die zum Auswählen der zu exportierenden Ereignisse verwendet wird.  Nur die von dieser Abfrage zurückgegebenen Ereignisse werden exportiert.</param>
        <param name="targetFilePath">Der Pfad zu der Protokolldatei (mit der Dateiendung EVTX), in der die exportierten Ereignisse gespeichert werden, nachdem diese Methode ausgeführt wurde.</param>
        <param name="tolerateQueryErrors">
          <see langword="true" /> gibt an, dass die Methode weiterhin Ereignisse exportiert, auch wenn bei der angegebenen Abfrage bei einigen Protokollen ein Fehler auftritt, und <see langword="false" /> gibt an, dass die Methode nicht fortgesetzt wird, wenn bei der angegebenen Abfrage ein Fehler auftritt.</param>
        <param name="targetCultureInfo">Die Kultur, die angibt, in welcher Sprache die Ereignismeldungen exportiert werden.</param>
        <summary>Exportiert Ereignisse und die zugehörigen Meldungen in eine externe Protokolldatei. Es kann ein Flag gesetzt werden, um anzugeben, dass die Methode weiterhin Ereignisse exportiert, auch wenn bei der angegebenen Abfrage bei einigen Protokollen ein Fehler auftritt. Die Ereignismeldungen werden in der angegebenen Sprache exportiert.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [Vorgehensweise: exportieren, archivieren und Löschen von Ereignisprotokollen](https://msdn.microsoft.com/library/bb671203.aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogInformation">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Eventing.Reader.EventLogInformation GetLogInformation (string logName, System.Diagnostics.Eventing.Reader.PathType pathType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Diagnostics.Eventing.Reader.EventLogInformation GetLogInformation(string logName, valuetype System.Diagnostics.Eventing.Reader.PathType pathType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventLogInformation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
      </Parameters>
      <Docs>
        <param name="logName">Der Name, der das Ereignisprotokoll zu dem Informationen abgerufen oder der Pfad zur Datei Ereignisprotokoll zu dem Informationen abgerufen werden soll.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <summary>Ruft ein Objekt, das zur Laufzeit für das angegebene Ereignisprotokoll enthält.</summary>
        <returns>Gibt ein <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> -Objekt, das Informationen über das angegebene Protokoll enthält.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogNames">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; GetLogNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetLogNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine aufzählbare Auflistung von die Ereignisprotokoll-Namen, die mit dem Ereignisprotokolldienst registriert sind.</summary>
        <returns>Gibt eine aufzählbare Auflistung von Zeichenfolgen, die das Ereignisprotokollnamen enthalten.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProviderNames">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;string&gt; GetProviderNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;string&gt; GetProviderNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft eine aufzählbare Auflistung von alle Ereignis-Anbieternamen, die mit dem Ereignisprotokolldienst registriert sind. Ein Ereignisanbieter ist eine Anwendung, die Ereignisse in ein Ereignisprotokoll veröffentlicht.</summary>
        <returns>Gibt eine aufzählbare Auflistung von Zeichenfolgen, die die Anbieter Ereignisnamen enthalten.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalSession">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Eventing.Reader.EventLogSession GlobalSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.Eventing.Reader.EventLogSession GlobalSession" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventLogSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ein statische vordefinierten Sitzungsobjekt, das mit dem Ereignisprotokolldienst auf dem lokalen Computer verbunden ist.</summary>
        <value>Gibt ein <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> -Objekt, das eine vordefinierte Sitzungsobjekt ist, mit dem Ereignisprotokolldienst auf dem lokalen Computer verbunden ist.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
