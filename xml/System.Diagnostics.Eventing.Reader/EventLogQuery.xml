<Type Name="EventLogQuery" FullName="System.Diagnostics.Eventing.Reader.EventLogQuery">
  <TypeSignature Language="C#" Value="public class EventLogQuery" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLogQuery extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Eventing.Reader.EventLogQuery" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Abfrage nach den Ereignissen in ein Ereignisprotokoll und die Einstellungen, die definieren, wie die Abfrage ausgeführt wird und auf welchem Computer, auf die Abfrage ausgeführt wird.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Z. B. Code mit dieser Klasse finden Sie unter [How To: Abfrage nach Ereignissen](http://msdn.microsoft.com/en-us/5231a436-4cf2-4539-90d2-a04813aba069) oder [How To: Zugriff und Informationen zum Lesen von Ereignis](http://msdn.microsoft.com/en-us/14db3375-d305-49ae-aa24-aedbe906e76c).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogQuery (string path, System.Diagnostics.Eventing.Reader.PathType pathType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolldatei der Abfrage oder den Pfad zu der Ereignisprotokolldatei Abfrage.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> Klasse, indem Sie das Ziel der Abfrage angeben. Das Ziel kann eine aktive Ereignisprotokoll oder eine Protokolldatei sein.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLogQuery (string path, System.Diagnostics.Eventing.Reader.PathType pathType, string query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype System.Diagnostics.Eventing.Reader.PathType pathType, string query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathType" Type="System.Diagnostics.Eventing.Reader.PathType" />
        <Parameter Name="query" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Der Name des Ereignisprotokolldatei der Abfrage oder den Pfad zu der Ereignisprotokolldatei Abfrage.</param>
        <param name="pathType">Gibt an, ob die im Pfadparameter verwendete Zeichenfolge den Namen eines Ereignisprotokolls oder den Pfad zu einer Ereignisprotokolldatei angibt.</param>
        <param name="query">Die Ereignisabfrage verwendet, um Ereignisse abzurufen, die die Bedingungen der Abfrage entsprechen.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> Klasse, indem Sie das Ziel der Abfrage und die Ereignisabfrage angeben. Das Ziel kann eine aktive Ereignisprotokoll oder eine Protokolldatei sein.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseDirection">
      <MemberSignature Language="C#" Value="public bool ReverseDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReverseDirection" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den booleschen Wert, der bestimmt, ob das neueste Ereignis im Ereignisprotokoll das älteste Ereignis im Protokoll gelesen wird.</summary>
        <value>Gibt <see langword="true" /> Wenn Ereignisse für das älteste Ereignis, und gibt das neueste Ereignis im Protokoll gelesen werden <see langword="false" /> Wenn das älteste Ereignis im Protokoll das neueste Ereignis gelesen werden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Standardwert ist `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Diagnostics.Eventing.Reader.EventLogSession Session { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.Eventing.Reader.EventLogSession Session" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Eventing.Reader.EventLogSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Abrufen oder festlegen die Sitzung, die dem Ereignisprotokolldienst auf dem lokalen Computer oder einem Remotecomputer zugreifen. Dieses Objekt kann festgelegt werden, auf ein Remoteereignisprotokoll durch das Erstellen einer <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> Objekt oder ein <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> Objekt mit dieser <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> Objekt.</summary>
        <value>Gibt ein <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> Objekt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TolerateQueryErrors">
      <MemberSignature Language="C#" Value="public bool TolerateQueryErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TolerateQueryErrors" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen booleschen Wert, der bestimmt, ob diese Abfrage fortgesetzt wird, zum Abrufen der Ereignisse aus, wenn die Abfrage einen Fehler aufweist.</summary>
        <value>
          <see langword="true" />Gibt an, dass die Abfrage Ereignisse abzurufen weiterhin, auch wenn einige Protokolle, die Abfrage fehlschlägt und <see langword="false" /> gibt an, dass diese Abfrage nicht fortgesetzt wird, zum Abrufen der Ereignisse aus, wenn die Abfrage schlägt fehl.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
