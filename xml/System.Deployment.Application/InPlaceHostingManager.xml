<Type Name="InPlaceHostingManager" FullName="System.Deployment.Application.InPlaceHostingManager">
  <TypeSignature Language="C#" Value="public class InPlaceHostingManager : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InPlaceHostingManager extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Deployment.Application.InPlaceHostingManager" />
  <AssemblyInfo>
    <AssemblyName>System.Deployment</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Installieren oder Aktualisieren einer ClickOnce-Bereitstellung auf einem Computer.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können <xref:System.Deployment.Application.InPlaceHostingManager> zum Schreiben von Programmen die Installation [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendungen programmgesteuert. Beispielsweise können Sie diese Klasse in einer kontrollierten System Management-softwareumgebung (SMS) oder in Situationen, in dem Sie eine komplexe Installation benötigen, die eine Anzahl von Vorgängen von vor bzw. nach der Installation auf dem lokalen Computer ausführt. Im Allgemeinen sollten Sie die Member dieser Klasse in einer bestimmten Reihenfolge zu verwenden:  
  
1.  Erstellen Sie eine neue Instanz von <xref:System.Deployment.Application.InPlaceHostingManager>.  
  
2.  Laden Sie das Bereitstellungsmanifest herunter, indem <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A>.  
  
3.  Überprüfen Sie, die die Anwendung mit den entsprechenden Berechtigungen ausgeführt werden kann <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>.  
  
4.  Herunterladen und installieren Sie die Anwendung mit <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>.  
  
-   Wenn Sie eines dieser Parameter außerhalb der Reihenfolge aufrufen, werden diese eine Ausnahme ausgelöst.  
  
 <xref:System.Deployment.Application.InPlaceHostingManager>Installieren einer [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung, aber nicht ausgeführt werden kann. Einige Methoden in dieser Klasse, z. B. <xref:System.Deployment.Application.InPlaceHostingManager.Execute%2A>, für die Verwendung reserviert sind, wenn eine Windows Presentation Foundation-basierte Anwendung herunterladen, die in einem Webbrowser ausgeführt wird.  
  
 Mit <xref:System.Deployment.Application.InPlaceHostingManager> zum Herunterladen und Installieren von Anwendungen, Sie müssen sicherstellen, dass das Zertifikat zum Signieren der [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendungen, die Sie installieren möchten, ist bereits als vertrauenswürdiger Herausgeber auf Clientcomputern installiert. Weitere Informationen zu vertrauenswürdigen Herausgebern finden Sie unter [Trusted Application Deployment Overview](http://msdn.microsoft.com/library/b24a1702-8fbe-45b1-87a0-9618a0708f1d).  
  
> [!NOTE]
>  Es besteht derzeit eine Produkt-Einschränkung, die verhindert, dass <xref:System.Deployment.Application.InPlaceHostingManager> ordnungsgemäß funktioniert, wenn Sie dem Code mit Debuggen [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)]. Wenn beim Debuggen einer Anwendung in [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)] verwenden Sie die F5-Taste, das Beispiel unverständliche Ausnahmen auslösen, beim Aufrufen von <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>. So debuggen Sie mit [!INCLUDE[vsprvs](~/includes/vsprvs-md.md)], starten Sie die Anwendung ohne Debuggen, und klicken Sie dann den Debugger anfügen. Alternativ können Sie einen anderen Debugger, wie WinDbg verwenden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie <xref:System.Deployment.Application.InPlaceHostingManager> zum Installieren einer [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung programmgesteuert auf einem Clientcomputer.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#1)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InPlaceHostingManager (Uri deploymentManifest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri deploymentManifest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="deploymentManifest" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="deploymentManifest">Ein Uniform Resource Identifier (<see cref="T:System.Uri" />) zu einem [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Bereitstellungsmanifest der Anwendung.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> herunterladen und installieren die angegebene im Browser gehostete Anwendung.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird verwendet, wenn eine Windows Presentation Foundation-basierte Anwendung herunterladen, die in einem Webbrowser gehostet werden sollen. Zum Herunterladen von Windows Forms-basierten Anwendungen, die mit bereitgestellt werden [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)], verwenden Sie die <xref:System.Deployment.Application.InPlaceHostingManager.%23ctor%2A> Konstruktor mit der `launchInHostProcess` Parameter festgelegt wird, um `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="T:System.Deployment.Application.InPlaceHostingManager" />kann nur unter Windows XP oder in höheren Versionen von Windows-Betriebssystems verwendet werden.</exception>
        <exception cref="T:System.ArgumentNullException">Kann nicht übergeben <see langword="null" /> für die <paramref name="deploymentManifest" /> Argument.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deploymentManifest" />verwendet eine URI-Schema, die nicht vom unterstützt [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InPlaceHostingManager (Uri deploymentManifest, bool launchInHostProcess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri deploymentManifest, bool launchInHostProcess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.#ctor(System.Uri,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="deploymentManifest" Type="System.Uri" />
        <Parameter Name="launchInHostProcess" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deploymentManifest">Der Uniform Resource Identifier (URI) auf das Bereitstellungsmanifest der Anwendung, die installiert werden.</param>
        <param name="launchInHostProcess">Gibt an, ob diese Anwendung auf einem Host, z. B. ein Webbrowser ausgeführt wird. Legen Sie diesen Wert für eine eigenständige Anwendung auf <see langword="false" />.</param>
        <summary>Erstellt eine neue Instanz der <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> herunterladen und Installieren der angegebenen Anwendung, der eine eigenständige Windows Forms-basierten Anwendung oder einer Anwendung in einem Webbrowser gehostet sein kann.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Erstellen einer Instanz des <xref:System.Deployment.Application.InPlaceHostingManager> , mit der Sie das Herunterladen von Windows Forms-basierten Anwendungen bereitgestellt, mit [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#2)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException">
          <see cref="T:System.Deployment.Application.InPlaceHostingManager" />kann nur unter Windows XP oder in höheren Versionen von Windows-Betriebssystems verwendet werden.</exception>
        <exception cref="T:System.ArgumentNullException">Kann nicht übergeben <see langword="null" /> für die <paramref name="deploymentManifest" /> Argument.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="deploymentManifest" />verwendet eine URI-Schema, die nicht vom unterstützt [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertApplicationRequirements">
      <MemberSignature Language="C#" Value="public void AssertApplicationRequirements ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssertApplicationRequirements() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bestimmt, ob die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung verfügt über die entsprechenden Berechtigungen und plattformabhängigkeiten, auf dem lokalen Computer ausgeführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A> nach <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A> erfolgreich zurückgegeben. Sie müssen nicht aufrufen, <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A> es sei denn, Sie rufen <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>, und wird ohne Fehler zurückgegeben.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>, der es aufgerufen wird, im Text einer erfolgreichen <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted> -Ereignishandler.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn diese Methode, bevor aufgerufen wird die <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> Methode.</exception>
      </Docs>
    </Member>
    <Member MemberName="AssertApplicationRequirements">
      <MemberSignature Language="C#" Value="public void AssertApplicationRequirements (bool grantApplicationTrust);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssertApplicationRequirements(bool grantApplicationTrust) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grantApplicationTrust" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="grantApplicationTrust">Wenn <see langword="true" />, die Anwendung versucht, seine Berechtigungen auf Grad an Sicherheit zu erhöhen.</param>
        <summary>Bestimmt, ob die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung verfügt über die entsprechenden Berechtigungen und plattformabhängigkeiten, auf dem lokalen Computer ausgeführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `grantApplicationTrust` ist `true`, <xref:System.Deployment.Application.InPlaceHostingManager> gewährt die Anwendung Erweiterte Berechtigungen auf, wenn diese erforderlich sind. Dies ist nur möglich, wenn <xref:System.Deployment.Application.InPlaceHostingManager> ist in der Lage, diese Berechtigungen zu gewähren. Z. B. wenn ein [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung als Teil eines umfangreicheren Pakets installiert wird und das Installationsprogramm volle Vertrauenswürdigkeit erteilt wurde <xref:System.Deployment.Application.InPlaceHostingManager> wird in der Lage, erteilen Sie die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung volle Vertrauenswürdigkeit. Wenn `grantApplicationTrust` ist `false`, wird die Anwendung keine Berechtigungen gewährt werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.CancelAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bricht einen asynchronen Download-Vorgang ab.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt alle vom <see cref="T:System.Deployment.Application.InPlaceHostingManager" /> verwendeten Ressourcen frei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A> auf, wenn Sie <xref:System.Deployment.Application.InPlaceHostingManager> nicht mehr benötigen. Die <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A>-Methode bewirkt, dass <xref:System.Deployment.Application.InPlaceHostingManager> nicht mehr verwendet werden kann. Nach dem Aufruf <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A>, müssen Sie alle Verweise auf Freigeben der <xref:System.Deployment.Application.InPlaceHostingManager> , damit der Garbage Collector den Arbeitsspeicher freigeben kann, die die <xref:System.Deployment.Application.InPlaceHostingManager> belegt wurde. Weitere Informationen finden Sie unter [Bereinigen von nicht verwalteten Ressourcen](~/docs/standard/garbage-collection/unmanaged.md) und [Implementieren einer Dispose-Methode](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Rufen Sie immer <xref:System.Deployment.Application.InPlaceHostingManager.Dispose%2A> auf, bevor Sie den letzten Verweis auf das <xref:System.Deployment.Application.InPlaceHostingManager> freigeben. Andernfalls bleiben die verwendeten Ressourcen reserviert, bis die Garbage Collection die <xref:System.Deployment.Application.InPlaceHostingManager>-Methode des `Finalize`-Objekts aufruft.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadApplicationAsync">
      <MemberSignature Language="C#" Value="public void DownloadApplicationAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DownloadApplicationAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird ein Anwendungsupdate im Hintergrund heruntergeladen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rufen Sie diese Methode nach dem Aufruf <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>, der es aufgerufen wird, am Ende einer erfolgreichen <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted> -Ereignishandler.  
  
 Die folgenden Codebeispiele wird davon ausgegangen, dass Sie bereits definiert und eine Instanz von erstellt <xref:System.Deployment.Application.InPlaceHostingManager> mit dem Namen `iphm`.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wird ausgelöst, wenn diese Methode, bevor aufgerufen wird die <see cref="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" /> und <see cref="M:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements" /> Methoden.</exception>
      </Docs>
    </Member>
    <Member MemberName="DownloadApplicationCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; DownloadApplicationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt; DownloadApplicationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.DownloadApplicationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die Anwendung vollständig auf dem lokalen Computer heruntergeladen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei der Installation einer Windows Forms-basierten Anwendung müssen Sie die Benutzer anweisen, die Anwendung selbst zu starten. Sie können nicht Windows Forms-basierte Anwendungen programmgesteuert gestartet, mit der <xref:System.Deployment.Application.InPlaceHostingManager.Execute%2A> Methode.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, einen Handler für das <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationCompleted> Ereignis.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#7)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DownloadProgressChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt; DownloadProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.DownloadProgressChangedEventArgs&gt; DownloadProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.DownloadProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.DownloadProgressChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt bei eine Änderung des Status der Herunterladen einer Anwendung oder eines Manifests.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ereignisse werden in einer Konsolenanwendung aus einem Threadpool Threads zugewiesen. Aus diesem Grund erhalten Sie möglicherweise Update Fortschrittsereignisse außerhalb der Reihenfolge, mit der ein nachfolgendes Ereignis eine Verringerung der im Vergleich zu einem vorherigen Ereignis angezeigt. Ein solches Verhalten in einer Windows Forms-basierten Anwendung wird nicht angezeigt werden, da Ereignisse in Windows Forms aus der Nachrichtenwarteschlange Thread der Benutzeroberfläche (UI) des nacheinander verarbeitet werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie beim Aktualisieren einer <xref:System.Windows.Forms.ToolStripProgressBar> enthaltenen innerhalb einer <xref:System.Windows.Forms.StatusStrip>.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#6)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Runtime.Remoting.ObjectHandle Execute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Runtime.Remoting.ObjectHandle Execute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.Execute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Startet die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] -Anwendung einsetzen möchten, nur, wenn es sich um eine Windows Presentation Foundation-basierte Anwendung, die in einem Webbrowser ausgeführt wird.</summary>
        <returns>Ein <see cref="T:System.Runtime.Remoting.ObjectHandle" /> , gestarteten Anwendung entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode gilt nur für Windows Presentation Foundation-basierten Anwendungen, die in einem Webbrowser gehostet werden können (das heißt, ihre Bereitstellungsmanifeste definieren die `hostInBrowser` XML-Element).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestAsync">
      <MemberSignature Language="C#" Value="public void GetManifestAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetManifestAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Das Bereitstellungsmanifest des Downloads der [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung im Hintergrund, und löst ein Ereignis aus, wenn der Vorgang abgeschlossen wurde oder einen Fehler aufgetreten.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellen Sie zum Empfangen der Benachrichtigung über den Abschluss dieses Ereignis einen Ereignishandler für das <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted> Ereignis. Wenn dieses Ereignis wird aufgerufen, und kein Fehler wird von <xref:System.Deployment.Application.GetManifestCompletedEventArgs>, rufen Sie als Nächstes <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A> um sicherzustellen, dass die Anwendung die Berechtigung zum Ausführen auf dem lokalen Computer hat.  
  
   
  
## Examples  
 Die folgenden Codebeispiele veranschaulichen, wie zum Aufrufen der <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A> Methode. Der Handler für das <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted> Ereignis Rückruf geprüft, wenn das manifest Download erfolgreich abgeschlossen wurde, und wenn dies der Fall ist, wird der Benutzer mit zusätzlichen Informationen über die Anwendung aufgefordert. Wenn der Benutzer zustimmt, um die Installation fortzusetzen, ruft der Handler <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>.  
  
 Die folgenden Codebeispiele wird davon ausgegangen, dass Sie bereits definiert und eine Instanz von erstellt <xref:System.Deployment.Application.InPlaceHostingManager> mit dem Namen `iphm`.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetManifestCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt; GetManifestCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Deployment.Application.GetManifestCompletedEventArgs&gt; GetManifestCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Deployment.Application.GetManifestCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn das Bereitstellungsmanifest auf dem lokalen Computer heruntergeladen wurde.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> Eigenschaft <xref:System.Deployment.Application.GetManifestCompletedEventArgs> zu überprüfen, ob <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A> wurde erfolgreich abgeschlossen oder ein Fehler zurückgegeben. Wenn <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> ist null, <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A> wurde erfolgreich abgeschlossen, und Sie können Aufrufen <xref:System.Deployment.Application.InPlaceHostingManager.AssertApplicationRequirements%2A>.  
  
   
  
## Examples  
 Die folgenden Codebeispiele veranschaulichen, wie zum Aufrufen der <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestAsync%2A> Methode. Der Handler für das <xref:System.Deployment.Application.InPlaceHostingManager.GetManifestCompleted> Ereignis Rückruf geprüft, wenn das manifest Download erfolgreich abgeschlossen wurde, und wenn dies der Fall ist, wird der Benutzer mit zusätzlichen Informationen über die Anwendung aufgefordert. Wenn der Benutzer zustimmt, um die Installation fortzusetzen, ruft der Handler <xref:System.Deployment.Application.InPlaceHostingManager.DownloadApplicationAsync%2A>.  
  
 Die folgenden Codebeispiele wird davon ausgegangen, dass Sie bereits definiert und eine Instanz von erstellt <xref:System.Deployment.Application.InPlaceHostingManager> mit dem Namen `iphm`.  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#2)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#2)]  
  
 [!code-csharp[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/CS/Form1.cs#3)]
 [!code-vb[System.Deployment.Application.InPlaceHostingManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Deployment.Application.InPlaceHostingManager/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UninstallCustomAddIn">
      <MemberSignature Language="C#" Value="public static void UninstallCustomAddIn (string subscriptionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UninstallCustomAddIn(string subscriptionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomAddIn(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">Eine Zeichenfolge, die eine Abonnement-ID, womit das Add-in enthält zu entfernen.</param>
        <summary>Entfernt eine zuvor installierte benutzerdefinierte Komponente einer Anwendung.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="subscriptionId" />ist keine gültige Abonnementidentität oder enthält keinen, einen Namen, öffentliches Schlüsseltoken Prozessorarchitektur und Versionsnummer.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="subscriptionId" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UninstallCustomUXApplication">
      <MemberSignature Language="C#" Value="public static void UninstallCustomUXApplication (string subscriptionId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UninstallCustomUXApplication(string subscriptionId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Deployment.Application.InPlaceHostingManager.UninstallCustomUXApplication(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Deployment</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subscriptionId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="subscriptionId">Eine Zeichenfolge, die eine Abonnement-ID enthält, womit die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] zu entfernenden Anwendung.</param>
        <summary>Entfernt eine [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung, enthält die &lt;CustomUX&gt; Element.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode deinstalliert eine zuvor installierte [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung, verwendet der `<customUX>` Element in der [ &lt;EntryPoint&gt; Element](http://msdn.microsoft.com/library/10ad3083-10c1-4189-a870-9bba2eab244f).  
  
 Benutzerdefinierte Installationsprogramme, die nicht für einen Software -Eintrag erstellen, führen Sie die [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] Anwendung muss gespeichert werden die Abonnement-ID finden der <xref:System.Deployment.Application.GetManifestCompletedEventArgs.SubscriptionIdentity%2A> Eigenschaft während der Installation.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
