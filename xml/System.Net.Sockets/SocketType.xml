<Type Name="SocketType" FullName="System.Net.Sockets.SocketType">
  <TypeSignature Language="C#" Value="public enum SocketType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SocketType extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.SocketType" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Gibt den Typ des Sockets an, die einer Instanz von der <see cref="T:System.Net.Sockets.Socket" /> -Klasse darstellt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Vor dem ein <xref:System.Net.Sockets.Socket> können senden und Empfangen von Daten, muss er zunächst erstellt werden mithilfe einer <xref:System.Net.Sockets.AddressFamily>, eine <xref:System.Net.Sockets.SocketType>, und ein <xref:System.Net.Sockets.ProtocolType>. Die <xref:System.Net.Sockets.SocketType> Enumeration bietet mehrere Optionen zum Definieren des Typs der <xref:System.Net.Sockets.Socket> , die Sie öffnen möchten.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.SocketType>In einigen Fällen implizit gibt an, welche <xref:System.Net.Sockets.ProtocolType> dient innerhalb einer <xref:System.Net.Sockets.AddressFamily>. Beispielsweise, wenn die <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> ist <xref:System.Net.Sockets.SocketType.Dgram?displayProperty=nameWithType>, <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> ist immer <xref:System.Net.Sockets.ProtocolType.Udp?displayProperty=nameWithType>. Wenn die <xref:System.Net.Sockets.SocketType?displayProperty=nameWithType> ist <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType>, <xref:System.Net.Sockets.ProtocolType?displayProperty=nameWithType> ist immer <xref:System.Net.Sockets.ProtocolType.Tcp?displayProperty=nameWithType>. Wenn Sie versuchen, Sie erstellen eine <xref:System.Net.Sockets.Socket> mit einer nicht kompatiblen Kombination <xref:System.Net.Sockets.Socket> löst eine <xref:System.Net.Sockets.SocketException>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird <xref:System.Net.Sockets.SocketType.Stream?displayProperty=nameWithType> als Parameter an die <xref:System.Net.Sockets.Socket> Konstruktor.  
  
 [!code-cpp[SelectModeExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/SelectModeExample/CPP/source.cpp#1)]
 [!code-csharp[SelectModeExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SelectModeExample/CS/source.cs#1)]
 [!code-vb[SelectModeExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SelectModeExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dgram">
      <MemberSignature Language="C#" Value="Dgram" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Dgram = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Dgram" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Datagramme unterstützt, die Verbindungs- und unzuverlässige Nachrichten eine feste (normalerweise klein), maximale Länge sind. Nachrichten werden möglicherweise verloren gehen oder dupliziert und möglicherweise außerhalb der Reihenfolge eintreffen. Ein <see cref="T:System.Net.Sockets.Socket" /> des Typs <see cref="F:System.Net.Sockets.SocketType.Dgram" /> erfordert keine Verbindung vor dem Senden und Empfangen von Daten und kann mit mehreren Peers kommunizieren. <see cref="F:System.Net.Sockets.SocketType.Dgram" />Das Datagram-Protokoll verwendet (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Udp" />) und die <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> Adressfamilie.</summary>
      </Docs>
    </Member>
    <Member MemberName="Raw">
      <MemberSignature Language="C#" Value="Raw" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Raw = int32(3)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Raw" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unterstützt den Zugriff auf das zugrunde liegende Transportprotokoll. Mit <see cref="F:System.Net.Sockets.SocketType.Raw" />, können Sie kommunizieren über Protokolle wie Internet Control Message Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Icmp" />) und Internet Group Management-Protokoll (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Igmp" />). Die Anwendung muss einen vollständigen IP-Header bereitstellen, beim Senden. Empfangene Datagramme zurückgeben mithilfe der Optionen und IP-Header intakt.</summary>
      </Docs>
    </Member>
    <Member MemberName="Rdm">
      <MemberSignature Language="C#" Value="Rdm" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Rdm = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Rdm" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unterstützt verbindungslos, nachrichtenorientierter, zuverlässig Nachrichten übermittelt und behält nachrichtenbegrenzungen in Daten. Der RDM (zuverlässig übermittelt Nachrichten)-Nachrichten eingehen, keine Duplikate und in Reihenfolge. Darüber hinaus wird der Absender benachrichtigt, wenn Nachrichten nicht mehr vorhanden sind. Wenn Sie initialisieren ein <see cref="T:System.Net.Sockets.Socket" /> mit <see cref="F:System.Net.Sockets.SocketType.Rdm" />, Sie benötigen nicht vor dem Senden und Empfangen von Daten eine Remotehostverbindung. Mit <see cref="F:System.Net.Sockets.SocketType.Rdm" />, Sie können mit mehreren Peers kommunizieren.</summary>
      </Docs>
    </Member>
    <Member MemberName="Seqpacket">
      <MemberSignature Language="C#" Value="Seqpacket" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Seqpacket = int32(5)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Seqpacket" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Bietet verbindungsorientierten und zuverlässige bidirektionale Übertragung von geordneten Bytestreams über ein Netzwerk an. <see cref="F:System.Net.Sockets.SocketType.Seqpacket" />nicht doppelt vorhandenen Daten, und es behält Grenzen innerhalb des Datenstromes. Ein <see cref="T:System.Net.Sockets.Socket" /> des Typs <see cref="F:System.Net.Sockets.SocketType.Seqpacket" /> kommuniziert mit einem einzigen Peer und eine Remotehostverbindung erfordert, bevor die Kommunikation beginnen kann.</summary>
      </Docs>
    </Member>
    <Member MemberName="Stream">
      <MemberSignature Language="C#" Value="Stream" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Stream = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Stream" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Unterstützt zuverlässige, bidirektionale, Verbindungsbasiert Bytestreams ohne das Duplizieren von Daten und ohne Beibehaltung von Grenzen. Ein <see cref="T:System.Net.Sockets.Socket" /> dieses Typs kommuniziert mit einem einzigen Peer und eine Remotehostverbindung erfordert, bevor die Kommunikation beginnen kann. <see cref="F:System.Net.Sockets.SocketType.Stream" />verwendet das Transmission Control Protocol (<see langword="ProtocolType" />.<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) und die <see langword="AddressFamily" />.<see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> Adressfamilie.</summary>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Net.Sockets.SocketType Unknown = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Net.Sockets.SocketType.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gibt einen unbekannten <see cref="Socket" /> Typ.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
