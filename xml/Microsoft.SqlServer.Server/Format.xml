<Type Name="Format" FullName="Microsoft.SqlServer.Server.Format">
  <TypeSignature Language="C#" Value="public enum Format" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Format extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.Format" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Verwendet von <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute" /> und <see cref="T:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute" /> das Serialisierungsformat des einen benutzerdefinierten Typ (UDT) oder ein Aggregat an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwendet von <xref:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute> und <xref:Microsoft.SqlServer.Server.SqlUserDefinedAggregateAttribute> das Serialisierungsformat des einen benutzerdefinierten Typ (UDT) oder ein Aggregat an.  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die `UserDefinedType` Attribut des Point-UDT.  Der UDT Bytereihenfolge ist, wird mit dem Namen "Point" hat eine Validierungsmethode mit dem Namen "ValidatePoint" und verwendet das systemeigene Serialisierungsformat.  
  
 [!code-csharp[DataWorks SqlUserDefinedTypeAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlUserDefinedTypeAttribute Example/CS/source.cs#1)]
 [!code-vb[DataWorks SqlUserDefinedTypeAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlUserDefinedTypeAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Native">
      <MemberSignature Language="C#" Value="Native" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format Native = int32(1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.Native" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die <see langword="Native" /> Serialisierungsformat verwendet einen sehr einfachen Algorithmus, der SQL Server ermöglicht, eine effiziente Darstellung des UDTS auf dem Datenträger zu speichern. Markierte Typen für <see langword="Native" /> Serialisierung kann nur Werttypen (Strukturen in Microsoft Visual c#) und Microsoft Visual Basic .NET als Mitglieder haben. Member von Verweistypen (z. B. Klassen in Visual c# und Visual Basic), entweder eine benutzerdefinierte oder die vorhandenen in Framework (z. B. <see cref="T:System.String" />), werden nicht unterstützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Anforderungen für dieses Format sind:  
  
-   Die `StructLayout.LayoutKindSequential` Attribut muss auf das Aggregat angewendet werden oder UDT, wenn sie in einer Klasse und nicht in einer Struktur definiert ist. Steuert das physische Layout der Datenfelder zugeordnet, es wird verwendet, um die Member sequenziell in der Reihenfolge angeordnet werden, werden diese angezeigt. SQL Server verwendet dieses Attribut, um die Feldreihenfolge für UDTs mit mehreren Feldern zu bestimmen.  
  
-   Der Typ muss mindestens ein Mitglied enthalten (serialisierte Werte darf nicht 0 (null) Bytes groß sein).  
  
-   Alle Felder des Aggregats muss *blitfähige*, d. h., sie verfügen über eine allgemeine Darstellung in verwaltetem und unverwaltetem Speicher und erfordern keine besondere Behandlung durch den Interop-Marshaller müssen.  
  
-   Alle Felder des UDT muss eines der folgenden Typen, die serialisiert werden können: `bool`, `byte`, `sbyte`, `short`, `ushort`, `int`, `uint`, `long`, `ulong`, `float` , `double`, <xref:System.Data.SqlTypes.SqlByte>, <xref:System.Data.SqlTypes.SqlInt16>, <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.SqlTypes.SqlInt64>, <xref:System.Data.SqlTypes.SqlDateTime>, <xref:System.Data.SqlTypes.SqlSingle>, <xref:System.Data.SqlTypes.SqlDouble>, <xref:System.Data.SqlTypes.SqlMoney>, oder andere Werttypen vom Benutzer definiert, die von einem der folgenden Felder enthalten Typen.  
  
-   Das Aggregat muss keinen Wert für `MaxByteSize`.  
  
-   Das Aggregat muss keine Felder [NonSerialized] haben.  
  
-   Felder dürfen nicht als explizites Layout markiert werden (<xref:System.Runtime.InteropServices.StructLayoutAttribute>).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unknown">
      <MemberSignature Language="C#" Value="Unknown" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format Unknown = int32(0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.Unknown" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Das Serialisierungsformat ist unbekannt.</summary>
      </Docs>
    </Member>
    <Member MemberName="UserDefined">
      <MemberSignature Language="C#" Value="UserDefined" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.SqlServer.Server.Format UserDefined = int32(2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.SqlServer.Server.Format.UserDefined" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.Format</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Die <see langword="UserDefined" /> Serialisierungsformat hat der Entwickler volle Kontrolle über das Binärformat über die <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" /> <see langword=".Write" /> und <see cref="T:Microsoft.SqlServer.Server.IBinarySerialize" /> <see langword=".Read" /> Methoden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Geben Sie das Aggregat muss einen Wert für `MaxByteSize`.  
  
 Geben Sie die <xref:Microsoft.SqlServer.Server.SqlUserDefinedTypeAttribute.IsByteOrdered%2A> -Attributeigenschaft. Der Standardwert ist false.  
  
 Wenn Sie ein Feld in weglassen der <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> oder <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> Methoden, die den Status dieses Felds wird nicht serialisiert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
