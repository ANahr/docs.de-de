<Type Name="FormParameter" FullName="System.Web.UI.WebControls.FormParameter">
  <TypeSignature Language="C#" Value="public class FormParameter : System.Web.UI.WebControls.Parameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FormParameter extends System.Web.UI.WebControls.Parameter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.FormParameter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Parameter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FormField")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Bindet den Wert einer HTTP-Anforderung <see cref="P:System.Web.HttpRequest.Form" /> Feld an ein Parameterobjekt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Können Sie die <xref:System.Web.UI.WebControls.FormParameter> Klasse zum Binden des Werts einer Variablen Form in der <xref:System.Web.HttpRequest.Form%2A> -Auflistung, um einen Parameter in einer parametrisierten Abfrage oder der Befehl verwendet. Steuerelemente, die Daten an den Parameter gebunden möglicherweise eine Ausnahme auslösen, wenn eine <xref:System.Web.UI.WebControls.FormParameter> angegeben ist, aber keine entsprechende Formularvariable übergeben wird. Sie können auch keine Daten angezeigt, wenn die Formularvariable ohne entsprechenden Wert übergeben wird. Legen Sie die <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> um Situationen zu vermeiden, falls zutreffend.  
  
 Die <xref:System.Web.UI.WebControls.FormParameter> Klasse bietet die <xref:System.Web.UI.WebControls.FormParameter.FormField%2A> -Eigenschaft, die den Namen der Formularvariablen zusätzlich zu den von geerbten Bindung bezeichnet den <xref:System.Web.UI.WebControls.Parameter> Klasse.  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.FormParameter> überprüft nicht den Wert von Form-Elements in keiner Weise; übergeben den unformatierten Wert verwendet. In den meisten Fällen können Sie den Wert der Überprüfen der <xref:System.Web.UI.WebControls.FormParameter> bevor sie durch ein Datenquellen-Steuerelement verwendet wird, durch die ein Ereignis, wie z. B. Behandlung der `Selecting`, `Updating`, `Inserting`, oder `Deleting` Ereignis, die von Ihnen verwendeten Datenquellen-Steuerelements verfügbar gemacht werden. Wenn der Wert des Parameters nicht Ihre Validierungstests bestanden hat, können Sie den Datenvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der zugeordneten <xref:System.ComponentModel.CancelEventArgs> Klasse `true`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Einfügen von Daten in einer Datenbank mithilfe der <xref:System.Web.UI.WebControls.SqlDataSource> -Steuerelement und einer einfachen ASP.NET Web-Seite. Die aktuellen Daten in der Tabelle werden angezeigt, der <xref:System.Web.UI.WebControls.DropDownList> Steuerelement. Sie können neue Datensätze hinzufügen, indem das Eingeben von Werten in der <xref:System.Web.UI.WebControls.TextBox> Steuerelemente und auf die Schaltfläche klicken. Wenn die Schaltfläche geklickt wird, werden die angegebenen Werte in die Datenbank eingefügt und die <xref:System.Web.UI.WebControls.DropDownList> aktualisiert wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/CS/sql24cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SqlDataSource_24sql/VB/sql24vb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue unbenannte Instanz, der die <see cref="T:System.Web.UI.WebControls.FormParameter" /> Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Web.UI.WebControls.FormParameter> Objekt erstellt, mit der <xref:System.Web.UI.WebControls.FormParameter.%23ctor%2A> Konstruktor mit Standardwerten für alle seine Eigenschaften initialisiert wird. Die <xref:System.Web.UI.WebControls.FormParameter.FormField%2A> wird mit initialisiert <xref:System.String.Empty?displayProperty=nameWithType>. Darüber hinaus die <xref:System.Web.UI.WebControls.Parameter.Name%2A> -Eigenschaft wird mit initialisiert <xref:System.String.Empty?displayProperty=nameWithType>, die <xref:System.Web.UI.WebControls.Parameter.Type%2A> -Eigenschaft wird mit initialisiert <xref:System.TypeCode?displayProperty=nameWithType>, die <xref:System.Web.UI.WebControls.Parameter.Direction%2A> -Eigenschaft wird mit initialisiert <xref:System.Data.ParameterDirection.Input>, und die <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> -Eigenschaft wird initialisiert auf Null (`Nothing` in Visual Basic).  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.FormParameter> überprüft nicht den Wert von Form-Elements in keiner Weise; übergeben den unformatierten Wert verwendet. In den meisten Fällen können Sie den Wert der Überprüfen der <xref:System.Web.UI.WebControls.FormParameter> bevor sie durch ein Datenquellen-Steuerelement verwendet wird, durch die ein Ereignis, wie z. B. Behandlung der `Selecting`, `Updating`, `Inserting`, oder `Deleting` Ereignis, die von Ihnen verwendeten Datenquellen-Steuerelements verfügbar gemacht werden. Wenn der Wert des Parameters nicht Ihre Validierungstests bestanden hat, können Sie den Datenvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der zugeordneten <xref:System.ComponentModel.CancelEventArgs> Klasse `true`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.FormParameter_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_1/CS/fp1cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.FormParameter_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_1/VB/fp1vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected FormParameter (System.Web.UI.WebControls.FormParameter original);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.WebControls.FormParameter original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.#ctor(System.Web.UI.WebControls.FormParameter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="original" Type="System.Web.UI.WebControls.FormParameter" />
      </Parameters>
      <Docs>
        <param name="original">Ein <see cref="T:System.Web.UI.WebControls.FormParameter" /> Instanz, die von die aktuelle Instanz initialisiert wird.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Web.UI.WebControls.FormParameter" /> -Klasse mit den Werten der Instanz, die gemäß der <paramref name="original" /> Parameter.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FormParameter.%23ctor%2A> Konstruktor ist ein `protected` Kopierkonstruktor verwendet, um das Klonen einer <xref:System.Web.UI.WebControls.FormParameter> Instanz. Die Werte der <xref:System.Web.UI.WebControls.FormParameter>, einschließlich <xref:System.Web.UI.WebControls.FormParameter.FormField%2A>, <xref:System.Web.UI.WebControls.Parameter.Name%2A>, und <xref:System.Web.UI.WebControls.Parameter.Type%2A> alle in der neuen Instanz übertragen werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormParameter (string name, string formField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string formField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="formField" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Parameters.</param>
        <param name="formField">Der Name der Formularvariablen, die an das Parameterobjekt gebunden ist. Die Standardeinstellung ist <see cref="F:System.String.Empty" />.</param>
        <summary>Initialisiert eine neue benannte Instanz von der <see cref="T:System.Web.UI.WebControls.FormParameter" /> -Klasse unter Verwendung der angegebenen Zeichenfolge zur Identifizierung der Variable Formularfeld zum Binden an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Web.UI.WebControls.FormParameter> Objekt erstellt, mit der <xref:System.Web.UI.WebControls.FormParameter.%23ctor%2A> Konstruktor initialisiert wird, mit dem angegebenen Parameternamen und die Zeichenfolge, die die Formularvariable identifiziert, die den Parameter gebunden wird. Die <xref:System.Web.UI.WebControls.Parameter.Type%2A> und <xref:System.Web.UI.WebControls.Parameter.Direction%2A> Eigenschaften werden mit Standardwerten initialisiert.  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.FormParameter> überprüft nicht den Wert von Form-Elements in keiner Weise; übergeben den unformatierten Wert verwendet. In den meisten Fällen können Sie den Wert der Überprüfen der <xref:System.Web.UI.WebControls.FormParameter> bevor sie durch ein Datenquellen-Steuerelement verwendet wird, durch die ein Ereignis, wie z. B. Behandlung der `Selecting`, `Updating`, `Inserting`, oder `Deleting` Ereignis, die von Ihnen verwendeten Datenquellen-Steuerelements verfügbar gemacht werden. Wenn der Wert des Parameters nicht Ihre Validierungstests bestanden hat, können Sie den Datenvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der zugeordneten <xref:System.ComponentModel.CancelEventArgs> Klasse `true`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.FormParameter_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_2/CS/fp2cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.FormParameter_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_2/VB/fp2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormParameter (string name, System.Data.DbType dbType, string formField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.Data.DbType dbType, string formField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.#ctor(System.String,System.Data.DbType,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="dbType" Type="System.Data.DbType" />
        <Parameter Name="formField" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Parameters.</param>
        <param name="dbType">Der Datenbanktyp des Parameters.</param>
        <param name="formField">Der Name der Formularvariablen, die an das Parameterobjekt gebunden ist.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Web.UI.WebControls.FormParameter" /> -Klasse unter Verwendung der angegebenen Zeichenfolge zur Identifizierung der Variable Formularfeld zum Binden an.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FormParameter (string name, TypeCode type, string formField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, valuetype System.TypeCode type, string formField) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.#ctor(System.String,System.TypeCode,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.TypeCode" />
        <Parameter Name="formField" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Parameters.</param>
        <param name="type">Der Typ, den den Parameter darstellt. Die Standardeinstellung ist <see cref="F:System.TypeCode.Object" />.</param>
        <param name="formField">Der Name der Formularvariablen, die an das Parameterobjekt gebunden ist. Die Standardeinstellung ist <see cref="F:System.String.Empty" />.</param>
        <summary>Initialisiert eine neue benannte und stark typisierte Instanz von der <see cref="T:System.Web.UI.WebControls.FormParameter" /> -Klasse unter Verwendung der angegebenen Zeichenfolge identifiziert die Formularvariable zum Binden an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Web.UI.WebControls.FormParameter> Objekt erstellt, mit der <xref:System.Web.UI.WebControls.FormParameter.%23ctor%2A> Konstruktor wird initialisiert, wobei der angegebene Parametername <xref:System.Web.UI.WebControls.Parameter.Type%2A>, und die Zeichenfolge, die die Formularvariable identifiziert, die den Parameter gebunden wird. Nur die <xref:System.Web.UI.WebControls.Parameter.Direction%2A> und <xref:System.Web.UI.WebControls.Parameter.ConvertEmptyStringToNull%2A> Eigenschaften werden mit Standardwerten initialisiert.  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.FormParameter> überprüft nicht den Wert von Form-Elements in keiner Weise; übergeben den unformatierten Wert verwendet. In den meisten Fällen können Sie den Wert der Überprüfen der <xref:System.Web.UI.WebControls.FormParameter> bevor sie durch ein Datenquellen-Steuerelement verwendet wird, durch die ein Ereignis, wie z. B. Behandlung der `Selecting`, `Updating`, `Inserting`, oder `Deleting` Ereignis, die von Ihnen verwendeten Datenquellen-Steuerelements verfügbar gemacht werden. Wenn der Wert des Parameters nicht Ihre Validierungstests bestanden hat, können Sie den Datenvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der zugeordneten <xref:System.ComponentModel.CancelEventArgs> Klasse `true`.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.FormParameter_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_3/CS/fp3cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.FormParameter_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.FormParameter_3/VB/fp3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Parameter Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Parameter Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Parameter</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein Duplikat des aktuellen <see cref="T:System.Web.UI.WebControls.FormParameter" /> Instanz.</summary>
        <returns>Ein <see cref="T:System.Web.UI.WebControls.FormParameter" /> , ist ein exaktes Duplikat der aktuellen Instanz.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FormParameter.Clone%2A> Methodenaufrufe der <xref:System.Web.UI.WebControls.FormParameter.%23ctor%2A> Copy-Konstruktor initialisiert eine neue Instanz der dem <xref:System.Web.UI.WebControls.FormParameter> -Klasse mit den Werten der aktuellen Instanz.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Evaluate">
      <MemberSignature Language="C#" Value="protected override object Evaluate (System.Web.HttpContext context, System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance object Evaluate(class System.Web.HttpContext context, class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.FormParameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="context">Die aktuelle <see cref="T:System.Web.HttpContext" /> der Anforderung.</param>
        <param name="control">Ein <see cref="T:System.Web.UI.Control" /> , die mit der Seite verknüpft ist, in dem die <see cref="T:System.Web.UI.WebControls.FormParameter" /> verwendet wird.</param>
        <summary>Aktualisiert und gibt den Wert der <see cref="T:System.Web.UI.WebControls.FormParameter" /> Objekt.</summary>
        <returns>Ein Objekt, das die aktualisierten und den aktuellen Wert des Parameters darstellt. Wenn der Kontext oder die Anforderung null ist (<see langword="Nothing" /> in Visual Basic), wird die <see cref="M:System.Web.UI.WebControls.FormParameter.Evaluate(System.Web.HttpContext,System.Web.UI.Control)" /> Methode gibt null zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FormParameter> zum Binden an die Formularvariable jedes Mal versucht die <xref:System.Web.UI.WebControls.FormParameter.Evaluate%2A> -Methode aufgerufen wird.  
  
 Die `context` Parameter wird verwendet, durch die <xref:System.Web.UI.WebControls.FormParameter.Evaluate%2A> Methode, um den Wert des angegebenen Formularfelds in der Anforderung abzurufen. Die `control` Parameter wird ignoriert.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormField">
      <MemberSignature Language="C#" Value="public string FormField { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormField" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormParameter.FormField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Namen der Formularvariablen, die den Parameter gebunden wird.</summary>
        <value>Eine Zeichenfolge, die die Formularvariable identifiziert, die der Parameter gebunden wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.FormParameter.FormField%2A> identifiziert ein Name/Wert-Paar, das übergeben wird die <xref:System.Web.HttpRequest.Form%2A> Auflistung. Während der <xref:System.Web.UI.WebControls.FormParameter.FormField%2A> Eigenschaft identifiziert den Namen des Paares, das <xref:System.Web.UI.WebControls.FormParameter> an den entsprechenden Wert zur Laufzeit gebunden. Wenn das erwartete Name/Wert-Paar für die Variable Zeichenfolge an die ASP.NET-Webseite in der Auflistung nicht übergeben wird die <xref:System.Web.UI.WebControls.FormParameter.Evaluate%2A> Methode bindet den Parameter auf den Wert von der <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> -Eigenschaft, wenn sie festgelegt ist. Wenn die <xref:System.Web.UI.WebControls.Parameter.DefaultValue%2A> nicht festgelegt ist, die <xref:System.Web.UI.WebControls.FormParameter.Evaluate%2A> Methode keine Entsprechung für den Parameter auf einen Wert zu binden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie gefilterte Daten ein <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und ein <xref:System.Web.UI.WebControls.FormParameter> zum Abrufen von Daten aus einem Geschäftsobjekt der mittleren Ebene und einem <xref:System.Web.UI.WebControls.GridView> Steuerelement zum Anzeigen der Ergebnisse.  
  
 Das Codebeispiel besteht aus einer <xref:System.Web.UI.WebControls.TextBox>, eine <xref:System.Web.UI.WebControls.GridView> -Steuerelement, die <xref:System.Web.UI.WebControls.ObjectDataSource> Steuerelement und einer Schaltfläche "Absenden". Wird standardmäßig der <xref:System.Web.UI.WebControls.TextBox> wird mit den Namen eines Northwind Traders Mitarbeiter aufgefüllt. Die <xref:System.Web.UI.WebControls.GridView> zeigt Informationen zu dem Mitarbeiter im namentlich identifiziert die <xref:System.Web.UI.WebControls.TextBox>. Um Daten auf einem anderen Mitarbeiter abzurufen, geben Sie den vollständigen Namen des Mitarbeiters in der <xref:System.Web.UI.WebControls.TextBox> , und klicken Sie auf die Schaltfläche "".  
  
 Die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> -Eigenschaft gibt einen Ausdruck zum Filtern der abgerufenen Daten, indem die <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>. Diese Eigenschaft verwendet die Platzhalter für Parameter, die auf die in enthaltenen Parameter ausgewertet werden die <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> Auflistung. In diesem Beispiel wird die Parameterplatzhalter ein <xref:System.Web.UI.WebControls.FormParameter> auf den Wert der gebundenen der <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/objds9cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/objds9vb.aspx#1)]  
  
 Im folgenden Codebeispiel wird gezeigt, der mittleren Ebene Business-Objekt, das im vorherigen Codebeispiel verwendet wird. Dieses Beispiel umfasst zwei grundlegende Klassen: die `EmployeeLogic` -Klasse kapselt die Geschäftslogik, und die `NorthwindEmployee` -Klasse ist eine Modellklasse, die nur die grundlegende Funktionen zum Laden und Beibehalten von Daten aus der Datenebene enthält. Zur Vereinfachung der `EmployeeLogic` -Klasse erstellt einen statischen Satz von Daten, anstatt Abrufen der Daten aus einer Datenebene. Es ist auch hilfreich, in diesem Beispiel, da dem Benutzer, geben Sie den vollständigen Namen eines Mitarbeiters Northwind Traders Filtern veranschaulicht das Beispiel verwendet. Ein vollständiges Beispiel arbeiten müssen Sie kompilieren und verwenden Sie diese Klassen, die ASP.NET Codebeispiele bereitgestellt.  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.FormParameter> überprüft nicht den Wert von Form-Elements in keiner Weise; übergeben den unformatierten Wert verwendet. In den meisten Fällen können Sie den Wert der Überprüfen der <xref:System.Web.UI.WebControls.FormParameter> bevor sie durch ein Datenquellen-Steuerelement verwendet wird, durch die ein Ereignis, wie z. B. Behandlung der `Selecting`, `Updating`, `Inserting`, oder `Deleting` Ereignis, die von Ihnen verwendeten Datenquellen-Steuerelements verfügbar gemacht werden. Wenn der Wert des Parameters nicht Ihre Validierungstests bestanden hat, können Sie den Datenvorgang abbrechen, indem die <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> Eigenschaft der zugeordneten <xref:System.ComponentModel.CancelEventArgs> Klasse `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/CS/northwindemployee9.cs#2)]
 [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.ObjectDataSource_9/VB/northwindemployee9.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateInput">
      <MemberSignature Language="C#" Value="public bool ValidateInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateInput" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.FormParameter.ValidateInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob der Client im Parameters Eingabe überprüft wird.</summary>
        <value>
          <see langword="true" />Wenn Clienteingabe überprüft wird; andernfalls <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
