<Type Name="LinkButton" FullName="System.Web.UI.WebControls.LinkButton">
  <TypeSignature Language="C#" Value="public class LinkButton : System.Web.UI.WebControls.WebControl, System.Web.UI.IPostBackEventHandler, System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinkButton extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IPostBackEventHandler, class System.Web.UI.WebControls.IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinkButton" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackEventHandler</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IButtonControl</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinkButtonDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.LinkButtonControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ToolboxData("&lt;{0}:LinkButton runat="server"&gt;LinkButton&lt;/{0}:LinkButton&gt;")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zeigt ein Schaltflächensteuerelement im Linkformat auf einer Webseite an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [LinkButton-Steuerelementen und Validierungsschritten](#ButtonControlsAndValidation)  
  
-   [Deklarationssyntax](#DeclarativeSyntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Verwenden der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement auf eine Schaltfläche im Linkformat auf der Webseite zu erstellen. Die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement verfügt über die gleiche Darstellung als eine <xref:System.Web.UI.WebControls.HyperLink> steuern, jedoch hat die gleiche Funktion wie ein <xref:System.Web.UI.WebControls.Button> Steuerelement. Wenn Sie möchten die Verknüpfung mit einer anderen Webseite, wenn das Steuerelement geklickt wird, können Sie verwenden die <xref:System.Web.UI.WebControls.HyperLink> Steuerelement.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement rendert JavaScript an den Clientbrowser. Der Clientbrowser muss JavaScript aktiviert für dieses Steuerelement ordnungsgemäß funktioniert haben. Weitere Informationen zu Clientskript, finden Sie unter [Clientskripts in ASP.NET Web Pages](http://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa).  
  
 Sie können eine Schaltfläche "Absenden" oder eine Befehlsschaltfläche erstellen. Eine Schaltfläche "Absenden" keinen Befehlsnamen zugeordnet. Die Schaltfläche sendet lediglich die Webseite an den Server. Wird standardmäßig ein <xref:System.Web.UI.WebControls.LinkButton> -Steuerelement ist eine Schaltfläche "Absenden". Sie können angeben, einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis programmgesteuert die Aktionen ausgeführt, wenn auf die Schaltfläche "Absenden" geklickt wird. Andererseits, eine Befehlsschaltfläche besitzt einen Befehlsnamen der Schaltfläche zugeordnet sind, z. B. `Sort`. Legen Sie die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> -Eigenschaft den Namen des Befehls an. Dies ermöglicht Ihnen die Erstellung mehrerer <xref:System.Web.UI.WebControls.LinkButton> Steuerelemente auf einer Webseite Seite und feststellen, welche programmgesteuert <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Sie können auch die <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft mit dem eine Befehlsschaltfläche, um zusätzliche Informationen über den Befehl ausführen, z. B. aufsteigende Sortierung, bereitzustellen. Sie können auch angeben, einen Ereignishandler für das <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis programmgesteuert die Aktion ausgeführt, wenn auf die Schaltfläche geklickt wird.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Text ist nicht HTML-codiert vor der Anzeige in der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Server-Validierungssteuerelemente werden ebenfalls bereitgestellt, um Benutzereingaben zu bewerten. Weitere Informationen finden Sie unter [Validation Server Control Syntax](http://msdn.microsoft.com/en-us/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
<a name="ButtonControlsAndValidation"></a>   
## <a name="linkbutton-controls-and-validation"></a>LinkButton-Steuerelementen und Validierungsschritten  
 Standardmäßig erfolgt die Validierung bei einem <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Seitenüberprüfung bestimmt, ob ein Validierungssteuerelement auf der Seite der Eingabesteuerelemente zugeordnet, die alle Validierungsregeln, die gemäß des Validierungssteuerelements übergeben. Damit die seitenüberprüfung verhindern, legen die <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> Eigenschaft `false`.  
  
<a name="DeclarativeSyntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:LinkButton  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    CommandArgument="string"  
    CommandName="string"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    OnClick="Click event handler"  
    OnClientClick="string"  
    OnCommand="Command event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnUnload="Unload event handler"  
    PostBackUrl="uri"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    ToolTip="string"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
/>  
```  
  
   
  
## Examples  
 Ist ein Visual Studio Web Site-Projekt mit Quellcode zu diesem Thema steht verfügbar: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=192872).  
  
 Im folgenden Beispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.LinkButton> Steuerelement, das in Text zeigt eine <xref:System.Web.UI.WebControls.Label> steuern, wenn auf der Link geklickt wird.  
  
 [!code-aspx-csharp[Classic LinkButton Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinkButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.LinkButton" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor erstellt und initialisiert eine neue Instanz der dem <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht das Erstellen und initialisieren eine neue Instanz der dem <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
 [!code-aspx-csharp[Classic LinkButton.LinkButton Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.LinkButton Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" /> , der den Ausgabestream zum Rendern auf dem Client enthält.</param>
        <summary>Fügt die Attribute der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement in den Ausgabestream für das Rendering auf dem Client.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.LinkButton.AddAttributesToRender%2A> Methode in einem benutzerdefinierten Serversteuerelement, damit die <xref:System.Web.UI.WebControls.LinkButton> Liste Elementtext immer fett angezeigt wird.  
  
 [!code-aspx-csharp[CustomLinkButtonAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/CS/custom_linkbutton_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomLinkButtonAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/VB/custom_linkbutton_addattributestorendervb.aspx#1)]  
[!code-csharp[CustomLinkButtonAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/CS/custom_linkbutton_addattributestorender.cs#2)]
[!code-vb[CustomLinkButtonAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddAttributesToRender/VB/custom_linkbutton_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.AddParsedSubObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein <see cref="T:System.Object" />, das das analysierte Element darstellt.</param>
        <summary>Benachrichtigt das Steuerelement, dass ein Element, XML oder HTML-Code analysiert wurde, und das Element an des Steuerelements fügt <see cref="T:System.Web.UI.ControlCollection" /> Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.LinkButton.AddParsedSubObject%2A> Methode in einem benutzerdefinierten <xref:System.Web.UI.WebControls.LinkButton> Server steuern, damit entweder die Texteigenschaft des Objekts, auf die analysierten Text-Eigenschaft festgelegt, wenn das analysierte Objekt ist ein <xref:System.Web.UI.WebControls.Literal> -Objekt, oder ein leeres Zeichenfolge, die andernfalls.  
  
 [!code-aspx-csharp[CustomLinkButtonAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/CS/custom_linkbutton_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomLinkButtonAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/VB/custom_linkbutton_addparsedsubobjectvb.aspx#1)]  
[!code-csharp[CustomLinkButtonAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/CS/custom_linkbutton_addparsedsubobject.cs#2)]
[!code-vb[CustomLinkButtonAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonAddParsedSubObject/VB/custom_linkbutton_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die Überprüfung erfolgt bei der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement geklickt wird.</summary>
        <value>
          <see langword="true" />, wenn beim Klicken auf das <see cref="T:System.Web.UI.WebControls.LinkButton" />-Steuerelement eine Validierung durchgeführt wird, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig erfolgt die Validierung bei einem <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Seitenüberprüfung bestimmt, ob ein Validierungssteuerelement auf der Seite der Eingabesteuerelemente zugeordnet, die alle Validierungsregeln, die gemäß des Validierungssteuerelements übergeben.  
  
 Können Sie angeben (oder ermitteln) gibt an, ob die Überprüfung auf dem Client und dem Server ausgeführt wird bei einem <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird, mithilfe der <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> Eigenschaft. Validierung durchgeführt werden soll, legen Sie die <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> Eigenschaft `false`.  
  
 Diese Eigenschaft ist im Allgemeinen festgelegt, um `false` für einen zurücksetzen oder Deaktivieren der Schaltfläche zu verhindern, dass die Überprüfung durchgeführt werden, wenn die Schaltfläche geklickt wird.  
  
 Bei den Wert des der <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> -Eigenschaftensatz auf `true`, können Sie auch die <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> Eigenschaft, um den Namen der Validierungsgruppe für das Angeben der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement eine Validierung.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> Eigenschaft, um zu verhindern, dass bei der Validierung verhindern. Beachten Sie, dass der <xref:System.Web.UI.WebControls.BaseValidator.Validate%2A> -Methode jedes Validierungssteuerelement unabhängig aktiviert.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[LinkButtonCausesValidation#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButtonCausesValidation/CS/linkbuttoncausesvalidationcs.aspx#1)]
 [!code-aspx-vb[LinkButtonCausesValidation#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButtonCausesValidation/VB/linkbuttoncausesvalidationvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinkButton.Click" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn auf das Steuerelement <see cref="T:System.Web.UI.WebControls.LinkButton" /> geklickt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Dieses Ereignis wird häufig verwendet, wenn Sie keine Befehlsname zugeordnet ist die <xref:System.Web.UI.WebControls.LinkButton> zu steuern, wie im Fall einer Schaltfläche "Absenden".  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis zum Anzeigen einer Meldung bei der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[Classic LinkButton Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.CommandEventHandler Command;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.CommandEventHandler Command" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinkButton.Command" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.CommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn auf das Steuerelement <see cref="T:System.Web.UI.WebControls.LinkButton" /> geklickt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Dieses Ereignis wird häufig verwendet, wenn ein Befehl wie z. B. `Sort`, zugeordnet ist die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement. Dies ermöglicht Ihnen die Erstellung mehrerer <xref:System.Web.UI.WebControls.LinkButton> Steuerelemente auf einer Webseite Seite und feststellen, welche programmgesteuert <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis wird ausgelöst, in der Steuerelementhierarchie in Form von den `BubbleEvent`.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis zum Anzeigen einer Meldung bei der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[Classic LinkButton.CommandName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.CommandName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandArgument">
      <MemberSignature Language="C#" Value="public string CommandArgument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandArgument" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CommandArgument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt ein optionales Argument, das an die <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> Ereignishandler zusammen mit den zugehörigen <see cref="P:System.Web.UI.WebControls.LinkButton.CommandName" /> Eigenschaft.</summary>
        <value>Ein optionales Argument zu übergeben, um die <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> Ereignishandler zusammen mit den zugehörigen <see cref="P:System.Web.UI.WebControls.LinkButton.CommandName" /> Eigenschaft. Der Standardwert ist <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft, um ein Argument anzugeben, die ergänzt die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> Eigenschaft.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft ist in der Regel nur verwendet, wenn die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> festgelegt wird.  
  
 Die <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> -Eigenschaft ergänzt die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> Eigenschaft, sodass Sie keine zusätzliche Informationen zu den auszuführenden Befehl bereit. Sie können z. B. Festlegen der <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> Eigenschaft, um `Sort` und legen Sie die <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft, um `Ascending` an einen Befehl zum Sortieren in aufsteigender Reihenfolge.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft, um ein optionales Argument anzugeben, die für den Befehlsnamen ergänzt einen <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
 [!code-aspx-csharp[Classic LinkButton.CommandName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.CommandName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandName">
      <MemberSignature Language="C#" Value="public string CommandName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CommandName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.CommandName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Befehlsnamen zugeordneten der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement. Dieser Wert wird zum Übergeben der <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> Ereignishandler zusammen mit der <see cref="P:System.Web.UI.WebControls.LinkButton.CommandArgument" /> Eigenschaft.</summary>
        <value>Den Befehlsnamen der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement. Der Standardwert ist <see cref="F:System.String.Empty" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn mehrere vorhanden sind <xref:System.Web.UI.WebControls.LinkButton> Steuerelemente auf einer Webseite verwenden die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> zugeordnete Eigenschaft angeben oder ermitteln den Namen des Befehls die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt haben. Sie können festlegen, die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> Eigenschaft mit dem eine beliebige Zeichenfolge, die den auszuführenden Befehl identifiziert. Sie können den Befehlsnamen dann programmgesteuert bestimmen die <xref:System.Web.UI.WebControls.LinkButton> steuern und die entsprechenden Aktionen ausführen.  
  
 Zusätzliche Informationen über den Befehl ein, z. B. ein `Ascending` Reihenfolge zu sortieren, können angegeben werden, mithilfe der <xref:System.Web.UI.WebControls.LinkButton.CommandArgument%2A> Eigenschaft.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.CommandName%2A> -Eigenschaft an einen Befehlsnamen für eine <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
 [!code-aspx-csharp[Classic LinkButton.CommandName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.CommandName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackOptions">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.PostBackOptions GetPostBackOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.PostBackOptions GetPostBackOptions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.PostBackOptions</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erstellt eine <see cref="T:System.Web.UI.PostBackOptions" /> -Objekt, das stellt die <see cref="T:System.Web.UI.WebControls.LinkButton" /> postback Verhalten des Steuerelements.</summary>
        <returns>Ein <see cref="T:System.Web.UI.PostBackOptions" /> darstellt, die die <see cref="T:System.Web.UI.WebControls.LinkButton" /> postback Verhalten des Steuerelements.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.GetPostBackOptions%2A> Methode erstellt eine <xref:System.Web.UI.PostBackOptions> Objekt, das darstellt der <xref:System.Web.UI.WebControls.LinkButton> postback Verhalten des Steuerelements. Die <xref:System.Web.UI.PostBackOptions> Objekt wird dann in der Regel zum Übergeben der <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%29?displayProperty=nameWithType> -Methode, die verwendet wird, um einem Verweis auf die Funktion ein clientseitiges Skript abzurufen, bewirkt, dass der Server zum Zurücksenden an die Seite.  
  
 Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet, wenn Sie erweitern die <xref:System.Web.UI.WebControls.LinkButton> Klasse.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie können außer Kraft setzen die <see cref="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" /> Methode in der abgeleiteten Klasse die postback Optionen für das Schaltflächen-Steuerelement zu ändern oder clientseitigem Skript aufgerufen werden, wenn die Schaltfläche geklickt wird. Achten Sie darauf, dass Sie der Basisklasse aufgerufen <see cref="M:System.Web.UI.WebControls.LinkButton.GetPostBackOptions" /> Methode, damit die Standardoptionen postback festgelegt sind.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein Objekt, das den wiederherzustellenden Zustand des Steuerelements darstellt.</param>
        <summary>Stellt die Ansichtszustandsinformationen aus einer früheren Anforderung wieder her, die mit der <see cref="M:System.Web.UI.WebControls.WebControl.SaveViewState" />-Methode gespeichert wurden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> -Ereignis für die <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Dieses Ereignis wird häufig verwendet, wenn Sie keine Befehlsname zugeordnet ist die <xref:System.Web.UI.WebControls.LinkButton> zu steuern, wie im Fall einer Schaltfläche "Absenden".  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Web.UI.WebControls.LinkButton.OnClick%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis, um die Anzeige <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[Classic LinkButton Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.LinkButton.OnClick(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnClientClick">
      <MemberSignature Language="C#" Value="public virtual string OnClientClick { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OnClientClick" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.OnClientClick" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Skriptdatei auf Clientseite, die beim Instanziieren einer <see cref="T:System.Web.UI.WebControls.LinkButton" /> des Steuerelements <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> Ereignis wird ausgelöst.</summary>
        <value>Die Skriptdatei auf Clientseite, die beim Instanziieren einer <see cref="T:System.Web.UI.WebControls.LinkButton" /> des Steuerelements <see cref="E:System.Web.UI.WebControls.LinkButton.Click" /> Ereignis wird ausgelöst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.LinkButton.OnClientClick%2A> Eigenschaft, um zusätzliche clientseitige Skripts anzugeben, die beim Instanziieren der <xref:System.Web.UI.WebControls.LinkButton> des Steuerelements <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis wird ausgelöst. Das Skript, das Sie für diese Eigenschaft in gerenderten angeben der <xref:System.Web.UI.WebControls.LinkButton> des Steuerelements `OnClick` Attributs sowie des Steuerelements vordefinierte clientseitigem Skript.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.OnClientClick%2A> Eigenschaft, um zusätzliche clientseitige Skripts anzugeben, die beim Instanziieren einer <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[LinkButton.OnClientClick#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.OnClientClick/CS/linkbutton.onclientclickcs.aspx#1)]
 [!code-aspx-vb[LinkButton.OnClientClick#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.OnClientClick/VB/linkbutton.onclientclickvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCommand (System.Web.UI.WebControls.CommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCommand(class System.Web.UI.WebControls.CommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.CommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.CommandEventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.LinkButton.Command" /> -Ereignis für die <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis wird ausgelöst, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Dieses Ereignis wird häufig verwendet, wenn ein Befehl wie z. B. `Sort`, zugeordnet ist die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement. Dies ermöglicht Ihnen die Erstellung mehrerer <xref:System.Web.UI.WebControls.LinkButton> Steuerelemente auf einer Webseite Seite und feststellen, welche programmgesteuert <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis wird ausgelöst, in der Steuerelementhierarchie in Form von den `BubbleEvent`.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Web.UI.WebControls.LinkButton.OnCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis, um die Anzeige <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird.  
  
 [!code-aspx-csharp[Classic LinkButton.CommandName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.CommandName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.LinkButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />-Objekt, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.PreRender" />-Ereignis aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.OnPreRender%2A> von der Methode wird die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement alle erforderlichen Vorbereitungsschritte vor dem Speichern von Ansichtszuständen und Rendern von Inhalt an den Client ausführen.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.LinkButton.OnPreRender%2A> Methode, damit ein Rahmen niemals in einem benutzerdefinierten angezeigt wird <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
 [!code-aspx-csharp[CustomLinkButtonOnPreRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/CS/custom_linkbutton_onprerendercs.aspx#1)]
 [!code-aspx-vb[CustomLinkButtonOnPreRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/VB/custom_linkbutton_onprerendervb.aspx#1)]  
[!code-csharp[CustomLinkButtonOnPreRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/CS/custom_linkbutton_onprerender.cs#2)]
[!code-vb[CustomLinkButtonOnPreRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonOnPreRender/VB/custom_linkbutton_onprerender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostBackUrl">
      <MemberSignature Language="C#" Value="public virtual string PostBackUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostBackUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.PostBackUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.UrlEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.UrlProperty("*.aspx")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die URL der Seite, um aus der aktuellen Seite beim Bereitstellen der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement geklickt wird.</summary>
        <value>Die URL der Webseite, um aus der aktuellen Seite beim Bereitstellen der <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement geklickt wird. Der Standardwert ist eine leere Zeichenfolge (""), wodurch die Seite zum Zurücksenden an sich selbst.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> -Eigenschaft können Sie eine mithilfe von post seitenübergreifend Ausführen der <xref:System.Web.UI.WebControls.LinkButton> Steuerelement. Legen Sie die <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> -Eigenschaft auf die URL der Webseite an, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement geklickt wird. Angeben von Page2.aspx verursacht beispielsweise enthält die Seite mit den <xref:System.Web.UI.WebControls.LinkButton> Steuerelement an `Page2.aspx`. Wenn Sie einen Wert für nicht angeben der <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> -Eigenschaft, die Seite an sich selbst zurückgesendet.  
  
> [!IMPORTANT]
>  Wenn Cross-Seite Postback mit Steuerelementen mit serverseitige Validierung ausführt, sollten Sie überprüfen, der Seite <xref:System.Web.UI.Page.IsValid%2A> Eigenschaft `true` vor der Verarbeitung des Postbacks. Im Falle eines Postbacks Cross-Seite ist die Seite zum Überprüfen der PreviousPage. Der folgende Visual Basic-Code zeigt, wie dies funktioniert:  
  
```  
Sub Page_Load(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Load  
        If Page.PreviousPage.IsValid Then  
            ' Handle the post back  
        Else  
            Response.Write("Invalid")  
        End If  
End Sub  
```  
  
 Weitere Informationen zum Senden Techniken, finden Sie unter [Cross-Page Posting in ASP.NET Web Forms](http://msdn.microsoft.com/library/fedf234e-b7c4-4644-a9e8-c1c0870b043b).  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> Eigenschaft eine seitenübergreifend ausführen. Wenn der Benutzer klickt der <xref:System.Web.UI.WebControls.LinkButton> -Steuerelement, die Seite sendet den Wert in das Textfeld eingegeben werden, um die Zielseite gemäß der <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> Eigenschaft. Um dieses Beispiel ausführen zu können, müssen Sie auch eine Datei für die Seite "Ziel" im selben Verzeichnis wie dieses Codebeispiel erstellen. Im nächsten Beispiel wird der Code für die Seite "Ziel" bereitgestellt.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[LinkButton.PostBackUrlProperty#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.PostBackUrlProperty/CS/linkbutton.postbackurlpropertycs.aspx#1)]
 [!code-aspx-vb[LinkButton.PostBackUrlProperty#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.PostBackUrlProperty/VB/linkbutton.postbackurlpropertyvb.aspx#1)]  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.Page.PreviousPage%2A?displayProperty=nameWithType> -Eigenschaft auf einen Wert, der gebucht wurde aus einer anderen Seite mithilfe der <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> Eigenschaft. Auf dieser Seite ruft die Zeichenfolge, die aus der vorherigen Seite bereitgestellt wurde, und es dem Benutzer angezeigt. Wenn Sie versuchen, dieses Codebeispiel direkt auszuführen, erhalten Sie eine Fehlermeldung, da der Wert der `text` Feld `null`. Verwenden Sie stattdessen diesen Code zum Erstellen einer Seite "Ziel" und legen Sie die Datei im gleichen Verzeichnis wie der Code für das vorherige Beispiel. Der angegebene Wert für der Namen der Datei entsprechen muss die <xref:System.Web.UI.WebControls.LinkButton.PostBackUrl%2A> Eigenschaft im vorherigen Beispiel. Wenn Sie den Code für das vorherige Beispiel ausführen, wird die Seite automatisch ausgeführt, tritt die seitenübergreifend.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[LinkButton.PostBackUrlPage2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.PostBackUrlPage2/CS/linkbutton.postbackurlpage2cs.aspx#1)]
 [!code-aspx-vb[LinkButton.PostBackUrlPage2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.PostBackUrlPage2/VB/linkbutton.postbackurlpage2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePostBackEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Das Argument für das Ereignis.</param>
        <summary>Löst Ereignisse für das <see cref="T:System.Web.UI.WebControls.LinkButton" />-Steuerelement aus, wenn es ein Postback an den Server ausführt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Ereignis wird intern von verwendet die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement, wenn darauf geklickt wird, ausgelöst werden soll, eine <xref:System.Web.UI.WebControls.LinkButton.Click> Ereignis, und wenn definiert, ein <xref:System.Web.UI.WebControls.LinkButton.Command> Ereignis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream zum Rendern des HTML-Inhalts auf dem Client darstellt.</param>
        <summary>Rendert den Inhalt des Steuerelements in dem angegebenen Writer.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.LinkButton.RenderContents%2A> Methode in einem benutzerdefinierten steuern, sodass Text angefügt wird, um die <xref:System.Web.UI.WebControls.LinkButton>.  
  
 [!code-aspx-csharp[CustomLinkButtonRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonRenderContents/CS/custom_linkbutton_rendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomLinkButtonRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonRenderContents/VB/custom_linkbutton_rendercontentsvb.aspx#1)]  
[!code-csharp[CustomLinkButtonRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomLinkButtonRenderContents/CS/custom_linkbutton_rendercontents.cs#2)]
[!code-vb[CustomLinkButtonRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomLinkButtonRenderContents/VB/custom_linkbutton_rendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDisabledAttribute">
      <MemberSignature Language="C#" Value="public override bool SupportsDisabledAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDisabledAttribute" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.SupportsDisabledAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob vom Steuerelement das <see langword="disabled" />-Attribut des gerenderten HTML-Elements auf "disabled" festgelegt werden soll, wenn die <see cref="P:System.Web.UI.WebControls.WebControl.IsEnabled" />-Eigenschaft des Steuerelements <see langword="false" /> ist.</summary>
        <value>
          <see langword="true" />Wenn die <see cref="P:System.Web.UI.Control.RenderingCompatibility" /> Eigenschaft gibt an, eine frühere ASP.NET-Version als <c>4.0</c>ist, andernfalls <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft gibt an, wie ASP.NET HTML für ein Steuerelement rendern soll, wenn das Steuerelement deaktiviert ist. Wenn diese Eigenschaft ist `true`, rendert ASP.NET ein `disabled` Attribut, wenn ein Steuerelement deaktiviert ist. Wenn diese Eigenschaft ist `false`, rendert ASP.NET ein `class` Attribut, wenn ein Steuerelement deaktiviert ist. Weitere Informationen finden Sie unter <xref:System.Web.UI.WebControls.WebControl.SupportsDisabledAttribute%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackEventHandler.RaisePostBackEvent">
      <MemberSignature Language="C#" Value="void IPostBackEventHandler.RaisePostBackEvent (string eventArgument);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(string eventArgument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinkButton.System#Web#UI#IPostBackEventHandler#RaisePostBackEvent(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventArgument">Das Argument für das Ereignis.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent(System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.LinkButton>-Instanz in eine <xref:System.Web.UI.IPostBackEventHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Beschriftungstext angezeigt, auf die <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement.</summary>
        <value>Die textbeschriftung, die angezeigt wird, auf die <see cref="T:System.Web.UI.WebControls.LinkButton" /> Steuerelement. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.LinkButton.Text%2A> Eigenschaft angeben oder die Beschriftung anzuzeigende bestimmen die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Server-Validierungssteuerelemente werden ebenfalls bereitgestellt, um Benutzereingaben zu bewerten. Weitere Informationen finden Sie unter [Validation Server Control Syntax](http://msdn.microsoft.com/en-us/96d2c59e-693c-4079-9b53-b3ff0d9e9133).  
  
 Der Wert dieser Eigenschaft, wenn festgelegt ist, können mit einem Designer-Tool automatisch in einer Ressourcendatei gespeichert werden. Weitere Informationen finden Sie unter <xref:System.ComponentModel.LocalizableAttribute> und [Globalisierung und Lokalisierung](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.Text%2A> Eigenschaft, um die Beschriftung angeben, der auf die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement.  
  
 [!code-aspx-csharp[Classic LinkButton.CommandName Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic LinkButton.CommandName Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic LinkButton.CommandName Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinkButton.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt Sie die Gruppe von Steuerelementen für die die <see cref="T:System.Web.UI.WebControls.LinkButton" /> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet.</summary>
        <value>Die Gruppe von Steuerelementen, für die die <see cref="T:System.Web.UI.WebControls.LinkButton" /> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überprüfung Gruppen erlauben Ihnen Validierungssteuerelemente auf einer Seite einer bestimmten Kategorie zuweisen. Jede Validierungsgruppe kann unabhängig von anderen Gruppen Überprüfung auf der Seite überprüft werden. Verwenden der <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> Eigenschaft, um den Namen der Validierungsgruppe für das Angeben der <xref:System.Web.UI.WebControls.LinkButton> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet.  
  
 Diese Eigenschaft wirkt sich nur, wenn der Wert von der <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> -Eigenschaftensatz auf `true`. Wenn geben Sie einen Wert für die <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> -Eigenschaft, um nur die Validierungssteuerelemente, die Teil der angegebenen Gruppe sind sind validiert, wenn die <xref:System.Web.UI.WebControls.LinkButton> Steuerelement an den Server sendet. Wenn Sie einen Wert für diese Eigenschaft nicht angeben und die <xref:System.Web.UI.WebControls.LinkButton.CausesValidation%2A> -Eigenschaftensatz auf `true`, alle Validierungssteuerelemente auf der Seite, die Validierungsgruppe zugeordnet sind werden überprüft, wenn das Steuerelement an den Server zurückgesendet.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.LinkButton.ValidationGroup%2A> Eigenschaft, um die Steuerelemente anzugeben, die werden überprüft, wenn ein <xref:System.Web.UI.WebControls.LinkButton> Steuerelement Postback zum Server. Die Seite enthält drei Textfelder zum Erfassen von Daten aus der Benutzer und drei <xref:System.Web.UI.WebControls.RequiredFieldValidator> Steuerelemente, um sicherzustellen, dass der Benutzer nicht das Textfeld leer bleibt. Die <xref:System.Web.UI.WebControls.RequiredFieldValidator> Steuerelemente für die ersten beiden Textfeldern in sind die `PersonalInfoGroup` Validierungsgruppe und die <xref:System.Web.UI.WebControls.RequiredFieldValidator> Steuern für das dritte Textfeld befindet sich in der `LocationInfoGroup` Validierungsgruppe. Wenn `LinkButton1` geklickt wird, wird nur die Steuerelemente in Validierungsgruppe `PersonalInfoGroup` werden überprüft. Wenn `LinkButton2` geklickt wird, wird nur das Steuerelement in der Validierungsgruppe `LocationInfoGroup` wird überprüft.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[LinkButton.ValidationGroup#1](~/samples/snippets/csharp/VS_Snippets_WebNet/LinkButton.ValidationGroup/CS/linkbutton.validationgroupcs.aspx#1)]
 [!code-aspx-vb[LinkButton.ValidationGroup#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/LinkButton.ValidationGroup/VB/linkbutton.validationgroupvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
