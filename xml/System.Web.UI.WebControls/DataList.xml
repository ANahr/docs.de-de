<Type Name="DataList" FullName="System.Web.UI.WebControls.DataList">
  <TypeSignature Language="C#" Value="public class DataList : System.Web.UI.WebControls.BaseDataList, System.Web.UI.INamingContainer, System.Web.UI.WebControls.IRepeatInfoUser" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataList extends System.Web.UI.WebControls.BaseDataList implements class System.Web.UI.INamingContainer, class System.Web.UI.WebControls.IRepeatInfoUser" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.DataList" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.BaseDataList</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.INamingContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.WebControls.IRepeatInfoUser</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.DataListDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Web.UI.Design.WebControls.DataListComponentEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.ComponentModel.ComponentEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("SelectedValue")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Ein datengebundenes Listensteuerelement, das Elemente mithilfe von Vorlagen anzeigt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Vorlagen](#templates)  
  
-   [Anpassen der Darstellung von DataList-Steuerelement](#customizing_the_appearance_of_the_datalist_control)  
  
-   [Anzeigen von Richtung und Layout](#display_direction_and_layout)  
  
-   [Sicherheit](#security)  
  
-   [Deklarationssyntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Verwenden der <xref:System.Web.UI.WebControls.DataList> Steuerelement zum Anzeigen einer Vorlage definiert Datentyps gebunden Liste. Die <xref:System.Web.UI.WebControls.DataList> Steuerelement unterstützt das auswählen und bearbeiten.  
  
<a name="templates"></a>   
## <a name="templates"></a>Vorlagen  
 Den Inhalt der <xref:System.Web.UI.WebControls.DataList> Steuerelement kann mithilfe von Vorlagen bearbeitet werden. Die folgende Tabelle enthält die unterstützten Vorlagen.  
  
|Vorlagenname|Beschreibung|  
|-------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList>. Wenn Sie nicht definiert ist, `ItemTemplate` verwendet wird.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für das Element, das momentan bearbeitet wird, der <xref:System.Web.UI.WebControls.DataList>. Wenn Sie nicht definiert ist, `ItemTemplate` verwendet wird.|  
|<xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für den Fußzeilenbereich der <xref:System.Web.UI.WebControls.DataList>. Nicht definiert ist, wird ein Fußzeilenbereich nicht angezeigt werden.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für der Headerabschnitt eines der <xref:System.Web.UI.WebControls.DataList>. Nicht definiert ist, wird ein Headerabschnitt nicht angezeigt werden.|  
|<xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A>|Erforderliche Vorlage, die Inhalte und das Layout für Elemente in enthält, die <xref:System.Web.UI.WebControls.DataList>.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für das aktuell ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList>. Wenn Sie nicht definiert ist, <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> verwendet wird.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A>|Wenn definiert, enthält die Inhalte und das Layout für das Trennzeichen zwischen den Elementen in der <xref:System.Web.UI.WebControls.DataList>. Nicht definiert ist, wird eine Trennzeichen nicht angezeigt werden.|  
  
 Zumindest die <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> muss definiert werden, um das Anzeigen von Elementen in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Zusätzliche Vorlagen können verwendet werden, um ein benutzerdefiniertes Erscheinungsbild für bieten die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
<a name="customizing_the_appearance_of_the_datalist_control"></a>   
## <a name="customizing-the-appearance-of-the-datalist-control"></a>Anpassen der Darstellung von DataList-Steuerelement  
 Die Darstellung der <xref:System.Web.UI.WebControls.DataList> Steuerelement kann angepasst werden, indem Sie die Stileigenschaften für die verschiedenen Teile des Steuerelements festlegen. Die folgende Tabelle enthält die verschiedenen Stileigenschaften.  
  
|Style-Eigenschaft|Beschreibung|  
|--------------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|Gibt den Stil für abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|Gibt das Format für das Element bearbeitet wird, der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.FooterStyle%2A>|Gibt den Stil für die Fußzeile der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A>|Gibt das Format für den Header in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|Gibt den Stil für die Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|Gibt das Format für das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A>|Gibt den Stil für das Trennzeichen zwischen den Elementen in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
  
 Sie können auch ein- oder Ausblenden von verschiedenen Teilen des Steuerelements. Die folgende Tabelle enthält die Eigenschaften, die steuern, welche Teile angezeigt oder ausgeblendet werden.  
  
|Eigenschaft|Beschreibung|  
|--------------|-----------------|  
|<xref:System.Web.UI.WebControls.DataList.ShowFooter%2A>|Blendet die Fußzeilenbereich enthält, der die <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
|<xref:System.Web.UI.WebControls.DataList.ShowHeader%2A>|Anzeigen oder Ausblenden der Headerabschnitt eines der <xref:System.Web.UI.WebControls.DataList> Steuerelement.|  
  
<a name="display_direction_and_layout"></a>   
## <a name="display-direction-and-layout"></a>Anzeigen von Richtung und Layout  
 Die Richtung der Anzeige des ein <xref:System.Web.UI.WebControls.DataList> Steuerelement kann vertikal oder horizontal. Legen Sie die <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> Eigenschaft, um die Richtung für die Anzeige anzugeben.  
  
 Das Layout der <xref:System.Web.UI.WebControls.DataList> Steuerelement wird gesteuert, mit der <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> Eigenschaft. Festlegen dieser Eigenschaft auf `RepeatLayout.Table` zeigt die <xref:System.Web.UI.WebControls.DataList> in einem Tabellenformat während `RepeatLayout.Flow` zeigt die <xref:System.Web.UI.WebControls.DataList> ohne eine Tabellenstruktur.  
  
<a name="security"></a>   
## <a name="security"></a>Sicherheit  
 Die `DataList` -Steuerelement Steuerelemente, mit denen Benutzer zur Eingabe von Informationen enthalten kann.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben.  
  
 Weitere Informationen zur Sicherheit finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [ Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:DataList  
    AccessKey="string"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    Caption="string"  
    CaptionAlign="NotSet|Top|Bottom|Left|Right"  
    CellPadding="integer"  
    CellSpacing="integer"  
    CssClass="string"  
    DataKeyField="string"  
    DataMember="string"  
    DataSource="string"  
    DataSourceID="string"  
    EditItemIndex="integer"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    ExtractTemplateRows="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    GridLines="None|Horizontal|Vertical|Both"  
    Height="size"  
    HorizontalAlign="NotSet|Left|Center|Right|Justify"  
    ID="string"  
    OnCancelCommand="CancelCommand event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleteCommand="DeleteCommand event handler"  
    OnDisposed="Disposed event handler"  
    OnEditCommand="EditCommand event handler"  
    OnInit="Init event handler"  
    OnItemCommand="ItemCommand event handler"  
    OnItemCreated="ItemCreated event handler"  
    OnItemDataBound="ItemDataBound event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelectedIndexChanged="SelectedIndexChanged event handler"  
    OnUnload="Unload event handler"  
    OnUpdateCommand="UpdateCommand event handler"  
    RepeatColumns="integer"  
    RepeatDirection="Horizontal|Vertical"  
    RepeatLayout="Table|Flow"  
    runat="server"  
    SelectedIndex="integer"  
    ShowFooter="True|False"  
    ShowHeader="True|False"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    ToolTip="string"  
    UseAccessibleHeader="True|False"  
    Visible="True|False"  
    Width="size"  
>  
        <AlternatingItemStyle />  
        <AlternatingItemTemplate>  
            <!-- child controls -->  
        </AlternatingItemTemplate>  
        <EditItemStyle />  
        <EditItemTemplate>  
            <!-- child controls -->  
        </EditItemTemplate>  
        <FooterStyle />  
        <FooterTemplate>  
            <!-- child controls -->  
        </FooterTemplate>  
        <HeaderStyle />  
        <HeaderTemplate>  
            <!-- child controls -->  
        </HeaderTemplate>  
        <ItemStyle />  
        <ItemTemplate>  
            <!-- child controls -->  
        </ItemTemplate>  
        <SelectedItemStyle />  
        <SelectedItemTemplate>  
            <!-- child controls -->  
        </SelectedItemTemplate>  
        <SeparatorStyle />  
        <SeparatorTemplate>  
            <!-- child controls -->  
        </SeparatorTemplate>  
</asp:DataList>  
```  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie eine <xref:System.Web.UI.WebControls.DataList> -Steuerelement zum Anzeigen einer Liste von Elementen aus einer Datenquelle.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataList#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataList/CS/datalistcs.aspx#1)]
 [!code-aspx-vb[DataList#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataList/VB/datalistvb.aspx#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.DataList" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor erstellt und initialisiert eine neue Instanz der dem <xref:System.Web.UI.WebControls.DataList> Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Erstellen und initialisieren eine neue Instanz der dem <xref:System.Web.UI.WebControls.DataList> Klasse.  
  
 [!code-csharp[Classic DataList.DataList Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.DataList Example/CS/source.cs#1)]
 [!code-vb[Classic DataList.DataList Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.DataList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle AlternatingItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.AlternatingItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für abwechselnde Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> -Objekt, das die Stileigenschaften für abwechselnde Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft geben Sie einen benutzerdefinierten Stil für die abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Element Formateigenschaften in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt von der Style-Eigenschaft für ein Element in eine andere durch eine Hierarchie. Die Stileigenschaften niedriger festlegen, in der Hierarchie werden von Stileigenschaften eines Elements in der Hierarchie höher geerbt. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> -Eigenschaft, die alle anderen Stileigenschaften eines Elements in der <xref:System.Web.UI.WebControls.DataList> Steuerelement müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelnes Element Style-Eigenschaft festlegen. Sie können die geerbte stileinstellungen für ein Element Style-Eigenschaft überschreiben, die in der Hierarchie höher wird durch Festlegen der Style-Eigenschaften. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> Eigenschaft. Die folgende Tabelle enthält die Hierarchiereihenfolge vom höchsten zum niedrigsten Wert.  
  
|Rangfolge|Style-Eigenschaft|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 Um einen benutzerdefinierten Stil für abwechselnde Elemente angeben möchten, platzieren Sie die `<AlternatingItemStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<AlternatingItemStyle>` Tag.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft an eine andere Hintergrundfarbe für abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemStyle/CS/datalistitemstylecs.aspx#1)]
 [!code-aspx-vb[DataListItemStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemStyle/VB/datalistitemstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternatingItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate AlternatingItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate AlternatingItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.AlternatingItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für abwechselnde Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" />.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> -Objekt, das die Vorlage für abwechselnde Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> Eigenschaft, um den Inhalt der abwechselnde Elemente im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die Darstellung der abwechselnde Elemente wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> Eigenschaft.  
  
 Zum Angeben einer Vorlage für abwechselnde Elemente fügen Sie der `<AlternatingItemTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<AlternatingItemTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> Eigenschaft, um den Inhalt der abwechselnde Elemente im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListAlternatingItemTemplate#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListAlternatingItemTemplate/CS/datalistaltitemtemplatecs.aspx#1)]
 [!code-aspx-vb[DataListAlternatingItemTemplate#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListAlternatingItemTemplate/VB/datalistaltitemtemplatevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler CancelCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.CancelCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see langword="Cancel" /> geklickt wird für ein Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis wird ausgelöst, wenn die `Cancel` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis legt die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um `-1` (um das Element zu deaktivieren), und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Text ist nicht HTML-codiert vor der Anzeige in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Dadurch können Skripts in HTML-Tags im Text eingebettet. Wenn die Werte für das Steuerelement aus Benutzereingaben stammen, achten Sie darauf, dass Sie zum Überprüfen der Werte, um Sicherheitsrisiken zu reduzieren.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis. Dieser bricht ab, auf ein Element im vorgenommene Änderungen der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Cancel` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelCommandName">
      <MemberSignature Language="C#" Value="public const string CancelCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string CancelCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.CancelCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die <see langword="Cancel" /> Befehlsnamen. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.CancelCommandName> Feld zur Darstellung der `Cancel` Befehlsnamen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void CreateControlHierarchy (bool useDataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateControlHierarchy(bool useDataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateControlHierarchy(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useDataSource" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useDataSource">
          <see langword="true" />Datenquelle für das Steuerelement zu verwenden; <see langword="false" /> um anzugeben, dass das Steuerelement aus dem Ansichtszustand neu erstellt wird und datengebundene darf nicht sein.</param>
        <summary>Erstellt die Steuerelementhierarchie, die zum Rendern der Daten Listenfeld-Steuerelement, mit oder ohne die angegebene Datenquelle verwendet wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, wenn eine benutzerdefinierte Implementierung von Ableiten der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Die <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> -Methode verwendet die <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> und <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methoden zum Erstellen <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente, die den Header, Footer, Trennzeichen und datengebundene Elemente in der Liste darstellen. Sie erreichen die datengebundene Elemente für die Datenliste über die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung. Sie erreichen alle Elementtypen, einschließlich der Header, Footer und Trennzeichenelemente, über die <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> Auflistung.  
  
 Überschreiben der <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> Methode zum Anpassen wie <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente hinzugefügt oder erstellt den <xref:System.Web.UI.WebControls.DataList> Steuerelement. Überschreiben Sie die <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methode zum Anpassen der Vorlagen für eine <xref:System.Web.UI.WebControls.DataListItem> Steuerelement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateControlStyle">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.Style CreateControlStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.Style CreateControlStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateControlStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Das Standardobjekt für den Stil, die intern von verwendet wird, erstellt der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement zum Implementieren aller auf Formatvorlagen bezogenen Eigenschaften.</summary>
        <returns>Ein <see cref="T:System.Web.UI.WebControls.TableStyle" /> , die standardmäßig Stileigenschaften für das Steuerelement enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.CreateControlStyle%2A> Methode wird hauptsächlich von Steuerelemententwicklern beim Ableiten einer benutzerdefinierten Implementierung von verwendet die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.DataList.CreateControlStyle%2A> Methode in einem benutzerdefinierten steuern, sodass er zeigt immer horizontale Rasterlinien ohne Zellenabstand in die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 [!code-aspx-csharp[CustomDataListCreateControlStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListCreateControlStyle/CS/custom_datalist_createcontrolstylecs.aspx#1)]
 [!code-aspx-vb[CustomDataListCreateControlStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListCreateControlStyle/VB/custom_datalist_createcontrolstylevb.aspx#1)]  
[!code-csharp[CustomDataListCreateControlStyle#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListCreateControlStyle/CS/custom_datalist_createcontrolstyle.cs#2)]
[!code-vb[CustomDataListCreateControlStyle#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListCreateControlStyle/VB/custom_datalist_createcontrolstyle.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateItem">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.DataListItem CreateItem (int itemIndex, System.Web.UI.WebControls.ListItemType itemType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.DataListItem CreateItem(int32 itemIndex, valuetype System.Web.UI.WebControls.ListItemType itemType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.CreateItem(System.Int32,System.Web.UI.WebControls.ListItemType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndex" Type="System.Int32" />
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
      </Parameters>
      <Docs>
        <param name="itemIndex">Der angegebenen Position innerhalb der <see cref="T:System.Web.UI.WebControls.DataList" /> das erstellte Element platziert.</param>
        <param name="itemType">Ein <see cref="T:System.Web.UI.WebControls.ListItemType" /> , die den angegebenen Typ des zu erstellenden Elements darstellt.</param>
        <summary>Erstellt ein <see cref="T:System.Web.UI.WebControls.DataListItem" />-Objekt.</summary>
        <returns>Ein neues <see cref="T:System.Web.UI.WebControls.DataListItem" /> mit dem angegebenen Listenelement-Typ erstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> Methode wird hauptsächlich von Steuerelemententwicklern erstellen Sie eine benutzerdefinierte Implementierung von verwendet die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> Methode ist funktionell gleichwertig mit einem Aufruf der <xref:System.Web.UI.WebControls.DataListItem.%23ctor%2A> Konstruktor für eine <xref:System.Web.UI.WebControls.DataListItem>. Die <xref:System.Web.UI.WebControls.DataListItem.ItemIndex%2A> und <xref:System.Web.UI.WebControls.DataListItem.ItemType%2A> Eigenschaften werden für die neue initialisiert <xref:System.Web.UI.WebControls.DataListItem> mit den angegebenen Werten, aber das Element nicht in eingefügt die <xref:System.Web.UI.WebControls.DataList>.  
  
 Die <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> -Methode verwendet die <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> und <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methoden zum Erstellen <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente, die den Header, Footer, Trennzeichen und datengebundene Elemente in der Liste darstellen. Sie erreichen die datengebundene Elemente für die Datenliste über die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung. Sie erreichen alle Elementtypen, einschließlich der Header, Footer und Trennzeichenelemente, über die <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> Auflistung.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Überschreiben Sie diese Methode zum Erstellen Ihrer eigenen abgeleiteten <see cref="T:System.Web.UI.WebControls.DataListItem" /> Typ, oder um zusätzliche Elementeigenschaften festzulegen Wenn eine <see cref="T:System.Web.UI.WebControls.DataListItem" /> wird erstellt.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler DeleteCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.DeleteCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see langword="Delete" /> geklickt wird für ein Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis wird ausgelöst, wenn die `Delete` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für das <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis entfernt das ausgewählte Element aus der Datenquelle, und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis. Löscht das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Delete` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommandName">
      <MemberSignature Language="C#" Value="public const string DeleteCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string DeleteCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.DeleteCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die <see langword="Delete" /> Befehlsnamen. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.DeleteCommandName> Feld zur Darstellung der `Delete` Befehlsnamen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler EditCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler EditCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.EditCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see langword="Edit" /> geklickt wird für ein Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis wird ausgelöst, wenn die `Edit` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis legt die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um die ausgewählte Zeile, und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Text ist nicht HTML-codiert vor der Anzeige in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Dadurch können Skripts in HTML-Tags im Text eingebettet. Wenn die Werte für das Steuerelement aus Benutzereingaben stammen, achten Sie darauf, dass Sie zum Überprüfen der Werte, um Sicherheitsrisiken zu reduzieren.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis. Können Sie beim Bearbeiten des ausgewählten Elements in der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Edit` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditCommandName">
      <MemberSignature Language="C#" Value="public const string EditCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string EditCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.EditCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die <see langword="Edit" /> Befehlsnamen. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.EditCommandName> Feld zur Darstellung der `Edit` Befehlsnamen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItemIndex">
      <MemberSignature Language="C#" Value="public virtual int EditItemIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditItemIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Indexnummer des ausgewählten Elements in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement zu bearbeiten.</summary>
        <value>Die Indexnummer des ausgewählten Elements in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement zu bearbeiten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um das zu bearbeitende Element programmgesteuert anzugeben. Sie können diese Eigenschaft auch verwenden, bestimmt den Index des Elements für die Bearbeitung aktiviert.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft ist nullbasiert.  
  
 Um ein Element zu deaktivieren, legen Sie die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft `-1`.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> -Eigenschaft im Steuerelementzustand gespeichert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um das Element, das vom Benutzer ausgewählt werden, für die Bearbeitung anzugeben.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der ausgewählte Wert ist kleiner als <see langword="0" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EditItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle EditItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle EditItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für das Element ausgewählt, die zur Bearbeitung in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt, das die Stileigenschaften für das ausgewählte zur Bearbeitung im Element enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> Eigenschaft, um einen benutzerdefinierten Stil für das Element zur Bearbeitung in der ausgewählten bieten die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Element Formateigenschaften in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt von der Style-Eigenschaft für ein Element in eine andere durch eine Hierarchie. Die Stileigenschaften niedriger festlegen, in der Hierarchie werden von Stileigenschaften eines Elements in der Hierarchie höher geerbt. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> -Eigenschaft, die alle anderen Stileigenschaften eines Elements in der <xref:System.Web.UI.WebControls.DataList> Steuerelement müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelnes Element Style-Eigenschaft festlegen. Sie können die geerbte stileinstellungen für ein Element Style-Eigenschaft überschreiben, die in der Hierarchie höher wird durch Festlegen der Style-Eigenschaften. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> Eigenschaft. Die folgende Tabelle enthält die Hierarchiereihenfolge vom höchsten zum niedrigsten Wert.  
  
|Rangfolge|Style-Eigenschaft|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 Um einen benutzerdefinierten Stil für das Element, das für die Bearbeitung ausgewählte anzugeben, platzieren Sie die `<EditItemStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<EditItemStyle>` Tag.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> Eigenschaft, um eine andere Darstellung für das Element, das vom Benutzer ausgewählt werden, für die Bearbeitung anzugeben.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate EditItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate EditItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.EditItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für das Element ausgewählt, die zur Bearbeitung in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> -Objekt, das die Vorlage für das Element zur Bearbeitung in der ausgewählten enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A> Eigenschaft, um den Inhalt des Elements zur Bearbeitung in der ausgewählten steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die Darstellung des Elements für die Bearbeitung von gesteuert wird ausgewählte die <xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A> Eigenschaft.  
  
 Platzieren Sie zum Angeben einer Vorlage für das Element ausgewählt, für die Bearbeitung der `<EditItemTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<EditItemTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.EditItemTemplate%2A> Eigenschaft, um den Inhalt des Elements vom Benutzer ausgewählt werden, für die Bearbeitung zu steuern.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtractTemplateRows">
      <MemberSignature Language="C#" Value="public virtual bool ExtractTemplateRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExtractTemplateRows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ExtractTemplateRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob die Zeilen der einen <see cref="T:System.Web.UI.WebControls.Table" /> Steuerelements, die in jeder Vorlage definiert eine <see cref="T:System.Web.UI.WebControls.DataList" /> steuern, extrahiert und angezeigt.</summary>
        <value>
          <see langword="true" />Wenn die Zeilen der einen <see cref="T:System.Web.UI.WebControls.Table" /> Steuerelements, die in jeder Vorlage definiert eine <see cref="T:System.Web.UI.WebControls.DataList" /> steuern, werden extrahiert und angezeigt, andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Inhalt der <xref:System.Web.UI.WebControls.DataList> -Steuerelement mit Vorlagen angegeben sind. Normalerweise Listen Sie die Steuerelemente, die in den Vorlagen angezeigt werden soll. Sie können auch Ablegen einer <xref:System.Web.UI.WebControls.Table> in einer Vorlage zu steuern und die Zeilen der Tabelle angezeigt.  
  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.ExtractTemplateRows%2A> Eigenschaft, um anzugeben, ob die Zeilen der einen <xref:System.Web.UI.WebControls.Table> -Steuerelements in jeder Vorlage definiert eine <xref:System.Web.UI.WebControls.DataList> Steuerelement extrahiert und angezeigt werden. Alle Zeilen aus den Vorlagen des extrahiert die <xref:System.Web.UI.WebControls.DataList> -Steuerelement in einer einzelnen Tabelle angezeigt werden. Dadurch können Sie eine einzelne Tabelle aus mehreren kleineren Tabellen erstellen und die Features des weiterhin beibehalten der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Wenn diese Eigenschaft festgelegt wird, um `true`, müssen Sie ein wohlgeformtes bereitstellen <xref:System.Web.UI.WebControls.Table> Steuerelement für jede Vorlage, die in enthalten sein sollen die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Nur die Zeilen der Tabellen werden angezeigt. Alle anderen Inhalte in der Vorlage werden ignoriert. Verwenden Sie eine <xref:System.Web.UI.WebControls.Table> -Steuerelement für diese Funktion ordnungsgemäß funktioniert. Die <xref:System.Web.UI.HtmlControls.HtmlTable?displayProperty=nameWithType> Steuerelement ist nicht kompatibel mit dieser Eigenschaft.  
  
 Beim Erstellen einer Zelle für eine <xref:System.Web.UI.WebControls.Table> Steuerelement in einer Vorlage können Sie die <xref:System.Web.UI.WebControls.TableCell.ColumnSpan%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.TableCell> Objekt zum Steuern der Anzahl der Spalten, die Zelle umfasst. Sie können auch die <xref:System.Web.UI.WebControls.TableCell.RowSpan%2A> Eigenschaft, um die Anzahl der Zeilen steuern die Zelle umfasst.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A>, <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A>, und <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> Eigenschaften wirken sich nicht auf die Darstellung der <xref:System.Web.UI.WebControls.DataList> steuern, wenn diese Eigenschaft festgelegt wird, um `true`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie mithilfe der <xref:System.Web.UI.WebControls.DataList.ExtractTemplateRows%2A> Eigenschaft zum Extrahieren, und zeigen Sie die Zeilen des <xref:System.Web.UI.WebControls.Table> Steuerelemente, die in den Vorlagen von definiert die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Classic DataList.ExtractTemplateRows Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.ExtractTemplateRows Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic DataList.ExtractTemplateRows Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.ExtractTemplateRows Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle FooterStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle FooterStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.FooterStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für den Fußzeilenbereich der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt, das die Stileigenschaften für den Fußzeilenbereich enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie einen benutzerdefinierten Stil für den Fußzeilenbereich bieten die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt, das die formateinstellungen des der <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> Eigenschaft. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> -Eigenschaft, die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> Eigenschaft müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelne Formateigenschaft festlegen. Sie können die geerbte formateinstellungen überschreiben, indem die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> Eigenschaft. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> Eigenschaft.  
  
 Um einen benutzerdefinierten Stil für den Fußzeilenbereich angeben möchten, platzieren Sie die `<FooterStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<FooterStyle>` Tag.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> Eigenschaft muss festgelegt werden, um `true` für diese Eigenschaft angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> -Eigenschaft an eine benutzerdefinierte Hintergrundfarbe für den Fußzeilenbereich der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListHeaderStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-aspx-vb[DataListHeaderStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate FooterTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate FooterTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.FooterTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für den Fußzeilenbereich der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> -Objekt, das die Vorlage für den Fußzeilenbereich enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> Eigenschaft, um den Inhalt der Fußzeilenbereich steuern. Die Darstellung der Fußzeilenbereich wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> Eigenschaft.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> Eigenschaft muss festgelegt werden, um `true` für diese Eigenschaft angezeigt werden.  
  
 Die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> Eigenschaft von der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt, das die formateinstellungen des der <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> Eigenschaft. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> -Eigenschaft, die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> Eigenschaft müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelne Formateigenschaft festlegen. Sie können die geerbte formateinstellungen überschreiben, indem die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> Eigenschaft. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A> Eigenschaft.  
  
 Zum Angeben einer Vorlage für den Fußzeilenbereich fügen Sie der `<FooterTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<FooterTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> Eigenschaft, um den Inhalt des Abschnitts Fußzeile steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListHeaderStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-aspx-vb[DataListHeaderStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public override System.Web.UI.WebControls.GridLines GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.GridLines GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.GridLines</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Stil der Rasterlinien für die <see cref="T:System.Web.UI.WebControls.DataList" /> steuern, wann die <see cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" /> -Eigenschaftensatz auf <see langword="RepeatLayout.Table" />.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.GridLines" />-Enumerationswerte. Der Standardwert ist <see langword="None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.GridLines%2A> -Eigenschaft an die Linienart Raster für die <xref:System.Web.UI.WebControls.DataList> Steuerelement. In der folgenden Tabelle sind die möglichen Formate aufgeführt.  
  
|Stil|Beschreibung|  
|-----------|-----------------|  
|<xref:System.Web.UI.WebControls.GridLines.None>|Keine Rasterlinien.|  
|<xref:System.Web.UI.WebControls.GridLines.Horizontal>|Zeigt die horizontale Rasterlinien an.|  
|<xref:System.Web.UI.WebControls.GridLines.Vertical>|Zeigt die vertikale Gitternetzlinie.|  
|<xref:System.Web.UI.WebControls.GridLines.Both>|Zeigt die horizontalen und vertikalen Rasterlinien.|  
  
> [!NOTE]
>  Diese Eigenschaft gilt nur, wenn die <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> -Eigenschaftensatz auf `RepeatLayout.Table`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.GridLines%2A> Eigenschaft, um die vertikale und horizontale Rasterlinien der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle HeaderStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für den Spaltenüberschrift-Abschnitt, der die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt, das die Stileigenschaften für Kopfzeilenbereich enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe dieser Eigenschaft geben Sie einen benutzerdefinierten Stil für die Überschrift der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Um einen benutzerdefinierten Stil für den Kopfzeilenbereich angeben möchten, platzieren Sie die `<HeaderStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<HeaderStyle>` Tag.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> Eigenschaft muss festgelegt werden, um `true` für diese Eigenschaft angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> -Eigenschaft an eine benutzerdefinierte Hintergrundfarbe für den Spaltenüberschrift-Abschnitt, der die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListHeaderStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListHeaderStyle/CS/datalistheaderstylecs.aspx#1)]
 [!code-aspx-vb[DataListHeaderStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListHeaderStyle/VB/datalistheaderstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für den Spaltenüberschrift-Abschnitt, der die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> , enthält die Vorlage für den Spaltenüberschrift-Abschnitt, der die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> Eigenschaft, um den Inhalt des Kopfzeilenbereichs steuern. Die Darstellung des Headerabschnitts wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> Eigenschaft.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> Eigenschaft muss festgelegt werden, um `true` für diese Eigenschaft angezeigt werden.  
  
 Zum Angeben einer Vorlage für den Kopfzeilenbereich fügen Sie der `<HeaderTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<HeaderTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> Eigenschaft, um den Inhalt des Kopfzeilenbereichs steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeItem">
      <MemberSignature Language="C#" Value="protected virtual void InitializeItem (System.Web.UI.WebControls.DataListItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeItem(class System.Web.UI.WebControls.DataListItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.InitializeItem(System.Web.UI.WebControls.DataListItem)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Web.UI.WebControls.DataListItem" />
      </Parameters>
      <Docs>
        <param name="item">Die zu initialisierende <see cref="T:System.Web.UI.WebControls.DataListItem" />.</param>
        <summary>Initialisiert ein <see cref="T:System.Web.UI.WebControls.DataListItem" /> -Objekt auf Grundlage der angegebenen Vorlagen und Formatvorlagen für die Listenelement-Typ.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, zum Erweitern der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Die <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> -Methode verwendet die <xref:System.Web.UI.WebControls.DataList.CreateItem%2A> und <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methoden zum Erstellen <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente, die den Header, Footer, Trennzeichen und datengebundene Elemente in der Liste darstellen. Sie erreichen die datengebundene Elemente für die Datenliste über die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung. Sie erreichen alle Elementtypen, einschließlich der Header, Footer und Trennzeichenelemente, über die <xref:System.Web.UI.WebControls.BaseDataList.Controls%2A> Auflistung.  
  
 Überschreiben der <xref:System.Web.UI.WebControls.DataList.CreateControlHierarchy%2A> Methode zum Anpassen wie <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente hinzugefügt oder erstellt den <xref:System.Web.UI.WebControls.DataList> Steuerelement. Überschreiben Sie die <xref:System.Web.UI.WebControls.DataList.InitializeItem%2A> Methode zum Anpassen der Vorlagen für eine <xref:System.Web.UI.WebControls.DataListItem> Steuerelement.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler ItemCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn keine der Schaltflächen, in geklickt wird der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCommand> Ereignis wird ausgelöst, wenn keine der Schaltflächen, in geklickt wird der <xref:System.Web.UI.WebControls.DataList> steuern und wird häufig verwendet, wenn Sie ein Schaltflächen-Steuerelement mit einem benutzerdefinierten `CommandName` Wert.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter[wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemCommand> Ereignis auf ein Element aus der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemCommand2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand2/CS/datalistitemcommand2cs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand2/VB/datalistitemcommand2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemCreated">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemCreated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, auf dem Server, wenn ein Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement erstellt wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis wird ausgelöst, wenn ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erstellt wird, sowohl bei Roundtrips auch bei der Daten an das Steuerelement gebunden ist.  
  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis wird häufig verwendet, um steuern den Inhalt und die Darstellung einer Zeile in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis, um die Reihenfolge anzuzeigen, in der Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erstellt werden.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCreated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated/CS/datalistitemcreatedcs.aspx#1)]
 [!code-aspx-vb[DataListItemCreated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated/VB/datalistitemcreatedvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemCreated2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated2/CS/datalistitemcreated2cs.aspx#1)]
 [!code-aspx-vb[DataListItemCreated2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated2/VB/datalistitemcreated2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDataBound">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListItemEventHandler ItemDataBound" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.ItemDataBound" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn ein Element an Daten gebunden ist die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.ItemDataBound> Ereignis wird ausgelöst, nachdem ein Element an Daten gebunden ist die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Dieses Ereignis bietet Ihnen die letzte Gelegenheit, die Daten zugreifen, bevor er auf dem Client angezeigt wird. Nachdem dieses Ereignis ausgelöst wird, ist das Datenelement nicht mehr verfügbar.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemDataBound> Ereignis, um die Reihenfolge anzuzeigen, in der Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement an das Steuerelement gebunden werden.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemDataBound#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound/CS/datalistitemdataboundcs.aspx#1)]
 [!code-aspx-vb[DataListItemDataBound#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound/VB/datalistitemdataboundvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemDataBound2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound2/CS/datalistitemdatabound2cs.aspx#1)]
 [!code-aspx-vb[DataListItemDataBound2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound2/VB/datalistitemdatabound2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Web.UI.WebControls.DataListItem" /> Objekte, die die einzelnen Elemente innerhalb des Steuerelements darstellt.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.DataListItemCollection" /> , enthält eine Auflistung von <see cref="T:System.Web.UI.WebControls.DataListItem" /> Objekten, die die einzelnen Elemente im darstellen der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung programmgesteuert die Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung bietet keine Methoden zum Hinzufügen oder Entfernen von Elementen in der Auflistung. Allerdings können Sie den Inhalt eines Elements steuern, indem Sie mit einem Handler für das <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis.  
  
> [!NOTE]
>  Nur Elemente, die an die Datenquelle gebunden sind in enthalten die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung. Der Header, Footer und Trennzeichen sind nicht in der Auflistung enthalten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.Items%2A> Auflistung zum Anzeigen von Elementen in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Classic DataList.Items Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.Items Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic DataList.Items Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.Items Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle ItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle ItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für die Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> -Objekt, das die Stileigenschaften für die Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie einen benutzerdefinierten Stil für die Elemente des bieten die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Element Formateigenschaften in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt von der Style-Eigenschaft für ein Element in eine andere durch eine Hierarchie. Die Stileigenschaften niedriger festlegen, in der Hierarchie werden von Stileigenschaften eines Elements in der Hierarchie höher geerbt. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> -Eigenschaft, die alle anderen Stileigenschaften eines Elements in der <xref:System.Web.UI.WebControls.DataList> Steuerelement müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelnes Element Style-Eigenschaft festlegen. Sie können die geerbte stileinstellungen für ein Element Style-Eigenschaft überschreiben, die in der Hierarchie höher wird durch Festlegen der Style-Eigenschaften. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> Eigenschaft. Die folgende Tabelle enthält die Hierarchiereihenfolge vom höchsten zum niedrigsten Wert.  
  
|Rangfolge|Style-Eigenschaft|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 An einen benutzerdefinierten Stil für die Elemente des der <xref:System.Web.UI.WebControls.DataList> steuern, platzieren Sie die `<ItemStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<ItemStyle>` Tag.  
  
 Sie können auch die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft geben Sie eine andere Darstellung für die abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> -Eigenschaft an eine andere Hintergrundfarbe für die Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemStyle/CS/datalistitemstylecs.aspx#1)]
 [!code-aspx-vb[DataListItemStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemStyle/VB/datalistitemstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für die Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> , enthält die Vorlage für die Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> Eigenschaft, um den Inhalt der Elemente im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die Darstellung der Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> Eigenschaft.  
  
 Zum Angeben einer Vorlage für die Elemente des der <xref:System.Web.UI.WebControls.DataList> steuern, platzieren Sie die `<ItemTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<ItemTemplate>` Tags.  
  
 Optional können Sie die <xref:System.Web.UI.WebControls.DataList.AlternatingItemTemplate%2A> -Eigenschaft geben Sie eine andere Darstellung für die abwechselnde Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.ItemTemplate%2A> Eigenschaft, um den Inhalt der Elemente im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.LoadViewState(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="savedState">Ein Objekt, das den Status der <see cref="T:System.Web.UI.WebControls.DataList" />.</param>
        <summary>Lädt den zuvor gespeicherten Ansichtszustand des <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelements.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode dient in erster Linie durch die .NET Framework-Infrastruktur und sollte nicht direkt aus Ihrem Code verwendet werden.  Allerdings können Entwickler von Steuerelementen überschreiben Sie diese Methode, um anzugeben, wie ein benutzerdefiniertes Serversteuerelement seinen Ansichtszustand wiederherstellt. Weitere Informationen finden Sie unter [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 Die <xref:System.Web.UI.WebControls.DataList.LoadViewState%2A> Methode stellt die Ansichtszustandsinformationen für die <xref:System.Web.UI.WebControls.DataList> -Steuerelement aus einer früheren Seitenanforderung wieder, die gespeichert wurde, durch die <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBubbleEvent">
      <MemberSignature Language="C#" Value="protected override bool OnBubbleEvent (object source, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnBubbleEvent(object source, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnBubbleEvent(System.Object,System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="source">Die Quelle des Ereignisses.</param>
        <param name="e">Die Ereignisdaten.</param>
        <summary>Bestimmt, ob das Ereignis für das Serversteuerelement in der UI-Serversteuerelementhierarchie der Seite nach oben übergeben wird.</summary>
        <returns>
          <see langword="true" />, wenn das Ereignis abgebrochen wurde, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCancelCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnCancelCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCancelCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.CancelCommand" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnCancelCommand%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis wird ausgelöst, wenn die `Cancel` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis legt die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um `-1` (um das Element zu deaktivieren), und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnCancelCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.CancelCommand> Ereignis. Dieser bricht ab, auf ein Element im vorgenommene Änderungen der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Cancel` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnCancelCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDeleteCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnDeleteCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDeleteCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.DeleteCommand" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnDeleteCommand%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis wird ausgelöst, wenn die `Delete` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für das <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis entfernt das ausgewählte Element aus der Datenquelle, und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnDeleteCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.DeleteCommand> Ereignis. Löscht das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Delete` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnDeleteCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnEditCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnEditCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEditCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.EditCommand" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnEditCommand%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis wird ausgelöst, wenn die `Edit` geklickt wird für ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis legt die <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um die ausgewählte Zeile, und klicken Sie dann bindet die Daten in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnEditCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.EditCommand> Ereignis. Können Sie beim Bearbeiten des ausgewählten Elements in der <xref:System.Web.UI.WebControls.DataList> steuern, wann die `Edit` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnEditCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnInit(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.Control.Init" />-Ereignis für das <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelement aus.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.OnInit%2A> von der Methode wird die <xref:System.Web.UI.WebControls.DataList> Steuerelement an alle Initialisierungsschritte auszuführen, die zum Erstellen und Einrichten einer Instanz erforderlich sind.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListCommandEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.ItemCommand" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnItemCommand%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.ItemCommand> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCommand> Ereignis wird ausgelöst, wenn keine der Schaltflächen, in geklickt wird der <xref:System.Web.UI.WebControls.DataList> steuern und wird häufig verwendet, wenn Sie ein Schaltflächen-Steuerelement mit einem benutzerdefinierten `CommandName` Wert, z. B. `Add`in die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnItemCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemCommand> Ereignis auf ein Element aus der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemCommand2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand2/CS/datalistitemcommand2cs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand2/VB/datalistitemcommand2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnItemCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCreated (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCreated(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.ItemCreated" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnItemCreated%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis wird ausgelöst, wenn ein Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erstellt wird, sowohl bei Roundtrips auch bei der Daten an das Steuerelement gebunden ist.  
  
 Die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis wird häufig verwendet, um steuern den Inhalt und die Darstellung einer Zeile in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnItemCreated%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemCreated> Ereignis, um die Reihenfolge anzuzeigen, in der Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erstellt werden.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCreated#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated/CS/datalistitemcreatedcs.aspx#1)]
 [!code-aspx-vb[DataListItemCreated#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated/VB/datalistitemcreatedvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemCreated2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCreated2/CS/datalistitemcreated2cs.aspx#1)]
 [!code-aspx-vb[DataListItemCreated2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCreated2/VB/datalistitemcreated2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnItemCreated(System.Web.UI.WebControls.DataListItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDataBound">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDataBound (System.Web.UI.WebControls.DataListItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDataBound(class System.Web.UI.WebControls.DataListItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.ItemDataBound" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnItemDataBound%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.ItemDataBound> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.ItemDataBound> Ereignis wird ausgelöst, nachdem ein Element an Daten gebunden ist die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Dieses Ereignis bietet Ihnen die letzte Gelegenheit, die Daten zugreifen, bevor er auf dem Client angezeigt wird. Nachdem dieses Ereignis ausgelöst wird, ist das Datenelement nicht mehr verfügbar.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnItemDataBound%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.ItemDataBound> Ereignis, um die Reihenfolge anzuzeigen, in der Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement an das Steuerelement gebunden werden.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemDataBound#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound/CS/datalistitemdataboundcs.aspx#1)]
 [!code-aspx-vb[DataListItemDataBound#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound/VB/datalistitemdataboundvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListItemDataBound2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemDataBound2/CS/datalistitemdatabound2cs.aspx#1)]
 [!code-aspx-vb[DataListItemDataBound2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemDataBound2/VB/datalistitemdatabound2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnItemDataBound(System.Web.UI.WebControls.DataListItemEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnUpdateCommand">
      <MemberSignature Language="C#" Value="protected virtual void OnUpdateCommand (System.Web.UI.WebControls.DataListCommandEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnUpdateCommand(class System.Web.UI.WebControls.DataListCommandEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Web.UI.WebControls.DataListCommandEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.Web.UI.WebControls.DataListItemEventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.DataList.UpdateCommand" />-Ereignis aus. Dadurch können Sie einen benutzerdefinierten Handler für das Ereignis bereitstellen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.OnUpdateCommand%2A> aufzurufende Methode geben Sie einen benutzerdefinierten Handler für das <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis.  
  
 Die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis wird ausgelöst, wenn die `Update` Schaltfläche für ein Element geklickt wird.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis aktualisiert die Daten, legt der <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um `-1` (um das Element zu deaktivieren), und klicken Sie dann die Daten in die Bindung der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
 Mit der <xref:System.Web.UI.WebControls.DataList.OnUpdateCommand%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis. Es ermöglicht Ihnen, ändern das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement mit den neuen Werten, die vom Benutzer eingegebenen bei der `Update` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.DataList.OnUpdateCommand(System.Web.UI.WebControls.DataListCommandEventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PrepareControlHierarchy">
      <MemberSignature Language="C#" Value="protected override void PrepareControlHierarchy ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void PrepareControlHierarchy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.PrepareControlHierarchy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Bereitet die Steuerelementhierarchie zum Rendern in das <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.PrepareControlHierarchy%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, wenn Ableiten eines benutzerdefinierten Steuerelements aus der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Die <xref:System.Web.UI.WebControls.DataList.PrepareControlHierarchy%2A> bereitet die Steuerelementhierarchie vor und legt fest, Stile enthaltenen <xref:System.Web.UI.WebControls.DataListItem> steuert, vor dem Rendern der untergeordneten Steuerelemente.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Überschreiben der <see cref="M:System.Web.UI.WebControls.DataList.PrepareControlHierarchy" /> Methode zum Anpassen von Stilen für Steuerelemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> , bevor sie gerendert werden.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RenderContents">
      <MemberSignature Language="C#" Value="protected override void RenderContents (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void RenderContents(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.RenderContents(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream zum Rendern des HTML-Inhalts auf dem Client darstellt.</param>
        <summary>Gibt die Listenelemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet, wenn Ableiten eines benutzerdefinierten Steuerelements aus der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Die <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> Methode rendert die innere Inhalt des der <xref:System.Web.UI.WebControls.DataList> Steuerelement, einschließlich der enthaltenen <xref:System.Web.UI.WebControls.DataListItem> Steuerelemente.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.DataList.RenderContents%2A> Methode in einem benutzerdefinierten steuern, sodass einige Text vorausgeht der <xref:System.Web.UI.WebControls.DataList> Objekt.  
  
 [!code-aspx-csharp[CustomDataListRenderContents#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListRenderContents/CS/custom_datalist_rendercontentscs.aspx#1)]
 [!code-aspx-vb[CustomDataListRenderContents#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListRenderContents/VB/custom_datalist_rendercontentsvb.aspx#1)]  
[!code-csharp[CustomDataListRenderContents#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomDataListRenderContents/CS/custom_datalist_rendercontents.cs#2)]
[!code-vb[CustomDataListRenderContents#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomDataListRenderContents/VB/custom_datalist_rendercontents.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatColumns">
      <MemberSignature Language="C#" Value="public virtual int RepeatColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RepeatColumns" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Spalten ab, die im <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelement angezeigt werden, oder legt diese fest.</summary>
        <value>Die Anzahl der Spalten, die im <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelement angezeigt werden. Der Standardwert ist <see langword="0" />, gibt an, dass die Elemente in der <see cref="T:System.Web.UI.WebControls.DataList" /> -Steuerelement angezeigt werden, in eine einzelne Zeile oder Spalte basierend auf den Wert von der <see cref="P:System.Web.UI.WebControls.DataList.RepeatDirection" /> Eigenschaft.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit dieser Eigenschaft können Sie die Anzahl der Spalten angeben, die anzeigen, Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Wenn Sie diese Eigenschaft festlegen, um z. B. `5`, die <xref:System.Web.UI.WebControls.DataList> -Steuerelement zeigt die Elemente in fünf Spalten.  
  
> [!NOTE]
>  Wenn diese Eigenschaft, um festgelegt wird `0`, <xref:System.Web.UI.WebControls.DataList> -Steuerelement zeigt die Elemente in eine einzelne Zeile oder Spalte basierend auf den Wert des der <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> Eigenschaft. Wenn die <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> -Eigenschaftensatz auf `RepeatDirection.Horizontal`, werden die Elemente in einer einzelnen Zeile angezeigt. Wenn die <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> -Eigenschaftensatz auf `RepeatDirection.Vertical`, die Elemente in einer einzelnen Spalte angezeigt werden.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> Eigenschaft, um die Anzahl der anzuzeigenden Spalten anzugeben. die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Anzahl von Spalten ist ein negativer Wert.</exception>
      </Docs>
    </Member>
    <Member MemberName="RepeatDirection">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatDirection RepeatDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatDirection RepeatDirection" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt sie fest, ob die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement vertikal oder horizontal angezeigt.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.RepeatDirection" />-Werte. Die Standardeinstellung ist <see langword="Vertical" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> Eigenschaft, um die Richtung der Anzeige des anzugeben der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Die Anzahl der angezeigten Spalten immer gemäß der <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> Eigenschaft.  
  
 Wenn diese Eigenschaft, um festgelegt wird `RepeatDirection.Vertical`, die Elemente in der Liste angezeigt in Spalten, die von oben nach unten geladen werden, und dann von links nach rechts, bis alle Elemente gerendert werden. Z. B. wenn die <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> -Eigenschaftensatz auf `3`, die Elemente in der <xref:System.Web.UI.WebControls.DataList> Steuerelement werden in drei Spalten, wie in der folgenden Tabelle angezeigt.  
  
||||  
|-|-|-|  
|1|4|7|  
|2|5|8|  
|3|6|9|  
  
 Wenn diese Eigenschaft, um festgelegt wird `RepeatDirection.Horizontal`, werden die Elemente in der Liste angezeigt, in Zeilen, die von links nach rechts geladen, dann von oben nach unten, bis alle Elemente gerendert werden. Z. B. wenn die <xref:System.Web.UI.WebControls.DataList.RepeatColumns%2A> -Eigenschaftensatz auf `3`, die Elemente der <xref:System.Web.UI.WebControls.DataList> -Steuerelement in den Zeilen der drei Elemente angezeigt werden, wie in der folgenden Tabelle.  
  
||||  
|-|-|-|  
|1|2|3|  
|4|5|6|  
|7|8|9|  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.RepeatDirection%2A> Eigenschaft, um die Richtung anzugeben, in dem die <xref:System.Web.UI.WebControls.DataList> Steuerelement angezeigt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist nicht der <see cref="T:System.Web.UI.WebControls.RepeatDirection" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="RepeatLayout">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.RepeatLayout RepeatLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.RepeatLayout RepeatLayout" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.RepeatLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.RepeatLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt fest, ob das Steuerelement in einer Tabelle oder dem Datenfluss Layout angezeigt wird.</summary>
        <value>Ein Wert, der angibt, ob das Steuerelement in einer Tabelle oder im Flusslayout angezeigt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> Eigenschaft, um anzugeben, ob die Elemente in der <xref:System.Web.UI.WebControls.DataList> -Steuerelement in einer Tabelle angezeigt werden. Die einzige <xref:System.Web.UI.WebControls.RepeatLayout> Werte, die von unterstützt werden die <xref:System.Web.UI.WebControls.DataList> Steuerelement sind <xref:System.Web.UI.WebControls.RepeatLayout.Table> und <xref:System.Web.UI.WebControls.RepeatLayout.Flow>.  
  
 Wenn diese Eigenschaft, um festgelegt wird `RepeatLayout.Table`, die Elemente in der Liste in einer Tabelle angezeigt werden. Wenn diese Eigenschaft, um festgelegt wird `RepeatLayout.Flow`, ohne die Struktur einer Tabelle werden die Elemente in der Liste angezeigt.  
  
 Wenn die <xref:System.Web.UI.WebControls.DataList> Steuerelement in einer Tabelle angezeigt wird, können Sie die <xref:System.Web.UI.WebControls.DataList.GridLines%2A> Eigenschaft, um ein Raster Linienart anzugeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie der <xref:System.Web.UI.WebControls.DataList.RepeatLayout%2A> -Eigenschaft den Layoutstil des an die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListLayout#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListLayout/CS/datalistlayoutcs.aspx#1)]
 [!code-aspx-vb[DataListLayout#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListLayout/VB/datalistlayoutvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist nicht mit einer der unterstützten <see cref="T:System.Web.UI.WebControls.RepeatLayout" /> Werte.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert den Ansichtszustand der Änderungen an das Steuerelement seit dem die Seite an den Server zurückgesendet wurde.</summary>
        <returns>Das Objekt, das die Änderungen an der <see cref="T:System.Web.UI.WebControls.DataList" /> den Ansichtszustand.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> Methode wird hauptsächlich von Steuerelemententwicklern verwendet.  
  
 Ansichtszustand besteht in der Ansammlung der Werte der Eigenschaften eines Serversteuerelements. Diese Werte werden automatisch in des Serversteuerelements platziert <xref:System.Web.UI.Control.ViewState%2A> -Eigenschaft, die eine Instanz von der <xref:System.Web.UI.StateBag> Klasse. Die <xref:System.Web.UI.Control.ViewState%2A> den Wert der Eigenschaft wird dann nach der Zustand speichern-Phase des Lebenszyklus des Serversteuerelements an ein Zeichenfolgenobjekt beibehalten. Weitere Informationen finden Sie unter [ASP.NET Seite Übersicht über den Lebenszyklus](http://msdn.microsoft.com/library/7949d756-1a79-464e-891f-904b1cfc7991).  
  
 Wenn der Ansichtszustand gespeichert wird, wird dieser String-Objekt als Variable an den Client zurückgegeben, die in ein verborgenes HTML-Eingabeelement gespeichert ist. Beim Erstellen von benutzerdefinierten Steuerelementen können Sie die Effizienz verbessern, indem Sie überschreiben die <xref:System.Web.UI.WebControls.DataList.SaveViewState%2A> Methode, und ändern die <xref:System.Web.UI.Control.ViewState%2A> Eigenschaft für das Serversteuerelement. Weitere Informationen finden Sie unter [Entwickeln von benutzerdefinierten ASP.NET-Serversteuerelementen](http://msdn.microsoft.com/library/fbe26c16-cff4-4089-b3dd-877411f0c0ef) und [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommandName">
      <MemberSignature Language="C#" Value="public const string SelectCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string SelectCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.SelectCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die <see langword="Select" /> Befehlsnamen. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SelectCommandName> Feld zur Darstellung der `Select` Befehlsnamen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public virtual int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Index des ausgewählten Elements im <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelement ab oder legt diesen fest.</summary>
        <value>Der Index des ausgewählten Elements im <see cref="T:System.Web.UI.WebControls.DataList" />-Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> -Eigenschaft das ausgewählte Element in programmgesteuert an die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Diese Eigenschaft können auch um den Index des ausgewählten Elements zu ermitteln.  
  
> [!NOTE]
>  Die <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> Eigenschaft ist nullbasiert.  
  
 Um ein Element zu deaktivieren, legen Sie die <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> Eigenschaft `-1`.  
  
 Die <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> -Eigenschaft im Steuerelementzustand gespeichert wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SelectedIndex%2A> -Eigenschaft an das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Wert ist kleiner als <see langword="-1" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.DataListItem SelectedItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.DataListItem SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das ausgewählte Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.DataListItem" /> , die das ausgewählte Element im stellt die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SelectedItem%2A> Eigenschaft, um eine <xref:System.Web.UI.WebControls.DataListItem> -Objekt, das ausgewählte Element im darstellt, der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Dieses Objekt kann dann verwendet werden, den Zugriff auf die Eigenschaften des ausgewählten Elements.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SelectedItem%2A> Eigenschaft zeigt den Inhalt des ausgewählten Elements in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[Classic DataList.SelectedItem Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic DataList.SelectedItem Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic DataList.SelectedItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic DataList.SelectedItem Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItemStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SelectedItemStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SelectedItemStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItemStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für das ausgewählte Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> -Objekt, das die Stileigenschaften für das ausgewählte Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mithilfe dieser Eigenschaft geben Sie einen benutzerdefinierten Stil für das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Element Formateigenschaften in der <xref:System.Web.UI.WebControls.DataList> Steuerelement erbt von der Style-Eigenschaft für ein Element in eine andere durch eine Hierarchie. Die Stileigenschaften niedriger festlegen, in der Hierarchie werden von Stileigenschaften eines Elements in der Hierarchie höher geerbt. Z. B., wenn Sie angeben, dass eine rote Schriftart für die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> -Eigenschaft, die alle anderen Stileigenschaften eines Elements in der <xref:System.Web.UI.WebControls.DataList> Steuerelement müssen zudem einen roten Schrift dargestellt. Dadurch können Sie eine allgemeine Darstellung für das Steuerelement bereitstellen, indem Sie eine einzelnes Element Style-Eigenschaft festlegen. Sie können die geerbte stileinstellungen für ein Element Style-Eigenschaft überschreiben, die in der Hierarchie höher wird durch Festlegen der Style-Eigenschaften. Sie können beispielsweise angeben, eine blaue Schriftart für die <xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A> -Eigenschaft, die angegebene roten Schrift überschreiben die <xref:System.Web.UI.WebControls.DataList.ItemStyle%2A> Eigenschaft. Die folgende Tabelle enthält die Hierarchiereihenfolge vom höchsten zum niedrigsten Wert.  
  
|Rangfolge|Style-Eigenschaft|  
|----------------|--------------------|  
|1|<xref:System.Web.UI.WebControls.DataList.EditItemStyle%2A>|  
|2|<xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A>|  
|3|<xref:System.Web.UI.WebControls.DataList.AlternatingItemStyle%2A>|  
|4|<xref:System.Web.UI.WebControls.DataList.ItemStyle%2A>|  
|5|<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>|  
  
 Um einen benutzerdefinierten Stil für das ausgewählte Element angeben möchten, platzieren Sie die `<SelectedItemStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<SelectedItemStyle>` Tag.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> -Eigenschaft an eine benutzerdefinierte Hintergrundfarbe für das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItemTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SelectedItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SelectedItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für das ausgewählte Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> , enthält die Vorlage für das ausgewählte Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A> Eigenschaft, um den Inhalt des ausgewählten Elements zu steuern. Die Darstellung des ausgewählten Elements wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.SelectedItemStyle%2A> Eigenschaft.  
  
 Zum Angeben einer Vorlage für das ausgewählte Element platzieren der `<SelectedItemTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<SelectedItemTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SelectedItemTemplate%2A> Eigenschaft, um den Inhalt des ausgewählten Elements im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListItemCommand#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListItemCommand/CS/datalistitemcommandcs.aspx#1)]
 [!code-aspx-vb[DataListItemCommand#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListItemCommand/VB/datalistitemcommandvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedValue">
      <MemberSignature Language="C#" Value="public object SelectedValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SelectedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert des Schlüsselfelds für das ausgewählte Datenelement Liste ab.</summary>
        <value>Das Schlüsselfeld-Wert für das ausgewählte Datenelement Liste. Die Standardeinstellung ist <see langword="null" />, was bedeutet, dass derzeit keine Datenlistenelement ausgewählt ist.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Web.UI.WebControls.BaseDataList.DataKeyField" /> Eigenschaft nicht festgelegt wurde.</exception>
      </Docs>
    </Member>
    <Member MemberName="SeparatorStyle">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TableItemStyle SeparatorStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.TableItemStyle SeparatorStyle" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SeparatorStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.NotifyParentProperty(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TableItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stileigenschaften für das Trennzeichen zwischen den einzelnen Elementen in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt, das die Stileigenschaften für das Trennzeichen zwischen den einzelnen Elementen in enthält die <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist eine leere <see cref="T:System.Web.UI.WebControls.TableItemStyle" /> Objekt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> -Eigenschaft einen benutzerdefinierten Stil für das Trennzeichen zwischen jedem Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Das Trennzeichen können Sie ein Element mit benutzerdefinierten Inhalten zwischen den einzelnen Elementen in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Allgemeine Stilattribute, die angepasst werden können enthalten Vordergrundfarbe, Hintergrundfarbe, Schriftart und die Ausrichtung in der Zelle. Bereitstellen von einem anderen Format verbessert das Erscheinungsbild von der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Um einen benutzerdefinierten Stil für das Trennzeichen angeben möchten, platzieren Sie die `<SeparatorStyle>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie die Stilattribute innerhalb des öffnenden auflisten `<SeparatorStyle>` Tag.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> -Eigenschaft an eine benutzerdefinierte Hintergrundfarbe für das Trennzeichen zwischen jedem Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListSeparatorStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListSeparatorStyle/CS/datalistseparatorstylecs.aspx#1)]
 [!code-aspx-vb[DataListSeparatorStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListSeparatorStyle/VB/datalistseparatorstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.ITemplate SeparatorTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.ITemplate SeparatorTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.SeparatorTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.TemplateContainer(typeof(System.Web.UI.WebControls.DataListItem))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.ITemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die Vorlage für das Trennzeichen zwischen den Elementen der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Ein <see cref="T:System.Web.UI.ITemplate" /> , enthält die Vorlage für das Trennzeichen zwischen den Elementen in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement. Der Standardwert ist <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A> Eigenschaft, um den Inhalt für das Trennzeichen zwischen den Elementen des steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement. Das Trennzeichen können Sie ein Element mit benutzerdefinierten Inhalten zwischen den einzelnen Elementen in der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die Darstellung für das Trennzeichen zwischen den Elementen der <xref:System.Web.UI.WebControls.DataList> Steuerelement wird gesteuert, indem die <xref:System.Web.UI.WebControls.DataList.SeparatorStyle%2A> Eigenschaft.  
  
 Zum Angeben einer Vorlage für das Trennzeichen fügen Sie der `<SeparatorTemplate>` zwischen dem Start- und Endtag des Tags der <xref:System.Web.UI.WebControls.DataList> Steuerelement. Anschließend können Sie den Inhalt der Vorlage zwischen den öffnenden und schließenden auflisten `<SeparatorTemplate>` Tags.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.SeparatorTemplate%2A> Eigenschaft, um den Inhalt für das Trennzeichen zwischen jedem Element im steuern die <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListSeparatorStyle#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListSeparatorStyle/CS/datalistseparatorstylecs.aspx#1)]
 [!code-aspx-vb[DataListSeparatorStyle#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListSeparatorStyle/VB/datalistseparatorstylevb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFooter">
      <MemberSignature Language="C#" Value="public virtual bool ShowFooter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFooter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ShowFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob der Fußzeilenbereich auf angezeigt wird der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>
          <see langword="true" />Wenn der Fußzeilenbereich angezeigt wird; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />, ist jedoch diese Eigenschaft nur überprüft, wenn die <see cref="P:System.Web.UI.WebControls.DataList.FooterTemplate" /> Eigenschaft ist nicht <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> Eigenschaft, um anzugeben, ob der Fußzeilenbereich, in angezeigt wird der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Sie können die Darstellung der Fußzeilenbereich steuern, durch Festlegen der <xref:System.Web.UI.WebControls.DataList.FooterStyle%2A> Eigenschaft. Der Inhalt der Fußzeilenbereich wird gesteuert, von der <xref:System.Web.UI.WebControls.DataList.FooterTemplate%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.ShowFooter%2A> Eigenschaft zum Anzeigen der Fußzeilenbereich enthält, in der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListShowHeader#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListShowHeader/CS/datalistshowheadercs.aspx#1)]
 [!code-aspx-vb[DataListShowHeader#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListShowHeader/VB/datalistshowheadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHeader">
      <MemberSignature Language="C#" Value="public virtual bool ShowHeader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.ShowHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob auf der Headerbereich angezeigt wird der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>
          <see langword="true" />Wenn der Header angezeigt wird; andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />, ist jedoch diese Eigenschaft nur überprüft, wenn die <see cref="P:System.Web.UI.WebControls.DataList.HeaderTemplate" /> Eigenschaft ist nicht <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> Eigenschaft, um anzugeben, ob der Headerabschnitt, in angezeigt wird der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
 Sie können die Darstellung des Headerabschnitts steuern, durch Festlegen der <xref:System.Web.UI.WebControls.DataList.HeaderStyle%2A> Eigenschaft. Der Inhalt des Headerabschnitts wird gesteuert, von der <xref:System.Web.UI.WebControls.DataList.HeaderTemplate%2A> Eigenschaft.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.DataList.ShowHeader%2A> Headerabschnitts im anzuzeigende Eigenschaft der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListShowHeader#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListShowHeader/CS/datalistshowheadercs.aspx#1)]
 [!code-aspx-vb[DataListShowHeader#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListShowHeader/VB/datalistshowheadervb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle">
      <MemberSignature Language="C#" Value="System.Web.UI.WebControls.Style IRepeatInfoUser.GetItemStyle (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Web.UI.WebControls.Style System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Style</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="itemType">Einer der <see cref="T:System.Web.UI.WebControls.ListItemType" />-Enumerationswerte.</param>
        <param name="repeatIndex">Der Index des Elements im Listensteuerelement.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Web.UI.WebControls.IRepeatInfoUser.GetItemStyle(System.Web.UI.WebControls.ListItemType,System.Int32)" />.</summary>
        <returns>Ein <see cref="T:System.Web.UI.WebControls.Style" />, der den Stil des angegebenen Elementtyps am angegebenen Index im Listensteuerelement darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.DataList>-Instanz in eine <xref:System.Web.UI.WebControls.IRepeatInfoUser>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasFooter">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasFooter" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasFooter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasFooter" />.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.DataList>-Instanz in eine <xref:System.Web.UI.WebControls.IRepeatInfoUser>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasHeader">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasHeader" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasHeader" />.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Kann verwendet werden nur, wenn die <xref:System.Web.UI.WebControls.DataList> umgewandelt ist eine <xref:System.Web.UI.WebControls.IRepeatInfoUser> Schnittstelle.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators">
      <MemberSignature Language="C#" Value="bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#HasSeparators" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.HasSeparators" />.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.DataList>-Instanz in eine <xref:System.Web.UI.WebControls.IRepeatInfoUser>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RenderItem">
      <MemberSignature Language="C#" Value="void IRepeatInfoUser.RenderItem (System.Web.UI.WebControls.ListItemType itemType, int repeatIndex, System.Web.UI.WebControls.RepeatInfo repeatInfo, System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(valuetype System.Web.UI.WebControls.ListItemType itemType, int32 repeatIndex, class System.Web.UI.WebControls.RepeatInfo repeatInfo, class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemType" Type="System.Web.UI.WebControls.ListItemType" />
        <Parameter Name="repeatIndex" Type="System.Int32" />
        <Parameter Name="repeatInfo" Type="System.Web.UI.WebControls.RepeatInfo" />
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="itemType">Der Typ des Elements.</param>
        <param name="repeatIndex">Der Index des Elements.</param>
        <param name="repeatInfo">Informationen, die zum Rendern des Elements verwendet wird.</param>
        <param name="writer">Die <see cref="T:System.Web.UI.HtmlTextWriter" /> Objekt, das zum Rendern des Elements verwendet.</param>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="M:System.Web.UI.WebControls.IRepeatInfoUser.RenderItem(System.Web.UI.WebControls.ListItemType,System.Int32,System.Web.UI.WebControls.RepeatInfo,System.Web.UI.HtmlTextWriter)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.DataList>-Instanz in eine <xref:System.Web.UI.WebControls.IRepeatInfoUser>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount">
      <MemberSignature Language="C#" Value="int System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.System#Web#UI#WebControls#IRepeatInfoUser#RepeatedItemCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Eine Beschreibung dieses Elements finden Sie unter <see cref="P:System.Web.UI.WebControls.IRepeatInfoUser.RepeatedItemCount" />.</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.DataList>-Instanz in eine <xref:System.Web.UI.WebControls.IRepeatInfoUser>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.DataList.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das HTML-Tag, der verwendet wird, zum Rendern der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <value>Gibt die <see cref="F:System.Web.UI.HtmlTextWriterTag.Table" /> tag, wenn die <see cref="P:System.Web.UI.WebControls.DataList.RepeatLayout" /> auf festgelegt ist <see cref="F:System.Web.UI.WebControls.RepeatLayout.Table" />ist, andernfalls gibt die <see cref="F:System.Web.UI.HtmlTextWriterTag.Span" /> Tag. Die Standardeinstellung ist <see cref="F:System.Web.UI.WebControls.RepeatLayout.Table" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.TagKey%2A> -Eigenschaft zum Bestimmen der <xref:System.Web.UI.HtmlTextWriterTag> -Wert, der zugeordnet ist ein <xref:System.Web.UI.WebControls.DataList> Steuerelement. Die <xref:System.Web.UI.WebControls.DataList.TagKey%2A> Eigenschaft wird hauptsächlich von Steuerelemententwicklern verwendet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.DataList.TrackViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verfolgt nach, Änderungen am Ansichtszustand auf die <see cref="T:System.Web.UI.WebControls.DataList" /> steuern, damit sie in des Steuerelements gespeichert werden können <see cref="P:System.Web.UI.Control.ViewState" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.TrackViewState%2A> Methode wird überschrieben, um den Ausgangspunkt zu kennzeichnen, ab dem Nachverfolgen und Speichern von an das Steuerelement als Teil der Ansichtszustand des Steuerelements Änderungen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public event System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.UI.WebControls.DataListCommandEventHandler UpdateCommand" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.DataList.UpdateCommand" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.DataListCommandEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt auf, wenn die <see langword="Update" /> geklickt wird für ein Element in der <see cref="T:System.Web.UI.WebControls.DataList" /> Steuerelement.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis wird ausgelöst, wenn die `Update` Schaltfläche für ein Element geklickt wird.  
  
 Eine typische Handler für die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis aktualisiert die Daten, legt der <xref:System.Web.UI.WebControls.DataList.EditItemIndex%2A> Eigenschaft, um `-1` (um das Element zu deaktivieren), und klicken Sie dann die Daten in die Bindung der <xref:System.Web.UI.WebControls.DataList> Steuerelement.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben angezeigt werden, die möglicherweise böswillige Clientskripts umfassen. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [wie: Behandeln von Ereignissen in einer Web Forms-Anwendung](~/docs/standard/events/how-to-consume-events-in-a-web-forms-application.md).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie angegeben und code für die <xref:System.Web.UI.WebControls.DataList.UpdateCommand> Ereignis. Es ermöglicht Ihnen, ändern das ausgewählte Element in der <xref:System.Web.UI.WebControls.DataList> Steuerelement mit den neuen Werten, die vom Benutzer eingegebenen bei der `Update` Schaltfläche geklickt wird.  
  
> [!NOTE]
>  Im folgenden Codebeispiel wird das Einzeldatei Codemodell verwendet und möglicherweise nicht ordnungsgemäß ausgeführt werden, wenn direkt in einem Code-Behind-Datei kopiert. In diesem Codebeispiel muss in eine leere Textdatei kopiert werden, die eine ASPX-Erweiterung verfügt. Weitere Informationen über das Web Forms-Codemodell finden Sie unter [Codemodell für ASP.NET Web Forms-Seite](http://msdn.microsoft.com/library/81b13e7a-b95b-4285-906f-d2dd77411417).  
  
 [!code-aspx-csharp[DataListEdit#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit/CS/datalisteditcs.aspx#1)]
 [!code-aspx-vb[DataListEdit#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit/VB/datalisteditvb.aspx#1)]  
  
 [!code-aspx-csharp[DataListEdit2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/DataListEdit2/CS/datalistedit2cs.aspx#1)]
 [!code-aspx-vb[DataListEdit2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/DataListEdit2/VB/datalistedit2vb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommandName">
      <MemberSignature Language="C#" Value="public const string UpdateCommandName;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string UpdateCommandName" />
      <MemberSignature Language="DocId" Value="F:System.Web.UI.WebControls.DataList.UpdateCommandName" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt die <see langword="Update" /> Befehlsnamen. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.DataList.UpdateCommandName> Feld zur Darstellung der `Update` Befehlsnamen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
