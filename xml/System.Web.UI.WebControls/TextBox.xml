<Type Name="TextBox" FullName="System.Web.UI.WebControls.TextBox">
  <TypeSignature Language="C#" Value="public class TextBox : System.Web.UI.WebControls.WebControl, System.Web.UI.IEditableTextControl, System.Web.UI.IPostBackDataHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextBox extends System.Web.UI.WebControls.WebControl implements class System.Web.UI.IEditableTextControl, class System.Web.UI.IPostBackDataHandler, class System.Web.UI.ITextControl" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.TextBox" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.UI.IEditableTextControl</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IPostBackDataHandler</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("TextChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.PreviewControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlBuilder(typeof(System.Web.UI.WebControls.TextBoxControlBuilder))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ControlValueProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.DataBindingHandler("System.Web.UI.Design.TextDataBindingHandler, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true, "Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.SupportsEventValidation</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ValidationProperty("Text")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zeigt ein Textfeld-Steuerelement für Benutzereingaben an.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In diesem Thema:  
  
-   [Introduction (Einführung)](#introduction)  
  
-   [Deklarationssyntax](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Einführung  
 Die <xref:System.Web.UI.WebControls.TextBox> -Steuerelement ist ein Eingabesteuerelement, in dem den Benutzer Text eingeben kann. Wird standardmäßig die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> Eigenschaft des Steuerelements festgelegt ist, um `TextBoxMode.SingleLine`, dem ein einzeiliges Textfeld angezeigt. Allerdings können Sie auch verwenden die <xref:System.Web.UI.WebControls.TextBox> -Steuerelement zum Anzeigen von einem mehrzeiligen Textfeld oder ein Textfeld, das eine Benutzereingabe Masken durch Ändern des Werts von der <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> Eigenschaft, um `TextBoxMode.MultiLine` oder `TextBoxMode.Password`bzw.. Den in angezeigten Text die <xref:System.Web.UI.WebControls.TextBox> Steuerelement angegeben oder bestimmt mithilfe der <xref:System.Web.UI.WebControls.TextBox.Text%2A> Eigenschaft.  
  
 Die <xref:System.Web.UI.WebControls.TextBox> Steuerelement enthält verschiedene Eigenschaften, die Ihnen ermöglichen, die Darstellung des Steuerelements zu steuern. Die Anzeigebreite des Textfelds in Zeichen, richtet sich nach seiner <xref:System.Web.UI.WebControls.TextBox.Columns%2A> Eigenschaft. Wenn die <xref:System.Web.UI.WebControls.TextBox> Steuerelement ein mehrzeiliges Textfeld ist, die Anzahl der angezeigten Zeilen richtet sich nach der <xref:System.Web.UI.WebControls.TextBox.Rows%2A> Eigenschaft. Zum Anzeigen von Text, der in umschließt die <xref:System.Web.UI.WebControls.TextBox> steuern, legen Sie die <xref:System.Web.UI.WebControls.TextBox.Wrap%2A> Eigenschaft `true`.  
  
 Sie können auch angeben, wie Daten eingegeben werden, in der <xref:System.Web.UI.WebControls.TextBox> Steuerelement, indem Sie einige Eigenschaften festlegen. Um zu verhindern, dass den Text im Steuerelement geändert wird, wird angezeigt, legen Sie die <xref:System.Web.UI.WebControls.TextBox.ReadOnly%2A> Eigenschaft `true`. Wenn Sie die Benutzereingabe auf eine angegebene Anzahl von Zeichen beschränken möchten, legen Sie die <xref:System.Web.UI.WebControls.TextBox.MaxLength%2A> Eigenschaft.  
  
 Eine Liste der anfänglichen Eigenschaftenwerte für eine Instanz von <xref:System.Web.UI.WebControls.TextBox>, finden Sie unter der <xref:System.Web.UI.WebControls.TextBox.%23ctor%2A> Konstruktor.  
  
> [!CAUTION]
>  Dieses Steuerelement kann verwendet werden, Benutzereingaben akzeptieren die böswillige Clientskripts enthalten könnten. Überprüfen Sie alle Informationen, die für ausführbare Skripts, SQL-Anweisungen oder anderen Code von einem Client gesendet wird, vor der Anzeige in der Anwendung. Sie können die Validierungssteuerelemente verwenden, Benutzereingaben zu überprüfen, bevor der Eingabetext in einem Steuerelement angezeigt. ASP.NET bietet eine Funktion für den Überprüfung eingabeanforderung zum Blockieren von Skript und HTML in Benutzereingaben. Weitere Informationen finden Sie unter [Standardsteuerelemente schützen](http://msdn.microsoft.com/library/f3e7718f-63d0-44a3-bd5f-48cc2059c2a8), [wie: schützen gegen Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b), und [Validieren von Benutzereingaben in ASP.NET Web Pages](http://msdn.microsoft.com/library/4ad3dacb-89e0-4cee-89ac-40a3f2a85461).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Deklarationssyntax  
  
```  
<asp:TextBox  
    AccessKey="string"  
    AutoCompleteType="None|Disabled|Cellular|Company|Department|  
        DisplayName|Email|FirstName|Gender|HomeCity|HomeCountryRegion|  
        HomeFax|HomePhone|HomeState|HomeStreetAddress|HomeZipCode|  
        Homepage|JobTitle|LastName|MiddleName|Notes|Office|Pager|  
        BusinessCity|BusinessCountryRegion|BusinessFax|BusinessPhone|  
        BusinessState|BusinessStreetAddress|BusinessUrl|  
        BusinessZipCode|Search"  
    AutoPostBack="True|False"  
    BackColor="color name|#dddddd"  
    BorderColor="color name|#dddddd"  
    BorderStyle="NotSet|None|Dotted|Dashed|Solid|Double|Groove|Ridge|  
        Inset|Outset"  
    BorderWidth="size"  
    CausesValidation="True|False"  
    Columns="integer"  
    CssClass="string"  
    Enabled="True|False"  
    EnableTheming="True|False"  
    EnableViewState="True|False"  
    Font-Bold="True|False"  
    Font-Italic="True|False"  
    Font-Names="string"  
    Font-Overline="True|False"  
    Font-Size="string|Smaller|Larger|XX-Small|X-Small|Small|Medium|  
        Large|X-Large|XX-Large"  
    Font-Strikeout="True|False"  
    Font-Underline="True|False"  
    ForeColor="color name|#dddddd"  
    Height="size"  
    ID="string"  
    MaxLength="integer"  
    OnDataBinding="DataBinding event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnTextChanged="TextChanged event handler"  
    OnUnload="Unload event handler"  
    ReadOnly="True|False"  
    Rows="integer"  
    runat="server"  
    SkinID="string"  
    Style="string"  
    TabIndex="integer"  
    Text="string"  
    TextMode="SingleLine|MultiLine|Password"  
    ToolTip="string"  
    ValidationGroup="string"  
    Visible="True|False"  
    Width="size"  
    Wrap="True|False"  
/>  
```  
  
   
  
## Examples  
 Ist ein Visual Studio Web Site-Projekt mit Quellcode zu diesem Thema steht verfügbar: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=192423).  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox> Benutzereingaben abzurufenden Steuerelements. Wenn der Benutzer klickt auf die **hinzufügen** Schaltfläche, die Summe der Werte in die Textfelder eingegeben wird angezeigt.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
```csharp  
<%@ Page Language="C#" AutoEventWireup="True" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
      protected void AddButton_Click(Object sender, EventArgs e)  
      {  
         int Answer;  
         Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text);  
         AnswerMessage.Text = Answer.ToString();  
      }  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Page Language="vb" AutoEventWireup="false" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
        Protected Sub AddButton_Click(sender As Object, e As EventArgs)  
            Dim Answer As Integer  
            Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text)  
            AnswerMessage.Text = Answer.ToString()  
        End Sub  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.UI.WebControls.TextBox" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden Sie diesen Konstruktor erstellt und initialisiert eine neue Instanz der dem <xref:System.Web.UI.WebControls.TextBox> Klasse.  
  
 Die folgende Tabelle zeigt die anfängliche Eigenschaftswert für eine Instanz von <xref:System.Web.UI.WebControls.TextBox>.  
  
|Eigenschaft|Anfangswert|  
|--------------|-------------------|  
|`TagKey`|`HtmlTextWriterTag.Input`|  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.%23ctor%2A> Konstruktor dynamisch Hinzufügen einer <xref:System.Web.UI.WebControls.TextBox> Steuerelement auf der Seite.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBox Constructor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBox Constructor/CS/textboxctorcs.aspx#1)]
 [!code-aspx-vb[TextBox Constructor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBox Constructor/VB/textboxctorvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttributesToRender">
      <MemberSignature Language="C#" Value="protected override void AddAttributesToRender (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddAttributesToRender(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.AddAttributesToRender(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Ein <see cref="T:System.Web.UI.HtmlTextWriter" />, der den Ausgabestream für das Rendering von HTML-Inhalten auf dem Client darstellt.</param>
        <summary>Fügt HTML-Attribute und-Stile gerendert werden in den angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" /> Instanz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet, die zusätzliche Attribute eingefügt und Stile in die <xref:System.Web.UI.HtmlTextWriter> Ausgabestream für das ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Diese Methode überschreibt <xref:System.Web.UI.WebControls.WebControl.AddAttributesToRender%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.TextBox.AddAttributesToRender%2A> Methode in einem benutzerdefinierten Serversteuerelement, damit die <xref:System.Web.UI.WebControls.TextBox> Steuerelementtext immer fett angezeigt wird.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxAddAttributesToRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxAddAttributesToRender/CS/custom_textbox_addattributestorendercs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxAddAttributesToRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxAddAttributesToRender/VB/custom_textbox_addattributestorendervb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxAddAttributesToRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxAddAttributesToRender/CS/custom_textbox_addattributestorender.cs#2)]
 [!code-vb[CustomTextBoxAddAttributesToRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxAddAttributesToRender/VB/custom_textbox_addattributestorender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddParsedSubObject">
      <MemberSignature Language="C#" Value="protected override void AddParsedSubObject (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void AddParsedSubObject(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.AddParsedSubObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein <see cref="T:System.Object" />, das das analysierte Element darstellt.</param>
        <summary>Überschrieben, um nur das Hinzufügen von literalen Steuerelementen als ermöglichen die <see cref="P:System.Web.UI.WebControls.TextBox.Text" /> Eigenschaft.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.TextBox.AddParsedSubObject%2A> Methode in einem benutzerdefinierten steuern, sodass immer festgelegt wird, die <xref:System.Web.UI.WebControls.TextBox.Text%2A> Eigenschaft auf des analysierten Objekts `Text` Eigenschaft, wenn das analysierte Objekt ist ein <xref:System.Web.UI.WebControls.Literal> -Steuerelement, und Andernfalls wird eine Ausnahme ausgelöst.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxAddParsedSubObject#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxAddParsedSubObject/CS/custom_textbox_addparsedsubobjectcs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxAddParsedSubObject#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxAddParsedSubObject/VB/custom_textbox_addparsedsubobjectvb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxAddParsedSubObject#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxAddParsedSubObject/CS/custom_textbox_addparsedsubobject.cs#2)]
 [!code-vb[CustomTextBoxAddParsedSubObject#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxAddParsedSubObject/VB/custom_textbox_addparsedsubobject.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="obj" /> ist nicht vom Typ <see cref="T:System.Web.UI.LiteralControl" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteType">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.AutoCompleteType AutoCompleteType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.AutoCompleteType AutoCompleteType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.AutoCompleteType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.AutoCompleteType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert an das automatische Verhalten von der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement</summary>
        <value>Eines der <see cref="T:System.Web.UI.WebControls.AutoCompleteType" /> -Enumerationswerte, der angibt, des automatische Verhaltens für die <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement. Der Standardwert ist <see cref="F:System.Web.UI.WebControls.AutoCompleteType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um die Dateneingabe zu unterstützen, unterstützen Microsoft Internet Explorer 5 und höher sowie einige andere Browser eine Funktion, die als "AutoVervollständigen" bezeichnet. AutoVervollständigen überwacht ein Textfeld und erstellt eine Liste von Werten, die vom Benutzer eingegeben werden. Wenn der Benutzer in das Textfeld zu einem späteren Zeitpunkt zurückkehrt, wird die Liste angezeigt. Statt einen zuvor eingegebenen Wert, kann der Benutzer den Wert einfach aus dieser Liste auswählen. Verwenden der <xref:System.Web.UI.WebControls.TextBox.AutoCompleteType%2A> Eigenschaft zum Steuern des Verhaltens der AutoVervollständigen-Funktion für eine <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Die <xref:System.Web.UI.WebControls.AutoCompleteType?displayProperty=nameWithType> Enumeration wird verwendet, um die Werte darzustellen, die Sie, um anwenden können die <xref:System.Web.UI.WebControls.TextBox.AutoCompleteType%2A> Eigenschaft.  
  
> [!NOTE]
>  Die AutoVervollständigen-Funktion wird von nicht von allen Browsern unterstützt. Überprüfen Sie mit Ihrem Browser können Sie herausfinden.  
  
 Wird standardmäßig die <xref:System.Web.UI.WebControls.TextBox.AutoCompleteType%2A> -Eigenschaft für eine <xref:System.Web.UI.WebControls.TextBox> Steuerelement festgelegt ist, um `AutoCompleteType.None`. Mit dieser Einstellung wird die <xref:System.Web.UI.WebControls.TextBox> Steuerelement teilt die Liste mit anderen <xref:System.Web.UI.WebControls.TextBox> steuert mit den gleichen <xref:System.Web.UI.Control.ID%2A> Eigenschaft auf verschiedenen Seiten. Sie können auch eine Liste zwischen freigeben <xref:System.Web.UI.WebControls.TextBox> Steuerelemente anhand einer Kategorie, statt eine <xref:System.Web.UI.Control.ID%2A> Eigenschaft. Beim Festlegen der <xref:System.Web.UI.WebControls.TextBox.AutoCompleteType%2A> -Eigenschaft auf einen der Kategoriewerte (z. B. `AutoCompleteType.FirstName`, `AutoCompleteType.LastName`usw.), werden alle <xref:System.Web.UI.WebControls.TextBox> -Steuerelemente mit der gleichen Kategorie gemeinsam dieselbe Liste. Sie können AutoVervollständigen für Deaktivieren einer <xref:System.Web.UI.WebControls.TextBox> Steuerelement durch Festlegen der <xref:System.Web.UI.WebControls.TextBox.AutoCompleteType%2A> Eigenschaft, um `AutoCompleteType.Disabled`.  
  
 Finden Sie in der Browserdokumentation ausführliche Informationen zum Konfigurieren und Aktivieren der AutoVervollständigen-Funktion. Damit kann die AutoVervollständigen-Funktion in Internet Explorer 5 oder höher, wählen Sie z. B. **Internetoptionen** aus der **Tools** Menü, und wählen Sie dann die **Content** Registerkarte ". Klicken Sie auf die **AutoVervollständigen** Schaltfläche anzeigen und ändern die verschiedenen Browseroptionen für die AutoVervollständigen-Funktion.  
  
 Weitere Informationen zu der AutoVervollständigen-Funktion in Internet Explorer, finden Sie unter [mithilfe von AutoVervollständigen in HTML-Formularen](http://go.microsoft.com/fwlink/?LinkId=163828) in der [MSDN Library](http://go.microsoft.com/fwlink/?linkid=37118).  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.AutoCompleteType> Enumeration an die AutoVervollständigen-Kategorie für eine <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[AutoCompleteType#1](~/samples/snippets/csharp/VS_Snippets_WebNet/AutoCompleteType/CS/AutoCompleteTypecs.aspx#1)]
 [!code-aspx-vb[AutoCompleteType#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/AutoCompleteType/VB/AutoCompleteTypevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der ausgewählte Wert ist nicht der <see cref="T:System.Web.UI.WebControls.AutoCompleteType" /> Enumerationswerte.</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoPostBack">
      <MemberSignature Language="C#" Value="public virtual bool AutoPostBack { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPostBack" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.AutoPostBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob ein automatisches Postback an den Server tritt auf, wenn die <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement den Fokus verliert.</summary>
        <value>
          <see langword="true" />Wenn ein automatisches Postback tritt auf, wenn die <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement den Fokus verliert ist, andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.AutoPostBack%2A> Eigenschaft, um anzugeben, ob ein automatisches Postback an den Server erfolgt, wenn die <xref:System.Web.UI.WebControls.TextBox> Steuerelement den Fokus verliert. Durch Drücken der EINGABETASTE oder TAB-Taste beim in die <xref:System.Web.UI.WebControls.TextBox> Steuerelement ist die gängigste Methode, um den Fokus zu ändern.  
  
> [!NOTE]
>  Wenn die <xref:System.Web.UI.WebControls.TextBox> die übergeordneten Container des Steuerelements enthält eine Schaltfläche als Standardschaltfläche gekennzeichnet (beispielsweise, wenn des Containers <xref:System.Web.UI.HtmlControls.HtmlForm.DefaultButton%2A> oder <xref:System.Web.UI.WebControls.Panel.DefaultButton%2A> festgelegt wird), der Standardschaltfläche `Click` Ereignis wird nicht als Antwort auf die Automatisches Postback.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie die <xref:System.Web.UI.WebControls.TextBox.AutoPostBack%2A> -Eigenschaft automatisch angezeigt, die Summe der Werte in den Text eingegeben Dialogfelder beim der <xref:System.Web.UI.WebControls.TextBox> Steuerelement den Fokus verliert.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBoxAutoPostBack#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBoxAutoPostBack/CS/textboxautopostbackcs.aspx#1)]
 [!code-aspx-vb[TextBoxAutoPostBack#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBoxAutoPostBack/VB/textboxautopostbackvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public virtual bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob eine Validierung durchgeführt wird bei der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement so überprüfen Sie bei einem Postback festgelegt ist.</summary>
        <value>
          <see langword="true" />Validierung durchgeführt wird bei der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement festgelegt ist, überprüft, wenn ein Postback auftritt; andernfalls <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> Eigenschaft, um zu bestimmen, ob die Überprüfung auf dem Client und dem Server ausgeführt wird bei einer <xref:System.Web.UI.WebControls.TextBox> Steuerelement so überprüfen Sie bei einem Postback festgelegt ist. Seitenüberprüfung bestimmt, ob ein Validierungssteuerelement auf der Seite der Eingabesteuerelemente zugeordnet, die alle Validierungsregeln, die gemäß des Validierungssteuerelements übergeben.  
  
 Wird standardmäßig ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement bewirkt die Validierung nicht, wenn das Steuerelement den Fokus verliert. Festlegen der <xref:System.Web.UI.WebControls.TextBox> Steuerelement setzen, um zu überprüfen, wenn ein Postback erfolgt die <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> Eigenschaft, um `true` und die <xref:System.Web.UI.WebControls.TextBox.AutoPostBack%2A> Eigenschaft `true`.  
  
 Bei den Wert des der <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> -Eigenschaftensatz auf `true`, können Sie auch die <xref:System.Web.UI.WebControls.TextBox.ValidationGroup%2A> Eigenschaft, um den Namen der Validierungsgruppe für das Angeben der <xref:System.Web.UI.WebControls.TextBox> Steuerelement eine Validierung.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public virtual int Columns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Columns" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzeigebreite des Textfelds in Zeichen ab oder legt diese fest.</summary>
        <value>Die Anzeigebreite des Textfelds in Zeichen. Der Standardwert ist 0 (null) und bedeutet, dass die Eigenschaft nicht festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.Columns%2A> -Eigenschaft an eine Breite von 2 Zeichen für die <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBox#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBox/CS/textboxcs.aspx#1)]
 [!code-aspx-vb[TextBox#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBox/VB/textboxvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Breite ist kleiner als 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadPostData">
      <MemberSignature Language="C#" Value="protected virtual bool LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Der Index in der bereitgestellten Auflistung, die auf den zu ladenden Inhalt verweist.</param>
        <param name="postCollection">Die auf dem Server bereitgestellte Auflistung.</param>
        <summary>Verarbeitet die Postbackdaten für das <see cref="T:System.Web.UI.WebControls.TextBox" />-Steuerelement.</summary>
        <returns>
          <see langword="true" />, wenn der gesendete Inhalt von der letzten Bereitstellung abweicht, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.TextBox.LoadPostData%2A> -Methode überprüft, ob die Postbackdaten des der <xref:System.Web.UI.WebControls.TextBox> Steuerelement unterscheidet sich vom vorherigen Wert und, wenn dies der Fall ist, lädt den Inhalt und gibt `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public virtual int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die maximal zulässige Anzahl von Zeichen im Textfeld ab oder legt diese fest.</summary>
        <value>Die maximal zulässige Anzahl von Zeichen im Textfeld. Der Standardwert ist 0 (null) und bedeutet, dass die Eigenschaft nicht festgelegt wurde.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.MaxLength%2A> -Eigenschaft können Sie die Anzahl der Zeichen begrenzen, die in eingegeben werden kann die <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!NOTE]
>  Diese Eigenschaft ist nur anwendbar, wenn die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> -Eigenschaftensatz auf `TextBoxMode.SingleLine` oder `TextBoxMode.Password`.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Ist ein Visual Studio Web Site-Projekt mit Quellcode zu diesem Thema steht verfügbar: [herunterladen](http://go.microsoft.com/fwlink/?LinkId=192423).  
  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox> Benutzereingaben abzurufenden Steuerelements. Wenn der Benutzer klickt auf die **hinzufügen** Schaltfläche, die Summe der Werte in die Textfelder eingegeben wird angezeigt.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
```csharp  
<%@ Page Language="C#" AutoEventWireup="True" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
      protected void AddButton_Click(Object sender, EventArgs e)  
      {  
         int Answer;  
         Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text);  
         AnswerMessage.Text = Answer.ToString();  
      }  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Page Language="vb" AutoEventWireup="false" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
        Protected Sub AddButton_Click(sender As Object, e As EventArgs)  
            Dim Answer As Integer  
            Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text)  
            AnswerMessage.Text = Answer.ToString()  
        End Sub  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die angegebene Breite ist kleiner als 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPreRender">
      <MemberSignature Language="C#" Value="protected override void OnPreRender (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnPreRender(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.OnPreRender(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" />, das die Ereignisdaten enthält.</param>
        <summary>Registriert das Clientskript zum Generieren von postback Ereignisse vor dem Rendern auf dem Client, wenn <see cref="P:System.Web.UI.WebControls.TextBox.AutoPostBack" /> ist <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.TextBox.OnPreRender%2A> Methode, sodass die It stets einen Rahmen für ein Punkt in einem benutzerdefinierten angezeigt <xref:System.Web.UI.WebControls.TextBox> Serversteuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxOnPreRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxOnPreRender/CS/custom_textbox_onprerendercs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxOnPreRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxOnPreRender/VB/custom_textbox_onprerendervb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxOnPreRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxOnPreRender/CS/custom_textbox_onprerender.cs#2)]
 [!code-vb[CustomTextBoxOnPreRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxOnPreRender/VB/custom_textbox_onprerender.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Ein <see cref="T:System.EventArgs" /> , das Ereignisdaten enthält.</param>
        <summary>Löst das <see cref="E:System.Web.UI.WebControls.TextBox.TextChanged" />-Ereignis aus. Dadurch können Sie das Ereignis direkt behandeln.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.TextBox.TextChanged> Ereignis wird ausgelöst, wenn der Inhalt des Textfelds zwischen Übertragungen zum Server geändert.  
  
> [!NOTE]
>  Ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement muss bestehen einige Werte zwischen Übertragungen zum Server für dieses Ereignis ordnungsgemäß ausgeführt werden. Achten Sie darauf, dass der Ansichtszustand für das genannte Steuerelement aktiviert ist.  
  
 Durch das Auslösen eines Ereignisses wird der Ereignishandler über einen Delegaten aufgerufen. Weitere Informationen finden Sie unter [NIB: durch das Auslösen eines Ereignisses](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2).  
  
 Mit der <xref:System.Web.UI.WebControls.TextBox.OnTextChanged%2A>-Methode können auch abgeleitete Klassen das Ereignis ohne Anfügen eines Delegaten behandeln. Dies ist das bevorzugte Verfahren für die Behandlung des Ereignisses in einer abgeleiteten Klasse.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.TextBox.OnTextChanged%2A> Methode, sodass die It stets eine benutzerdefinierte kennzeichnet <xref:System.Web.UI.WebControls.TextBox> Webserversteuerelement als geändert.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxOnTextChanged#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxOnTextChanged/CS/custom_textbox_ontextchangedcs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxOnTextChanged#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxOnTextChanged/VB/custom_textbox_ontextchangedvb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxOnTextChanged#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxOnTextChanged/CS/custom_textbox_ontextchanged.cs#2)]
 [!code-vb[CustomTextBoxOnTextChanged#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxOnTextChanged/VB/custom_textbox_ontextchanged.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Wenn Sie <see cref="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)" /> in einer abgeleiteten Klasse überschreiben, müssen Sie die <see cref="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)" />-Methode der Basisklasse aufrufen, damit registrierte Delegaten das Ereignis empfangen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="protected virtual void RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die <see cref="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)" /> Methode bei der die bereitgestellten Daten für die <see cref="T:System.Web.UI.WebControls.TextBox" /> -Steuerelements geändert hat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.TextBox.RaisePostDataChangedEvent%2A> Methode ruft die <xref:System.Web.UI.WebControls.TextBox.OnTextChanged%2A> Methode Wenn die bereitgestellten Daten für die <xref:System.Web.UI.WebControls.TextBox> -Steuerelements geändert hat. Wenn die <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> Eigenschaft `true`, legen Sie die Steuerelemente in der Gruppe für die Überprüfung der <xref:System.Web.UI.WebControls.TextBox.ValidationGroup%2A> Eigenschaft überprüft werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob den Inhalt des der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement kann geändert werden.</summary>
        <value>
          <see langword="true" />Wenn der Inhalt der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement kann nicht geändert wurde, andernfalls werden <see langword="false" />. Der Standardwert ist <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.ReadOnly%2A> Eigenschaft, um anzugeben, ob der Inhalt des der <xref:System.Web.UI.WebControls.TextBox> Steuerelement kann geändert werden. Wenn diese Eigenschaft auf `true` verhindern, dass Benutzer einen Wert eingeben oder ändern den vorhandenen Wert. Beachten Sie, dass der Benutzer die <xref:System.Web.UI.WebControls.TextBox> Steuerelement diese Eigenschaft kann nicht geändert werden, kann dann nur die Entwickler.  
  
> [!IMPORTANT]
>  Die <xref:System.Web.UI.WebControls.TextBox.Text%2A> Wert, der eine <xref:System.Web.UI.WebControls.TextBox> steuern, mit der <xref:System.Web.UI.WebControls.TextBox.ReadOnly%2A> -Eigenschaftensatz auf `true` an den Server gesendet, wenn ein Postback erfolgt, aber der Server nicht für einen schreibgeschützten Textfeld wird keine Verarbeitung. Dadurch wird verhindert, dass einen böswilligen Benutzer Ändern einer <xref:System.Web.UI.WebControls.TextBox.Text%2A> Wert, der schreibgeschützt ist. Der Wert, der die <xref:System.Web.UI.WebControls.TextBox.Text%2A> -Eigenschaft wird im Ansichtszustand zwischen Postbacks beibehalten, es sei denn, die vom serverseitigen Code geändert.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.ReadOnly%2A> Eigenschaft, um zu verhindern, dass alle Änderungen auf den Text angezeigt, der <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBoxMultiLine#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBoxMultiLine/CS/multilinetextboxcs.aspx#1)]
 [!code-aspx-vb[TextBoxMultiLine#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBoxMultiLine/VB/multilinetextboxvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="protected override void Render (System.Web.UI.HtmlTextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void Render(class System.Web.UI.HtmlTextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.Render(System.Web.UI.HtmlTextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Web.UI.HtmlTextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">Die <see cref="T:System.Web.UI.HtmlTextWriter" /> , die gerenderte Ausgabe empfängt.</param>
        <summary>Rendert die <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement mit dem angegebenen <see cref="T:System.Web.UI.HtmlTextWriter" /> Objekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.TextBox.Render%2A> Methode rendert das Anfangstag und Endtag des der <xref:System.Web.UI.WebControls.TextBox> die Steuerung an die <xref:System.Web.UI.HtmlTextWriter> Objekt für die Ausgabe auf dem Client. Wenn die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> -Eigenschaftensatz auf <xref:System.Web.UI.WebControls.TextBoxMode.MultiLine>, die der Inhalt der <xref:System.Web.UI.WebControls.TextBox> Steuerelement wird als HTML gerendert `<textarea>` Element.  
  
 Die <xref:System.Web.UI.WebControls.TextBox.Render%2A> Methode wird hauptsächlich von Steuerelemententwicklern zum Erweitern der Funktionalität des verwendet die <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht das Überschreiben der <xref:System.Web.UI.WebControls.TextBox.Render%2A> -Methode in ein benutzerdefiniertes Steuerelement, damit die <xref:System.Web.UI.WebControls.TextBox> Steuerelement ist immer mit einem Bild angezeigt.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxRender#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxRender/CS/custom_textbox_rendercs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxRender#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxRender/VB/custom_textbox_rendervb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxRender#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxRender/CS/custom_textbox_render.cs#2)]
 [!code-vb[CustomTextBoxRender#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxRender/VB/custom_textbox_render.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public virtual int Rows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rows" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl von Zeilen ab, die in einem mehrzeiligen Textfeld angezeigt werden.</summary>
        <value>Die Anzahl von Zeilen in einem mehrzeiligen Textfeld. Der Standardwert ist 0 (null) und gilt für die Anzeige eines zweizeiligen Textfelds.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.Rows%2A> -Eigenschaft an die Anzahl der Zeilen in einem mehrzeiligen Textfeld angezeigt.  
  
> [!NOTE]
>  Diese Eigenschaft ist nur anwendbar, wenn die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> -Eigenschaftensatz auf `TextBoxMode.MultiLine`.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.Rows%2A> -Eigenschaft an eine Höhe von 5 Zeilen für ein mehrzeiliges <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBoxMultiLine#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBoxMultiLine/CS/multilinetextboxcs.aspx#1)]
 [!code-aspx-vb[TextBoxMultiLine#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBoxMultiLine/VB/multilinetextboxvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der ausgewählte Wert ist kleiner als 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.SaveViewState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert die Änderungen am Ansichtszustand des Textfelds ab dem Zeitpunkt, an dem die Seite an den Server zurückgesendet wurde.</summary>
        <returns>Die <see cref="T:System.Object" /> , enthält die Änderungen an der <see cref="T:System.Web.UI.WebControls.TextBox" /> den Ansichtszustand. Wenn kein Ansichtszustand für das Objekt ist, gibt diese Methode <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird hauptsächlich von Steuerelemententwicklern verwendet.  
  
 Ansichtszustand besteht in der Ansammlung der Werte der Eigenschaften eines Serversteuerelements. Diese Werte werden automatisch in des Serversteuerelements platziert <xref:System.Web.UI.Control.ViewState%2A> -Eigenschaft, die eine Instanz von der <xref:System.Web.UI.StateBag> Klasse. Der Wert dieser Eigenschaft wird dann nach speichern Status, Phase des Lebenszyklus des Serversteuerelements an ein Zeichenfolgenobjekt beibehalten. Weitere Informationen finden Sie unter [Übersicht über den Lebenszyklus von ASP.NET für IIS 5.0 und 6.0](http://msdn.microsoft.com/library/de0d8a1c-b1bc-48e1-b246-26e32289a82f).  
  
 Wenn der Ansichtszustand gespeichert wird, wird dieser String-Objekt als Variable an den Client zurückgegeben, die in ein verborgenes HTML-Eingabeelement gespeichert ist. Wenn Sie benutzerdefinierte Steuerelemente erstellen, können Sie die Effizienz verbessern, indem Sie diese Methode überschreiben und Ändern des Serversteuerelements `ViewState` Eigenschaft. Weitere Informationen finden Sie unter [ASP.NET State Management Overview](http://msdn.microsoft.com/library/0218d965-5d30-445b-b6a6-8870e70e63ce).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.LoadPostData">
      <MemberSignature Language="C#" Value="bool IPostBackDataHandler.LoadPostData (string postDataKey, System.Collections.Specialized.NameValueCollection postCollection);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Web.UI.IPostBackDataHandler.LoadPostData(string postDataKey, class System.Collections.Specialized.NameValueCollection postCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.System#Web#UI#IPostBackDataHandler#LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="postDataKey" Type="System.String" />
        <Parameter Name="postCollection" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="postDataKey">Der Index in der bereitgestellten Auflistung, die auf den zu ladenden Inhalt verweist.</param>
        <param name="postCollection">Die auf dem Server bereitgestellte Auflistung.</param>
        <summary>Lädt den bereitgestellten Textfeldinhalt, wird jedoch von der letzten Bereitstellung abweicht.</summary>
        <returns>
          <see langword="true" />, wenn der gesendete Inhalt von der letzten Bereitstellung abweicht, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.TextBox>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent">
      <MemberSignature Language="C#" Value="void IPostBackDataHandler.RaisePostDataChangedEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Web.UI.IPostBackDataHandler.RaisePostDataChangedEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.TextBox.System#Web#UI#IPostBackDataHandler#RaisePostDataChangedEvent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die <see cref="M:System.Web.UI.WebControls.TextBox.OnTextChanged(System.EventArgs)" /> -Methode auf, wenn bereitgestellte Daten für das Textfeld geändert haben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei diesem Member handelt es sich um eine explizite Schnittstellenmember-Implementierung. Er kann nur verwendet werden, wenn die <xref:System.Web.UI.WebControls.TextBox>-Instanz in eine <xref:System.Web.UI.IPostBackDataHandler>-Schnittstelle umgewandelt wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TagKey">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.HtmlTextWriterTag TagKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.HtmlTextWriterTag TagKey" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.TagKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.HtmlTextWriterTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft das HTML-Tag für das Textfeld-Steuerelement ab. Diese Eigenschaft ist geschützt.</summary>
        <value>
          <see cref="F:System.Web.UI.HtmlTextWriterTag.Textarea" />Wenn das Textfeld mehrzeilig ist; andernfalls <see cref="F:System.Web.UI.HtmlTextWriterTag.Input" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.TagKey%2A> Eigenschaft, um eine benutzerdefinierte Textfeld zu erstellen.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[CustomTextBoxTagKey#1](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxTagKey/CS/custom_textbox_tagkeycs.aspx#1)]
 [!code-aspx-vb[CustomTextBoxTagKey#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxTagKey/VB/custom_textbox_tagkeyvb.aspx#1)]  
  
 [!code-csharp[CustomTextBoxTagKey#2](~/samples/snippets/csharp/VS_Snippets_WebNet/CustomTextBoxTagKey/CS/custom_textbox_tagkey.cs#2)]
 [!code-vb[CustomTextBoxTagKey#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/CustomTextBoxTagKey/VB/custom_textbox_tagkey.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true, System.ComponentModel.BindingDirection.TwoWay)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.ComponentModel.Design.MultilineStringEditor,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.EncodedInnerDefaultProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Text des Inhalts der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement.</summary>
        <value>Der Text angezeigt, der <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement. Der Standardwert ist eine leere Zeichenfolge ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.Text%2A> Eigenschaft angeben oder ermitteln den in angezeigten Text die <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Um die Anzahl von Zeichen vom Steuerelement akzeptiert beschränken möchten, legen die <xref:System.Web.UI.WebControls.TextBox.MaxLength%2A> Eigenschaft. Wenn Sie verhindern, dass den Text geändert werden soll, legen Sie die <xref:System.Web.UI.WebControls.TextBox.ReadOnly%2A> Eigenschaft.  
  
 Der Wert dieser Eigenschaft, wenn festgelegt ist, können mit einem Designer-Tool automatisch in einer Ressourcendatei gespeichert werden. Weitere Informationen finden Sie unter <xref:System.ComponentModel.LocalizableAttribute> und [ASP.NET-Globalisierung und Lokalisierung](http://msdn.microsoft.com/library/8ef3838e-9d05-4236-9dd0-ceecff9df80d).  
  
 Wenn das Textfeld gerendert wird, ist der Inhalt dieser Eigenschaft HTML-codiert. Wenn Sie diese Eigenschaft festlegen, um z. B. "\<b > Test\</b >", zeigt der Browser"\<b > Test \< /b >", nicht "Test" in Fettschrift angezeigt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox> Benutzereingaben abzurufenden Steuerelements. Wenn der Benutzer klickt auf die **hinzufügen** Schaltfläche, die Summe der Werte in die Textfelder eingegeben wird angezeigt.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
```csharp  
<%@ Page Language="C#" AutoEventWireup="True" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
      protected void AddButton_Click(Object sender, EventArgs e)  
      {  
         int Answer;  
         Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text);  
         AnswerMessage.Text = Answer.ToString();  
      }  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
```vb  
<%@ Page Language="vb" AutoEventWireup="false" %>  
  
<!DOCTYPE html>  
<html>   
  
<head>  
    <title>TextBox Example</title>  
    <script runat="server">  
        Protected Sub AddButton_Click(sender As Object, e As EventArgs)  
            Dim Answer As Integer  
            Answer = Convert.ToInt32(Value1.Text) + Convert.ToInt32(Value2.Text)  
            AnswerMessage.Text = Answer.ToString()  
        End Sub  
    </script>  
</head>  
<body>  
  <form id="form1" runat="server">  
    <h3> TextBox Example </h3>  
    <p>  
        <asp:TextBox ID="Value1" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        +  
        <asp:TextBox ID="Value2" Columns="2" MaxLength="3" Text="1" runat="server"/>  
        =  
        <asp:Label ID="AnswerMessage" runat="server"/>  
    </p>  
    <p>  
        <asp:Button ID="AddButton" Text="Add" OnClick="AddButton_Click" runat="server"/>  
    </p>  
    <p>  
        <asp:RequiredFieldValidator ID="Value1RequiredValidator" ControlToValidate="Value1"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RequiredFieldValidator ID="Value2RequiredValidator" ControlToValidate="Value2"  
             ErrorMessage="Please enter a value.<br />" Display="Dynamic"  
             runat="server"/>  
        <asp:RangeValidator ID="Value1RangeValidator" ControlToValidate="Value1"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"  
             runat="server"/>  
        <asp:RangeValidator ID="Value2RangeValidator" ControlToValidate="Value2"  
             Type="Integer" MinimumValue="1" MaximumValue="100" Display="Dynamic"  
             ErrorMessage="Please enter an integer <br /> between than 1 and 100.<br />"      
             runat="server"/>  
    </p>  
  </form>  
</body>  
</html>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.TextBox.TextChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Tritt ein, wenn der Inhalt des Textfelds zwischen Übertragungen zum Server geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Web.UI.WebControls.TextBox.TextChanged> Ereignis wird ausgelöst, wenn der Inhalt des Textfelds zwischen Übertragungen zum Server geändert. Das Ereignis wird nur ausgelöst, wenn der Text vom Benutzer geändert wird; das Ereignis wird nicht ausgelöst, wenn der Text programmgesteuert geändert wird.  
  
> [!NOTE]
>  Ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement muss bestehen einige Werte zwischen Übertragungen zum Server für dieses Ereignis ordnungsgemäß ausgeführt werden. Achten Sie darauf, dass der Ansichtszustand für das genannte Steuerelement aktiviert ist.  
  
 Weitere Informationen zur Behandlung von Ereignissen finden Sie unter [NIB: Behandeln von Ereignissen](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie dieses Ereignis verwenden können, für die Reaktion auf Änderungen in der <xref:System.Web.UI.WebControls.TextBox> Steuerelement. Der Code zeigt den Inhalt des der <xref:System.Web.UI.WebControls.TextBox.Text%2A> Eigenschaft eines Textfeld-Steuerelements (TextBox1 genannt) in eine Bezeichnung (Label1 genannt) Wenn die `Text` -Eigenschaft geändert wird. Benutzereingaben in einer Web Forms-Seite kann potenziell bösartige Clientskripts enthalten. Standardmäßig überprüft die Web Forms-Seite an, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [How to: Protect Against Script Exploits in einer Web-Anwendung durch Anwenden von HTML-Codierung in Zeichenfolgen](http://msdn.microsoft.com/library/6f67973f-dda0-45a1-ba9d-e88532d7dc5b).  
  
```vb  
  
Protected Sub TextBox1_TextChanged(ByVal sender As Object, _  
        ByVal e As System.EventArgs) Handles TextBox1.TextChanged  
   Label1.Text = Server.HtmlEncode(TextBox1.Text)  
End Sub  
  
```  
  
```csharp  
protected void TextBox1_TextChanged(object sender, EventArgs e)  
{  
   Label1.Text = Server.HtmlEncode(TextBox1.Text);  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMode">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.TextBoxMode TextMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.TextBoxMode TextMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.TextMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.TextBoxMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Verhaltensmodus (z. B. einzeilige, mehrzeilige oder Kennwort), der die <see cref="T:System.Web.UI.WebControls.TextBox" /> Steuerelement.</summary>
        <value>Einer der <see cref="T:System.Web.UI.WebControls.TextBoxMode" />-Enumerationswerte. Der Standardwert ist <see langword="SingleLine" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> Eigenschaft an, wie ein <xref:System.Web.UI.WebControls.TextBox> Steuerelement angezeigt wird. Drei allgemeine Optionen sind Einzel-, mehrzeiligen oder Kennwort-Textfelds.  
  
 Wenn die <xref:System.Web.UI.WebControls.TextBox> Steuerelement im mehrzeiligen Modus befindet, können Sie steuern, die Anzahl der Zeilen angezeigt, indem die <xref:System.Web.UI.WebControls.TextBox.Rows%2A> Eigenschaft. Sie können auch angeben, ob Text werden, durch Festlegen umbrochen soll der <xref:System.Web.UI.WebControls.TextBox.Wrap%2A> Eigenschaft.  
  
 Wenn die <xref:System.Web.UI.WebControls.TextBox> -Steuerelement befindet sich im Kennwortmodus, die alle Zeichen in das Steuerelement eingegeben werden maskiert.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> Eigenschaft, um ein mehrzeiliges Textfeld anzugeben.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBoxMultiLine#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBoxMultiLine/CS/multilinetextboxcs.aspx#1)]
 [!code-aspx-vb[TextBoxMultiLine#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBoxMultiLine/VB/multilinetextboxvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Der angegebene Modus ist nicht der <see cref="T:System.Web.UI.WebControls.TextBoxMode" /> Enumerationswerte.</exception>
      </Docs>
    </Member>
    <Member MemberName="ValidationGroup">
      <MemberSignature Language="C#" Value="public virtual string ValidationGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ValidationGroup" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.ValidationGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.Themeable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt Sie die Gruppe von Steuerelementen für die die <see cref="T:System.Web.UI.WebControls.TextBox" /> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet.</summary>
        <value>Die Gruppe von Steuerelementen, für die die <see cref="T:System.Web.UI.WebControls.TextBox" /> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Überprüfung Gruppen erlauben Ihnen Validierungssteuerelemente auf einer Seite einer bestimmten Kategorie zuweisen. Jede Validierungsgruppe kann unabhängig von anderen Gruppen Überprüfung auf der Seite überprüft werden. Verwenden der <xref:System.Web.UI.WebControls.TextBox.ValidationGroup%2A> Eigenschaft, um den Namen der Validierungsgruppe für das Angeben der <xref:System.Web.UI.WebControls.TextBox> -Steuerelement eine Validierung auslöst, wenn es an den Server zurückgesendet.  
  
 Diese Eigenschaft wirkt sich nur, wenn die <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> -Eigenschaftensatz auf `true`. Wenn geben Sie einen Wert für die <xref:System.Web.UI.WebControls.TextBox.ValidationGroup%2A> -Eigenschaft, um nur die Validierungssteuerelemente, die Teil der angegebenen Gruppe sind sind validiert, wenn die <xref:System.Web.UI.WebControls.TextBox> Steuerelement an den Server sendet. Wenn Sie einen Wert für diese Eigenschaft nicht angeben und die <xref:System.Web.UI.WebControls.TextBox.CausesValidation%2A> -Eigenschaftensatz auf `true`, alle Validierungssteuerelemente auf der Seite, die Validierungsgruppe zugeordnet sind werden überprüft, wenn das Steuerelement an den Server zurückgesendet.  
  
 Diese Eigenschaft kann nicht von Designs oder Stylesheetdesigns festgelegt werden. Weitere Informationen finden Sie unter <xref:System.Web.UI.ThemeableAttribute> und [ASP.NET-Designs und Skins](http://msdn.microsoft.com/library/5df3ebbd-d46c-4502-9406-02f9df4ef2c3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wrap">
      <MemberSignature Language="C#" Value="public virtual bool Wrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Wrap" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.TextBox.Wrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob der Textinhalt in einem mehrzeiligen Textfeld umbrochen wird, oder legt diesen fest.</summary>
        <value>
          <see langword="true" />Wenn der Textinhalt in einem mehrzeiligen Textfeld umbrochen wird; andernfalls <see langword="false" />. Die Standardeinstellung ist <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Web.UI.WebControls.TextBox.Wrap%2A> Eigenschaft, um anzugeben, ob der Text in einem mehrzeiligen angezeigt <xref:System.Web.UI.WebControls.TextBox> Steuerelement wird automatisch in der nächsten Zeile fortgesetzt, wenn das Ende des Steuerelements erreicht.  
  
> [!NOTE]
>  Diese Eigenschaft ist nur anwendbar, wenn die <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> -Eigenschaftensatz auf `TextBoxMode.MultiLine`.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie die <xref:System.Web.UI.WebControls.TextBox.Wrap%2A> Eigenschaft im eingegebenen Text umschließen die <xref:System.Web.UI.WebControls.TextBox> Steuerelement.  
  
> [!IMPORTANT]
>  Dieses Beispiel umfasst ein Textfeld, das Benutzereingaben akzeptiert, die ein potenzielles Sicherheitsrisiko darstellen. Standardmäßig stellen ASP.NET-Webseiten sicher, dass Benutzereingaben keine Skript- oder HTML-Elemente enthalten. Weitere Informationen finden Sie unter [Script Exploits Overview](http://msdn.microsoft.com/library/772c7312-211a-4eb3-8d6e-eec0aa1dcc07).  
  
 [!code-aspx-csharp[TextBoxMultiLine#1](~/samples/snippets/csharp/VS_Snippets_WebNet/TextBoxMultiLine/CS/multilinetextboxcs.aspx#1)]
 [!code-aspx-vb[TextBoxMultiLine#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TextBoxMultiLine/VB/multilinetextboxvb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
