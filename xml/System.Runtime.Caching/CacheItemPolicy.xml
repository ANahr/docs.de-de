<Type Name="CacheItemPolicy" FullName="System.Runtime.Caching.CacheItemPolicy">
  <TypeSignature Language="C#" Value="public class CacheItemPolicy" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CacheItemPolicy extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.CacheItemPolicy" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine Reihe von entfernungs- und Ablaufrichtlinien Details für einen bestimmten Cacheeintrag.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.Runtime.Caching.CacheItemPolicy> Instanz enthält Informationen, die einen Eintrag im Cache zugeordnet werden kann. Wenn z. B., ein Eintrag im Cache wird aus dem Cache entfernt wird ein <xref:System.Runtime.Caching.CacheEntryUpdateArguments> Objekt an eine Rückrufmethode übergeben wird. Die <xref:System.Runtime.Caching.CacheEntryUpdateArguments.UpdatedCacheItemPolicy%2A> Eigenschaft des der <xref:System.Runtime.Caching.CacheEntryUpdateArguments> Objekt übergeben kann einen Verweis auf eine <xref:System.Runtime.Caching.CacheItemPolicy> Instanz, die entfernungs- und Ablaufrichtlinien Details zu den Cacheeintrag einschließen können.  
  
 Einige Methoden in der <xref:System.Runtime.Caching.MemoryCache> und <xref:System.Runtime.Caching.ObjectCache> Klassen akzeptieren ein <xref:System.Runtime.Caching.CacheItemPolicy> Instanz Entfernung oder Ablaufrichtlinie beschreiben.  
  
   
  
## Examples  
 Im folgende Beispiel wird gezeigt, wie Sie ein Element in-Memory-Cache zu erstellen, den Pfad für eine Textdatei überwacht, wird. Der Cache erstellt eine <xref:System.Runtime.Caching.CacheItemPolicy> -Objekt und stellt die <xref:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration%2A> Eigenschaft so entfernen Sie den Cache nach 60 Sekunden.  
  
```vb  
Protected Sub Button1_Click(ByVal sender As Object, _  
            ByVal e As System.EventArgs) Handles Button1.Click  
    Dim cache As ObjectCache = MemoryCache.Default  
    Dim fileContents As String = TryCast(cache("filecontents"), _  
            String)  
    If fileContents Is Nothing Then  
        Dim policy As New CacheItemPolicy()  
        policy.AbsoluteExpiration = _  
            DateTimeOffset.Now.AddSeconds(60.0)  
        Dim filePaths As New List(Of String)()  
     Dim cachedFilePath As String = Server.MapPath("~") & _  
         "\cacheText.txt"  
        filePaths.Add(cachedFilePath)  
        policy.ChangeMonitors.Add(New _  
            HostFileChangeMonitor(filePaths))  
  
        ' Fetch the file contents.  
        fileContents = File.ReadAllText(cachedFilePath)  
        cache.Set("filecontents", fileContents, policy)  
    End If  
    Label1.Text = fileContents  
End Sub  
```  
  
```csharp  
protected void Button1_Click(object sender, EventArgs e)  
    {  
        ObjectCache cache = MemoryCache.Default;  
            string fileContents = cache["filecontents"] as string;  
            if (fileContents == null)  
            {  
                CacheItemPolicy policy = new CacheItemPolicy();  
                policy.AbsoluteExpiration =   
                    DateTimeOffset.Now.AddSeconds(60.0);  
  
                List<string> filePaths = new List<string>();  
             string cachedFilePath = Server.MapPath("~") +   
                 "\\cacheText.txt";  
             filePaths.Add(cachedFilePath);  
  
                policy.ChangeMonitors.Add(new   
                    HostFileChangeMonitor(filePaths));  
  
                // Fetch the file contents.  
                fileContents = File.ReadAllText(cachedFilePath);  
  
                cache.Set("filecontents", fileContents, policy);  
  
            }  
  
            Label1.Text = fileContents;  
        }  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Die <see cref="T:System.Runtime.Caching.CacheItemPolicy" /> Typ ist unversiegelt, sodass Entwickler benutzerdefinierte Cache erweitert werden können.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheItemPolicy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.CacheItemPolicy.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Runtime.Caching.CacheItemPolicy" />-Klasse.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AbsoluteExpiration">
      <MemberSignature Language="C#" Value="public DateTimeOffset AbsoluteExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset AbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.AbsoluteExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Wert ab, der angibt, ob ein Cacheeintrag nach einer bestimmten Zeit entfernt werden soll, oder legt ihn fest.</summary>
        <value>Die Zeitspanne, die verstreichen müssen, bevor ein Cacheeintrag entfernt wird. Der Standardwert ist <see cref="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />, Bedeutung, die der Eintrag nicht abläuft.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeMonitors">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;System.Runtime.Caching.ChangeMonitor&gt; ChangeMonitors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;class System.Runtime.Caching.ChangeMonitor&gt; ChangeMonitors" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Runtime.Caching.ChangeMonitor&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Auflistung von <see cref="T:System.Runtime.Caching.ChangeMonitor" /> Objekte, die einen Eintrag im Cache zugeordnet sind.</summary>
        <value>Eine Auflistung von Monitore ändern. Der Standard ist eine leere Auflistung.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können zum Hinzufügen oder Entfernen von Monitore ändern, die einen Eintrag im Cache zugeordnet sind. Jedoch der Satz von Monitoren Änderung muss abgeschlossen sein, bevor Sie übergeben ein <xref:System.Runtime.Caching.CacheItemPolicy> -Instanz, auf ein <xref:System.Runtime.Caching.ObjectCache> Implementierung. Wenn Sie den Satz von Monitoren Änderung auf einen <xref:System.Runtime.Caching.CacheItemPolicy> Objekts, nachdem die <xref:System.Runtime.Caching.CacheItemPolicy> Objekt übergeben wurde ein <xref:System.Runtime.Caching.ObjectCache> Implementierung, die Änderungen wirken sich nicht.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheItemPriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Caching.CacheItemPriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheItemPriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Abrufen oder festlegen eine Einstellung der Priorität, die verwendet wird, um zu ermitteln, ob einen Cacheeintrag entfernen.</summary>
        <value>Einer der Enumerationswerte, der die Priorität für die Entfernung angibt. Der Standardwert für die Priorität ist <see cref="F:System.Runtime.Caching.CacheItemPriority.Default" />, d. h. keine Priorität.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In ASP.NET die Prioritätsenumeration hat nur zwei mögliche Prioritäten: <xref:System.Runtime.Caching.CacheItemPriority.Default> (d. h. keine Priorität), und <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> (was bedeutet, dass den Eintrag kann nicht entfernt werden). Daher ist die einzige Priorität, die festgelegt werden kann, ob ein Cacheeintrag im Cache verbleiben soll.  
  
> [!IMPORTANT]
>  Hinzufügen eines Eintrags in den Cache mit eine Prioritätsebene von <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> kann dazu führen, dass den Cache mit den Einträgen "Überlauf", die niemals entfernt werden können. Cache-Implementierungen sollten Festlegen der <xref:System.Runtime.Caching.CacheItemPriority.NotRemovable> Priorität für einen Cacheeintrag nur, wenn der Cacheimplementierung Möglichkeiten Einträge aus dem Cache entfernen und verwalten die Anzahl der Einträge im Cache bietet.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovedCallback">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheEntryRemovedCallback RemovedCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Caching.CacheEntryRemovedCallback RemovedCallback" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.RemovedCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheEntryRemovedCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Verweis auf eine <see cref="T:System.Runtime.Caching.CacheEntryRemovedCallback" /> Delegat, der aufgerufen wird, nachdem Sie ein Eintrag aus dem Cache entfernt wird.</summary>
        <value>Ein Verweis auf ein Delegat, der von einem Cacheimplementierung aufgerufen wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nachdem ein Cacheeintrag aus dem Cache entfernt wurde, ruft der Cache das Rückrufobjekt den verweist die <xref:System.Runtime.Caching.CacheItemPolicy.RemovedCallback%2A> Eigenschaft. Dieser Rückruf können eine Cacheimplementierung um der aufrufenden Methode zu benachrichtigen, dass ein Cacheeintrag entfernt wurde.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlidingExpiration">
      <MemberSignature Language="C#" Value="public TimeSpan SlidingExpiration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan SlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.SlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Wert, der angibt, ob ein Cacheeintrag entfernt werden soll, wenn es in einer bestimmten Zeitspanne nicht zugegriffen wurde.</summary>
        <value>Eine Zeitspanne, in dem ein Cacheeintrag zugegriffen werden muss, bevor der Cacheeintrag aus dem Cache entfernt wird. Die Standardeinstellung ist <see cref="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />, d. h., dass das Element nicht abgelaufen sein sollten basierend auf den Zeitraum.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCallback">
      <MemberSignature Language="C#" Value="public System.Runtime.Caching.CacheEntryUpdateCallback UpdateCallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Caching.CacheEntryUpdateCallback UpdateCallback" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.CacheItemPolicy.UpdateCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheEntryUpdateCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt einen Verweis auf eine <see cref="T:System.Runtime.Caching.CacheEntryUpdateCallback" /> Delegat, der aufgerufen wird, bevor ein Cacheeintrag aus dem Cache entfernt wird.</summary>
        <value>Ein Verweis auf ein Delegat, der von einem Cacheimplementierung aufgerufen wird.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
