<Type Name="WebBaseErrorEvent" FullName="System.Web.Management.WebBaseErrorEvent">
  <TypeSignature Language="C#" Value="public class WebBaseErrorEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebBaseErrorEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebBaseErrorEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dient als Basisklasse für alle der Systemüberwachung Fehlerereignisse.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET-Systemüberwachung kann Produktions- und Vorgänge Mitarbeiter bereitgestellte Webanwendungen verwalten. Die <xref:System.Web.Management> Namespace enthält die integritätsereignis Typen, die verantwortlich für das Verpacken Integritätsstatus Anwendungsdaten und die Anbietertypen, die für die Verarbeitung dieser Daten verantwortlich. Darüber hinaus wird die unterstützende Typen, mit denen bei der Verwaltung von integritätsereignisse enthält.  
  
 Die <xref:System.Web.Management.WebBaseErrorEvent> Klasse ist die Basisklasse für die Systemüberwachung Ereignisse, die möglichen Fehlerzustände darstellen. ASP.NET verwendet <xref:System.Web.Management.WebBaseErrorEvent> und die abgeleiteten Typen, die fehlerbedingungen während der Lebensdauer einer Webanwendung anzuzeigen.  
  
> [!NOTE]
>  In den meisten Fällen werden Sie die ASP.NET Systemüberwachung Typen verwenden, wie implementiert und Sie steuert das System Systemüberwachung durch Angeben von Werten in der `healthMonitoring` Konfigurationsabschnitt. Sie können auch aus den Typen Systemüberwachung, erstellen Sie eine eigene benutzerdefinierte Ereignisse und Anbieter ableiten. Ein Beispiel für das Ableiten von der <xref:System.Web.Management.WebBaseErrorEvent> Klasse, finden Sie im Beispiel in diesem Thema.  
  
   
  
## Examples  
 Das folgende Codebeispiel besteht aus zwei Teilen. Die erste ist ein Auszug aus einer Konfigurationsdatei, die ASP.NET-Systemüberwachung Verwendung ein Ereignisses abgeleitet ermöglicht die <xref:System.Web.Management.WebBaseErrorEvent> Klasse. Das zweite Beispiel zeigt, wie Ableitung der <xref:System.Web.Management.WebBaseErrorEvent> Klasse, um das benutzerdefinierte Ereignis zu erstellen.  
  
```  
<healthMonitoring   
  enabled="true" heartBeatInterval="0">  
  
  <providers>  
    <!-- Define the custom provider that   
         processes custom Web request events. -->  
    <add name="SampleWebEventProvider"   
      type="SamplesAspNet.SampleEventProvider,  
      webeventprovider,Version=1.0.1573.18094,   
      Culture=neutral, PublicKeyToken=b5a57a9a9d487cf4,   
      processorArchitecture=MSIL"/>  
  </providers>  
  
  <eventMappings>  
  
    <!--  Define the event source that issues custom events.   -->  
    <add  name="SampleWebBaseErrorEvent"      
      type="SamplesAspNet.SampleWebBaseErrorEvent,  
      webbaseerrorevent,Version=1.0.1573.21549, Culture=neutral,     
      PublicKeyToken=2a0b23915ac7352b, processorArchitecture=MSIL"/>  
  </eventMappings>  
  
  <rules>  
    <!-- Associate custom event with related   
      custom provider -->  
    <add   
       name="Custom Web Base Errors"  
       eventName="SampleWebBaseErrorEvent"   
       provider="SampleWebEventProvider"   
       profile="Custom"/>    
  </rules>  
  
</healthMonitoring>  
```  
  
 Der folgende Code zeigt, wie Ableitung der <xref:System.Web.Management.WebBaseErrorEvent> Klasse, um ein benutzerdefiniertes Ereignis zu erstellen.  
  
 [!code-csharp[System.Web.Management.WebErrorEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebErrorEvent/CS/weberrorevent.cs#1)]
 [!code-vb[System.Web.Management.WebErrorEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebErrorEvent/VB/weberrorevent.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebBaseErrorEvent (string message, object eventSource, int eventCode, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Beschreibung des Ereignisses.</param>
        <param name="eventSource">Das Objekt, das die Quelle des Ereignisses ist.</param>
        <param name="eventCode">Der Code, der dem Ereignis zugeordnet wird. Wenn Sie ein benutzerdefiniertes Ereignis implementieren, der Ereigniscode muss größer sein als <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="e">Die <see cref="T:System.Exception" /> des Fehlers.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Management.WebBaseErrorEvent" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird intern vom ASP.NET Systemüberwachung System verwendet. Sie können diesen Konstruktor aufrufen, wenn Sie eigene-Ereignis des Typs implementieren, die von dieser Klasse erbt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen dieses Konstruktors von einem Konstruktor für die `SampleWebBaseErrorEvent` -Klasse, eine Klasse, abgeleitet wird, die <xref:System.Web.Management.WebBaseErrorEvent> Klasse.  
  
 [!code-csharp[System.Web.Management.WebBaseErrorEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebBaseErrorEvent/CS/webbaseerrorevent.cs#2)]
 [!code-vb[System.Web.Management.WebBaseErrorEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebBaseErrorEvent/VB/webbaseerrorevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WebBaseErrorEvent (string message, object eventSource, int eventCode, int eventDetailCode, Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode, class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebBaseErrorEvent.#ctor(System.String,System.Object,System.Int32,System.Int32,System.Exception)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="message">Die Beschreibung des Ereignisses.</param>
        <param name="eventSource">Das Objekt, das die Quelle des Ereignisses ist.</param>
        <param name="eventCode">Der Code, der dem Ereignis zugeordnet wird. Wenn Sie ein benutzerdefiniertes Ereignis implementieren, der Ereigniscode muss größer sein als <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">Der ausführliche Bezeichner für das Ereignis.</param>
        <param name="e">Die <see cref="T:System.Exception" /> des Fehlers.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Web.Management.WebBaseErrorEvent" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird intern vom ASP.NET Systemüberwachung System verwendet. Sie können diesen Konstruktor aufrufen, wenn Sie eigene-Ereignis des Typs implementieren, die von dieser Klasse erbt.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Aufrufen dieses Konstruktors von einem Konstruktor für die `SampleWebBaseErrorEvent` -Klasse, eine Klasse, abgeleitet wird, die <xref:System.Web.Management.WebBaseErrorEvent> Klasse.  
  
 [!code-csharp[System.Web.Management.WebBaseErrorEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebBaseErrorEvent/CS/webbaseerrorevent.cs#3)]
 [!code-vb[System.Web.Management.WebBaseErrorEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebBaseErrorEvent/VB/webbaseerrorevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorException">
      <MemberSignature Language="C#" Value="public Exception ErrorException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ErrorException" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebBaseErrorEvent.ErrorException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die <see cref="T:System.Exception" /> des Fehlers.</summary>
        <value>Die <see cref="T:System.Exception" /> des Fehlers.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie eine benutzerdefinierte implementieren <xref:System.Web.Management.WebBaseErrorEvent>, müssen Sie sicherstellen, dass Ihre benutzerdefinierten Fehlerereignis diese Ausnahme behandelt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncrementPerfCounters">
      <MemberSignature Language="C#" Value="protected override void IncrementPerfCounters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void IncrementPerfCounters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebBaseErrorEvent.IncrementPerfCounters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Erhöht die Ereignis-Fehlerzähler leistungsbezogene an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode inkrementiert die folgenden Leistungsindikatoren:  
  
-   Infrastruktur-Fehlerereignisse ausgelöst. Dies ist eine globale Zähler, der die ausgelösten Fehlerereignisse nachverfolgt.  
  
-   Fehlerereignisse ausgelöst. Dies ist eine anwendungsspezifische-Zähler, die verfolgt die Anzahl der Fehlerereignisse, die seit dem Start der Anwendung ausgelöst.  
  
 Diese Methode ruft auch die übergeordnete <xref:System.Web.Management.WebBaseEvent.IncrementPerfCounters%2A>, die den Indikator ausgelöste Ereignisse erhöht. Dieser Leistungsindikator verfolgt die Gesamtanzahl der Ereignisse, die ausgelöst wird.  
  
 An diese Leistungsindikatoren im Systemmonitor ("PerfMon"), in der **Leistungsindikatoren hinzufügen** aus **ASP.NET** in der **Leistungsobjekt** Dropdown-Liste der Leistungsindikator, die Sie anzeigen möchten, und klicken Sie auf die **hinzufügen** Schaltfläche. Weitere Informationen finden Sie unter [mithilfe des Systemmonitors (PerfMon) mit ASP.NET-Anwendungen](http://go.microsoft.com/fwlink/?linkid=36882&clcid=0x409) in der IIS-Dokumentation auf MSDN.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
