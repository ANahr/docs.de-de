<Type Name="ImageFormatConverter" FullName="System.Drawing.ImageFormatConverter">
  <TypeSignature Language="C#" Value="public class ImageFormatConverter : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ImageFormatConverter extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.ImageFormatConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Drawing.ImageFormatConverter" />ist eine Klasse, die verwendet werden kann, zu konvertierende <see cref="T:System.Drawing.Imaging.ImageFormat" /> Objekten in andere Datentypen-Typ in einen anderen. Zugriff auf diese Klasse über die <see cref="T:System.ComponentModel.TypeDescriptor" /> Objekt.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Typkonverter wird verwendet, um Werte zwischen Datentypen zu konvertieren. Ein Typkonverter unterstützt auch die Konfiguration zur Entwurfszeit indem Textwert-Konvertierung oder eine Liste mit Werten, denen vom Benutzer auswählen können. Zugriff der <xref:System.Drawing.ImageFormatConverter> -Klasse über die <xref:System.ComponentModel.TypeDescriptor> Klasse durch Aufrufen der <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> Methode.  
  
 Die <xref:System.Drawing.ImageFormatConverter> konvertiert in und aus bekannten Bildformaten gemäß der <xref:System.Drawing.Imaging.ImageFormat> Klasse.  
  
> [!NOTE]
>  Wenn Sie zwischen Bildformate, wie die Konvertierung zwischen BMP und JPEG-Dateien konvertieren möchten, verwenden Sie eine der der <xref:System.Drawing.Image.Save%2A?displayProperty=nameWithType> Methoden, die ein <xref:System.Drawing.Imaging.ImageFormat> -Objekt als Parameter.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ImageFormatConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Drawing.ImageFormatConverter" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Erstellen Sie keine <xref:System.Drawing.ImageFormatConverter> -Objekts direkt. Zugriff der <xref:System.Drawing.ImageFormatConverter> -Klasse über die <xref:System.ComponentModel.TypeDescriptor> Klasse durch Aufrufen der <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> Methode.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext context, Type sourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Type sourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="sourceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein Formatierungsprogramm-Kontext. Dieses Objekt kann verwendet werden, um weitere Informationen über die Umgebung zu erhalten, aus der dieser Konverter aufgerufen wird. Dies ist möglicherweise <see langword="null" />, daher immer überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben <see langword="null" />.</param>
        <param name="sourceType">Der Typ, die, dem Sie konvertieren möchten.</param>
        <summary>Gibt an, ob dieser Konverter ein Objekt vom angegebenen Quelltyp in den systemeigenen Typ des Konverters konvertieren kann.</summary>
        <returns>Diese Methode gibt <see langword="true" /> Wenn dieses Objekt die Konvertierung durchführen kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.ImageFormatConverter> konvertiert in und aus bekannten Bildformaten gemäß der <xref:System.Drawing.Imaging.ImageFormat> Klasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> den Kontext für diese Konvertierung vom Typ angibt.</param>
        <param name="destinationType">Die <see cref="T:System.Type" /> , die den gewünschten, der zum Konvertieren dieser darstellt <see cref="T:System.Drawing.Imaging.ImageFormat" /> Objekt.</param>
        <summary>Ruft einen Wert, der angibt, ob dieser Konverter ein Objekt in den angegebenen Zieltyp unter Verwendung des Kontexts konvertieren kann.</summary>
        <returns>Diese Methode gibt <see langword="true" /> Wenn dieses Objekt die Konvertierung durchführen kann.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.ImageFormatConverter> konvertiert in und aus bekannten Bildformaten gemäß der <xref:System.Drawing.Imaging.ImageFormat> Klasse.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFrom">
      <MemberSignature Language="C#" Value="public override object ConvertFrom (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertFrom(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="context">Ein Formatierungsprogramm-Kontext. Dieses Objekt kann verwendet werden, um weitere Informationen über die Umgebung zu erhalten, aus der dieser Konverter aufgerufen wird. Dies ist möglicherweise <see langword="null" />, daher immer überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben <see langword="null" />.</param>
        <param name="culture">Ein <see cref="T:System.Globalization.CultureInfo" /> Objekt, das Formatierungskonventionen für eine bestimmte Kultur angibt.</param>
        <param name="value">Das zu konvertierende Objekt.</param>
        <summary>Konvertiert das angegebene Objekt in ein <see cref="T:System.Drawing.Imaging.ImageFormat" /> Objekt.</summary>
        <returns>Das konvertierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.ImageFormatConverter> konvertiert in und aus bekannten Bildformaten gemäß der <xref:System.Drawing.Imaging.ImageFormat> Klasse.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die Konvertierung kann nicht abgeschlossen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Ein Formatierungsprogramm-Kontext. Dieses Objekt kann verwendet werden, um weitere Informationen über die Umgebung zu erhalten, aus der dieser Konverter aufgerufen wird. Dies ist möglicherweise <see langword="null" />, daher immer überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben <see langword="null" />.</param>
        <param name="culture">Ein <see cref="T:System.Globalization.CultureInfo" /> Objekt, das Formatierungskonventionen für eine bestimmte Kultur angibt.</param>
        <param name="value">Das zu konvertierende Objekt.</param>
        <param name="destinationType">Der Typ, in den das Objekt konvertiert werden soll.</param>
        <summary>Konvertiert das angegebene Objekt in den angegebenen Typ.</summary>
        <returns>Das konvertierte Objekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Drawing.ImageFormatConverter> konvertiert in und aus bekannten Bildformaten gemäß der <xref:System.Drawing.Imaging.ImageFormat> Klasse.  
  
 Die am häufigsten verwendete typkonvertierung ist und von einem Zeichenfolgentyp. Die Standardimplementierung Ruft die <xref:System.Object.ToString%2A> -Methode des Objekts, wenn das Objekt gültig ist und der Zieltyp ist `string`. Wenn diese Methode das angegebene Objekt in den angegebenen Zieltyp konvertieren kann, löst sie eine <xref:System.NotSupportedException> Ausnahme.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Die Konvertierung kann nicht abgeschlossen werden.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="destinationType" /> ist gleich <see langword="null." />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValues">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.TypeConverter.StandardValuesCollection GetStandardValues (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.TypeConverter/StandardValuesCollection GetStandardValues(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter+StandardValuesCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein Formatierungsprogramm-Kontext. Dieses Objekt kann verwendet werden, um weitere Informationen über die Umgebung zu erhalten, aus der dieser Konverter aufgerufen wird. Dies ist möglicherweise <see langword="null" />, daher immer überprüft werden soll. Auch Eigenschaften des Kontextobjekts können zurückgeben <see langword="null" />.</param>
        <summary>Ruft eine Auflistung, die einen Satz von Standardwerten für den Datentyp enthält, die diese Bestätigung vorgesehen ist. Gibt <see langword="null" /> Wenn der Datentyp einen Standardsatz von Werten nicht unterstützt.</summary>
        <returns>Eine Auflistung, die einen Standardsatz gültiger Werte enthält oder <see langword="null" />. Gibt die standardmäßige Implementierung immer <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStandardValuesSupported">
      <MemberSignature Language="C#" Value="public override bool GetStandardValuesSupported (System.ComponentModel.ITypeDescriptorContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool GetStandardValuesSupported(class System.ComponentModel.ITypeDescriptorContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.ImageFormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
      </Parameters>
      <Docs>
        <param name="context">Ein Typdeskriptor über dem zusätzlicher Kontext bereitgestellt werden kann.</param>
        <summary>Gibt an, ob dieses Objekt einen Standardsatz von Werten unterstützt, die aus einer Liste ausgewählt werden können.</summary>
        <returns>Diese Methode gibt <see langword="true" /> Wenn die <see cref="Overload:System.Drawing.ImageFormatConverter.GetStandardValues" /> Methode sollte aufgerufen werden, um einen gemeinsamen Satz von Werten zu suchen, das Objekt unterstützt.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
