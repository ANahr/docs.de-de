<Type Name="RIPEMD160Managed" FullName="System.Security.Cryptography.RIPEMD160Managed">
  <TypeSignature Language="C#" Value="public class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RIPEMD160Managed extends System.Security.Cryptography.RIPEMD160" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.RIPEMD160Managed" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.RIPEMD160</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Berechnet die <see cref="T:System.Security.Cryptography.RIPEMD160" /> Hash für die Eingabedaten mithilfe der verwalteten Bibliothek.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 RIPEMD-160 ist eine kryptografische 160-Bit-Hash-Funktion. Es dient zur Verwendung als sicherer Ersatz für die 128-Bit-Hashfunktionen MD4, MD5 und RIPEMD. RIPEMD wurde das Framework der EU-Projekts RIPE (RACE Integrity Primitives Evaluation, 1988-1992) entwickelt.  
  
> [!NOTE]
>  <xref:System.Security.Cryptography.RIPEMD160Managed>wurde die Secure Hash-Algorithmen SHA-256, SHA-512 und ihren abgeleiteten Klassen abgelöst. <xref:System.Security.Cryptography.SHA256Managed>und <xref:System.Security.Cryptography.SHA512Managed> bieten eine höhere Sicherheit und Leistung als <xref:System.Security.Cryptography.RIPEMD160Managed>. Verwendung <xref:System.Security.Cryptography.RIPEMD160Managed> nur für Kompatibilität mit älteren Anwendungen und Daten.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird veranschaulicht, wie zum Codieren einer Datei mithilfe der <xref:System.Security.Cryptography.RIPEMD160Managed> Klasse und dann die Datei zu decodieren.  
  
 [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]
 [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]
 [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RIPEMD160Managed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160Managed.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Security.Cryptography.RIPEMD160" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Hashwert dient als eindeutiger Wert mit fester Größe, die eine große Datenmenge darstellt. Hashes von zwei Sätzen von Daten übereinstimmen, wenn auch die entsprechenden Daten übereinstimmen. Kleine Änderungen an den Daten führen in umfangreichen unvorhersehbare Änderungen im HashSet.  
  
 Die Hashgröße für die <xref:System.Security.Cryptography.RIPEMD160> Algorithmus beträgt 160 Bits.  
  
   
  
## Examples  
 Im folgenden Codebeispiel Beispiel berechnet den <xref:System.Security.Cryptography.RIPEMD160Managed> -Klasse Hash für alle Dateien in einem Verzeichnis.  
  
 [!code-cpp[RIPEMD160#1](~/samples/snippets/cpp/VS_Snippets_CLR/RIPEMD160/CPP/ripemd160.cpp#1)]
 [!code-csharp[RIPEMD160#1](~/samples/snippets/csharp/VS_Snippets_CLR/RIPEMD160/CS/ripemd160.cs#1)]
 [!code-vb[RIPEMD160#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/RIPEMD160/vb/ripemd160.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Die Richtlinie ist nicht kompatibel mit dem FIPS-Algorithmus.</exception>
      </Docs>
    </Member>
    <Member MemberName="HashCore">
      <MemberSignature Language="C#" Value="protected override void HashCore (byte[] rgb, int ibStart, int cbSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void HashCore(unsigned int8[] rgb, int32 ibStart, int32 cbSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rgb" Type="System.Byte[]" />
        <Parameter Name="ibStart" Type="System.Int32" />
        <Parameter Name="cbSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="rgb">Die Eingabedaten.</param>
        <param name="ibStart">Der Offset im Bytearray, ab dem Daten verwendet werden sollen.</param>
        <param name="cbSize">Die Anzahl der Bytes im Array, die als Daten verwendet werden sollen.</param>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse leitet Sie in das Objekt geschriebene Daten der <see cref="T:System.Security.Cryptography.RIPEMD160" /> Hashalgorithmus zum Errechnen des Hashs.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird vom Anwendungscode nicht aufgerufen.  
  
 Diese abstrakte Methode führt die Berechnung des Hashs. Bei jedem Schreibvorgang für das Kryptografiestreamobjekt übergibt die Daten über diese Methode. Für jeden Block von Daten aktualisiert diese Methode den Zustand des Hashobjekts so ein richtige Hashwert am Ende des Datenstroms zurückgegeben wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HashFinal">
      <MemberSignature Language="C#" Value="protected override byte[] HashFinal ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance unsigned int8[] HashFinal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160Managed.HashFinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Schließt beim Überschreiben in einer abgeleiteten Klasse die Berechnung des Hashs ab, nachdem die letzten Daten vom Kryptografiestreamobjekt verarbeitet wurden.</summary>
        <returns>Der berechnete Hashcode in einem Bytearray.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode wird vom Anwendungscode nicht aufgerufen. Diese Methode schließt alle partiellen Berechnung ab und gibt den richtigen Hashwert des Datenstroms zurück.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.RIPEMD160Managed.Initialize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine Instanz von der <see cref="T:System.Security.Cryptography.RIPEMD160Managed" /> -Klasse unter Verwendung der verwalteten Bibliothek.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 RIPEMD-160 ist eine kryptografische 160-Bit-Hash-Funktion. Es dient zur Verwendung als sicherer Ersatz für die 128-Bit-Hashfunktionen MD4, MD5 und RIPEMD. RIPEMD wurde das Framework der EU-Projekts RIPE (RACE Integrity Primitives Evaluation, 1988-1992) entwickelt.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
