<Type Name="ResourceWriter" FullName="System.Resources.ResourceWriter">
  <TypeSignature Language="C#" Value="public sealed class ResourceWriter : System.Resources.IResourceWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceWriter extends System.Object implements class System.IDisposable, class System.Resources.IResourceWriter" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Writer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceWriter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Schreibt Ressourcen im System-Standardformat in eine Ausgabedatei oder einen Ausgabestream an. Diese Klasse kann nicht vererbt werden.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceWriter>Stellt eine Standardimplementierung von der <xref:System.Resources.IResourceWriter> Schnittstelle. Sie können Sie programmgesteuert eine binäre Ressourcendatei (.resources) erstellen.  
  
 Ressourcen werden angegeben, als Name-Wert-Paare, die mithilfe der <xref:System.Resources.ResourceWriter.AddResource%2A> Methode. Ressourcennamen Groß-/Kleinschreibung beachtet, wenn für die Suche, verwendet aber mehr problemlos Erstellungstools unterstützen und zum Beheben von Problemen <xref:System.Resources.ResourceWriter> lässt sich nicht auf eine RESOURCES-Datei Namen besitzen, die nur Großschreibung voneinander abweichen. Die <xref:System.Resources.ResourceWriter> Klasse ermöglicht Ihnen die Erstellung von Zeichenfolge, Objekt- und binäre Ressourcen. Binäre Ressourcen können in der Ressourcendatei als ein Bytearray oder einen Stream geschrieben werden.  
  
> [!IMPORTANT]
>  Dieser Typ implementiert die <xref:System.IDisposable> Schnittstelle. Wenn Sie mithilfe des Typs abgeschlossen haben, sollten Sie es entweder direkt oder indirekt freigeben. Aufrufen, um den Typ direkt zu verwerfen, dessen <xref:System.IDisposable.Dispose%2A> Methode in einer `try` / `catch` Block. Um es indirekt freizugeben, verwenden Sie ein Sprachkonstrukt z. B. `using` (in c#) oder `Using` (in Visual Basic). Weitere Informationen finden Sie im Abschnitt "Verwenden eines Objekts, implementiert IDisposable" in der <xref:System.IDisposable> Thema zur Schnittstelle.  
  
 Um eine Ressourcendatei zu erstellen, erstellen eine <xref:System.Resources.ResourceWriter> rufen Sie mit einem eindeutigen Dateinamen <xref:System.Resources.ResourceWriter.AddResource%2A> mindestens einmal aufrufen <xref:System.Resources.ResourceWriter.Generate%2A> die Resources-Datei auf dem Datenträger festgeschrieben, und rufen Sie anschließend <xref:System.Resources.ResourceWriter.Close%2A> , die Datei zu schließen. Aufrufen von <xref:System.Resources.ResourceWriter.Close%2A> wird implizit aufgerufen <xref:System.Resources.ResourceWriter.Generate%2A> , wenn Sie nicht explizit aufrufen <xref:System.Resources.ResourceWriter.Generate%2A>.  
  
 Die Ressourcen werden nicht unbedingt in der gleichen Reihenfolge geschrieben werden, die sie hinzugefügt wurden.  
  
 Beim Abrufen von Ressourcen aus einer binäre RESOURCES-Datei erstellt, indem die <xref:System.Resources.ResourceWriter> -Klasse, die Sie verwenden die <xref:System.Resources.ResourceManager> -Klasse, die benannte Ressourcen abrufen kann, oder die <xref:System.Resources.ResourceReader> -Klasse, die Sie alle Ressourcen in der Datei aufgelistet werden kann.  
  
   
  
## Examples  
 Im folgende Beispiel werden mehrere Zeichenfolgen in die Datei myResources.resources schreibt.  
  
 [!code-cpp[Classic ResourceWriter Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Der Ausgabestream.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Resources.ResourceWriter" /> -Klasse, die die Ressourcen in den angegebenen Stream schreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel definiert eine neue Instanz der dem <xref:System.Resources.ResourceWriter> Klasse, die für einen angegebenen Stream schreibt. Der Code Fügt Ressourcen in den Writer und die Ressourcen in den Stream schreibt.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <paramref name="stream" /> Parameter ist nicht beschreibbar.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="stream" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Der Name der Ausgabedatei.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Resources.ResourceWriter" />-Klasse, die die Ressourcen in die angegebene Datei schreibt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel definiert eine neue Instanz der dem <xref:System.Resources.ResourceWriter> -Klasse, die in einer angegebenen Datei schreiben kann. Der Code Fügt Ressourcen in den Writer und die Ressourcen in die Datei schreibt.  
  
 [!code-cpp[Classic ResourceWriter Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="fileName" />-Parameter ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Ressource.</param>
        <param name="value">Der Wert der Ressource als Array von 8-Bit-Ganzzahl ohne Vorzeichen.</param>
        <summary>Fügt eine benannte Ressource als ein Bytearray in der Liste der zu schreibenden Ressourcen angegeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ressource ist erst dann geschrieben <xref:System.Resources.ResourceWriter.Generate%2A> aufgerufen wird.  
  
 Sie können die Ressourcen von geschrieben Abrufen der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> Methode durch Aufrufen der <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> -Methode zum Hinzufügen einer Grafik, die gelesen wurden, als ein Array von Bytes, die eine <xref:System.Resources.ResourceWriter> Objekt.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_byt1.cs#4)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_byt1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />(oder einen Namen, der nur in Groß-und Kleinschreibung davon unterscheidet) wurde bereits zu diesem hinzugefügt <see cref="T:System.Resources.ResourceWriter" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen, und die Hashtabelle ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der hinzuzufügenden Ressource.</param>
        <param name="value">Der Wert der hinzuzufügenden Ressource. Die Ressource muss unterstützen die <see cref="P:System.IO.Stream.Length" /> Eigenschaft.</param>
        <summary>Fügt eine benannte Ressource als Datenstrom an die Liste der zu schreibenden Ressourcen angegeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können angeben, ein Streams, die unterstützt die <xref:System.IO.Stream.Length%2A?displayProperty=nameWithType> -Eigenschaft für `value`.  
  
 Sie können die Ressourcen von geschrieben Abrufen der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> Methode durch Aufrufen der <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> Methode, um eine Grafik hinzuzufügen, die auf gespeichert wurde eine <xref:System.IO.MemoryStream> -Objekt an eine <xref:System.Resources.ResourceWriter> Objekt.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str1.cs#2)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />(oder einen Namen, der nur in Groß-und Kleinschreibung davon unterscheidet) wurde bereits zu diesem hinzugefügt <see cref="T:System.Resources.ResourceWriter" />.  
  
 - oder -   
  
 Der Stream unterstützt nicht die <see cref="P:System.IO.Stream.Length" /> Eigenschaft.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Ressource.</param>
        <param name="value">Der Wert der Ressource.</param>
        <summary>Fügt eine benannte Ressource als ein Objekt, das die Liste der zu schreibenden Ressourcen angegeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `value`muss serialisierbar sein.  
  
 Die Ressource wird nicht geschrieben werden, bis die <xref:System.Resources.ResourceWriter.Generate%2A> -Methode aufgerufen wird.  
  
 Sie können die Ressourcen von geschrieben Abrufen der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> Methode durch Aufrufen der <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> Methode, um eine binäre Ressourcendatei Objektdaten hinzuzufügen.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_obj1.cs#1)]  
  
 `DonorColumns`ist eine benutzerdefinierte Klasse, deren Felder die Namen der Spalten, die in der Benutzeroberfläche angezeigt werden enthalten. Beachten Sie, die die Klasse mit dem <xref:System.SerializableAttribute> Attribut. Normalerweise würde die Klasse in einer separaten Assembly definiert werden, und ein Verweis darauf für den Compiler zum Zeitpunkt der Kompilierung bereitgestellt.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />(oder einen Namen, der nur in Groß-und Kleinschreibung davon unterscheidet) wurde bereits zu diesem hinzugefügt <see cref="T:System.Resources.ResourceWriter" />.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen, und die Hashtabelle ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der Ressource.</param>
        <param name="value">Der Wert der Ressource.</param>
        <summary>Die Liste der zu schreibenden Ressourcen hinzugefügt eine Zeichenfolgenressource.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Ressource ist erst dann geschrieben <xref:System.Resources.ResourceWriter.Generate%2A> aufgerufen wird.  
  
 Sie können die Ressourcen von geschrieben Abrufen der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.String%29> Methode durch Aufrufen der <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResource%2A> Methode zum Hinzufügen von Ressourcen zu einem <xref:System.Resources.ResourceWriter> Objekt.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />(oder einen Namen, der nur in Groß-und Kleinschreibung davon unterscheidet) wurde ResourceWriter bereits hinzugefügt.</exception>
        <exception cref="T:System.ArgumentNullException">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen, und die Hashtabelle ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value, bool closeAfterWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value, bool closeAfterWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.IO.Stream" />
        <Parameter Name="closeAfterWrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der hinzuzufügenden Ressource.</param>
        <param name="value">Der Wert der hinzuzufügenden Ressource. Die Ressource muss unterstützen die <see cref="P:System.IO.Stream.Length" /> Eigenschaft.</param>
        <param name="closeAfterWrite">
          <see langword="true" />um den Datenstrom nach dem Schließen der <see cref="M:System.Resources.ResourceWriter.Generate" /> Methode wird aufgerufen, andernfalls <see langword="false" />.</param>
        <summary>Fügt eine benannte Ressource angegeben, die als Datenstrom an die Liste der zu schreibenden, Ressourcen und gibt an, ob der Stream geschlossen werden sollen, nach der <see cref="M:System.Resources.ResourceWriter.Generate" /> -Methode aufgerufen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sie können angeben, ein Streams, die unterstützt die <xref:System.IO.Stream.Length%2A?displayProperty=nameWithType> -Eigenschaft für `value`.  
  
 Sie können die Ressourcen von geschrieben Abrufen der <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> Methode durch Aufrufen der <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=nameWithType> Methode.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> Methode, um eine Grafik hinzuzufügen, die auf gespeichert wurde eine <xref:System.IO.MemoryStream> -Objekt an eine <xref:System.Resources.ResourceWriter> Objekt.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str2.cs#3)]
 [!code-vb[System.Resources.ResourceWriter.AddResource#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" />(oder einen Namen, der nur in Groß-und Kleinschreibung davon unterscheidet) wurde bereits zu diesem hinzugefügt <see cref="T:System.Resources.ResourceWriter" />.  
  
 - oder -   
  
 Der Stream unterstützt nicht die <see cref="P:System.IO.Stream.Length" /> Eigenschaft.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> oder <paramref name="value" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen.</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResourceData">
      <MemberSignature Language="C#" Value="public void AddResourceData (string name, string typeName, byte[] serializedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceData(string name, string typeName, unsigned int8[] serializedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="serializedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">Ein Name, der die Ressource identifiziert, die die hinzugefügten Daten enthält.</param>
        <param name="typeName">Der Typname der hinzugefügten Daten.</param>
        <param name="serializedData">Ein Bytearray, das die binäre Darstellung der hinzugefügten Daten enthält.</param>
        <summary>Fügt der Liste der zu schreibenden Ressourcen eine Dateneinheit als Ressource hinzu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Resources.ResourceWriter.AddResourceData%2A> Methode zum Hinzufügen einer Ressource im Binärformat (d. h. als ein Array von Bytes) der Liste der zu schreibenden Ressourcen. Sie müssen den Namen der Ressource, der Typname, der die Daten in die Ressource und die binäre Darstellung der Daten selbst angeben. Nachdem Sie jede Ressource hinzugefügt haben, Sie benötigen, verwenden Sie die <xref:System.Resources.ResourceWriter.Generate%2A> Methode, um die Liste der Ressourcen in Resources-Datei schreiben oder den stream, der angegeben wurde, der <xref:System.Resources.ResourceWriter.%23ctor%2A> Konstruktor.  
  
 `typeName`ist eine Zeichenfolge, die den Datentyp der Ressource darstellt. Die folgenden Werte sind möglich:  
  
-   Die angegebene Zeichenfolgendarstellung einer `ResourceTypeCode` Enumerationsmember, der den Datentyp der Ressource angibt. `ResourceTypeCode`ist eine private Enumeration, die von verwendet wird, um anzugeben, dass spezielles binäres Format zum Speichern eines 19 gängige Datentypen verwendet wird. Dazu gehören die .NET Framework-primitive Datentypen (<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>), sowie <xref:System.String>, <xref:System.DateTime>, und <xref:System.TimeSpan>. Darüber hinaus die `ResourceTypeCode` Enumeration enthält die Werte, die in der folgenden Tabelle gezeigt.  
  
    |`ResourceTypeCode`-Wert|Beschreibung|  
    |------------------------------|-----------------|  
    |`ResourceTypeCode.ByteArray`|Die Daten sind ein Byte-Array.|  
    |`ResourceTypeCode.Null`|Die Daten sind ein null-Verweis.|  
    |`ResourceTypeCode.Stream`|Die Daten werden in einem Stream gespeichert.|  
  
-   Eine Zeichenfolge, die den vollqualifizierten Namen des Typs enthält, deren binären Daten zugewiesen ist, die `serializedData` Argument (z. B. `System.String`). Darüber hinaus enthält die Zeichenfolge für Typen, die nicht Bestandteil der .NET Framework-Klassenbibliothek sind, der Name, Version, Kultur und öffentlicher Schlüssel der Assembly, die den Typ enthält. Die folgende Zeichenfolge gibt beispielsweise an, dass die serialisierten Daten eine Instanz von darstellt der `Person` Geben Sie in der `Extensions` gefunden wird, in einer Assembly namens Hilfsprogramm, das kein öffentlicher Schlüssel und keine anderen festgelegte Kultur verfügt, Version 1.0-Namespace.  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
 Eine parallele Methode zum Lesen der Ressourcendaten geschrieben, mit der <xref:System.Resources.ResourceWriter.AddResourceData%2A> Methode ist <xref:System.Resources.ResourceReader.GetResourceData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.AddResourceData%2A> Methode zum Schreiben von beiden ganzzahligen Werte in eine RESOURCES-Datei und verwendet dann ein <xref:System.Resources.ResourceReader> Objekt, das abgerufen werden.  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResourceData#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/cs/addresourcedata.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.AddResourceData#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/vb/addresourcedata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />, <paramref name="typeName" /> oder <paramref name="serializedData" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> (oder ein Name, der sich nur in Groß- und Kleinschreibung davon unterscheidet) wurde diesem <see cref="T:System.Resources.ResourceWriter" />-Objekt bereits hinzugefügt.</exception>
        <exception cref="T:System.InvalidOperationException">Das aktuelle <see cref="T:System.Resources.ResourceWriter" />-Objekt ist nicht initialisiert. Die wahrscheinlichste Ursache ist, dass das <see cref="T:System.Resources.ResourceWriter" />-Objekt geschlossen ist.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert die Ressourcen in den Ausgabestream und anschließend geschlossen wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceWriter.Generate%2A>wird aufgerufen, implizit von <xref:System.Resources.ResourceWriter.Close%2A>, falls erforderlich.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.Resources.ResourceWriter.Close%2A> -Methode, Schreiben aller Objekte in einer <xref:System.Resources.ResourceWriter> Klasse in den Ausgabestream. Der Code fährt dann den Writer ab.  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Ein E/A-Fehler ist aufgetreten.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Während der Serialisierung des Objekts ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ermöglicht Benutzern das Schließen der Ressourcendatei oder den Stream unter Ressourcen explizit freigeben.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Implementierung dieser Methode ist identisch mit <xref:System.Resources.ResourceWriter.Close%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Resources.ResourceWriter.Dispose%2A> -Methode, Schreiben aller Objekte in einer <xref:System.Resources.ResourceWriter> Klasse in den Ausgabestream. Der Code dann fährt den Writer und der Writer-Ressourcen für andere Prozesse zur Verfügung stellen.  
  
 [!code-cpp[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CPP/resourcewriterdispose.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CS/resourcewriterdispose.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/VB/resourcewriterdispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Ein E/A-Fehler ist aufgetreten.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Während der Serialisierung des Objekts ist ein Fehler aufgetreten.</exception>
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public void Generate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Generate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Generate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Speichert alle Ressourcen in den Ausgabestream in der System-Standardformat.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Resources.ResourceWriter.Generate%2A> Methode wird aufgerufen, implizit von der <xref:System.Resources.ResourceWriter.Close%2A> Methode, wenn es nicht von Anwendungscode aufgerufen wird.  
  
 <xref:System.Resources.ResourceWriter.Generate%2A>kann nur einmal aufgerufen werden, nachdem alle Aufrufe an <xref:System.Resources.ResourceWriter.AddResource%2A> und <xref:System.Resources.ResourceWriter.AddResourceData%2A> vorgenommen wurden. Eine Ausnahme tritt beim Schreiben der Ressourcen, wird der Ausgabestream geschlossen werden, um zu vermeiden, Schreiben ungültige Informationen.  
  
 <xref:System.Resources.ResourceWriter.Generate%2A>der Ausgabestream im Normalfall wird nicht geschlossen werden. Wenn Sie zusätzliche Daten mit RESOURCES-Datei kombinieren oder benötigen Zugriff auf den Stream danach, rufen Sie <xref:System.Resources.ResourceWriter.Close%2A> nach dem Aufruf <xref:System.Resources.ResourceWriter.Generate%2A>, oder rufen Sie einfach <xref:System.Resources.ResourceWriter.Close%2A>.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird mit der <xref:System.Resources.ResourceWriter.Generate%2A> -Methode, Schreiben aller Objekte in einer <xref:System.Resources.ResourceWriter> Klasse in den Ausgabestream  
  
 [!code-cpp[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CPP/resourcewritergenerate.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CS/resourcewritergenerate.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Generate Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/VB/resourcewritergenerate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">E/A-Fehler</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Fehler bei der Serialisierung des Objekts.</exception>
        <exception cref="T:System.InvalidOperationException">Dies <see cref="T:System.Resources.ResourceWriter" /> wurde geschlossen, und die Hashtabelle ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeNameConverter">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; TypeNameConverter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; TypeNameConverter" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceWriter.TypeNameConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt ein Delegaten, die es ermöglicht, die geschrieben werden Versionen von .NET Framework vor der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] mit qualifizierten Assemblynamen.</summary>
        <value>Der Typ, der durch den Delegaten gekapselt wird.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)]und MSBuild legen Sie diese Eigenschaft, wenn Sie eine frühere Version von .NET Framework abzielen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
