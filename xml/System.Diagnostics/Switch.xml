<Type Name="Switch" FullName="System.Diagnostics.Switch">
  <TypeSignature Language="C#" Value="public abstract class Switch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Switch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Switch" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Stellt eine abstrakte Basisklasse zum Erstellen neuer debugging und die Ablaufverfolgung Switches bereit.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Switch bietet einen effizienten Mechanismus für die Ausgabe von Ablaufverfolgungs- und zur Laufzeit mithilfe von externen Einstellungen steuern. Die <xref:System.Diagnostics.Switch> Klasse implementiert das Standardverhalten für Switches, sodass Sie der switchebene zur Laufzeit ändern.  
  
 Diese Klasse ist die Basisklasse für die <xref:System.Diagnostics.BooleanSwitch>, <xref:System.Diagnostics.SourceSwitch> und <xref:System.Diagnostics.TraceSwitch> Klassen. Diese Schalter die meisten debugging und die Ablaufverfolgung von Anforderungen zu erfüllen. Weitere Informationen über Ablaufverfolgungsschalter finden Sie unter [Ablaufverfolgungsschalter](~/docs/framework/debug-trace-profile/trace-switches.md).  
  
 Ablaufverfolgung oder Debuggen, um einen Schalter verwenden, müssen Sie aktivieren. Die folgende Syntax ist compilerspezifisch. Wenn Sie den Compiler als c# oder Visual Basic verwenden, finden Sie in der Dokumentation für den Compiler.  
  
-   Fügen Sie zum Aktivieren des Debuggens in C# geschrieben, die `/d:DEBUG` Flag an die Befehlszeile des Compilers beim Kompilieren des Codes, oder Sie fügen `#define DEBUG` an den Anfang der Datei. Fügen Sie in Visual Basic die `/d:DEBUG=True` -Kennzeichen an die Befehlszeile des Compilers.  
  
-   Zum Aktivieren der Ablaufverfolgung in c# verwenden, fügen die `/d:TRACE` Flag an die Befehlszeile des Compilers beim Kompilieren des Codes, oder fügen `#define TRACE` an den Anfang der Datei. Fügen Sie in Visual Basic die `/d:TRACE=True` -Kennzeichen an die Befehlszeile des Compilers.  
  
 Um die Ebene des Switchs festgelegt, bearbeiten Sie die Konfigurationsdatei, die den Namen der Anwendung entspricht. In dieser Datei können Sie einen Switch hinzufügen, und legen Sie dessen Wert, einen Schalter entfernen oder deaktivieren alles, was die zuvor von der Anwendung festgelegt werden. Die Konfigurationsdatei sollte wie im folgenden Beispiel formatiert werden:  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="true" />  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 Dieser Beispielkonfigurationsabschnitt definiert eine <xref:System.Diagnostics.BooleanSwitch> mit der <xref:System.Diagnostics.Switch.DisplayName%2A> -Eigenschaftensatz auf `mySwitch` und <xref:System.Diagnostics.BooleanSwitch.Enabled%2A> Wert festgelegt wird, um `true`. Innerhalb der Anwendung können Sie den konfigurierten Schalterwert durch das Erstellen einer <xref:System.Diagnostics.BooleanSwitch> mit dem gleichen Namen, wie im folgenden Codebeispiel gezeigt.  
  
 [!code-cpp[Classic Switch Example#4](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Switch Example/CPP/remarks.cpp#4)]
 [!code-csharp[Classic Switch Example#4](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Switch Example/CS/remarks.cs#4)]  
  
   
  
## Examples  
 Das folgende Beispiel zeigt, wie Sie einen neuen definieren <xref:System.Diagnostics.Switch> Klasse mit vier Ebenen für die Ablaufverfolgung, die verwendet werden kann, um eine Aufrufliste. Die Anwendung sich jedes Mal die Methode eingegeben oder beendet wird, können Sie den Switch zu instrumentieren.  
  
 Im erste Beispiel erstellt die Enumeration verwendet, um die Ebene des Schalters festzulegen.  
  
 [!code-cpp[Classic Switch Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Switch Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Switch Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Switch Example/CS/source.cs#1)]
 [!code-vb[Classic Switch Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Switch Example/VB/source.vb#1)]  
  
 Im folgende Beispiel wird den neuen Switch erstellt. Der Code implementiert eine `Level` Eigenschaft zum Festlegen des Werts von dem neuen Switch. `Level`Ruft die geschützte Eigenschaft <xref:System.Diagnostics.Switch.SwitchSetting%2A> , den Wert mit dem neuen Switch zuweist. In diesem Beispiel implementiert auch zwei Accessoreigenschaften, um den zugewiesenen Wert des Schalters abzurufen.  
  
 [!code-cpp[Classic Switch Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Switch Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Switch Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Switch Example/CS/source.cs#2)]
 [!code-vb[Classic Switch Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Switch Example/VB/source.vb#2)]  
  
 Das folgende Beispiel erstellt einen neuen Switch in `Main`. Erstellt einen neuen Switch, und weist ihr den Wert. Klicken Sie dann, abhängig von den Switcheinstellungen wird Debugmeldungen zur Eingabe und Verlassen der Methodennamens ausgegeben.  
  
 [!code-cpp[Classic Switch Example#3](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Switch Example/CPP/source.cpp#3)]
 [!code-csharp[Classic Switch Example#3](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Switch Example/CS/source.cs#3)]
 [!code-vb[Classic Switch Example#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Switch Example/VB/source.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Wenn Ablaufverfolgungsebenen müssen oder Mechanismen für die Einstellung, Ebenen, die sich von denen gebotenen umstellen <see cref="T:System.Diagnostics.BooleanSwitch" />, <see cref="T:System.Diagnostics.SourceSwitch" /> und <see cref="T:System.Diagnostics.TraceSwitch" />, können Sie von erben <see cref="T:System.Diagnostics.Switch" />. Wenn von dieser Klasse erben, müssen Sie implementieren die <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> Methode.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Switch (string displayName, string description);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string displayName, string description) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Switch.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Der Name des Schalters.</param>
        <param name="description">Die Beschreibung für den Switch.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.Switch" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Erstellen einer neuen <xref:System.Diagnostics.Switch> -Objekt, das der Wert der `displayName` Parameter wird verwendet, um die Switcheinstellungen für die anfängliche gefunden werden. Der Standardwert ist eine leere Zeichenfolge („“).  
  
 Innerhalb der XML-Konfigurationsdatei können Sie einen Switch hinzufügen, und legen Sie dessen Wert, einen Schalter entfernen oder deaktivieren alles, was die zuvor von der Anwendung festgelegt werden. Dynamische Änderungen an der Konfigurationsdatei werden nicht erkannt werden, während die Anwendung ausgeführt wird. Sie müssen beenden und starten eine Anwendung aus, bevor Änderungen an der Konfigurationsdatei wirksam werden. Die Konfigurationsdatei sollte wie im folgenden Beispiel formatiert werden:  
  
```  
<configuration>  
  <system.diagnostics>  
    <switches>  
      <add name="mySwitch" value="10" />  
      <add name="myNewSwitch" value="20" />  
      <remove name="mySwitch" />  
      <clear/>  
    </switches>  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Um den Wert des Schalters festzulegen, müssen die <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> Eigenschaft im Konstruktor.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Switch (string displayName, string description, string defaultSwitchValue);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string displayName, string description, string defaultSwitchValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="description" Type="System.String" />
        <Parameter Name="defaultSwitchValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="displayName">Der Name des Schalters.</param>
        <param name="description">Die Beschreibung des Schalters.</param>
        <param name="defaultSwitchValue">Der Standardwert für den Switch.</param>
        <summary>Initialisiert eine neue Instanz der dem <see cref="T:System.Diagnostics.Switch" /> -Klasse und gibt den Anzeigenamen, die Beschreibung und den Standardwert für den Switch.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `displayName` -Parameter zum Festlegen des Werts der <xref:System.Diagnostics.Switch.DisplayName%2A> -Eigenschaft, und die `description` Parameter wird verwendet, um das Festlegen des Werts der <xref:System.Diagnostics.Switch.Description%2A> Eigenschaft. Die `defaultSwitchValue` Parameter ist der Wert für den Switch aus, wenn die <xref:System.Diagnostics.Switch.Value%2A> durch Code oder das Dateiattribut "Configuration"-Eigenschaft nicht festgelegt. Finden Sie unter der <xref:System.Diagnostics.Switch.%23ctor%28System.String%2CSystem.String%29> zusätzliche Informationen zu überladen.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringDictionary Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Switch.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Xml.Serialization.XmlIgnore</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die benutzerdefinierten Schalterattribute ab, die in der Anwendungskonfigurationsdatei definiert sind.</summary>
        <value>Ein <see cref="T:System.Collections.Specialized.StringDictionary" /> , die Groß-/Kleinschreibung, die benutzerdefinierten Attribute für den Ablaufverfolgungsschalter enthält.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.Switch.Attributes%2A> Eigenschaft identifiziert, das die benutzerdefinierten Attribute, die in der Konfigurationsdatei der Anwendung verwiesen wird. Nicht referenzierte benutzerdefinierte Attribute werden nicht aufgezählt werden. Klassen, die von erben die <xref:System.Diagnostics.Switch> Klasse kann benutzerdefinierte Attribute hinzufügen, durch Überschreiben der <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A> -Methode und ein Zeichenfolgenarray mit benutzerdefinierten Attributnamen zurückgeben.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, wie die unbekannte Attribute für einen benutzerdefinierten Schalter angezeigt wird.  
  
 [!code-csharp[System.Diagnostics.TraceSource#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/CS/program.cs#15)]
 [!code-vb[System.Diagnostics.TraceSource#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/VB/program.vb#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Switch.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft eine Beschreibung des Schalters.</summary>
        <value>Die Beschreibung des Schalters. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft sollte die Funktion des Schalters angeben; z. B. "ermöglicht Ablaufverfolgung für eine Watcher Verzeichniskomponente." Der Wert wird festgelegt, indem Sie die `descriptor` Parameter in der <xref:System.Diagnostics.Switch.%23ctor%2A> Konstruktor.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Switch.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft einen Namen zur Identifizierung des Switchs.</summary>
        <value>Der Name zum Identifizieren des Schalters verwendet. Der Standardwert ist eine leere Zeichenfolge („“).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beim Erstellen einer neuen <xref:System.Diagnostics.Switch> -Objekt, das <xref:System.Diagnostics.Switch.DisplayName%2A> sucht nach der ersten Switcheinstellungen. Weitere Informationen finden Sie unter der <xref:System.Diagnostics.Switch.%23ctor%2A> Konstruktor und [Vorgehensweise: erstellen, initialisieren und Konfigurieren von Ablaufverfolgungsschaltern](~/docs/framework/debug-trace-profile/how-to-create-initialize-and-configure-trace-switches.md) in der Visual Studio-Dokumentation.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt den Anzeigenamen für den Switch in Verwendung durch eine Ablaufverfolgungsquelle.  Dieses Codebeispiel ist Teil eines umfangreicheren Beispiels, das Sie in der <xref:System.Diagnostics.TraceSource> Zusammenfassung-Klasse.  
  
 [!code-csharp[System.Diagnostics.TraceSource#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/CS/program.cs#10)]
 [!code-vb[System.Diagnostics.TraceSource#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/VB/program.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected virtual string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string[] GetSupportedAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Switch.GetSupportedAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ruft die benutzerdefinierten Attribute, die vom Switch unterstützt.</summary>
        <returns>Ein Zeichenfolgenarray, das die Namen der von der Switch unterstützten benutzerdefinierten Attribute enthält oder <see langword="null" /> , wenn es keine benutzerdefinierten Attribute unterstützt werden.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die standardmäßige Implementierung für die <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A> -Methode zurückkehrt `null`. Wenn ein Schalter in einer Konfigurationsdatei hinzugefügt wird und benutzerdefinierte Attribute angegeben werden, sind nicht in das zurückgegebene Array von Zeichenfolgen enthalten <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A>, eine <xref:System.Configuration.ConfigurationException> wird ausgelöst, wenn der Schalter geladen wird.  
  
   
  
## Examples  
 Im folgenden Codebeispiel wird gezeigt, eine Überschreibung der <xref:System.Diagnostics.Switch.GetSupportedAttributes%2A> Methode für einen benutzerdefinierten Schalter.  
  
 [!code-csharp[System.Diagnostics.TraceSource#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/CS/program.cs#34)]
 [!code-vb[System.Diagnostics.TraceSource#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.TraceSource/VB/program.vb#34)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Beim Erben von der <see cref="T:System.Diagnostics.Switch" /> Klasse oder einer abgeleiteten Klasse können Sie überschreiben die <see cref="M:System.Diagnostics.Switch.GetSupportedAttributes" /> Methode, um benutzerdefinierte Attribute für die Klasse bereitzustellen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSwitchSettingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSwitchSettingChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSwitchSettingChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Switch.OnSwitchSettingChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn die <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> -Eigenschaft geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Switch.OnSwitchSettingChanged%2A>ein Schalter liest erstmalig wird aufgerufen, die <xref:System.Diagnostics.Switch.SwitchSetting%2A> Wert aus der Konfigurationsdatei und wird aufgerufen, Vorgang jedes Mal den Wert des Switches geändert wird.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnValueChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnValueChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValueChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Switch.OnValueChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wird aufgerufen, wenn die <see cref="P:System.Diagnostics.Switch.Value" /> -Eigenschaft geändert wird.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die standardmäßige Implementierung analysiert den neuen Wert der <xref:System.Diagnostics.Switch.Value%2A> Eigenschaft, um einen Integer-Wert, der verwendet wird, um festzulegen der <xref:System.Diagnostics.Switch.SwitchSetting%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Sie sollten diese Methode überschreiben und eine Konvertierung verwenden, die entsprechende festlegt <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> Wert für den Switch.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SwitchSetting">
      <MemberSignature Language="C#" Value="protected int SwitchSetting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SwitchSetting" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Switch.SwitchSetting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt die aktuelle Einstellung für diesen Schalter.</summary>
        <value>Die aktuelle Einstellung für diesen Schalter. Der Standardwert ist 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="protected string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Switch.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.TraceSource</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab oder legt den Wert des Schalters fest.</summary>
        <value>Eine Zeichenfolge, die den Wert des Schalters darstellt.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Diagnostics.Switch.OnValueChanged%2A> Methode wird aufgerufen, wenn der Wert, der die <xref:System.Diagnostics.Switch.Value%2A> -Eigenschaft geändert wird. Die <xref:System.Diagnostics.Switch.OnValueChanged%2A> Methode analysiert den Wert dieser Eigenschaft und konvertiert ihn in einen ganzzahligen Wert, dann dient zum Festlegen der <xref:System.Diagnostics.Switch.SwitchSetting%2A> Eigenschaft.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">Der Wert ist <see langword="null" />.  
  
 - oder -   
  
 Der Wert nicht ausschließlich aus einem optionalen negativen Vorzeichen und einer Folge von Ziffern zwischen 0 und 9 bestehen.  
  
 - oder -   
  
 Der Wert eine Zahl kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" />.</exception>
        <block subset="none" type="overrides">
          <para>Sie überschreiben, sollte die <see cref="M:System.Diagnostics.Switch.OnValueChanged" /> Methode, und geben Sie eine Konvertierungsoperation, der den entsprechenden festlegt <see cref="P:System.Diagnostics.Switch.SwitchSetting" /> Wert für den Switch.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>
