<Type Name="IReflect" FullName="System.Reflection.IReflect">
  <TypeSignature Language="C#" Value="public interface IReflect" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IReflect" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.IReflect" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interagiert mit dem [IDispatch-Schnittstelle](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Reflection.IReflect> Schnittstelle wird verwendet, um die Interoperabilität mit den [IDispatch-Schnittstelle](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5). <xref:System.Reflection.IReflect>definiert eine Teilmenge der <xref:System.Type> Reflektionsmethoden. Einen Typ, dessen Verhalten anpassen, wenn das Objekt von COM als zugegriffen wird implementieren diese Schnittstelle ermöglicht eine `IDispatch` Objekt. Die <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler> Klasse kann verwendet werden, um ein Objekt zu marshallen, die implementiert <xref:System.Reflection.IReflect> oder <xref:System.Runtime.InteropServices.Expando.IExpando> als eine COM- `IDispatch` -Objekt, und umgekehrt.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des zu suchenden Felds.</param>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Gibt die <see cref="T:System.Reflection.FieldInfo" /> -Objekt, das dem angegebenen Feld und Bindungsflag entspricht.</summary>
        <returns>Ein <see cref="T:System.Reflection.FieldInfo" /> Objekt mit Feldinformationen über das für das benannte Objekt, das die Search-Einschränkungen, die im angegebenen erfüllt <paramref name="bindingAttr" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Das Objekt implementiert mehrere Felder mit dem gleichen Namen.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Gibt ein Array von <see cref="T:System.Reflection.FieldInfo" /> Objekte, die alle Felder der aktuellen Klasse entsprechen.</summary>
        <returns>Ein Array von <see cref="T:System.Reflection.FieldInfo" /> Objekten, die die Feldinformationen für diese Reflektionsobjekt, das die Search-Einschränkungen, die im angegebenen erfüllt <paramref name="bindingAttr" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Übereinstimmung basiert auf einen Namen. Jedes Feld muss einen eindeutigen Namen haben. Die <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> -Flag gibt an, dass nicht öffentliche Methoden in der Suche enthalten sind. Die <xref:System.Reflection.BindingFlags?displayProperty=nameWithType> -Flag gibt an, dass öffentliche Methoden in der Suche enthalten sind.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements gefunden.</param>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Ruft ein Array von <see cref="T:System.Reflection.MemberInfo" /> Objekten entsprechen, die alle öffentlichen Membern oder auf alle Elemente, die mit den angegebenen Namen übereinstimmen.</summary>
        <returns>Ein Array von <see cref="T:System.Reflection.MemberInfo" /> Objekte entsprechen den <paramref name="name" /> Parameter.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Reflection.IReflect.GetMember%2A> Methode ruft ein Array von <xref:System.Reflection.MemberInfo> -Objekte mit dem Namen und Bindungsattributs, entsprechen, die alle öffentlichen Membern oder auf alle Elemente, die mit den angegebenen Namen übereinstimmen. Dem angegebenen Namen die Groß-/Kleinschreibung wird berücksichtigt oder ignoriert, nach den Angaben von <xref:System.Reflection.BindingFlags?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Ruft ein Array von <see cref="T:System.Reflection.MemberInfo" /> -Objekten, die alle öffentlichen Member oder alle Elemente der aktuellen Klasse entsprechen.</summary>
        <returns>Ein Array von <see cref="T:System.Reflection.MemberInfo" /> Objekten, die alle die Memberinformationen für dieses Reflektionsobjekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft ein Array von <xref:System.Reflection.MemberInfo> Objekte durch die Verwendung des Bindungsattributs, die alle öffentlichen Member oder alle Elemente der aktuellen Klasse entspricht. Es gibt ein Array aller für dieses Objekt definierten Member.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements gefunden.</param>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Ruft eine <see cref="T:System.Reflection.MethodInfo" /> Objekt, das eine angegebene Methode unter entspricht, angegebenen Einschränkungen der Suche.</summary>
        <returns>Ein <see cref="T:System.Reflection.MethodInfo" /> Objekt, das die Methodeninformationen enthält, mit der Übereinstimmung wird basierend auf die Methode Namen, und suchen Sie Einschränkungen, angegeben <paramref name="bindingAttr" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Das Objekt implementiert mehrere Methoden mit demselben Namen.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements gefunden.</param>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <param name="binder">Ein Objekt, das <see cref="T:System.Reflection.Binder" /> implementiert, das auf diese Methode bezogene Eigenschaften enthält.</param>
        <param name="types">Ein Array verwendet, um zwischen überladenen Methoden auszuwählen.</param>
        <param name="modifiers">Ein Array von Parametermodifizierern, das zur Bindung mit Parametersignaturen verwendet wird, in denen die Typen geändert wurden.</param>
        <summary>Ruft eine <see cref="T:System.Reflection.MethodInfo" /> Objekt, einer angegebenen Methode entspricht, indem Sie eine <see cref="T:System.Type" /> Array für die Auswahl überladener Methoden.</summary>
        <returns>Die angeforderte Methode, die den angegebenen Parametern übereinstimmt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert ist eine Übereinstimmung, die basierend auf dem Methodennamen <xref:System.Reflection.BindingFlags> Enum-Element, die Art der Konvertierung vom Typ, die gemäß der `binder` Parameter, die Überladung, und die <xref:System.Reflection.ParameterInfo> , beschreibt die Signatur der Methode.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Das Objekt implementiert mehrere Methoden mit demselben Namen.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Ruft ein Array von <see cref="T:System.Reflection.MethodInfo" /> Objekte mit allen öffentlichen Methoden oder alle Methoden der aktuellen Klasse.</summary>
        <returns>Ein Array von <see cref="T:System.Reflection.MethodInfo" /> Objekten, die alle Methoden, die für dieses Reflektionsobjekt definiert, die die Suche Einschränkungen, die im angegebenen erfüllen <paramref name="bindingAttr" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das Attribut nicht öffentlichen `bindingAttr` wird nur angezeigt, wenn öffentliche Methoden zurückgegeben werden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">Die Bindungsattribut verwendet, um die Suche zu steuern.</param>
        <summary>Ruft ein Array von <see cref="T:System.Reflection.PropertyInfo" /> Objekte, die alle öffentlichen Eigenschaften oder alle Eigenschaften der aktuellen Klasse entspricht.</summary>
        <returns>Ein Array von <see cref="T:System.Reflection.PropertyInfo" /> Objekte für alle Eigenschaften, die für das Objekt definiert.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">Der Name der zu suchenden Eigenschaft.</param>
        <param name="bindingAttr">Das Binden von Attributen verwendet, um die Suche zu steuern.</param>
        <summary>Ruft eine <see cref="T:System.Reflection.PropertyInfo" /> Objekt entspricht, der auf eine angegebene Eigenschaft unter angegebenen Einschränkungen der Suche.</summary>
        <returns>Ein <see cref="T:System.Reflection.PropertyInfo" /> Objekt für die sich-Eigenschaft, die die Suche Einschränkungen, die im angegebenen erfüllt <paramref name="bindingAttr" />, oder <see langword="null" /> , wenn die Eigenschaft nicht gefunden wurde.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Das Objekt implementiert mehrere Felder mit dem gleichen Namen.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements gefunden.</param>
        <param name="bindingAttr">Die Bindungsattribut verwendet, um die Suche zu steuern.</param>
        <param name="binder">Ein Objekt, das <see cref="T:System.Reflection.Binder" /> implementiert, das auf diese Methode bezogene Eigenschaften enthält.</param>
        <param name="returnType">Den Typ der Eigenschaft.</param>
        <param name="types">Ein Array verwendet, um zwischen überladenen Methoden mit demselben Namen auszuwählen.</param>
        <param name="modifiers">Ein Array, das zum Auswählen der Parametermodifizierer verwendet.</param>
        <summary>Ruft eine <see cref="T:System.Reflection.PropertyInfo" /> Objekt, das eine angegebene Eigenschaft mit entspricht, angegebenen Einschränkungen der Suche.</summary>
        <returns>Ein <see cref="T:System.Reflection.PropertyInfo" /> Objekt für die gesuchte Eigenschaft, wenn eine Eigenschaft mit dem angegebenen Namen in diesem Reflektionsobjekt nicht gefunden wurde oder <see langword="null" /> , wenn die Eigenschaft nicht gefunden wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ruft eine <xref:System.Reflection.PropertyInfo> Objekt entspricht, der auf eine angegebene Eigenschaft unter angegebenen Einschränkungen der Suche. Ein Typarray dient zum Auswahl überladener Methoden.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">Der Name des Elements gefunden.</param>
        <param name="invokeAttr">Eines der <see cref="T:System.Reflection.BindingFlags" /> Aufrufattribute. Die <c>InvokeAttr</c> Parameter kann einen Konstruktor, Methoden-, Eigenschafts- oder Feldinformationen sein. Es muss ein geeignetes Aufrufattribut angegeben werden. Das Standardelement einer Klasse aufzurufen, übergeben Sie die leere Zeichenfolge ("") als den Namen des Elements.</param>
        <param name="binder">Eines der <see cref="T:System.Reflection.BindingFlags" /> Bitflags. Implementiert <see cref="T:System.Reflection.Binder" />, an diese Methode bezogene Eigenschaften enthält.</param>
        <param name="target">Das Objekt, für das der angegebene Member aufgerufen werden soll. Dieser Parameter wird für statische Elemente ignoriert.</param>
        <param name="args">Ein Array von Objekten, die aufgerufen werden Anzahl, Reihenfolge und Typ der Parameter des Elements enthält. Dies ist ein leeres Array, wenn keine Parameter vorhanden sind.</param>
        <param name="modifiers">Ein Array von <see cref="T:System.Reflection.ParameterModifier" />-Objekten. Dieses Array weist die gleiche Länge wie die <c>Args</c> Parameter, Argument-Attribute in den Metadaten des aufgerufenen Members darstellt. Ein Parameter kann die folgenden Attribute aufweisen: <see langword="pdIn" />, <see langword="pdOut" />, <see langword="pdRetval" />, <see langword="pdOptional" />, und <see langword="pdHasDefault" />. Diese stellen [In], [Out], [Retval], [optional] und einen Standardparameter bzw.. Diese Attribute werden von verschiedenen Interoperabilitätsdiensten verwendet.</param>
        <param name="culture">Eine Instanz von <see cref="T:System.Globalization.CultureInfo" /> für die Steuerung der Umwandlung von Typen. Beispielsweise <c>Kultur</c> konvertiert eine <see langword="String" /> , der 1000 darstellt, in eine <see langword="Double" /> Wert, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird. Wenn dieser Parameter ist <see langword="null" />die <see cref="T:System.Globalization.CultureInfo" /> des aktuellen Threads verwendet wird.</param>
        <param name="namedParameters">Ein <see langword="String" /> Array von Parametern.</param>
        <summary>Ruft ein angegebenes Element an.</summary>
        <returns>Das angegebene Element.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Methode, die aufgerufen werden soll, muss zugänglich sein und mit der angegebenen Argumentliste unter den Einschränkungen des angegebenen Binders und der Aufrufattribute die spezifischste Übereinstimmung bereitstellen.  
  
 Eine Methode wird aufgerufen, wenn die Anzahl von Parametern in der Deklaration der Methode der Anzahl der Argumente in der angegebenen Argumentliste entspricht und der Typ jedes Arguments vom Binder in den Typ des Parameters konvertiert werden kann.  
  
> [!NOTE]
>  Das Array von Parametermodifizierern übergeben, um die <xref:System.Reflection.IReflect.InvokeMember%2A> Methode muss einen einzelnen Parametermodifizierer enthalten. Nur die erste Parametermodifizierer gilt beim Bestimmen des Arguments als Verweis, wenn für COM verfügbar gemacht übergeben werden muss  
  
 Der Binder sucht alle übereinstimmende Methoden gemäß den Typ der Bindung angefordert (<xref:System.Reflection.BindingFlags?displayProperty=nameWithType>, <xref:System.Reflection.IReflect.GetProperties%2A>usw.). Der Satz von Methoden wird durch den Namen, Anzahl von Argumenten und einen Satz von Suchabfragen in der Binder definierten gefiltert. Nachdem die Methode ausgewählt ist, er wird aufgerufen, und Eingabehilfen an diesem Punkt aktiviert ist. Die Suche kann gesteuert werden, welche Gruppe von Methoden basierend auf der Eingabehilfen-Attribut, das der Methode zugeordnet durchsucht wird. <xref:System.Reflection.Binder.BindToMethod%2A>Wählt die aufzurufende Methode. Der Standardbinder wählt die spezifischste Übereinstimmung.  
  
 Zugriffseinschränkungen für vollständig vertrauenswürdige Code ignoriert. D. h. können private Konstruktoren, Methoden, Felder und Eigenschaften werden zugegriffen und durch Reflektion aufgerufen werden, wenn der Code vollständig vertrauenswürdig ist.  
  
   
  
## Examples  
 Im folgende Beispiel erhält den Wert der <xref:System.DateTime.Now%2A> Eigenschaft.  
  
 [!code-cpp[Classic IReflect.InvokeMember Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic IReflect.InvokeMember Example/CPP/source.cpp#1)]
 [!code-csharp[Classic IReflect.InvokeMember Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic IReflect.InvokeMember Example/CS/source.cs#1)]
 [!code-vb[Classic IReflect.InvokeMember Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic IReflect.InvokeMember Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Mehr als ein Argument für ein Feld angegeben wird <see langword="set" />.</exception>
        <exception cref="T:System.MissingFieldException">Das Feld oder die Eigenschaft wurde nicht gefunden.</exception>
        <exception cref="T:System.MissingMethodException">Die Methode kann nicht gefunden werden.</exception>
        <exception cref="T:System.Security.SecurityException">Ein privater Member wird aufgerufen, ohne die erforderliche <see cref="T:System.Security.Permissions.ReflectionPermission" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.IReflect.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft ab, der zugrunde liegenden Typ, steht die <see cref="T:System.Reflection.IReflect" /> Objekt.</summary>
        <value>Der zugrunde liegenden Typ, steht die <see cref="T:System.Reflection.IReflect" /> Objekt.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
