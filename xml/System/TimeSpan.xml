<Type Name="TimeSpan" FullName="System.TimeSpan">
  <TypeSignature Language="C#" Value="public struct TimeSpan : IComparable, IComparable&lt;TimeSpan&gt;, IEquatable&lt;TimeSpan&gt;, IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit TimeSpan extends System.ValueType implements class System.IComparable, class System.IComparable`1&lt;valuetype System.TimeSpan&gt;, class System.IEquatable`1&lt;valuetype System.TimeSpan&gt;, class System.IFormattable" />
  <TypeSignature Language="DocId" Value="T:System.TimeSpan" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeSpan&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt ein Zeitintervall dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Die .NET Framework-Quellcodes für diesen Typ finden Sie unter der [Verweisquelle](http://referencesource.microsoft.com/#mscorlib/system/timespan.cs#865ef7b89f41b632). Sie können den Quellcode online Durchsuchen, Referenz für die Offlineanzeige herunterladen und schrittweise durchlaufen (inklusive Patches und Updates) während des Debuggens; finden Sie unter [Anweisungen](http://referencesource.microsoft.com/).  
  
 Ein <xref:System.TimeSpan> Objekt stellt ein Zeitintervall (Dauer bzw. verstrichene Zeit), die als eine positive oder negative Anzahl von Tagen, Stunden, Minuten, Sekunden und Sekundenbruchteilen gemessen wird. Die <xref:System.TimeSpan> Struktur kann auch verwendet werden, um die Uhrzeit, aber nur darstellen, wenn die Zeit keinen Bezug zu einem bestimmten Datum ist. Andernfalls die <xref:System.DateTime> oder <xref:System.DateTimeOffset> Struktur sollte stattdessen verwendet werden. (Weitere Informationen zum Verwenden der <xref:System.TimeSpan> Struktur entsprechen der Zeit des Tages, finden Sie unter [Choosing Between DateTime, DateTimeOffset TimeSpan und "TimeZoneInfo"](~/docs/standard/datetime/choosing-between-datetime.md).)  
  
> [!NOTE]
>  Ein <xref:System.TimeSpan> Wert stellt ein Zeitintervall dar und kann als eine bestimmte Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden ausgedrückt werden. Da es sich um eine allgemeine Intervall ohne Verweis auf einen bestimmten Start- oder Endpunkt darstellt, kann es im Hinblick auf Jahre und Monaten, die eine Variable Anzahl von Tagen haben ausgedrückt werden. Sie unterscheidet sich von einem <xref:System.DateTime> -Wert, der ein Datum und Uhrzeit ohne Verweis auf eine bestimmte Zeitzone darstellt, oder ein <xref:System.DateTimeOffset> -Wert, der einem bestimmten Zeitpunkt darstellt.  
  
 Die größte Einheit der Zeit, die die <xref:System.TimeSpan> Struktur verwendet werden, um die Dauer gemessen wird täglich. Zeitintervalle werden in Tagen aus Gründen der Konsistenz gemessen, da die Anzahl der Tage in größeren Zeiteinheiten darstellen, z. B. Monaten und Jahren, variiert.  
  
 Der Wert des einem <xref:System.TimeSpan> Objekt ist die Anzahl der Ticks, die das dargestellten Zeitintervall entsprechen. Ein Tick entspricht 100 Nanosekunden oder ein zehnmillionstel einer Sekunde. Der Wert des einem <xref:System.TimeSpan> Objekt kann im Bereich von <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> auf <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
## <a name="instantiating-a-timespan-value"></a>Instanziieren ein TimeSpan-Wert  
 Instanziieren Sie ein <xref:System.TimeSpan> Wert eine Reihe von Möglichkeiten:  
  
-   Durch Aufrufen seiner impliziten Standardkonstruktor. Dies erstellt ein Objekt, dessen Wert <xref:System.TimeSpan.Zero?displayProperty=nameWithType>, wie im folgende Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#2)]
     [!code-vb[System.TimeSpan.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#2)]  
  
-   Durch Aufrufen seiner explizite Konstruktoren. Im folgende Beispiel initialisiert einen <xref:System.TimeSpan> Wert auf eine angegebene Anzahl von Stunden, Minuten und Sekunden.  
  
     [!code-csharp[System.TimeSpan.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#3)]
     [!code-vb[System.TimeSpan.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#3)]  
  
-   Durch Aufrufen einer Methode oder Ausführen eines Vorgangs, der gibt eine <xref:System.TimeSpan> Wert. Sie können z. B. Instanziieren einer <xref:System.TimeSpan> Wert, der das Intervall zwischen den zwei Datum und Uhrzeit-Werte, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#4)]
     [!code-vb[System.TimeSpan.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#4)]  
  
     Sie können auch Initialisieren einer <xref:System.TimeSpan> Objekt eine 0 (null) Time-Werten auf diese Weise, wie im folgenden Beispiel gezeigt.  
  
     [!code-csharp[System.TimeSpan.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/zero1.cs#6)]
     [!code-vb[System.TimeSpan.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/zero1.vb#6)]  
  
     <xref:System.TimeSpan>Werte werden von arithmetischen Operatoren und Methoden des zurückgegeben der <xref:System.DateTime>, <xref:System.DateTimeOffset>, und <xref:System.TimeSpan> Strukturen.  
  
-   Durch die Zeichenfolgendarstellung Analysieren einer <xref:System.TimeSpan> Wert. Sie können die <xref:System.TimeSpan.Parse%2A> und <xref:System.TimeSpan.TryParse%2A> Methoden zum Konvertieren von Zeichenfolgen, die Zeitintervalle zu enthalten <xref:System.TimeSpan> Werte. Im folgenden Beispiel wird die <xref:System.TimeSpan.Parse%2A> Methode, um ein Array von Zeichenfolgen zu konvertieren <xref:System.TimeSpan> Werte.  
  
     [!code-csharp[System.TimeSpan.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/instantiate1.cs#5)]
     [!code-vb[System.TimeSpan.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/instantiate1.vb#5)]  
  
     Darüber hinaus können Sie das genaue Format der eingegebenen Zeichenfolge analysiert und konvertiert werden definieren eine <xref:System.TimeSpan> -Wert durch Aufrufen der <xref:System.TimeSpan.ParseExact%2A> oder <xref:System.TimeSpan.TryParseExact%2A> Methode.  
  
## <a name="performing-operations-on-timespan-values"></a>Ausführen von Vorgängen für TimeSpan-Werte  
 Sie können von Addition und Subtraktion von Zeiträumen entweder mithilfe der <xref:System.TimeSpan.op_Addition%2A> und <xref:System.TimeSpan.op_Subtraction%2A> Operatoren, oder durch Aufrufen der <xref:System.TimeSpan.Add%2A> und <xref:System.TimeSpan.Subtract%2A> Methoden. Sie können auch zwei Zeitdauern vergleichen, durch Aufrufen der <xref:System.TimeSpan.Compare%2A>, <xref:System.TimeSpan.CompareTo%2A>, und <xref:System.TimeSpan.Equals%2A> Methoden. Die <xref:System.TimeSpan> Struktur enthält außerdem die <xref:System.TimeSpan.Duration%2A> und <xref:System.TimeSpan.Negate%2A> -Methoden, die Zeiträume in positive und negative Werte zu konvertieren,  
  
 Der Bereich von <xref:System.TimeSpan> Werte ist <xref:System.TimeSpan.MinValue> auf <xref:System.TimeSpan.MaxValue>.  
  
## <a name="formatting-a-timespan-value"></a>Formatieren einen TimeSpan-Wert  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Ein Zeitintervall besteht also eine positive oder negative Anzahl von Tagen ohne eine Uhrzeit oder eine Anzahl von Tagen mit einer Tageszeit oder nur eine Uhrzeit.  
  
 Beginnend mit der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], die <xref:System.TimeSpan> Struktur unterstützt kulturabhängige Formatierung über Überladungen der seine <xref:System.TimeSpan.ToString%2A> -Methode, die konvertiert eine <xref:System.TimeSpan> Wert in seine Zeichenfolgendarstellung. Die Standardeinstellung <xref:System.TimeSpan.ToString?displayProperty=nameWithType> -Methode gibt ein Zeitintervall mit einem unveränderlichen Format, das den Rückgabewert in früheren Versionen von .NET Framework identisch ist. Die <xref:System.TimeSpan.ToString%28System.String%29?displayProperty=nameWithType> Überladung können Sie eine Formatzeichenfolge angeben, die die Zeichenfolgendarstellung des angegebenen Zeitintervalls definiert. Die <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> Überladung ermöglicht die Angabe einer Formatzeichenfolge und die Kultur, deren Formatierungskonventionen verwendet werden, um die Zeichenfolgendarstellung des angegebenen Zeitintervalls zu erstellen. <xref:System.TimeSpan>Beide standardmäßigen und benutzerdefinierten Formatzeichenfolgen unterstützt. (Weitere Informationen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).) Allerdings sind nur als standard verwendete Formatzeichenfolgen kulturabhängig.  
  
## <a name="restoring-legacy-timespan-formatting"></a>Wiederherstellen von Legacy-TimeSpan Formatierung  
 In einigen Fällen code, der erfolgreich Formate <xref:System.TimeSpan> Werte in [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen ein Fehler auftritt, [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Das geschieht meistens in Code, der Aufrufe einer [< TimeSpan_LegacyFormatMode >-Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md) Methode so formatieren Sie ein <xref:System.TimeSpan> Wert mit einer Formatzeichenfolge. Im folgenden Beispiel erfolgreich formatiert eine <xref:System.TimeSpan> Wert in [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen, aber eine Ausnahme [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] und höheren Versionen. Beachten Sie, die es versucht, Formatieren einer <xref:System.TimeSpan> Wert mit einem nicht unterstützten Formatbezeichner, der in ignoriert wird [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen.  
  
 [!code-csharp[System.TimeSpan.Class.Legacy#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.legacy/cs/legacycode1.cs#1)]
 [!code-vb[System.TimeSpan.Class.Legacy#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.legacy/vb/legacycode1.vb#1)]  
  
 Wenn Sie den Code nicht ändern, können Sie wiederherstellen, die ältere Formatierung der <xref:System.TimeSpan> -Werte in einer der folgenden Methoden:  
  
-   Durch eine Konfigurationsdatei erstellen, enthält die [< TimeSpan_LegacyFormatMode >-Element](~/docs/framework/configure-apps/file-schema/runtime/timespan-legacyformatmode-element.md). Dieses Element festlegen `enabled` -Attribut `true` wiederhergestellt Legacy <xref:System.TimeSpan> Formatierung für eine einzelne Anwendung.  
  
-   Durch Festlegen des Kompatibilitätsgrades "NetFx40_TimeSpanLegacyFormatMode" wechseln Sie, wenn eine Anwendungsdomäne zu erstellen. Dies ermöglicht eine Legacy- <xref:System.TimeSpan> Formatierung pro Anwendungsdomäne. Das folgende Beispiel erstellt eine Anwendungsdomäne, die verwendet, die ältere <xref:System.TimeSpan> formatieren.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/perappdomain1.cs#1)]
     [!code-vb[System.TimeSpan.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/perappdomain1.vb#1)]  
  
     Der folgende Code in der neuen Anwendungsdomäne ausgeführt wird, wechselt für ältere <xref:System.TimeSpan> Formatierung Verhalten.  
  
     [!code-csharp[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class.appdomain/cs/showtimespan.cs#2)]
     [!code-vb[System.TimeSpan.Class.AppDomain#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class.appdomain/vb/showtimespan.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> Objekt, das die Differenz zwischen zwei Datumsangaben darstellt. Es zeigt dann die <xref:System.TimeSpan> Eigenschaften des Objekts.  
  
 [!code-csharp[System.TimeSpan.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.class/cs/structure1.cs#1)]
 [!code-vb[System.TimeSpan.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.class/vb/structure1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (long ticks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 ticks) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int64)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="ticks" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ticks">Eine in der Einheit 100 Nanosekunden ausgedrückte Zeitspanne.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Ticks.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein einzelner Tick stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. In einer Millisekunde sind 10.000 Ticks.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten über die Konstruktorüberladung, die initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Ticks.  
  
 [!code-cpp[System.TimeSpan.Ctor#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctorl.cpp#1)]
 [!code-csharp[System.TimeSpan.Ctor#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctorl.cs#1)]
 [!code-vb[System.TimeSpan.Ctor#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctorl.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Stunden, Minuten und Sekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `hours`, `minutes`, und `seconds` werden in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten über die Konstruktorüberladung, die initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Stunden, Minuten und Sekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriii.cpp#2)]
 [!code-csharp[System.TimeSpan.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriii.cs#2)]
 [!code-vb[System.TimeSpan.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriii.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" /> Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Anzahl der Tage.</param>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Tagen, Stunden, Minuten und Sekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `days`, `hours`, `minutes`, und `seconds` werden in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten über die Konstruktorüberladung, die initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Tagen, Stunden, Minuten und Sekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiii.cpp#3)]
 [!code-csharp[System.TimeSpan.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiii.cs#3)]
 [!code-vb[System.TimeSpan.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiii.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" /> Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TimeSpan (int days, int hours, int minutes, int seconds, int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 days, int32 hours, int32 minutes, int32 seconds, int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="days" Type="System.Int32" />
        <Parameter Name="hours" Type="System.Int32" />
        <Parameter Name="minutes" Type="System.Int32" />
        <Parameter Name="seconds" Type="System.Int32" />
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="days">Anzahl der Tage.</param>
        <param name="hours">Anzahl der Stunden.</param>
        <param name="minutes">Anzahl der Minuten.</param>
        <param name="seconds">Anzahl der Sekunden.</param>
        <param name="milliseconds">Anzahl der Millisekunden.</param>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.TimeSpan" />-Struktur mit der angegebenen Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Das angegebene `days`, `hours`, `minutes`, `seconds`, und `milliseconds` werden in Ticks konvertiert, und dass der Wert dieser Instanz initialisiert.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten über die Konstruktorüberladung, die initialisiert einen <xref:System.TimeSpan> auf eine angegebene Anzahl von Tagen, Stunden, Minuten, Sekunden und Millisekunden.  
  
 [!code-cpp[System.TimeSpan.Ctor#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CPP/ctoriiiii.cpp#4)]
 [!code-csharp[System.TimeSpan.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Ctor/CS/ctoriiiii.cs#4)]
 [!code-vb[System.TimeSpan.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Ctor/VB/ctoriiiii.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Die Parameter geben einen <see cref="T:System.TimeSpan" /> Wert kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public TimeSpan Add (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Add(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Add(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Das hinzuzufügende Zeitintervall.</param>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert die Summe aus dem angegebenen <see cref="T:System.TimeSpan" />-Objekt und dieser Instanz ist.</summary>
        <returns>Ein neues Objekt, das die Summe des Werts dieser Instanz und des Werts von <paramref name="ts" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert muss zwischen <xref:System.TimeSpan?displayProperty=nameWithType> und <xref:System.TimeSpan?displayProperty=nameWithType>ist, andernfalls wird eine Ausnahme ausgelöst.  
  
 Der Rückgabewert ist eine neue <xref:System.TimeSpan>; die ursprüngliche <xref:System.TimeSpan> wird nicht geändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Add%2A> Methode, um jedes Element in einem Array von Zeitintervallen werden einem Basistyp hinzuzufügen <xref:System.TimeSpan> Wert.  
  
 [!code-csharp[System.TimeSpan.Add#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.add/cs/add1.cs#1)]
 [!code-vb[System.TimeSpan.Add#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.add/vb/add1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der resultierende <see cref="T:System.TimeSpan" />-Wert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Compare(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Vergleicht zwei <see cref="T:System.TimeSpan" />-Werte und gibt eine Ganzzahl zurück, die angibt, ob der erste Wert kürzer oder länger als der zweite Wert ist oder ob beide Werte die gleiche Länge aufweisen.</summary>
        <returns>Einer der folgenden Werte.  
  
 <list type="table"><listheader><term>Wert  
  
 </term><description>Beschreibung  
  
 </description></listheader><item><term> -1  
  
 </term><description><paramref name="t1" /> ist kürzer als <paramref name="t2" />.  
  
 </description></item><item><term> 0  
  
 </term><description><paramref name="t1" /> ist gleich <paramref name="t2" />.  
  
 </description></item><item><term> 1  
  
 </term><description><paramref name="t1" /> ist länger als <paramref name="t2" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Compare%2A> Methode, um mehrere vergleichen <xref:System.TimeSpan> Objekte mit einem <xref:System.TimeSpan> Objekt, dessen Wert ein Zeitintervall von 2 Stunden.  
  
 [!code-csharp[System.TimeSpan.Compare#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.compare/cs/compare1.cs#1)]
 [!code-vb[System.TimeSpan.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.compare/vb/compare1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CompareTo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Vergleicht diese Instanz mit einem angegebenen Objekt oder <see cref="T:System.TimeSpan" />-Objekt und gibt eine ganze Zahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene Objekt bzw. <see cref="T:System.TimeSpan" />-Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die beiden Überladungen der der <xref:System.TimeSpan.CompareTo%2A> Methodenrückgabewert eine Zahl mit Vorzeichen, der den relativen Wert dieser Instanz angibt und die `value` -Arguments zu, wie in der folgenden Tabelle dargestellt.  
  
|Wert|Beschreibung|  
|-----------|-----------------|  
|Kleiner als 0 (null)|Diese Instanz ist kürzer als `value`.|  
|Zero|Diese Instanz entspricht `value`.|  
|Größer als 0 (null)|Diese Instanz ist länger als `value`.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein Vergleichsobjekt oder <see langword="null" />.</param>
        <summary>Vergleicht diese Instanz mit einem angegebenen Objekt und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <returns>Einer der folgenden Werte.  
  
 <list type="table"><listheader><term>Wert  
  
 </term><description>Beschreibung  
  
 </description></listheader><item><term> -1  
  
 </term><description>Diese Instanz ist kürzer als <paramref name="value" />.  
  
 </description></item><item><term> 0  
  
 </term><description>Diese Instanz ist gleich <paramref name="value" />.  
  
 </description></item><item><term> 1  
  
 </term><description>Diese Instanz ist länger als <paramref name="value" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see langword="null" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jede Instanz von <xref:System.TimeSpan>, unabhängig vom Wert wird als größer betrachtet `null`.  
  
 Die `value` Parameter muss eine Instanz von <xref:System.TimeSpan> oder `null`ist, andernfalls wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Strukturen und andere Objekte als Verweis <xref:System.TimeSpan> -Struktur unter Verwendung der <xref:System.TimeSpan.CompareTo%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist keine <see cref="T:System.TimeSpan" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TimeSpan value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CompareTo(valuetype System.TimeSpan value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.CompareTo(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="value">Ein mit dieser Instanz zu vergleichendes Objekt.</param>
        <summary>Vergleicht diese Instanz mit einem angegebenen <see cref="T:System.TimeSpan" />-Objekt und gibt eine Ganzzahl zurück, die angibt, ob diese Instanz kürzer oder länger als das angegebene <see cref="T:System.TimeSpan" />-Objekt ist oder ob sie die gleiche Länge aufweist.</summary>
        <returns>Eine Zahl mit Vorzeichen, die das Verhältnis zwischen dem Wert dieser Instanz und <paramref name="value" /> angibt.  
  
 <list type="table"><listheader><term>Wert  
  
 </term><description>Beschreibung  
  
 </description></listheader><item><term>Eine negative ganze Zahl  
  
 </term><description>Diese Instanz ist kürzer als <paramref name="value" />.  
  
 </description></item><item><term>0 (null)  
  
 </term><description>Diese Instanz ist gleich <paramref name="value" />.  
  
 </description></item><item><term>Eine positive ganze Zahl  
  
 </term><description>Diese Instanz ist länger als <paramref name="value" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode implementiert die <xref:System.IComparable%601?displayProperty=nameWithType> Schnittstelle und führt etwas bessere Leistung als die <xref:System.TimeSpan.CompareTo%2A?displayProperty=nameWithType> Methode, da sie keinen konvertieren die `value` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die generische und nicht generische Versionen der <xref:System.TimeSpan.CompareTo%2A> Methode für verschiedene Wert- und Referenztypen.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Days">
      <MemberSignature Language="C#" Value="public int Days { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Days" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Days" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Tageskomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Tagkomponente in dieser Instanz. Der Rückgabewert kann negativ oder positiv sein.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Der Wert, der die <xref:System.TimeSpan.Days%2A> Eigenschaft ist für die Tageskomponente *d*.  
  
 Die <xref:System.TimeSpan.Days%2A> -Eigenschaft stellt ganze Tage dar, während die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Tagen.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Days%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public TimeSpan Divide (double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Divide(float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public double Divide (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64 Divide(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Divide(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Duration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Duration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert den absoluten Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts darstellt.</summary>
        <returns>Ein neues Objekt, dessen Wert den absoluten Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel wendet die <xref:System.TimeSpan.Duration%2A> Methode, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Wert dieser Instanz ist <see cref="F:System.TimeSpan.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Ein Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="value" /> ein <see cref="T:System.TimeSpan" />-Objekt ist, das das gleiche Zeitintervall wie die aktuelle <see cref="T:System.TimeSpan" />-Struktur darstellt, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> und andere Objekte als Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.Equals%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/cto_eq_obj.cpp#1)]
 [!code-csharp[System.TimeSpan.Compare_Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/cto_eq_obj.cs#1)]
 [!code-vb[System.TimeSpan.Compare_Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/cto_eq_obj.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeSpan obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(valuetype System.TimeSpan obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="obj">Ein Objekt, das mit dieser Instanz verglichen werden soll.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen <see cref="T:System.TimeSpan" />-Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="obj" /> das gleiche Zeitintervall darstellt wie diese Instanz, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode implementiert die <xref:System.IEquatable%601?displayProperty=nameWithType> Schnittstelle, und führt etwas bessere Leistung als <xref:System.TimeSpan.Equals%2A> , da sie keinen konvertieren die `obj` Parameter für ein Objekt.  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die generische und nicht generische Versionen der <xref:System.TimeSpan.CompareTo%2A> Methode für verschiedene Wert- und Referenztypen.  
  
 [!code-cpp[T.CompareTo#1](~/samples/snippets/cpp/VS_Snippets_CLR/T.CompareTo/CPP/cat.cpp#1)]
 [!code-csharp[T.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR/T.CompareTo/CS/cat.cs#1)]
 [!code-vb[T.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/T.CompareTo/VB/cat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Equals(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob zwei angegebene Instanzen von <see cref="T:System.TimeSpan" /> gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der statischen <xref:System.TimeSpan.Equals%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CPP/comp_equal.cpp#2)]
 [!code-csharp[System.TimeSpan.Compare_Equals#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/CS/comp_equal.cs#2)]
 [!code-vb[System.TimeSpan.Compare_Equals#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Compare_Equals/VB/comp_equal.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDays">
      <MemberSignature Language="C#" Value="public static TimeSpan FromDays (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromDays(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromDays(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Tagen, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Tagen darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter in Millisekunden, die in Ticks konvertiert wird, konvertiert, und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust an Genauigkeit von der <xref:System.Double> -Datentyp, diese Konvertierung kann dazu führen, dass ein <xref:System.OverflowException> für Werte, die in der Nähe, aber im Bereich von <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Dies verursacht beispielsweise eine <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#2)]
 [!code-vb[System.TimeSpan.FromMinutes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#2)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.FromDays%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromdays.cpp#6)]
 [!code-csharp[System.TimeSpan.From#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromdays.cs#6)]
 [!code-vb[System.TimeSpan.From#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromdays.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromHours">
      <MemberSignature Language="C#" Value="public static TimeSpan FromHours (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromHours(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromHours(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Stunden, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Stunden darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter in Millisekunden, die in Ticks konvertiert wird, konvertiert, und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust an Genauigkeit von der <xref:System.Double> -Datentyp, diese Konvertierung kann generieren eine <xref:System.OverflowException> für Werte, die in der Nähe, aber im Bereich von <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Dies verursacht beispielsweise eine <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#3)]
 [!code-vb[System.TimeSpan.FromMinutes#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#3)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.FromHours%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromhours.cpp#5)]
 [!code-csharp[System.TimeSpan.From#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromhours.cs#5)]
 [!code-vb[System.TimeSpan.From#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromhours.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromMilliseconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMilliseconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMilliseconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMilliseconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Millisekunden.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Millisekunden darstellt.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter wird in Ticks konvertiert, und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust an Genauigkeit von der <xref:System.Double> -Datentyp, diese Konvertierung kann generieren eine <xref:System.OverflowException> für Werte, die in der Nähe, aber im Bereich von <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Dies verursacht beispielsweise eine <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#4)]
 [!code-vb[System.TimeSpan.FromMinutes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#4)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekte mithilfe der <xref:System.TimeSpan.FromMilliseconds%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/frommillisec.cpp#2)]
 [!code-csharp[System.TimeSpan.From#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/frommillisec.cs#2)]
 [!code-vb[System.TimeSpan.From#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/frommillisec.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromMinutes">
      <MemberSignature Language="C#" Value="public static TimeSpan FromMinutes (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromMinutes(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromMinutes(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Minuten, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Minuten darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter in Millisekunden, die in Ticks konvertiert wird, konvertiert, und diese Anzahl von Ticks wird verwendet, um die Initialisierung der neuen <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust an Genauigkeit von der <xref:System.Double> -Datentyp, diese Konvertierung kann generieren eine <xref:System.OverflowException> für Werte, die in der Nähe, aber im Bereich von <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>. Dies verursacht beispielsweise eine <xref:System.OverflowException> in den folgenden Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#1)]
 [!code-vb[System.TimeSpan.FromMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#1)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.FromMinutes%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromminutes.cpp#4)]
 [!code-csharp[System.TimeSpan.From#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromminutes.cs#4)]
 [!code-vb[System.TimeSpan.From#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromminutes.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromSeconds">
      <MemberSignature Language="C#" Value="public static TimeSpan FromSeconds (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromSeconds(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromSeconds(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Sekunden, auf die nächste Millisekunde gerundet.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die eine angegebene Anzahl von Sekunden darstellt. Die Angabe wird auf die nächste Millisekunde gerundet.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `value` Parameter in Millisekunden, die in Ticks konvertiert wird, konvertiert, und diese Anzahl von Ticks wird verwendet, um die neue initialisieren <xref:System.TimeSpan>. Aus diesem Grund `value` wird nur berücksichtigt werden, auf die nächste Millisekunde gerundet. Beachten Sie, dass aufgrund der Verlust an Genauigkeit von der <xref:System.Double> -Datentyp, kann dadurch generiert eine <xref:System.OverflowException> für Werte, die in der Nähe, aber weiterhin im Bereich von <xref:System.TimeSpan.MinValue> oder <xref:System.TimeSpan.MaxValue>, dies ist die Ursache für ein <xref:System.OverflowException>, z. B. in der folgende Versuch zum Instanziieren einer <xref:System.TimeSpan> Objekt.  
  
 [!code-csharp[System.TimeSpan.FromMinutes#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/cs/System.TimeSpan.FromMinutes.cs#5)]
 [!code-vb[System.TimeSpan.FromMinutes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.FromMinutes/vb/System.TimeSpan.FromMinutes.vb#5)]  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.FromSeconds%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromseconds.cpp#3)]
 [!code-csharp[System.TimeSpan.From#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromseconds.cs#3)]
 [!code-vb[System.TimeSpan.From#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromseconds.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <paramref name="value" /> ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.PositiveInfinity" />.  
  
 - oder -   
  
 <paramref name="value" /> ist <see cref="F:System.Double.NegativeInfinity" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> ist gleich <see cref="F:System.Double.NaN" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="FromTicks">
      <MemberSignature Language="C#" Value="public static TimeSpan FromTicks (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan FromTicks(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.FromTicks(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">Eine Anzahl von Ticks, die eine Zeitspanne darstellt.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, die einen angegebenen Zeitraum darstellt. Die Angabe erfolgt in der Einheit Ticks.</summary>
        <returns>Ein Objekt, das <paramref name="value" /> darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dies ist eine benutzerfreundliche Methode das gleiche Verhalten wie die <xref:System.TimeSpan.%23ctor%28System.Int64%29?displayProperty=nameWithType> Konstruktor. Ein einzelner Tick stellt 100 Nanosekunden oder ein zehnmillionstel einer Sekunde dar. In einer Millisekunde sind 10.000 Ticks.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.FromTicks%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.From#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.From/CPP/fromticks.cpp#1)]
 [!code-csharp[System.TimeSpan.From#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.From/CS/fromticks.cs#1)]
 [!code-vb[System.TimeSpan.From#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.From/VB/fromticks.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt einen Hashcode für diese Instanz zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwei <xref:System.TimeSpan> Objekte weisen denselben Hashcode, obwohl sie unterschiedliche Zeitwerte darstellen.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Hashcodes mehrerer <xref:System.TimeSpan> -Objekten mit den <xref:System.TimeSpan.GetHashCode%2A> Methode.  
  
 [!code-cpp[System.TimeSpan.GetHashCode#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CPP/hashcode.cpp#1)]
 [!code-csharp[System.TimeSpan.GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/CS/hashcode.cs#1)]
 [!code-vb[System.TimeSpan.GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.GetHashCode/VB/hashcode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hours">
      <MemberSignature Language="C#" Value="public int Hours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Hours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Hours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Stundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Stunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -23 bis 23.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Der Wert, der die <xref:System.TimeSpan.Hours%2A> Eigenschaft ist die Komponente für Stunden, *"hh"*.  
  
 Die <xref:System.TimeSpan.Hours%2A> Eigenschaft gesamte Stunden darstellt, während die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Stunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Hours%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MaxValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MaxValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MaxValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den maximalen <see cref="T:System.TimeSpan" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieses Felds entspricht <xref:System.Int64.MaxValue?displayProperty=nameWithType> Ticks. Die Zeichenfolgendarstellung dieser Wert ist positiv 10675199.02:48:05.4775807 oder etwas mehr als 10,675,199 Tage.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.MaxValue> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Milliseconds">
      <MemberSignature Language="C#" Value="public int Milliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Milliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Milliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Millisekundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Millisekunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -999 bis 999.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Der Wert, der die <xref:System.TimeSpan.Milliseconds%2A> Eigenschaft ist die Komponente für Sekundenbruchteile, *ff*.  
  
 Die <xref:System.TimeSpan.Milliseconds%2A> -Eigenschaft stellt ganze Millisekunden dar, während die <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Milliseconds%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Minutes">
      <MemberSignature Language="C#" Value="public int Minutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Minutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Minutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Minutenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Minuten der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -59 bis 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Der Wert, der die <xref:System.TimeSpan.Minutes%2A> Eigenschaft ist für die Minutenkomponente *mm*.  
  
 Die <xref:System.TimeSpan.Minutes%2A> -Eigenschaft stellt ganze Minuten dar, während die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Minuten.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Minutes%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan MinValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan MinValue" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.MinValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den minimalen <see cref="T:System.TimeSpan" />-Wert dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieses Felds entspricht <xref:System.Int64.MinValue?displayProperty=nameWithType> Ticks. Die Zeichenfolgendarstellung dieser Wert ist negativ 10675199.02:48:05.4775808 oder etwas mehr als negative 10,675,199 Tage.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.MinValue> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public TimeSpan Multiply (double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Multiply(float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Multiply(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public TimeSpan Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Negate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert der negierte Wert dieser Instanz ist.</summary>
        <returns>Ein neues Objekt mit demselben numerischen Wert wie diese Instanz, jedoch mit umgekehrtem Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel wendet die <xref:System.TimeSpan.Negate%2A> Methode, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der negierte Wert dieser Instanz kann nicht dargestellt werden, indem eine <see cref="T:System.TimeSpan" />, also der Wert dieser Instanz ist <see cref="F:System.TimeSpan.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Addition(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Addition(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste hinzuzufügende Zeitintervall.</param>
        <param name="t2">Das zweite hinzuzufügende Zeitintervall.</param>
        <summary>Addiert zwei angegebene <see cref="T:System.TimeSpan" />-Instanzen.</summary>
        <returns>Ein Objekt, dessen Wert die Summe der Werte von <paramref name="t1" /> und <paramref name="t2" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.op_Addition%2A> Methode definiert den Additionsoperator für <xref:System.TimeSpan> Werte. Dadurch werden dem folgenden Code:  
  
 [!code-csharp[System.TimeSpan.Operators#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/operators1.cs#1)]
 [!code-vb[System.TimeSpan.Operators#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/operators1.vb#1)]  
  
 Sprachen, die keine benutzerdefinierte Operatoren unterstützen können Aufrufen der <xref:System.TimeSpan.Add%2A> Methode stattdessen.  
  
 Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Add%28System.TimeSpan%29?displayProperty=nameWithType>]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der resultierende <see cref="T:System.TimeSpan" />-Wert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static TimeSpan operator / (TimeSpan timeSpan, double divisor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Division(valuetype System.TimeSpan timeSpan, float64 divisor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="divisor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="divisor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static double operator / (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Division(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Division(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">To be added.</param>
        <param name="t2">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Equality(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob zwei <see cref="T:System.TimeSpan" />-Instanzen gleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> gleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_Equality%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThan(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> größer als eine andere angegebene <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> größer als der Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_GreaterThan%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &gt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> größer oder gleich einer anderen angegebenen <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> größer oder gleich dem Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_GreaterThanOrEqual%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Inequality(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob zwei <see cref="T:System.TimeSpan" />-Instanzen ungleich sind.</summary>
        <returns>
          <see langword="true" />, wenn die Werte von <paramref name="t1" /> und <paramref name="t2" /> ungleich sind, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_Inequality%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool operator &lt; (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThan(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThan(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> kleiner als eine andere angegebene <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> kleiner als der Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_LessThan%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_LessThanOrEqual(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Das erste zu vergleichende Zeitintervall.</param>
        <param name="t2">Das zweite zu vergleichende Zeitintervall.</param>
        <summary>Gibt an, ob eine angegebene <see cref="T:System.TimeSpan" /> kleiner oder gleich einer anderen angegebenen <see cref="T:System.TimeSpan" /> ist.</summary>
        <returns>
          <see langword="true" />, wenn der Wert von <paramref name="t1" /> kleiner oder gleich dem Wert von <paramref name="t2" /> ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Compare%28System.TimeSpan%2CSystem.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel werden mehrere <xref:System.TimeSpan> Objekte auf einen Verweis <xref:System.TimeSpan> mithilfe der <xref:System.TimeSpan.op_LessThanOrEqual%2A> Operator.  
  
 [!code-cpp[System.TimeSpan.RelationalOps#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CPP/relationalops.cpp#1)]
 [!code-csharp[System.TimeSpan.RelationalOps#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/CS/relationalops.cs#1)]
 [!code-vb[System.TimeSpan.RelationalOps#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.RelationalOps/VB/relationalops.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (double factor, TimeSpan timeSpan);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(float64 factor, valuetype System.TimeSpan timeSpan) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.Double,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Double" />
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <param name="timeSpan">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static TimeSpan operator * (TimeSpan timeSpan, double factor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Multiply(valuetype System.TimeSpan timeSpan, float64 factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Multiply(System.TimeSpan,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeSpan" Type="System.TimeSpan" />
        <Parameter Name="factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeSpan">To be added.</param>
        <param name="factor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t1, TimeSpan t2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_Subtraction(valuetype System.TimeSpan t1, valuetype System.TimeSpan t2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_Subtraction(System.TimeSpan,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t1" Type="System.TimeSpan" />
        <Parameter Name="t2" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t1">Der Minuend.</param>
        <param name="t2">Der Subtrahend.</param>
        <summary>Subtrahiert eine angegebene <see cref="T:System.TimeSpan" /> von einer anderen angegebenen <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Objekt, dessen Wert das Ergebnis des Werts von <paramref name="t1" /> minus dem Wert von <paramref name="t2" /> ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Subtract%28System.TimeSpan%29?displayProperty=nameWithType>  
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan> Subtraktionsoperator die Gesamtlänge der wöchentlichen Arbeitstag zu berechnen. Darüber hinaus verwendet das <xref:System.TimeSpan> Addition-Operator, um die Gesamtzeit der Ausführung der täglichen Seitenumbrüche vor der Verwendung bei einer Subtraktion die tatsächliche Summe täglich Arbeitszeit berechnet zu berechnen.  
  
 [!code-csharp[System.TimeSpan.Operators#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.operators/cs/Subtraction1.cs#2)]
 [!code-vb[System.TimeSpan.Operators#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.operators/vb/Subtraction1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Rückgabewert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static TimeSpan operator - (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryNegation(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryNegation(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Das Zeitintervall, das negiert werden soll.</param>
        <summary>Gibt eine <see cref="T:System.TimeSpan" /> zurück, deren Wert der negierte Wert der angegebenen Instanz ist.</summary>
        <returns>Ein Objekt mit demselben numerischen Wert wie diese Instanz, jedoch mit umgekehrtem Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[Die entsprechende Methode für diesen Operator ist.<xref:System.TimeSpan.Negate?displayProperty=nameWithType>  
  
## Examples  
 Das folgende Beispiel wendet die <xref:System.TimeSpan.op_UnaryNegation%2A> Operator, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der negierte Wert dieser Instanz kann nicht dargestellt werden, indem eine <see cref="T:System.TimeSpan" />, also der Wert dieser Instanz ist <see cref="F:System.TimeSpan.MinValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_UnaryPlus">
      <MemberSignature Language="C#" Value="public static TimeSpan operator + (TimeSpan t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.TimeSpan op_UnaryPlus(valuetype System.TimeSpan t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.op_UnaryPlus(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="t">Das Zeitintervall, das zurückgegeben werden soll.</param>
        <summary>Gibt die angegebene Instanz von <see cref="T:System.TimeSpan" /> zurück.</summary>
        <returns>Das von <paramref name="t" /> angegebene Zeitintervall.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Beispiel wendet die <xref:System.TimeSpan.op_UnaryPlus%2A> Operator, um mehrere <xref:System.TimeSpan> Objekte.  
  
 [!code-cpp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CPP/dura_nega_una.cpp#1)]
 [!code-csharp[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/CS/dura_nega_una.cs#1)]
 [!code-vb[System.TimeSpan.Dura_Nega_Unary#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Dura_Nega_Unary/VB/dura_nega_una.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Zeitintervall, das <paramref name="s" /> entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `s` Parameter enthält eine Spezifikation Zeitintervall, in der Form:  
  
 [*ws*] [-] { *d* &#124; [*d*.] *"hh"*:*mm*[:*ss*[.* FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen in geschweiften Klammern ({und}) und durch senkrechte Striche (&#124;) getrennt ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung|  
|-------------|-----------------|  
|*ws*|Optionaler Leerraum.|  
|-|Einen optionalen Minuszeichen (-), womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 bis 10675199.|  
|.|Eine kulturabhängige-Symbol, das Tage von Stunden trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|*.*|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*FF*|Optionale Bruchteilen von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `s` geben müssen zusammen ein Zeitintervall, das größer als oder gleich <xref:System.TimeSpan?displayProperty=nameWithType> und kleiner oder gleich <xref:System.TimeSpan?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `s` mithilfe der einzelnen der kulturspezifische Formate für die aktuelle Kultur.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Parse%2A> Methode, um jedes Element in ein Zeichenfolgenarray, das Konvertieren einer <xref:System.TimeSpan> Wert. Es ändert die aktuelle Systemkultur, Kroatisch - Kroatien ("hr-HR") und Englisch - USA ("En-US") zu veranschaulichen, wie die aktuelle Systemkultur der Analysevorgang auswirkt.  
  
 [!code-csharp[System.TimeSpan.Parse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse1.cs#1)]
 [!code-vb[System.TimeSpan.Parse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="s" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="s" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eine der Tages-, Stunden-, Minuten- oder Sekundenkomponenten liegt außerhalb des gültigen Bereichs.</exception>
        <block subset="none" type="usage">
          <para>Wenn eine Zeitkomponente Intervall, in der Zeichenfolge, die analysiert werden mehr als sieben Ziffern enthält, in Analysevorgängen der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen möglicherweise Verhalten sich anders als in Analysevorgängen der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In einigen Fällen Analysevorgängen, die in erfolgreich die [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen möglicherweise fehl, und löst eine <see cref="T:System.OverflowException" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In anderen Fällen Analysevorgängen, die Auslösen einer <see cref="T:System.FormatException" /> in der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen möglicherweise fehl, und löst ein <see cref="T:System.OverflowException" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Das folgende Beispiel veranschaulicht beide Szenarien.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static TimeSpan Parse (string input, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan Parse(string input, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Parse(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `input` Parameter enthält eine Spezifikation Zeitintervall, in der Form:  
  
 [*ws*] [-] { *d* &#124; [*d*.] *"hh"*:*mm*[:*ss*[.* FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([und]) sind optional. eine Auswahl aus der Liste der alternativen in geschweiften Klammern ({und}) und durch senkrechte Striche (&#124;) getrennt ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung|  
|-------------|-----------------|  
|*ws*|Optionaler Leerraum.|  
|-|Einen optionalen Minuszeichen (-), womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 bis 10675199.|  
|.|Eine kulturabhängige-Symbol, das Tage von Stunden trennt. Der Standardwert ist ein Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit.|  
|*mm*|Minuten im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen trennt. Der Standardwert ist ein Punkt (".") Zeichen.|  
|*FF*|Optionale Bruchteilen von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `input` geben müssen zusammen ein Zeitintervall, das größer als oder gleich <xref:System.TimeSpan?displayProperty=nameWithType> und kleiner oder gleich <xref:System.TimeSpan?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `input` mithilfe der einzelnen der kulturspezifische Formate für die durch den angegebenen Kultur `formatProvider`.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Globalization.CultureInfo> -Objekte und verwendet jedes Objekt in Aufrufen an die <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> Methode, um die Elemente in einem Zeichenfolgenarray zu analysieren. Im Beispiel wird veranschaulicht, wie die Konventionen einer bestimmten Kultur den Formatierungsvorgang beeinflussen.  
  
 [!code-csharp[System.TimeSpan.Parse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parse2.cs#2)]
 [!code-vb[System.TimeSpan.Parse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eines der Tage, Stunden, Minuten oder sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
        <block subset="none" type="usage">
          <para>Wenn eine Zeitkomponente Intervall, in der Zeichenfolge, die analysiert werden mehr als sieben Ziffern enthält, in Analysevorgängen der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen möglicherweise Verhalten sich anders als in Analysevorgängen der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In einigen Fällen Analysevorgängen, die in erfolgreich die [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen möglicherweise fehl, und löst eine <see cref="T:System.OverflowException" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. In anderen Fällen Analysevorgängen, die Auslösen einer <see cref="T:System.FormatException" /> in der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen möglicherweise fehl, und löst ein <see cref="T:System.OverflowException" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]. Das folgende Beispiel veranschaulicht beide Szenarien.  
  
 [!code-csharp[System.TimeSpan.Parse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parse/cs/parsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.Parse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parse/vb/parsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatzeichenfolge, die das erforderliche Format von definiert <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="format" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss das Format der entsprechen `format` genau, Sie sollten immer Ausnahmebehandlung verwenden beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie nicht mithilfe der Ausnahmenbehandlung lieber, erreichen Sie die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `format` Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren enthält `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren.  
  
 [!code-csharp[System.TimeSpan.ParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.ParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eines der Tage, Stunden, Minuten oder sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, die das erforderliche Format von definiert <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Arrays von Formatierungszeichenfolgen und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formats" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, die in einem der Formate von definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss auf einen der im angegebenen Formate genau entsprechen, `formats`, Sie sollten immer Ausnahmebehandlung verwenden, beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie nicht mithilfe der Ausnahmenbehandlung lieber, erreichen Sie die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `formats` Parameter ist ein Zeichenfolgenarray zurück, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input`muss genau ein Mitglied entsprechen `formats` damit der Analysevorgang erfolgreich ausgeführt werden kann. Der Analysevorgang versucht, mit `input` auf jedes Element in `formats` beginnend mit dem ersten Element im Array.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> Methode, um jedes Element eines Zeichenfolgenarrays zum Konvertieren einer <xref:System.TimeSpan> Wert. Im Beispiel werden die Zeichenfolgen, die über die Formatierungskonventionen der Kultur Französisch - Frankreich ("fr-FR") interpretiert. Die Zeichenfolgen können ein Zeitintervall, in dem Allgemeines kurzes Format oder Allgemeines Langformat darstellen.  
  
 Im Beispiel ändert außerdem die Möglichkeit, in der die Zeitintervallanalysemethoden eine einzelne folgende Ziffer interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Damit diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array.  
  
 [!code-csharp[System.TimeSpan.ParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.ParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eines der Tage, Stunden, Minuten oder sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatzeichenfolge, die das erforderliche Format von definiert <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente definiert, die möglicherweise im <c>input</c>.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="format" />, <paramref name="formatProvider" /> und <paramref name="styles" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%2A> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss das Format der entsprechen `format` genau, Sie sollten immer Ausnahmebehandlung verwenden beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie nicht mithilfe der Ausnahmenbehandlung lieber, erreichen Sie die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `format` Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren enthält `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` als ein negatives Zeitintervall interpretiert wird, nur, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>), oder ob er immer als ein negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literal Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren. Darüber hinaus verwendet der <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Wert, der jede Zeichenfolge als ein negatives Zeitintervall interpretiert werden soll. Die Ausgabe im Beispiel wird veranschaulicht, dass die <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Stil wirkt sich auf den Rückgabewert, wenn sie mit benutzerdefinierten Formatzeichenfolgen verwendet wird.  
  
 [!code-csharp[System.TimeSpan.ParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.ParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" />ist ein ungültiger <see cref="T:System.Globalization.TimeSpanStyles" /> Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eines der Tage, Stunden, Minuten oder sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="ParseExact">
      <MemberSignature Language="C#" Value="public static TimeSpan ParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan ParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, die das erforderliche Format von definieren <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine bitweise Kombination von Enumerationswerten, die die Stilelemente definiert, die in der Eingabe vorhanden sein können.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" />. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>Ein Zeitintervall, das <paramref name="input" /> entspricht, wie von <paramref name="formats" />, <paramref name="formatProvider" /> und <paramref name="styles" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, die in einem der Formate von definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Da `input` muss auf einen der im angegebenen Formate genau entsprechen, `formats`, Sie sollten immer Ausnahmebehandlung verwenden, beim Konvertieren von Zeichenfolge als Eingabe vom Benutzer in einem Zeitintervall. Wenn Sie nicht mithilfe der Ausnahmenbehandlung lieber, erreichen Sie die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode stattdessen.  
  
 Die `formats` Parameter ist ein Zeichenfolgenarray zurück, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input`muss genau ein Mitglied entsprechen `formats` damit der Analysevorgang erfolgreich ausgeführt werden kann. Der Analysevorgang versucht, mit `input` auf jedes Element in `formats` beginnend mit dem ersten Element im Array.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` als ein negatives Zeitintervall interpretiert wird, nur, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>), oder ob er immer als ein negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literal Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> Methode, um jedes Element eines Zeichenfolgenarrays zum Konvertieren einer <xref:System.TimeSpan> Wert. Die Zeichenfolgen können ein Zeitintervall, in dem Allgemeines kurzes Format oder Allgemeines Langformat darstellen.  
  
 Im Beispiel ändert außerdem die Möglichkeit, in der die Zeitintervallanalysemethoden eine einzelne folgende Ziffer interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Damit diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array. Beachten Sie auch aus der Ausgabe, die die <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Flag angegeben, die im Aufruf Methode wird verwendet, nur, wenn eine Zeichenfolge mit dieser Formatbezeichner zu analysieren.  
  
 [!code-csharp[System.TimeSpan.ParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.parseexact/cs/parseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.ParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.parseexact/vb/parseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="styles" />ist ein ungültiger <see cref="T:System.Globalization.TimeSpanStyles" /> Wert.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="input" />weist ein ungültiges Format.</exception>
        <exception cref="T:System.OverflowException">
          <paramref name="input" /> stellt eine Zahl dar, die kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> ist.  
  
 - oder -   
  
 Mindestens eines der Tage, Stunden, Minuten oder sekundenkomponenten in <paramref name="input" /> liegt außerhalb des gültigen Bereichs.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seconds">
      <MemberSignature Language="C#" Value="public int Seconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Seconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Sekundenkomponente des Zeitintervalls ab, das durch die aktuelle <see cref="T:System.TimeSpan" />-Struktur dargestellt wird.</summary>
        <value>Die Komponente für Sekunden der aktuellen <see cref="T:System.TimeSpan" />-Struktur. Der Rückgabewert liegt im Bereich von -59 bis 59.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein <xref:System.TimeSpan> Wert dargestellt werden kann, als [*-*]*d*.* "hh"*:*mm*:*ss*.* FF*, wobei die optionalen Minuszeichen (-) ein negatives Zeitintervall gibt an die *d* Komponente wird in Tagen, *"hh"* Stunden in 24-Stunden-Format, gemessen wird *mm* ist Minuten *ss* Sekunden und *ff* Sekundenbruchteilen ist. Der Wert, der die <xref:System.TimeSpan.Seconds%2A> Eigenschaft ist für die Sekundenkomponente *ss*.  
  
 Die <xref:System.TimeSpan.Seconds%2A> -Eigenschaft stellt ganze Sekunden dar, während die <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft darstellt, ganze Tagen und Bruchteile von Sekunden.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Seconds%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public TimeSpan Subtract (TimeSpan ts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan Subtract(valuetype System.TimeSpan ts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.Subtract(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ts" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="ts">Das Zeitintervall, das subtrahiert werden soll.</param>
        <summary>Gibt ein neues <see cref="T:System.TimeSpan" />-Objekt zurück, dessen Wert die Differenz zwischen dem angegebenen <see cref="T:System.TimeSpan" />-Objekt und dieser Instanz ist.</summary>
        <returns>Ein neues Zeitintervall, dessen Wert das Ergebnis der Subtraktion des Werts von <paramref name="ts" /> vom Wert dieser Instanz ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert muss zwischen <xref:System.TimeSpan?displayProperty=nameWithType> und <xref:System.TimeSpan?displayProperty=nameWithType>ist, andernfalls wird eine Ausnahme ausgelöst.  
  
 Der Rückgabewert ist eine neue <xref:System.TimeSpan>; die ursprüngliche <xref:System.TimeSpan> wird nicht geändert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.Subtract%2A> Methode zur Berechnung der Differenz zwischen einer einzelnen <xref:System.TimeSpan> Wert und den einzelnen die Zeiträume in einem Array. Beachten Sie Folgendes: Da <xref:System.TimeSpan> Formatzeichenfolgen enthalten nicht das Minuszeichen in der Ergebniszeichenfolge, die im Beispiel wird bedingten Logik, um ein negativen Vorzeichen mit negative Zeitintervalle enthalten.  
  
 [!code-csharp[System.TimeSpan.Subtract#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.subtract/cs/subtract1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">Der Rückgabewert ist kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.System#IComparable#CompareTo(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ticks">
      <MemberSignature Language="C#" Value="public long Ticks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Ticks" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.Ticks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft die Anzahl der Ticks ab, die den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur darstellt.</summary>
        <value>Die Anzahl der Ticks in dieser Instanz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die kleinste Zeiteinheit wird der Takt entspricht 100 Nanosekunden oder ein zehnmillionstel einer Sekunde ist. In einer Millisekunde sind 10.000 Ticks. Der Wert, der die <xref:System.TimeSpan.Ticks%2A> Eigenschaft kann negativ oder positiv zur Darstellung eines Zeitintervalls negativ oder positiv sein.  
  
   
  
## Examples  
 Das folgende Beispiel erstellt mehrere <xref:System.TimeSpan> Objekten und zeigt die <xref:System.TimeSpan.Ticks%2A> jeder Eigenschaft.  
  
 [!code-cpp[System.TimeSpan.Properties#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CPP/properties.cpp#1)]
 [!code-csharp[System.TimeSpan.Properties#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Properties/CS/properties.cs#1)]
 [!code-vb[System.TimeSpan.Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Properties/VB/properties.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerDay">
      <MemberSignature Language="C#" Value="public const long TicksPerDay = 864000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerDay = (864000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerDay" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>864000000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Tag dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 864 Milliarden. d. h. 864,000,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerDay> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerHour">
      <MemberSignature Language="C#" Value="public const long TicksPerHour = 36000000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerHour = (36000000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerHour" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>36000000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Stunde dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 36 Milliarden. d. h. 36,000,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerHour> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerMillisecond">
      <MemberSignature Language="C#" Value="public const long TicksPerMillisecond = 10000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMillisecond = (10000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMillisecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Millisekunde dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 10 Tausendstel; d. h. 10.000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerMillisecond> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerMinute">
      <MemberSignature Language="C#" Value="public const long TicksPerMinute = 600000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerMinute = (600000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerMinute" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>600000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Minute dar. Dieses Feld ist konstant.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten ist 600 Millionen. d. h. 600,000,000.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerMinute> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TicksPerSecond">
      <MemberSignature Language="C#" Value="public const long TicksPerSecond = 10000000;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int64 TicksPerSecond = (10000000)" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.TicksPerSecond" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <MemberValue>10000000</MemberValue>
      <Docs>
        <summary>Stellt die Anzahl der Ticks pro Sekunde dar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Wert dieser Konstanten beträgt 10 Millionen; d. h. 10.000.000 liegen.  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.TicksPerSecond> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die zurückgegebene Zeichenfolge ist formatiert der Formatbezeichner "C" und weist das folgende Format:  
  
 [-][*d*.]*hh*:*mm*:*ss*[.*fffffff*]  
  
 Elemente in eckigen Klammern ([und]) kann nicht in der zurückgegebenen Zeichenfolge enthalten sein. Doppelpunkte und Punkte (: und.) sind Literalzeichen. Die nicht-Literal-Elemente sind in der folgenden Tabelle aufgeführt. Beachten Sie, die von die Zeichenfolge zurückgegeben die <xref:System.TimeSpan.ToString> Methode ist nicht kulturabhängig.  
  
|Element|Beschreibung|  
|----------|-----------------|  
|"-"|Ein Minuszeichen (-), das ein negatives Zeitintervall angibt. Ohne Vorzeichen, die für eine positive Zeitspanne enthalten ist.|  
|"*d*"|Die Anzahl der Tage im Zeitintervall. Dieses Element ist nicht angegeben, wenn das angegebene Zeitintervall kleiner als ein Tag ist.|  
|"*" hh "*"|Die Anzahl der Stunden im Zeitintervall, im Bereich von 0 bis 23.|  
|"*mm*"|Die Anzahl von Minuten im Zeitintervall, im Bereich von 0 bis 59.|  
|"*ss*"|Die Anzahl der Sekunden im Zeitintervall, im Bereich von 0 bis 59.|  
|"*Fffffff*"|Bruchteilen von Sekunden im Zeitintervall. Dieses Element wird weggelassen, wenn das angegebene Zeitintervall keine Sekundenbruchteile enthält. Falls vorhanden, werden Sekundenbruchteile immer mit sieben Dezimalstellen ausgedrückt.|  
  
> [!NOTE]
>  Weitere Informationen zum Vergleichen von der Zeichenfolgendarstellung <xref:System.TimeSpan> und Oracle-Datentypen finden Sie in Knowledge Base-Artikel [324577: System.TimeSpan wird keine Übereinstimmung Oracle 9i Intervall Tag, an dem zweiten Datentyp](http://go.microsoft.com/fwlink/?LinkId=161146).  
  
   
  
## Examples  
 Das folgende Beispiel zeigt die Zeichenfolgen zurückgegeben, indem die <xref:System.TimeSpan.ToString%2A> Methode mit einer Anzahl von <xref:System.TimeSpan> Werte. Beachten Sie, dass, obwohl das Beispiel nicht aufgerufen wird die <xref:System.TimeSpan.ToString%2A> Methode direkt, sie wird von aufgerufen der <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Methode, wenn versucht wird, konvertiert ein <xref:System.TimeSpan> Wert in seine Zeichenfolgendarstellung.  
  
 [!code-csharp[System.TimeSpan.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/ToString1.cs#1)]
 [!code-vb[System.TimeSpan.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/ToString1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Unterstützung für die Formatierung <see cref="T:System.TimeSpan" /> Werte wurde hinzugefügt, der [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]. Allerdings die <see cref="M:System.TimeSpan.ToString" /> methodenüberladung kulturunabhängige bleibt. Ihr Verhalten unverändert aus früheren Versionen von .NET Framework. Zum Steuern der Formatierung eine <see cref="T:System.TimeSpan" /> -Wert, rufen Sie die <see cref="M:System.TimeSpan.ToString(System.String)" /> oder <see cref="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" /> überladen.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Eine standardmäßige oder benutzerdefinierte <see cref="T:System.TimeSpan" />-Formatierungszeichenfolge.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts unter Verwendung des angegebenen Formats in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts im durch den <paramref name="format" />-Parameter angegebenen Format.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann ein beliebiger gültiger standardmäßiger oder benutzerdefinierter Formatbezeichner für <xref:System.TimeSpan> Werte. Wenn `format` gleich <xref:System.String?displayProperty=nameWithType> oder `null`, der Rückgabewert des aktuellen <xref:System.TimeSpan> Objekt mit dem allgemeinen Formatbezeichner ("c") formatiert ist. Wenn `format` ist ein anderer Wert, löst die Methode eine <xref:System.FormatException>.  
  
 Wenn `format` ist eine Standardformatzeichenfolge wird das Format der zurückgegebenen Zeichenfolge durch die Formatierungskonventionen der aktuellen Kultur definiert.  
  
> [!IMPORTANT]
>  Benutzerdefinierte Formatzeichenfolgen für <xref:System.TimeSpan> Werte enthalten keine Trennzeichen für Datum oder Uhrzeit. Wenn Sie diese Elemente in der Formatzeichenfolge einschließen möchten, müssen Sie sie als Zeichenliterale behandeln. Siehe das Beispiel zur Veranschaulichung und finden Sie unter der [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md) Thema enthält weitere Informationen.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben:  
  
-   Weitere Informationen zu Formatzeichenfolgen für <xref:System.TimeSpan> -Werte finden Sie in [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Weitere Informationen zur Unterstützung von Formatierung in .NET Framework finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
   
  
## Examples  
 Im folgenden Beispiel wird die Standard- und benutzerdefinierte <xref:System.TimeSpan> -Formatzeichenfolgen für die Zeichenfolgendarstellung für jedes Element in einem Array von anzuzeigenden <xref:System.TimeSpan> Werte  
  
 [!code-csharp[System.TimeSpan.ToString#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring3.cs#3)]
 [!code-vb[System.TimeSpan.ToString#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die <paramref name="format" /> Parameter wird nicht erkannt oder wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string format, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString(string format, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.ToString(System.String,System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Eine standardmäßige oder benutzerdefinierte <see cref="T:System.TimeSpan" />-Formatierungszeichenfolge.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <summary>Konvertiert den Wert des aktuellen <see cref="T:System.TimeSpan" />-Objekts unter Verwendung des angegebenen Formats und der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende Zeichenfolgendarstellung.</summary>
        <returns>Die Zeichenfolgendarstellung des aktuellen <see cref="T:System.TimeSpan" />-Werts, wie von <paramref name="format" /> und <paramref name="formatProvider" /> angegeben.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `format` Parameter kann ein beliebiger gültiger standardmäßiger oder benutzerdefinierter Formatbezeichner für <xref:System.TimeSpan> Werte. Wenn `format` gleich <xref:System.String?displayProperty=nameWithType> oder `null`, der Rückgabewert des aktuellen <xref:System.TimeSpan> Objekt mit dem allgemeinen Formatbezeichner ("c") formatiert ist. Wenn Format beliebiger anderer Wert ist, löst die Methode eine <xref:System.FormatException>.  
  
> [!IMPORTANT]
>  Benutzerdefinierte Formatzeichenfolgen für <xref:System.TimeSpan> Werte enthalten keine Trennzeichen für Datum oder Uhrzeit. Wenn Sie diese Elemente in der Formatzeichenfolge einschließen möchten, müssen Sie sie als Zeichenliterale behandeln. Siehe das Beispiel zur Veranschaulichung und finden Sie unter der [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md) Thema enthält weitere Informationen.  
  
 .NET Framework bietet eine umfangreiche formatierungsunterstützung, dies wird in den folgenden Themen zur Formatierung ausführlicher beschrieben:  
  
-   Weitere Informationen zu Formatzeichenfolgen für <xref:System.TimeSpan> -Werte finden Sie in [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
-   Weitere Informationen zur Unterstützung von Formatierung in .NET Framework finden Sie unter [Formatierung von Typen](~/docs/standard/base-types/formatting-types.md).  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> von zurückgegebene Objekt der <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet. Wenn `format` ist eine benutzerdefinierte Formatzeichenfolge, die `formatProvider` Parameter wird ignoriert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ToString%28System.String%2CSystem.IFormatProvider%29> Methode, um zwei Zeitintervalle zu formatieren. Im Beispiel wird die Methode zweimal für jede Formatzeichenfolge zuerst an, um es mit den Konventionen der Kultur En-US anzeigen und dann mit den Konventionen der Kultur fr-FR angezeigt.  
  
 [!code-csharp[System.TimeSpan.ToString#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.ToString/cs/tostring4.cs#4)]
 [!code-vb[System.TimeSpan.ToString#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.ToString/vb/tostring4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">Die <paramref name="format" /> Parameter wird nicht erkannt oder wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="TotalDays">
      <MemberSignature Language="C#" Value="public double TotalDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalDays" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalDays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Tagen und Bruchteilen von Tagen ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Tage.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks und Tagen liegen. Diese Zahl kann ganze Tagen und Bruchteile von Tagen sind.  
  
 Die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft stellt ganze Tagen und Bruchteile von Tagen, während die <xref:System.TimeSpan.Days%2A> Eigenschaft stellt die gesamte Tage.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> -Objekt und zeigt den Wert des seine <xref:System.TimeSpan.TotalDays%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Stunden, Minuten, Sekunden und Millisekunden), die den Bruchteil des Werts der bildet die <xref:System.TimeSpan.TotalDays%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalDays#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totaldays/cs/totaldays.cs#1)]
 [!code-vb[System.TimeSpan.TotalDays#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totaldays/vb/totaldays.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalHours">
      <MemberSignature Language="C#" Value="public double TotalHours { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalHours" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalHours" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Stunden und Bruchteilen von Stunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Stunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Stunden. Diese Zahl kann ganze Tagen und Bruchteile von Stunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft stellt ganze Tagen und Bruchteile von Stunden, während die <xref:System.TimeSpan.Hours%2A> Eigenschaft stellt Stunden dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> -Objekt und zeigt den Wert seiner <xref:System.TimeSpan.TotalHours%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Stunden, Minuten, Sekunden und Millisekunden), die den Bruchteil des Werts der bildet die <xref:System.TimeSpan.TotalHours%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalHours#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalhours/cs/totalhours.cs#1)]
 [!code-vb[System.TimeSpan.TotalHours#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalhours/vb/totalhours.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMilliseconds">
      <MemberSignature Language="C#" Value="public double TotalMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMilliseconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Millisekunden und Bruchteilen von Millisekunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Millisekunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Millisekunden. Diese Zahl kann ganze Tagen und Bruchteile von Millisekunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft stellt ganze Tagen und Bruchteile von Millisekunden, während die <xref:System.TimeSpan.Milliseconds%2A> Eigenschaft darstellt, ganze Millisekunden.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> -Objekt und zeigt den Wert des seine <xref:System.TimeSpan.TotalMilliseconds%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/cs/totalmilliseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalMilliseconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalmilliseconds/vb/totalmilliseconds.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalMinutes">
      <MemberSignature Language="C#" Value="public double TotalMinutes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalMinutes" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalMinutes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Minuten und Bruchteilen von Minuten ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Minuten.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Minuten. Diese Zahl kann ganze Tagen und Bruchteile von Minuten enthalten.  
  
 Die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft stellt ganze Tagen und Bruchteile von Minuten, während die <xref:System.TimeSpan.Minutes%2A> Eigenschaft stellt ganze Minuten dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> -Objekt und zeigt den Wert des seine <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft. Es zeigt auch den Wert der einzelnen Komponenten (Sekunden, Millisekunden), die den Bruchteil des Werts der bildet die <xref:System.TimeSpan.TotalMinutes%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalMinutes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalminutes/cs/totalminutes.cs#1)]
 [!code-vb[System.TimeSpan.TotalMinutes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalminutes/vb/totalminutes.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalSeconds">
      <MemberSignature Language="C#" Value="public double TotalSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TotalSeconds" />
      <MemberSignature Language="DocId" Value="P:System.TimeSpan.TotalSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft den Wert der aktuellen <see cref="T:System.TimeSpan" />-Struktur in ganzen Sekunden und Bruchteilen von Sekunden ab.</summary>
        <value>Die Gesamtzahl der von dieser Instanz dargestellten Sekunden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Eigenschaft konvertiert den Wert dieser Instanz von Ticks, in Sekunden. Diese Zahl kann ganze Tagen und Bruchteile von Sekunden enthalten.  
  
 Die <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft stellt ganze Tagen und Bruchteile von Sekunden, während die <xref:System.TimeSpan.Seconds%2A> Eigenschaft stellt ganze Sekunden dar.  
  
   
  
## Examples  
 Das folgende Beispiel instanziiert einen <xref:System.TimeSpan> -Objekt und zeigt den Wert des seine <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft. Es zeigt auch den Wert von deren Millisekundenkomponente, bildet den Bruchteil der Wert von dessen <xref:System.TimeSpan.TotalSeconds%2A> Eigenschaft.  
  
 [!code-csharp[System.TimeSpan.TotalSeconds#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.totalseconds/cs/totalseconds.cs#1)]
 [!code-vb[System.TimeSpan.TotalSeconds#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.totalseconds/vb/totalseconds.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string s, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string s, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="s">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>s</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich durchgeführt wurde.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="s" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />. Dieser Vorgang gibt <see langword="false" /> zurück, wenn der <paramref name="s" />-Parameter gleich <see langword="null" /> oder <see cref="F:System.String.Empty" /> ist, ein ungültiges Format aufweist, ein Zeitintervall kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> darstellt oder mindestens eine der Komponenten für Tage, Stunden, Minuten oder Sekunden außerhalb des zulässigen Bereichs liegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParse%2A> Methode entspricht der <xref:System.TimeSpan.Parse%28System.String%29?displayProperty=nameWithType> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `s` Parameter enthält eine Spezifikation Zeitintervall, in der Form:  
  
 [*ws*] [-] { *d* &#124; *d*.* "hh"*:*mm*[:*ss*[.* FF*]] &#124; *"hh"*:*mm*[:*ss*[.* FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen in geschweiften Klammern ({und}) und durch senkrechte Striche (&#124;) getrennt ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung|  
|-------------|-----------------|  
|*ws*|Optionaler Leerraum.|  
|-|Einen optionalen Minuszeichen (-), womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 bis 10675199.|  
|.|Eine kulturabhängige-Symbol, das Tage von Stunden trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*FF*|Optionale Bruchteilen von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `s` geben müssen zusammen ein Zeitintervall, das größer als oder gleich <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.Parse%28System.String%29> Methode versucht, Analysieren `s` mithilfe der einzelnen der kulturspezifische Formate für die aktuelle Kultur.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParse%2A> Methode zum Erstellen der <xref:System.TimeSpan> Objekte aus gültigen <xref:System.TimeSpan> Zeichenfolgen und anzugeben, wenn der Analysevorgang fehlgeschlagen ist, da die Span Zeitzeichenfolge ungültig ist.  
  
 [!code-csharp[System.TimeSpan.TryParse#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/TryParse1.cs#1)]
 [!code-vb[System.TimeSpan.TryParse#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/TryParse1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In einigen Fällen, wenn eine Zeitkomponente Intervall, in der Zeichenfolge analysiert werden soll, mehr als sieben Ziffern enthält, analysieren Vorgänge, die in erfolgreich die [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und früheren Versionen möglicherweise fehl, und löst eine <see cref="T:System.OverflowException" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], im folgenden Beispiel wird dieses Szenario veranschaulicht.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string input, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string input, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParse(System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>input</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />. Dieser Vorgang gibt <see langword="false" /> zurück, wenn der <paramref name="input" />-Parameter gleich <see langword="null" /> oder <see cref="F:System.String.Empty" /> ist, ein ungültiges Format aufweist, ein Zeitintervall kleiner als <see cref="F:System.TimeSpan.MinValue" /> oder größer als <see cref="F:System.TimeSpan.MaxValue" /> darstellt oder mindestens eine der Komponenten für Tage, Stunden, Minuten oder Sekunden außerhalb des zulässigen Bereichs liegt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode entspricht der <xref:System.TimeSpan.Parse%28System.String%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `input` Parameter enthält eine Spezifikation Zeitintervall, in der Form:  
  
 [*ws*] [-] { *d* &#124; *d*.* "hh"*:*mm*[:*ss*[.* FF*]] &#124; *"hh"*:*mm*[:*ss*[.* FF*]]} [*ws*]  
  
 Elemente in eckigen Klammern ([ und ]) sind optional. Eine Auswahl aus der Liste der alternativen in geschweiften Klammern ({und}) und durch senkrechte Striche (&#124;) getrennt ist erforderlich. In der folgenden Tabelle wird jedes Element beschrieben.  
  
|Element|Beschreibung|  
|-------------|-----------------|  
|*ws*|Optionaler Leerraum.|  
|-|Einen optionalen Minuszeichen (-), womit eine Negative <xref:System.TimeSpan>.|  
|*d*|Tage, im Bereich von 0 bis 10675199.|  
|.|Eine kulturabhängige-Symbol, das Tage von Stunden trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*hh*|Stunden, zwischen 0 und 23.|  
|:|Das Trennzeichen für kulturabhängige Zeit. Das unveränderliche Format verwendet, einen Doppelpunkt (":") Zeichen.|  
|*mm*|Minuten im Bereich von 0 bis 59.|  
|*ss*|Sekunden, optional im Bereich von 0 bis 59.|  
|.|Eine kulturabhängige-Symbol, das Sekunden von Sekundenbruchteilen trennt. Unveränderlichen Format verwendet einen Punkt (".") Zeichen.|  
|*FF*|Optionale Bruchteilen von Sekunden, bestehend aus 1 bis 7 Dezimalstellen.|  
  
 Die Komponenten der `input` geben müssen zusammen ein Zeitintervall, das größer als oder gleich <xref:System.TimeSpan.MinValue?displayProperty=nameWithType> und kleiner oder gleich <xref:System.TimeSpan.MaxValue?displayProperty=nameWithType>.  
  
 Die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode versucht, Analysieren `input` mithilfe der einzelnen der kulturspezifische Formate für die durch den angegebenen Kultur `formatProvider`.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Das folgende Beispiel definiert ein Array von <xref:System.Globalization.CultureInfo> -Objekte und verwendet jedes Objekt in Aufrufen an die <xref:System.TimeSpan.TryParse%28System.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode, um die Elemente in einem Zeichenfolgenarray zu analysieren. Im Beispiel wird veranschaulicht, wie die Konventionen einer bestimmten Kultur den Formatierungsvorgang beeinflussen.  
  
 [!code-csharp[System.TimeSpan.TryParse#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparse2.cs#2)]
 [!code-vb[System.TimeSpan.TryParse#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparse2.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>In einigen Fällen, wenn eine Zeitkomponente Intervall, in der Zeichenfolge analysiert werden soll, mehr als sieben Ziffern enthält, analysieren Vorgänge, die erfolgreich sind und <see langword="true" /> in der [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] und frühere Versionen möglicherweise fehl, und Rückgabewerte <see langword="false" /> in der [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], Im folgende Beispiel wird dieses Szenario veranschaulicht.  
  
 [!code-csharp[System.TimeSpan.TryParse#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.TryParse/cs/tryparsefailure1.cs#3)]
 [!code-vb[System.TimeSpan.TryParse#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.TryParse/vb/tryparsefailure1.vb#3)]</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatzeichenfolge, die das erforderliche Format von definiert <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>input</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats und der kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `format` Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren enthält `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn `format` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample1.cs#1)]
 [!code-vb[System.TimeSpan.TryParseExact#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, die die zulässigen Formate von definieren <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>input</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate und kulturspezifischen Formatierungsinformationen in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format eines gemäß Formatzeichenfolgen definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `formats` Parameter ist ein Zeichenfolgenarray zurück, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input`muss genau ein Mitglied entsprechen `formats` damit der Analysevorgang erfolgreich ausgeführt werden kann. Der Analysevorgang versucht, mit `input` auf jedes Element in `formats` beginnend mit dem ersten Element im Array.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.TryParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.TimeSpan%40%29> Methode, um jedes Element eines Zeichenfolgenarrays zum Konvertieren einer <xref:System.TimeSpan> Wert. Im Beispiel werden die Zeichenfolgen unter Verwendung der Formatierungskonventionen der der Kultur Französisch - Frankreich ("fr-FR") interpretiert. Die Zeichenfolgen können ein Zeitintervall, in dem Allgemeines kurzes Format oder Allgemeines Langformat darstellen.  
  
 Im Beispiel ändert außerdem die Möglichkeit, in der die Zeitintervallanalysemethoden eine einzelne folgende Ziffer interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Damit diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample3.cs#3)]
 [!code-vb[System.TimeSpan.TryParseExact#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample3.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string format, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string format, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String,System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="format">Eine standardmäßige oder benutzerdefinierte Formatzeichenfolge, die das erforderliche Format von definiert <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine oder mehrere Enumerationswerte, die angeben, den Stil der <c>input</c>.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>input</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung des angegebenen Formats, der kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss dem angegebenen Format genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format von definiert sein muss die `format` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `format` Parameter ist eine Zeichenfolge, die entweder einen einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren enthält `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md).  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn `format` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert. Bestimmt, ob `input` als ein negatives Zeitintervall interpretiert wird, nur, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>), oder ob er immer als ein negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literal Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%2CSystem.IFormatProvider%29> Methode, um mehrere zeichenfolgenentsprechungen von Zeitintervallen mit verschiedenen Formatzeichenfolgen und Kulturen zu analysieren. Darüber hinaus verwendet der <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Wert, der jede Zeichenfolge als ein negatives Zeitintervall interpretiert werden soll. Die Ausgabe im Beispiel wird veranschaulicht, dass die <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Stil wirkt sich auf den Rückgabewert, wenn sie mit benutzerdefinierten Formatzeichenfolgen verwendet wird.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample2.cs#2)]
 [!code-vb[System.TimeSpan.TryParseExact#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample2.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParseExact">
      <MemberSignature Language="C#" Value="public static bool TryParseExact (string input, string[] formats, IFormatProvider formatProvider, System.Globalization.TimeSpanStyles styles, out TimeSpan result);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParseExact(string input, string[] formats, class System.IFormatProvider formatProvider, valuetype System.Globalization.TimeSpanStyles styles, [out] valuetype System.TimeSpan&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeSpan.TryParseExact(System.String,System.String[],System.IFormatProvider,System.Globalization.TimeSpanStyles,System.TimeSpan@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="formats" Type="System.String[]" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
        <Parameter Name="styles" Type="System.Globalization.TimeSpanStyles" />
        <Parameter Name="result" Type="System.TimeSpan&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">Eine Zeichenfolge, die das zu konvertierende Zeitintervall angibt.</param>
        <param name="formats">Ein Array standardmäßiger oder benutzerdefinierter Formatierungszeichenfolgen, die die zulässigen Formate von definieren <c>input</c>.</param>
        <param name="formatProvider">Ein Objekt, das kulturspezifische Formatierungsinformationen bereitstellt.</param>
        <param name="styles">Eine oder mehrere Enumerationswerte, die angeben, den Stil der <c>input</c>.</param>
        <param name="result">Enthält nach Rückkehr dieser Methode ein Objekt, das vom angegebenen Zeitintervalls darstellt <c>input</c>, oder <see cref="F:System.TimeSpan.Zero" /> bei einem Konvertierungsfehler. Dieser Parameter wird nicht initialisiert übergeben.</param>
        <summary>Konvertiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls unter Verwendung der angegebenen Formate, kulturspezifischen Formatierungsinformationen und Stile in die entsprechende <see cref="T:System.TimeSpan" /> und gibt einen Wert zurück, der angibt, ob die Konvertierung erfolgreich abgeschlossen wurde. Das Format der Zeichenfolgendarstellung muss einem der angegebenen Formate genau entsprechen.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="input" /> erfolgreich konvertiert wurde, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> -Methode analysiert die angegebene Zeichenfolgendarstellung eines Zeitintervalls, der das Format eines gemäß Formatzeichenfolgen definiert sein muss die `formats` Parameter, mit dem Unterschied, führende und nachfolgende Leerzeichen ignoriert werden. Diese Methode ähnelt der <xref:System.TimeSpan.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%29> -Methode, mit dem Unterschied, dass die It keine Ausnahme auslöst, wenn die Konvertierung fehlschlägt.  
  
 Die `formats` Parameter ist ein Zeichenfolgenarray zurück, dessen Elemente bestehen aus einer einzelnen Standardformatbezeichner oder eine oder mehrere benutzerdefinierte Formatbezeichner, die das erforderliche Format von definieren `input`. Weitere Informationen zu gültigen Formatzeichenfolgen finden Sie unter [TimeSpan-Standardformatzeichenfolgen](~/docs/standard/base-types/standard-timespan-format-strings.md) und [benutzerdefinierte TimeSpan-Formatzeichenfolgen](~/docs/standard/base-types/custom-timespan-format-strings.md). `input`muss genau ein Mitglied entsprechen `formats` damit der Analysevorgang erfolgreich ausgeführt werden kann. Der Analysevorgang versucht, mit `input` auf jedes Element in `formats` beginnend mit dem ersten Element im Array.  
  
> [!IMPORTANT]
>  Die <xref:System.TimeSpan.ParseExact%2A> Methode verwendet die Konventionen der Kultur angegeben werden, indem Sie die `formatProvider` Parameter nur, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist ein Standard <xref:System.TimeSpan> Formatzeichenfolge, deren Wert "g" oder "G ist". Verwenden die Formatierungskonventionen der invarianten Kultur, "c", "t" und "T"-Standardformatzeichenfolgen. Benutzerdefinierte Formatzeichenfolgen definieren Sie das genaue Format der eingegebenen Zeichenfolge und Literalzeichen verwenden, um die Komponenten eines Zeitintervalls zu trennen.  
  
 Die `formatProvider` Parameter ist ein <xref:System.IFormatProvider> Implementierung, die kulturspezifische Informationen zum Format der zurückgegebenen Zeichenfolge bereitstellt, wenn die Formatzeichenfolge zum Analysieren verwendet `input` ist eine Standardformatzeichenfolge. Die `formatProvider` Parameter kann eine der folgenden sein:  
  
-   Ein <xref:System.Globalization.CultureInfo> -Objekt, das die Kultur darstellt, deren Formatierungskonventionen in der zurückgegebenen Zeichenfolge berücksichtigt werden. Die <xref:System.Globalization.DateTimeFormatInfo> zurückgegebenes Objekt die <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> Eigenschaft definiert die Formatierung der zurückgegebenen Zeichenfolge.  
  
-   Ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das die Formatierung der zurückgegebenen Zeichenfolge definiert.  
  
-   Ein benutzerdefiniertes Objekt, das implementiert die <xref:System.IFormatProvider> Schnittstelle. Die <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> Methode gibt ein <xref:System.Globalization.DateTimeFormatInfo> Objekt, das Formatierungsinformationen bereitstellt.  
  
 Wenn `formatProvider` ist `null`, <xref:System.Globalization.DateTimeFormatInfo> -Objekt, das der aktuellen Kultur zugeordnet ist, wird verwendet.  
  
 Die `styles` Parameter wirkt sich auf die Interpretation von Zeichenfolgen, die mit benutzerdefinierten Formatzeichenfolgen analysiert werden. Bestimmt, ob `input` als ein negatives Zeitintervall interpretiert wird, nur, wenn ein negativen Vorzeichen vorhanden ist (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>), oder ob er immer als ein negatives Zeitintervall interpretiert wird (<xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType>). Wenn <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> nicht verwendet wird, `format` muss ein literal Minuszeichen enthalten (z. B. "\\-"), damit ein negatives Zeitintervall erfolgreich analysiert.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die <xref:System.TimeSpan.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.TimeSpanStyles%2CSystem.TimeSpan%40%29> Methode, um jedes Element eines Zeichenfolgenarrays zum Konvertieren einer <xref:System.TimeSpan> Wert. Die Zeichenfolgen können ein Zeitintervall, in dem Allgemeines kurzes Format oder Allgemeines Langformat darstellen.  
  
 Im Beispiel ändert außerdem die Möglichkeit, in der die Zeitintervallanalysemethoden eine einzelne folgende Ziffer interpretieren. Normalerweise wird eine einzelne folgende Ziffer als die Anzahl der Tage in einem Zeitintervall interpretiert. Stattdessen die `%h` benutzerdefinierte Formatzeichenfolge wird verwendet, um eine einzelne folgende Ziffer als die Anzahl von Stunden interpretiert werden soll. Damit diese Änderung wirksam wird, beachten Sie, dass die `%h` benutzerdefinierte Formatzeichenfolge muss vor die anderen Formatzeichenfolgen in stehen die `formats` Array. Beachten Sie auch aus der Ausgabe, die die <xref:System.Globalization.TimeSpanStyles?displayProperty=nameWithType> Flag angegeben, die im Aufruf Methode wird verwendet, nur, wenn eine Zeichenfolge mit dieser Formatbezeichner zu analysieren.  
  
 [!code-csharp[System.TimeSpan.TryParseExact#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timespan.tryparseexact/cs/tryparseexactexample4.cs#4)]
 [!code-vb[System.TimeSpan.TryParseExact#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timespan.tryparseexact/vb/tryparseexactexample4.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan Zero;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan Zero" />
      <MemberSignature Language="DocId" Value="F:System.TimeSpan.Zero" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Stellt den <see cref="T:System.TimeSpan" />-Wert für 0 (null) dar. Dieses Feld ist schreibgeschützt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Da der Wert des der <xref:System.TimeSpan.Zero> Feld ist eine <xref:System.TimeSpan> Objekt, das einen 0 (null) Zeitwert darstellt können Sie es mit anderen vergleichen <xref:System.TimeSpan> Objekte bestimmen, ob der zweite Wert positiv, nicht 0 (null) oder negative Zeitintervalle darstellen. Sie können dieses Feld auch verwenden, zum Initialisieren einer <xref:System.TimeSpan> Objekt in einen Zeitwert von 0 (null).  
  
   
  
## Examples  
 Im folgenden Beispiel verweist auf und zeigt den Wert der <xref:System.TimeSpan.Zero> Feld.  
  
 [!code-cpp[System.TimeSpan.Fields#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CPP/fields.cpp#1)]
 [!code-csharp[System.TimeSpan.Fields#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeSpan.Fields/CS/fields.cs#1)]
 [!code-vb[System.TimeSpan.Fields#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeSpan.Fields/VB/fields.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
