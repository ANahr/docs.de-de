<Type Name="Attribute" FullName="System.Attribute">
  <TypeSignature Language="C#" Value="public abstract class Attribute : System.Runtime.InteropServices._Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Attribute extends System.Object implements class System.Runtime.InteropServices._Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.InteropServices._Attribute</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.All, AllowMultiple=false, Inherited=true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._Attribute))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Stellt die Basisklasse für benutzerdefinierte Attribute dar.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.Attribute> Klasse ordnet Systeminformationen vordefinierte oder benutzerdefinierte Informationen benutzerdefinierte ein Target-Element. Ein Target-Element kann eine Assembly, Klasse, Konstruktor, Delegaten, Enum, Ereignis, Feld, Schnittstelle, -Methode, portierbare ausführbare Datei Modul, Parameter, Eigenschaft, Rückgabewert, Struktur oder ein anderes Attribut sein.  
  
 Angaben, die durch ein Attribut ist auch bekannt als Metadaten. Metadaten zur Laufzeit analysiert werden, von der Anwendung zu steuern, wie Ihre Anwendung Daten verarbeitet oder vor der Laufzeit von externen Tools Steuern wie die Anwendung selbst wird verarbeitet oder verwaltet. Z. B. .NET Framework vordefiniert und verwendet, um das Laufzeitverhalten zu steuern, und einige Programmiersprachen verwenden Attributtypen zur Darstellung von Sprachfunktionen, die durch das allgemeine Typsystem in .NET Framework nicht direkt unterstützt.  
  
 Alle Typen von Attributen abgeleitet direkt oder indirekt die <xref:System.Attribute> Klasse. Attribute können auf ein Target-Element angewendet werden. mehrere Attribute können mit dem gleichen Zielelement angewendet werden. und Attribute von einem Element, das von einem Zielelement abgeleitet geerbt werden können. Verwenden der <xref:System.AttributeTargets> Klasse, um das Zielelement anzugeben, auf die das Attribut angewendet wird.  
  
 Die <xref:System.Attribute> -Klasse stellt praktische Methoden zum Abrufen und Testen von benutzerdefinierten Attributen. Weitere Informationen zum Verwenden von Attributen finden Sie unter [Anwenden von Attributen](~/docs/standard/attributes/applying-attributes.md) und [Attribute](~/docs/standard/attributes/index.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute>.  
  
 [!code-cpp[AnimalAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/AnimalAttributes/CPP/customattribute.cpp#1)]
 [!code-csharp[AnimalAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/AnimalAttributes/CS/customattribute.cs#1)]
 [!code-vb[AnimalAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/AnimalAttributes/VB/customattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Dieser Typ ist threadsicher.</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Attribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initialisiert eine neue Instanz der <see cref="T:System.Attribute" />-Klasse.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieser Konstruktor wird nur durch abgeleitete Klassen aufgerufen <xref:System.Attribute>.  
  
   
  
## Examples  
 Das folgende Codebeispiel zeigt die Definition eines benutzerdefinierten Parameters <xref:System.Attribute> Klasse mit ihren Konstruktor.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CPP/getcustattrparam.cpp#2)]
 [!code-csharp[System.Attribute.GetCustomAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CS/getcustattrparam.cs#2)]
 [!code-vb[System.Attribute.GetCustomAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/VB/getcustattrparam.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein <see cref="T:System.Object" /> , mit dieser Instanz verglichen werden soll oder <see langword="null" />.</param>
        <summary>Gibt einen Wert zurück, der angibt, ob diese Instanz gleich einem angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel definiert zwei benutzerdefinierte Parameter <xref:System.Attribute> Klassen, und klicken Sie dann mehrere Objekte einer jeden Klasse erstellt und zeigt die Verwendung von der <xref:System.Attribute.Equals%2A> Methode, um sie miteinander vergleichen.  
  
 [!code-cpp[System.Attribute.Equals#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Attribute.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Attribute.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Attribute.Equals/CS/equals.cs#1)]
 [!code-vb[System.Attribute.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Attribute.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut in einer angegebenen Assembly angewendet. Parameter geben die Assembly und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der <xref:System.Attribute.GetCustomAttributes%2A> Methode, wenn Sie davon ausgehen, mehrere Werte dass zurückgegeben werden, oder <xref:System.Reflection.AmbiguousMatchException> ausgelöst.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#1)]
 [!code-csharp[IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id1.cs#1)]
 [!code-vb[IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf einen Member eines Typs angewendet. Parameter geben Sie das Element und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Eine Übereinstimmung wird bestimmt, auf die gleiche Weise, die in den Rückgabewert Abschnitt beschriebene <xref:System.Type.IsAssignableFrom%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[IsDefined#4](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#4)]
 [!code-csharp[IsDefined#4](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id4.cs#4)]
 [!code-vb[IsDefined#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf ein Modul angewendet. Parameter geben das Modul und den Typ des zu suchenden Attributs.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[IsDefined#2](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#2)]
 [!code-csharp[IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id2.cs#2)]
 [!code-vb[IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf einen Methodenparameter angewendet. Parameter geben die Methodenparameter und den Typ des zu suchenden Attributs.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel definiert einen benutzerdefinierten Parameter <xref:System.Attribute> Klasse und das benutzerdefinierte Attribut an eine Methode in einer abgeleiteten Klasse und die Basis der abgeleiteten Klasse angewendet. Das Beispiel zeigt die Verwendung der <xref:System.Attribute.GetCustomAttribute%2A> Methode, um die Attribute zurückzugeben.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CPP/getcustattrparam.cpp#1)]
 [!code-csharp[System.Attribute.GetCustomAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CS/getcustattrparam.cs#1)]
 [!code-vb[System.Attribute.GetCustomAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/VB/getcustattrparam.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf eine Assembly angewendet. Parameter geben die Assembly, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#1)]
 [!code-csharp[IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id1.cs#1)]
 [!code-vb[IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf einen Member eines Typs angewendet. Parameter geben den Member, der den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Elements durchsucht.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[IsDefined#4](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#4)]
 [!code-csharp[IsDefined#4](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id4.cs#4)]
 [!code-vb[IsDefined#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf ein Modul angewendet. Parameter geben die Module, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von der <xref:System.Attribute.GetCustomAttribute%2A> Methode Aufnahme einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[IsDefined#2](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#2)]
 [!code-csharp[IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id2.cs#2)]
 [!code-vb[IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttribute">
      <MemberSignature Language="C#" Value="public static Attribute GetCustomAttribute (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute GetCustomAttribute(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein benutzerdefiniertes Attribut auf einen Methodenparameter angewendet. Parameter geben die Parameter der Methode, den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Parameters der Methode durchsucht.</summary>
        <returns>Ein Verweis auf das einzige benutzerdefinierte Attribut vom Typ <paramref name="attributeType" /> angewendeten <paramref name="element" />, oder <see langword="null" /> , wenn kein solches Attribut vorhanden ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel definiert einen benutzerdefinierten Parameter <xref:System.Attribute> Klasse und das benutzerdefinierte Attribut an eine Methode in einer abgeleiteten Klasse und die Basis der abgeleiteten Klasse angewendet. Das Beispiel zeigt die Verwendung der <xref:System.Attribute.GetCustomAttribute%2A> Methode, um die Attribute zurückzugeben.  
  
 [!code-cpp[System.Attribute.GetCustomAttribute#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CPP/getcustattrprminh.cpp#3)]
 [!code-csharp[System.Attribute.GetCustomAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/CS/getcustattrprminh.cs#3)]
 [!code-vb[System.Attribute.GetCustomAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Attribute.GetCustomAttribute/VB/getcustattrprminh.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">Mehr als eine der erforderlichen Attribute gefunden.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute ab, die auf eine Assembly angewendet werden. Ein Parameter gibt die Assembly an.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Im folgende Beispiel ruft die benutzerdefinierten Attribute der aktuellen Assembly ab.  
  
 [!code-cpp[GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/ca1.cpp#1)]
 [!code-csharp[GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca1.cs#1)]
 [!code-vb[GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die auf einen Member eines Typs ab. Ein Parameter gibt das Element an.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element`.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttribute%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#4)]
 [!code-csharp[GetCustomAttributes#4](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca4.cs#4)]
 [!code-vb[GetCustomAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Module)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <summary>Ruft ein Array mit den benutzerdefinierten Attributen, die auf ein Modul angewendet. Ein Parameter gibt das Modul an.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#2)]
 [!code-csharp[GetCustomAttributes#2](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca2.cs#2)]
 [!code-vb[GetCustomAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die an einen Methodenparameter ab. Ein Parameter gibt den Methodenparameter.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#5)]
 [!code-csharp[GetCustomAttributes#5](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca5.cs#5)]
 [!code-vb[GetCustomAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute ab, die auf eine Assembly angewendet werden. Parameter geben die Assembly und eine ignorierte Suchoption.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>, wobei ein <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/ca1.cpp#1)]
 [!code-csharp[GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca1.cs#1)]
 [!code-vb[GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute ab, die auf eine Assembly angewendet werden. Parameter geben die Assembly und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>, wobei ein <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/ca1.cpp#1)]
 [!code-csharp[GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca1.cs#1)]
 [!code-vb[GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die auf einen Member eines Typs ab. Parameter geben den Member, der den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Elements durchsucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element` Wenn `inherit` ist `true`.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#4)]
 [!code-csharp[GetCustomAttributes#4](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca4.cs#4)]
 [!code-vb[GetCustomAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="type">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die auf einen Member eines Typs ab. Parameter geben Sie das Element und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="type" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element`.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttribute%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#4)]
 [!code-csharp[GetCustomAttributes#4](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca4.cs#4)]
 [!code-vb[GetCustomAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein Array mit den benutzerdefinierten Attributen, die auf ein Modul angewendet. Parameter geben das Modul und eine ignorierte Suchoption.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element` Wenn `inherit` ist `true`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#2)]
 [!code-csharp[GetCustomAttributes#2](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca2.cs#2)]
 [!code-vb[GetCustomAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein Array mit den benutzerdefinierten Attributen, die auf ein Modul angewendet. Parameter geben das Modul und den Typ des zu suchenden Attributs.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#2)]
 [!code-csharp[GetCustomAttributes#2](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca2.cs#2)]
 [!code-vb[GetCustomAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die an einen Methodenparameter ab. Parameter geben die Methodenparameter und bestimmt, ob die Vorgänger des Parameters der Methode durchsucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute enthält, die auf angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#5)]
 [!code-csharp[GetCustomAttributes#5](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca5.cs#5)]
 [!code-vb[GetCustomAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Die <see cref="P:System.Reflection.ParameterInfo.Member" /> Eigenschaft <paramref name="element" /> ist<see langword="null." /><see langword="" /></exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die an einen Methodenparameter ab. Parameter geben die Methodenparameter und den Typ des zu suchenden Attributs.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#5)]
 [!code-csharp[GetCustomAttributes#5](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca5.cs#5)]
 [!code-vb[GetCustomAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute ab, die auf eine Assembly angewendet werden. Parameter geben die Assembly, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode Sicherheitsattribute aus, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>, wobei ein <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#1](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/ca1.cpp#1)]
 [!code-csharp[GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca1.cs#1)]
 [!code-vb[GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.MemberInfo element, Type type, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.MemberInfo element, class System.Type type, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="type">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die auf einen Member eines Typs ab. Parameter geben den Member, der den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Elements durchsucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="type" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element` Wenn `inherit` ist `true`.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode auf Typen, Methoden und Konstruktoren Sicherheitsattribute zurück, wenn die Attribute in das neue Metadatenformat gespeichert werden. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#4](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#4)]
 [!code-csharp[GetCustomAttributes#4](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca4.cs#4)]
 [!code-vb[GetCustomAttributes#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="type" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Ruft ein Array mit den benutzerdefinierten Attributen, die auf ein Modul angewendet. Parameter geben die Module, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert enthält die benutzerdefinierten Attribute für frühere Versionen von `element` Wenn `inherit` ist `true`.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#2](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#2)]
 [!code-csharp[GetCustomAttributes#2](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca2.cs#2)]
 [!code-vb[GetCustomAttributes#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public static Attribute[] GetCustomAttributes (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Attribute[] GetCustomAttributes(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Attribute[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Ruft ein Array der benutzerdefinierten Attribute angewendet, die an einen Methodenparameter ab. Parameter geben die Parameter der Methode, den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Parameters der Methode durchsucht.</summary>
        <returns>Ein <see cref="T:System.Attribute" /> Array, das die benutzerdefinierten Attribute des Typs enthält <paramref name="attributeType" /> angewendet <paramref name="element" />, oder ein leeres Array, wenn keine solchen benutzerdefinierten Attribute vorhanden sind.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `element` stellt einen Parameter in einer Methode dar, der ein abgeleiteter Typ, der Rückgabewert enthält die vererbbaren benutzerdefinierten Attribute, die auf den gleichen Parameter in der überschriebenen Basismethoden angewendet.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetCustomAttributes%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[GetCustomAttributes#5](~/samples/snippets/cpp/VS_Snippets_CLR/GetCustomAttributes/CPP/custattrs.cpp#5)]
 [!code-csharp[GetCustomAttributes#5](~/samples/snippets/csharp/VS_Snippets_CLR/GetCustomAttributes/CS/ca5.cs#5)]
 [!code-vb[GetCustomAttributes#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetCustomAttributes/VB/ca5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.TypeLoadException">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
        <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.GetHashCode%2A> im Kontext des <xref:System.Attribute>.  
  
 [!code-csharp[GetHashCode#1](~/samples/snippets/csharp/VS_Snippets_CLR/GetHashCode/CS/hashcode.cs#1)]
 [!code-vb[GetHashCode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/GetHashCode/VB/hashcode.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefaultAttribute">
      <MemberSignature Language="C#" Value="public virtual bool IsDefaultAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefaultAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefaultAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt beim Überschreiben in einer abgeleiteten Klasse an, ob der Wert der Instanz der Standardwert für die abgeleitete Klasse ist.</summary>
        <returns>
          <see langword="true" />, wenn diese Instanz das Standardattribut für die Klasse ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gibt die standardmäßige Implementierung dieser Klasse `false`, und in der abgeleiteten Klasse sind aussagekräftig sind für diese Klasse implementiert werden muss.  
  
 Die Implementierung dieser Methode in einer abgeleiteten Klasse vergleicht der Wert dieser Instanz mit einem standard-Standardwert, dann gibt einen booleschen Wert, der angibt, ob der Wert dieser Instanz des Standardwerts entspricht. Des Standardwerts ist in der Regel als eine Konstante in der Implementierung oder programmgesteuert in einem Feld, das von der Implementierung verwendet gespeichert.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefaultAttribute%2A>.  
  
 [!code-cpp[IsDefaultAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefaultAttribute/CPP/defattr.cpp#1)]
 [!code-csharp[IsDefaultAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefaultAttribute/CS/defattr.cs#1)]
 [!code-vb[IsDefaultAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefaultAttribute/VB/defattr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute auf eine Assembly angewendet werden. Parameter geben die Assembly und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode zurück `true` verfügt die Assembly Sicherheitsattribute, die in den neuen Metadatenformat gespeichert. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>, wobei ein <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#1)]
 [!code-csharp[IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id1.cs#1)]
 [!code-vb[IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode, Typ oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute auf einen Member eines Typs angewendet werden. Parameter geben Sie das Element und den Typ des benutzerdefinierten Attributs gesucht.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Vorgänger des `element` für den benutzerdefinierten Attributen durchsucht werden.  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode zurück `true` verfügt ein Typ, eine Methode oder ein Konstruktor Sicherheitsattribute, die in den neuen Metadatenformat gespeichert. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[IsDefined#4](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#4)]
 [!code-csharp[IsDefined#4](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id4.cs#4)]
 [!code-vb[IsDefined#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Module element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Module element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute des angegebenen Typs auf ein Modul angewendet werden. Parameter geben das Modul und den Typ des zu suchenden Attributs.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Vorgänger des `element` nicht für den benutzerdefinierten Attributen durchsucht werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[IsDefined#2](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#2)]
 [!code-csharp[IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id2.cs#2)]
 [!code-vb[IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute an einen Methodenparameter angewendet werden. Parameter geben die Methodenparameter und den Typ des zu suchenden Attributs.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Vorgänger des `element` für den benutzerdefinierten Attributen durchsucht werden.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[IsDefined#5](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#5)]
 [!code-csharp[IsDefined#5](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id5.cs#5)]
 [!code-vb[IsDefined#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Assembly element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Assembly element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Assembly" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Assembly" /> -Klasse, eine wiederverwendbare Auflistung von Modulen beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute auf eine Assembly angewendet werden. Parameter geben die Assembly, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode zurück `true` verfügt die Assembly Sicherheitsattribute, die in den neuen Metadatenformat gespeichert. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>, wobei ein <xref:System.Reflection.Assembly> als Parameter.  
  
 [!code-cpp[IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#1)]
 [!code-csharp[IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id1.cs#1)]
 [!code-vb[IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.MemberInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.MemberInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.MemberInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.MemberInfo" /> Klasse, die einen Konstruktor, Ereignis, ein Feld, Methode, Typ oder Eigenschaft Member einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute auf einen Member eines Typs angewendet werden. Parameter geben den Member, der den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Elements durchsucht.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Beginnend mit .NET Framework, Version 2.0, gibt diese Methode zurück `true` verfügt ein Typ, eine Methode oder ein Konstruktor Sicherheitsattribute, die in den neuen Metadatenformat gespeichert. Mit Version 2.0 oder höher kompilierte Assemblys verwenden Sie das neue Format. Dynamische Assemblys und Assemblys, die mit früheren Versionen von .NET Framework kompiliert verwenden die alte XML-Format. Finden Sie unter [Ausgeben von deklarativen Sicherheitsattribute](http://msdn.microsoft.com/en-us/9eeddee8-ca89-4440-b84b-fd613f590cd5).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.MemberInfo> als Parameter.  
  
 [!code-cpp[IsDefined#4](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#4)]
 [!code-csharp[IsDefined#4](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id4.cs#4)]
 [!code-vb[IsDefined#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id4.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="element" />ist Sie nicht, einen Konstruktor, Methoden-, Eigenschafts-, Ereignis, Typ oder Feld.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.Module element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.Module element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.Module,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.Module" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.Module" /> Klasse, die eine portierbare ausführbare Datei beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Dieser Parameter wird ignoriert und wirkt sich nicht auf die Ausführung von dieser Methode.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute auf ein Modul angewendet werden. Parameter geben die Module, die den Typ des benutzerdefinierten Attributs zu suchende und eine ignorierte Suchoption.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ignoriert die `inherit` Parameter und sucht nicht die Vorgänger des `element` für benutzerdefinierte Attribute.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.Module> als Parameter.  
  
 [!code-cpp[IsDefined#2](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#2)]
 [!code-csharp[IsDefined#2](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id2.cs#2)]
 [!code-vb[IsDefined#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public static bool IsDefined (System.Reflection.ParameterInfo element, Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefined(class System.Reflection.ParameterInfo element, class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Reflection.ParameterInfo" />
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="element">Ein abgeleitetes Objekt aus der <see cref="T:System.Reflection.ParameterInfo" /> -Klasse, die einen Parameter eines Members einer Klasse beschreibt.</param>
        <param name="attributeType">Der Typ oder ein Basistyp des benutzerdefinierten Attributs gesucht.</param>
        <param name="inherit">Wenn <see langword="true" />, gibt an, dass auch die Suche die Vorgänger des <c>Element</c> für benutzerdefinierte Attribute.</param>
        <summary>Bestimmt, ob alle benutzerdefinierten Attribute an einen Methodenparameter angewendet werden. Parameter geben die Parameter der Methode, den Typ des benutzerdefinierten Attributs gesucht und bestimmt, ob die Vorgänger des Parameters der Methode durchsucht.</summary>
        <returns>
          <see langword="true" />Wenn ein benutzerdefiniertes Attribut vom Typ <paramref name="attributeType" /> angewendet wird, um <paramref name="element" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.IsDefined%2A>unter Berücksichtigung einer <xref:System.Reflection.ParameterInfo> als Parameter.  
  
 [!code-cpp[IsDefined#5](~/samples/snippets/cpp/VS_Snippets_CLR/IsDefined/CPP/isdefined.cpp#5)]
 [!code-csharp[IsDefined#5](~/samples/snippets/csharp/VS_Snippets_CLR/IsDefined/CS/id5.cs#5)]
 [!code-vb[IsDefined#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/IsDefined/VB/id5.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="element" /> oder <paramref name="attributeType" /> ist <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="attributeType" />stammt nicht aus <see cref="T:System.Attribute" />.</exception>
        <exception cref="T:System.ExecutionEngineException">
          <paramref name="element" />ist eine Methode, Konstruktor oder Typ.</exception>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public virtual bool Match (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Match(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.Match(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Ein <see cref="T:System.Object" /> für den Vergleich mit dieser Instanz von <see cref="T:System.Attribute" />.</param>
        <summary>Ruft beim Überschreiben in einer abgeleiteten Klasse gibt einen Wert, der angibt, ob diese Instanz gleich ein angegebenen Objekt ist.</summary>
        <returns>
          <see langword="true" />Wenn diese Instanz gleich <paramref name="obj" />ist, andernfalls <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode bestimmt, ob eine <xref:System.Attribute> gleich einem anderen. Die standardmäßige Implementierung entspricht dem <xref:System.Attribute.Equals%2A>, dem führt einen Vergleich aus Wert und Verweis. Überschreiben Sie diese Methode zum Implementieren der Unterstützung für Attributwerte, z. B. Flags oder Bitfelder, die aus Komponenten bestehen, die selbst von Bedeutung sind.  
  
 Angenommen Sie, ein Attribut, dessen Wert ein binäres Feld in ein Bitfeld der Flags unterteilt ist. Zwei Instanzen dieses Attributs ist ein Kennzeichen in Satz überein, während alle anderen Flags unterscheiden. Die <xref:System.Attribute.Equals%2A> Methode kann nicht bestimmt werden, dass die beiden Instanzen das gleiche flag festgelegt haben, aber die <xref:System.Attribute.Match%2A> Methode kann.  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung von <xref:System.Attribute.Match%2A> im Kontext des <xref:System.Attribute>.  
  
 [!code-csharp[Match#1](~/samples/snippets/csharp/VS_Snippets_CLR/Match/CS/match.cs#1)]
 [!code-vb[Match#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Match/VB/match.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _Attribute.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">Für zukünftige Verwendung reserviert. Muss IID_NULL sein.</param>
        <param name="rgszNames">Das übergebene Array von zuzuordnenden Namen.</param>
        <param name="cNames">Die Anzahl der zuzuordnenden Namen.</param>
        <param name="lcid">Der Gebietsschemakontext, in dem die Namen interpretiert werden sollen.</param>
        <param name="rgDispId">Das vom Aufrufer zugeordnete Array, das die IDs entsprechend den Namen empfängt.</param>
        <summary>Ordnet eine Reihe von Namen einer entsprechenden Reihe von Dispatchbezeichnern zu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden. Weitere Informationen zu `IDispatch::GetIDsOfNames`, finden Sie in der MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Spät gebundener Zugriff mithilfe des erweiterten COM <c>IDispatch</c> Schnittstelle wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _Attribute.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">Die zurückzugebenden Typinformationen.</param>
        <param name="lcid">Der Gebietsschemabezeichner für die Typinformationen.</param>
        <param name="ppTInfo">Empfängt einen Zeiger auf das angeforderte Objekt mit den Typinformationen.</param>
        <summary>Ruft die Typinformationen für ein Objekt ab, mit deren Hilfe die Typinformationen für eine Schnittstelle abgerufen werden können.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden. Weitere Informationen zu `IDispatch::GetTypeInfo`, finden Sie in der MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Spät gebundener Zugriff mithilfe des erweiterten COM <c>IDispatch</c> Schnittstelle wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _Attribute.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.System#Runtime#InteropServices#_Attribute#GetTypeInfoCount(System.UInt32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">Zeigt auf einen Speicherort, der die Anzahl der Schnittstellen mit Typinformationen empfängt, die vom Objekt bereitgestellt werden.</param>
        <summary>Ruft die Anzahl der Schnittstellen mit Typinformationen ab, die von einem Objekt bereitgestellt werden (0 oder 1).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden. Weitere Informationen zu `IDispatch::GetTypeInfoCount`, finden Sie in der MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Spät gebundener Zugriff mithilfe des erweiterten COM <c>IDispatch</c> Schnittstelle wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._Attribute.Invoke">
      <MemberSignature Language="C#" Value="void _Attribute.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._Attribute.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Attribute.System#Runtime#InteropServices#_Attribute#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">Bezeichnet den Member.</param>
        <param name="riid">Für zukünftige Verwendung reserviert. Muss IID_NULL sein.</param>
        <param name="lcid">Der Gebietsschemakontext, in dem Argumente interpretiert werden sollen.</param>
        <param name="wFlags">Flags, die den Kontext des Aufrufs beschreiben.</param>
        <param name="pDispParams">Ein Zeiger auf eine Struktur, die ein Array von Argumenten und ein Array von Argument-DISPIDs für benannte Argumente sowie Zähler für die Anzahl der Elemente in jedem Array enthält.</param>
        <param name="pVarResult">Ein Verweis auf den Speicherort, an dem das Ergebnis gespeichert werden soll.</param>
        <param name="pExcepInfo">Ein Zeiger auf eine Struktur mit Ausnahmeinformationen.</param>
        <param name="puArgErr">Der Index des ersten Arguments mit einem Fehler.</param>
        <summary>Stellt den Zugriff auf von einem Objekt verfügbar gemachte Eigenschaften und Methoden bereit.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Methode ist für den Zugriff auf verwaltete Klassen aus nicht verwaltetem Code und sollte nicht von verwaltetem Code aufgerufen werden. Weitere Informationen zu `IDispatch::Invoke`, finden Sie in der MSDN Library.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Spät gebundener Zugriff mithilfe des erweiterten COM <c>IDispatch</c> Schnittstelle wird nicht unterstützt.</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeId">
      <MemberSignature Language="C#" Value="public virtual object TypeId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TypeId" />
      <MemberSignature Language="DocId" Value="P:System.Attribute.TypeId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ruft bei Implementierung in einer abgeleiteten Klasse einen eindeutigen Bezeichner für dieses <see cref="T:System.Attribute" /> ab.</summary>
        <value>Ein <see cref="T:System.Object" /> also einen eindeutigen Bezeichner für das Attribut.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bei Implementierung ist dieser Bezeichner lediglich die <xref:System.Type> des Attributs. Es ist jedoch vorgesehen, dass der eindeutige Bezeichner verwendet werden, um zwei Attribute vom gleichen Typ zu identifizieren.  
  
   
  
## Examples  
 Das folgende Codebeispiel implementiert die <xref:System.Attribute.TypeId%2A> Eigenschaft eines benutzerdefinierten Parameters <xref:System.Attribute> Klasse und ihre Verwendung veranschaulicht.  
  
 [!code-cpp[System.Attribute.TypeId#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Attribute.TypeId/CPP/typeid.cpp#1)]
 [!code-csharp[System.Attribute.TypeId#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Attribute.TypeId/CS/typeid.cs#1)]
 [!code-vb[System.Attribute.TypeId#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Attribute.TypeId/VB/typeid.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
