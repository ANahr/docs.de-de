<Type Name="AsyncCallback" FullName="System.AsyncCallback">
  <TypeSignature Language="C#" Value="public delegate void AsyncCallback(IAsyncResult ar);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed AsyncCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.AsyncCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="ar" Type="System.IAsyncResult" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="ar">Das Ergebnis des asynchronen Vorgangs.</param>
    <summary>Verweist auf eine Methode, die aufgerufen wird, sobald ein entsprechender asynchroner Vorgang abgeschlossen ist.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden einer <xref:System.AsyncCallback> Delegat, der die Ergebnisse eines asynchronen Vorgangs in einem separaten Thread zu verarbeiten. Die <xref:System.AsyncCallback> Delegat stellt eine Rückrufmethode, die aufgerufen wird, wenn der asynchrone Vorgang abgeschlossen ist. Die Rückrufmethode wird ein <xref:System.IAsyncResult> -Parameter, der später verwendet wird, um die Ergebnisse des asynchronen Vorgangs zu erhalten.  
  
 Weitere Informationen zur asynchronen Programmierung finden Sie unter [Verwenden eines AsyncCallback-Delegaten zum Beenden einer asynchronen Operation](~/docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-to-end-an-asynchronous-operation.md) und [mit AsyncCallback-Delegat und Zustandsobjekt](~/docs/standard/asynchronous-programming-patterns/using-an-asynccallback-delegate-and-state-object.md) in [ Das ereignisbasierte asynchrone Muster (EAP)](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-eap.md).  
  
   
  
## Examples  
 Das folgende Codebeispiel veranschaulicht die Verwendung asynchroner Methoden in der <xref:System.Net.Dns> Klasse Domain Name System (DNS) für den Benutzer angegebenen Computer abgerufen. In diesem Beispiel wird ein <xref:System.AsyncCallback> Delegat, verweist der `ProcessDnsInformation` Methode. Diese Methode wird einmal für jede asynchrone Anforderung von DNS-Informationen aufgerufen.  
  
 [!code-csharp[AsyncDesignPattern#4](~/samples/snippets/csharp/VS_Snippets_CLR/AsyncDesignPattern/CS/AsyncDelegateNoStateObject.cs#4)]
 [!code-vb[AsyncDesignPattern#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/AsyncDesignPattern/VB/AsyncDelegateNoState.vb#4)]  
  
 ]]></format>
    </remarks>
  </Docs>
</Type>
