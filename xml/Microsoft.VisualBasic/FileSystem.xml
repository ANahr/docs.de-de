<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die <see langword="FileSystem" /> Modul enthält die Prozeduren, die verwendet werden, um Datei-, Verzeichnis- oder Ordner und System-Vorgänge auszuführen. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als die Verwendung der <see langword="FileSystem" /> Modul. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Zugriff auf Dateien und Ordner.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und das Verzeichnis oder die Ordner zu ermitteln.  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">Erforderlich. Ein <see langword="String" /> Ausdruck, welches Verzeichnis oder der Ordner identifiziert, wird, die neue Standardverzeichnis oder den Ordner. <c>Pfad</c> kann das Laufwerk enthalten. Wenn kein Laufwerk angegeben wird, <see langword="ChDir" /> ändert das Standardverzeichnis oder Ordner auf das aktuelle Laufwerk.</param>
        <summary>Ändert das aktuelle Verzeichnis oder einen Ordner. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als den <see langword="ChDir" /> Funktion. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ChDir` -Funktion ändert das Standardverzeichnis, aber nicht das Standardlaufwerk. Beispielsweise ist das Standard-Laufwerk C, die folgende Anweisung ändert das Standardverzeichnis auf Laufwerk D, C, bleibt das Standardlaufwerk jedoch:  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 Lassen Sie relative verzeichnisänderungen wird durch zwei Punkte wie folgt eingeben:  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  Die `ChDir` -Funktion erfordert die Berechtigung für nicht verwalteten Code, die die Ausführung in teilweise vertrauenswürdigen Umgebungen beeinträchtigen können. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `ChDir` Funktion, um das aktuelle Verzeichnis oder einen Ordner zu ändern.  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Path" /> ist leer.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Ungültiges Laufwerk angegeben wird, oder Bandlaufwerk ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">Erforderlich. Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt. Wenn Sie angeben, dass eine leere Zeichenfolge (""), das aktuelle Laufwerk wird nicht geändert. Wenn die <c>Laufwerk</c> Argument ist eine Zeichenfolge mit mehreren Zeichen <see langword="ChDrive" /> verwendet nur den ersten Buchstaben.</param>
        <summary>Ändert das aktuelle Laufwerk an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ChDrive` -Funktion erfordert die Berechtigung nicht verwaltete Code sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern. Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Ungültiges Laufwerk angegeben wird, oder Bandlaufwerk ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">Erforderlich. Zeichenfolgenausdruck, der ein vorhandenes Laufwerk angibt. Wenn Sie angeben, dass eine leere Zeichenfolge (""), das aktuelle Laufwerk wird nicht geändert. Wenn die <c>Laufwerk</c> Argument ist eine Zeichenfolge mit mehreren Zeichen <see langword="ChDrive" /> verwendet nur den ersten Buchstaben.</param>
        <summary>Ändert das aktuelle Laufwerk an.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `ChDrive` -Funktion erfordert die Berechtigung nicht verwaltete Code sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.SecurityPermission> und [Codezugriffsberechtigungen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `ChDrive` Funktion, um das aktuelle Laufwerk zu ändern. Die Funktion löst eine Ausnahme aus, wenn das Laufwerk nicht vorhanden ist.  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Ungültiges Laufwerk angegeben wird, oder Bandlaufwerk ist nicht verfügbar.</exception>
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge, die den aktuellen Pfad darstellt. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie höhere Produktivität und Leistung bei-e/a-Dateivorgängen als <see langword="CurDir" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
        <returns>Eine Zeichenfolge, die den aktuellen Pfad darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel verwendet die `CurDir` Funktion, um den aktuellen Pfad zurückzugeben.  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">Dies ist optional. <see langword="Char" />Ein Ausdruck, der ein vorhandenes Laufwerk angibt. Wenn kein Laufwerk angegeben wird, oder wenn <c>Laufwerk</c> ist eine leere Zeichenfolge (""), <see langword="CurDir" /> gibt den Pfad für das aktuelle Laufwerk zurück.</param>
        <summary>Gibt eine Zeichenfolge, die den aktuellen Pfad darstellt. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie höhere Produktivität und Leistung bei-e/a-Dateivorgängen als <see langword="CurDir" />. Weitere Informationen finden Sie unter <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</summary>
        <returns>Eine Zeichenfolge, die den aktuellen Pfad darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel verwendet die `CurDir` Funktion, um den aktuellen Pfad zurückzugeben.  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine Zeichenfolge, die den Namen der Datei, eines Verzeichnisses oder eines Ordners, der mit einem angegebenen Muster oder Dateiattribut übereinstimmt oder die Volumebezeichnung eines Laufwerks darstellt. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie eine bessere Leistung und Produktivität bei-e/a-Dateivorgängen als den <see langword="Dir" /> Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</summary>
        <returns>Eine Zeichenfolge, die den Namen der Datei, eines Verzeichnisses oder eines Ordners, der mit einem angegebenen Muster oder Dateiattribut übereinstimmt oder die Volumebezeichnung eines Laufwerks darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.  
  
 `VbVolume`Gibt die Volumebezeichnung für das Laufwerk anstelle von einem bestimmten Dateinamen zurück.  
  
 Geben Sie an einer `PathName` erstmalig, die Sie Aufrufen der `Dir` Funktion. Um das nächste Element abzurufen, können Sie aufeinander folgende Aufrufe vorzunehmen die `Dir` Funktion ohne Parameter.  
  
> [!IMPORTANT]
>  Ordnungsgemäß ausgeführt. die `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Die `Attributes` Argument Enumerationswerte sind wie folgt:  
  
|Wert|Konstante|Beschreibung|  
|-|-|-|  
|`Normal`|`vbnormal`|Standard. Gibt Dateien ohne Attribute an.|  
|`ReadOnly`|`vbReadOnly`|Gibt an, schreibgeschützte Dateien sowie Dateien ohne Attribute.|  
|`Hidden`|`vbHidden`|Gibt an, ausgeblendete Dateien sowie Dateien ohne Attribute.|  
|`System`|`vbSystem`|Gibt an, das Systemdateien und auch Dateien ohne Attribute.|  
|`Volume`|`vbVolume`|Gibt die Volumebezeichnung. Wenn andere Attribute angegeben wird, `vbVolume` wird ignoriert.|  
|`Directory`|`vbDirectory`|Gibt an, Verzeichnissen oder Ordnern sowie Dateien ohne Attribute.|  
|`Archive`|`vbArchive`|Datei wurde seit der letzten Sicherung geändert.|  
|`Alias`|`vbAlias`|Datei weist einen anderen Namen an.|  
  
> [!NOTE]
>  Diese Enumerationen werden von der Visual Basic-Sprache angegeben und können überall im Code anstelle der eigentlichen Werte verwendet werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Dir` Funktion zum Überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">Dies ist optional. <see langword="String" />Ein Ausdruck, der einen Dateinamen, die Namen von Verzeichnissen oder Ordnern oder die Volumebezeichnung Laufwerk angibt. Eine Zeichenfolge der Länge 0 (null) (<see langword="&quot;&quot;" />) wird zurückgegeben, wenn <c>PathName</c> wurde nicht gefunden.</param>
        <param name="Attributes">Dies ist optional. Enumeration oder ein numerischer Ausdruck, dessen Wert Dateiattribute angibt. Wenn nicht angegeben, <see langword="Dir" /> gibt Dateien, bei denen <c>PathName</c> aber keine Attribute aufweisen.</param>
        <summary>Gibt eine Zeichenfolge, die den Namen der Datei, eines Verzeichnisses oder eines Ordners, der mit einem angegebenen Muster oder Dateiattribut übereinstimmt oder die Volumebezeichnung eines Laufwerks darstellt. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie eine bessere Leistung und Produktivität bei-e/a-Dateivorgängen als den <see langword="Dir" /> Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</summary>
        <returns>Eine Zeichenfolge, die den Namen der Datei, eines Verzeichnisses oder eines Ordners, der mit einem angegebenen Muster oder Dateiattribut übereinstimmt oder die Volumebezeichnung eines Laufwerks darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Dir` Funktion unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.  
  
 `VbVolume`Gibt die Volumebezeichnung für das Laufwerk anstelle von einem bestimmten Dateinamen zurück.  
  
 Geben Sie an einer `PathName` erstmalig, die Sie Aufrufen der `Dir` Funktion. Um das nächste Element abzurufen, können Sie aufeinander folgende Aufrufe vorzunehmen die `Dir` Funktion ohne Parameter.  
  
> [!IMPORTANT]
>  Ordnungsgemäß ausgeführt. die `Dir` -Funktion erfordert die <xref:System.Security.Permissions.FileIOPermissionAccess.Read> und <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, und [Codezugriffsberechtigungen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675).  
  
 Die `Attributes` Argument Enumerationswerte sind wie folgt:  
  
|Wert|Konstante|Beschreibung|  
|-|-|-|  
|`Normal`|`vbnormal`|Standard. Gibt die Dateien, die keine Attribute aufweisen.|  
|`ReadOnly`|`vbReadOnly`|Gibt schreibgeschützte Dateien zusätzlich zu Dateien, die keine Attribute aufweisen.|  
|`Hidden`|`vbHidden`|Gibt versteckte Dateien zusätzlich zu Dateien, die keine Attribute aufweisen.|  
|`System`|`vbSystem`|Gibt die Systemdateien, zusätzlich zu Dateien, die keine Attribute aufweisen.|  
|`Volume`|`vbVolume`|Gibt die Volumebezeichnung. Wenn andere Attribute angegeben wird, `vbVolume` wird ignoriert.|  
|`Directory`|`vbDirectory`|Gibt an, Verzeichnissen oder Ordnern, zusätzlich zu Dateien, die keine Attribute aufweisen.|  
|`Archive`|`vbArchive`|Datei wurde seit der letzten Sicherung geändert.|  
|`Alias`|`vbAlias`|Datei weist einen anderen Namen an.|  
  
> [!NOTE]
>  Diese Enumerationen werden von der Visual Basic-Sprache angegeben und können überall im Code anstelle der eigentlichen Werte verwendet werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Dir` Funktion zum Überprüfen, ob bestimmte Dateien und Verzeichnisse vorhanden sind.  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine <see langword="Integer" /> , die eine beliebige Anzahl von gültigen Dateinamen enthält.</param>
        <summary>Gibt einen booleschen Wert <see langword="True" /> beim Öffnen der Ende einer Datei für <see langword="Random" /> oder sequenzieller <see langword="Input" /> wurde erreicht.</summary>
        <returns>Gibt einen booleschen Wert <see langword="True" /> beim Öffnen der Ende einer Datei für <see langword="Random" /> oder sequenzieller <see langword="Input" /> wurde erreicht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwendung `EOF` vermeiden Sie den Fehler generiert, wird versucht, die nach dem Ende einer Datei Eingabe abzurufen.  
  
 Die `EOF` -Funktion gibt `False` fort, bis das Ende der Datei erreicht wurde. Dateien für geöffnet `Random` oder `Binary` Zugriff `EOF` gibt `False` erst nach der Ausführung der letzten `FileGet` Funktion kann nicht zum Lesen der vollständigen Datensatzes.  
  
 Dateien für geöffnet `Binary` zugreifen, beim Lesen der Datei mithilfe der `Input` Funktion bis `EOF` gibt `True` wird ein Fehler generiert. Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `Input`, oder verwenden Sie `Get` bei Verwendung der `EOF` Funktion. Dateien für geöffnet `Output`, `EOF` gibt immer `True`.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `EOF` Funktion, um das Ende einer Datei zu erkennen. In diesem Beispiel wird vorausgesetzt, dass `Testfile` ist eine Textdatei, die mehrere Textzeilen enthält.  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. <see langword="Integer" />. Eine beliebige gültige Dateinummer.</param>
        <summary>Gibt eine Enumeration, die den Dateimodus mit geöffneten Dateien darstellt. die <see langword="FileOpen" /> Funktion. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie eine bessere Leistung und Produktivität bei-e/a-Dateivorgängen als den <see langword="FileAttr" /> Funktion. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</summary>
        <returns>Im folgenden aufgeführten Enumerationswerte geben den Dateizugriffsmodus an:  
  
 <list type="table"><item><term>Wert  
  
 </term><description>Modus  
  
 </description></item><item><term> 1  
  
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  
  
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  
  
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  
  
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  
  
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine Enumeration, die den Dateimodus mit geöffneten Dateien darstellt. die `FileOpen` Funktion.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FileAttr` Funktion, um den Dateimodus einer geöffneten Datei zurückzugeben.  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">Dies ist optional. Parameterarray von 0 oder mehr Kanäle geschlossen werden.</param>
        <summary>Schließt die Eingabe/Ausgabe (e/a) für eine Datei geöffnet, mit der <see langword="FileOpen" /> Funktion. <see langword="My" />bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `FileClose` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [wie: Lesen von Text aus Dateien mit einem StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[wie: Schreiben von Text in Dateien mit einem StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), und [Exemplarische Vorgehensweise: Bearbeiten von Dateien und Verzeichnissen in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).  
  
 Wenn Sie weglassen `FileNumbers`, allen aktive Dateien geöffnet werden, indem Sie die `FileOpen` Funktion geschlossen werden.  
  
 Beim Schließen von Dateien, die für geöffnet waren `Output` oder `Append`, wird der endgültige Puffer der Ausgabe in die Betriebssystempuffer für diese Datei geschrieben. Alle geschlossenen zugeordnete Pufferspeicher Datei freigegeben ist.  
  
 Wenn die `FileClose` Funktion ausgeführt wird, wird die Zuordnung einer Datei mit der Datei Zahl enden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FileClose` Funktion zum Schließen einer Datei geöffnet wird, für `Input`.  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="FileNumber" /> existiert nicht.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. <see langword="String" />Ausdruck, der den Namen der zu kopierenden Datei angibt. <c>Quelle</c> eventuell das Verzeichnis oder Ordner, und das Laufwerk der Quelldatei.</param>
        <param name="Destination">Erforderlich. <see langword="String" />Ein Ausdruck, der den Zieldateinamen angibt. <c>Ziel</c> eventuell das Verzeichnis oder Ordner, und das Laufwerk für die Zieldatei.</param>
        <summary>Kopiert eine Datei. Die <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> können Sie höhere Produktivität und Leistung bei-e/a-Dateivorgängen als <see langword="FileCopy" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn Sie versuchen, verwenden Sie die `FileCopy` -Funktion auf eine aktuell geöffnete Datei ein Fehler auftritt.  
  
 `FileCopy`erfordert volle Vertrauenswürdigkeit auf dem lokalen Laufwerk funktioniert.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FileCopy` Funktion, um eine Datei auf einen anderen kopieren. Für dieses Beispiel wird davon ausgegangen, die `SrcFile` ist eine Datei, die Daten enthält.  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" />oder <paramref name="Destination" /> ist ungültig oder nicht angegeben.</exception>
        <exception cref="T:System.IO.IOException">Datei ist bereits geöffnet.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Erforderlich. <see langword="String" />Ein Ausdruck, der einen Dateinamen angibt. <c>PathName</c> kann das Verzeichnis und das Laufwerk oder Ordner handeln.</param>
        <summary>Gibt eine <see langword="Date" /> Wert, der angibt, Datum und Uhrzeit, die eine Datei in geschrieben wurde. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileDateTime" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></summary>
        <returns>
          <see langword="Date" />Wert, gibt das Datum und Uhrzeit eine Datei, wurde erstellt oder zuletzt geändert.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel verwendet die `FileDateTime` Funktion, um das Datum zu bestimmen und die Uhrzeit einer Datei erstellt oder zuletzt geändert wurde. Das Format von Datum und Uhrzeit angezeigt, basiert auf dem Gebietsschema des Systems.  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="PathName" />ist ungültig oder enthält Platzhalterzeichen.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Zieldatei ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Wenn der Deskriptor nicht verwendet wird. Übergeben Sie die Größe und die Grenzen des Arrays in `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` bezieht sich normalerweise in eine Datei mit `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion,`FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der`FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <param name="StringIsFixedLength">Dies ist optional. Gilt nur beim Schreiben einer Zeichenfolge. Gibt an, ob einen 2-Byte-Deskriptor für die Zeichenfolge zu schreiben, der die Länge beschreibt. Die Standardeinstellung ist <see langword="False" />.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <param name="ArrayIsDynamic">Dies ist optional. Gilt nur, wenn ein Array zu schreiben. Gibt an, ob das Array ist, als dynamisch behandelt werden soll, und gibt an, ob ein Arraydeskriptor, beschreibt die Größe und die Grenzen des Arrays erforderlich ist.</param>
        <param name="StringIsFixedLength">Dies ist optional. Gilt nur beim Schreiben einer Zeichenfolge. Gibt an, ob einen 2-Byte-Deskriptor für die Zeichenfolge zu schreiben, der die Länge beschreibt. Die Standardeinstellung ist <see langword="False" />.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable. Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGet" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FileGet`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGet` in der Regel in eine Datei geschrieben wird, mithilfe von `FilePut`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion (oder verweist, zu dem letzten `Seek` Funktion) gelesen wird.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGet` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und das Starten des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Die Zielvariable eine Zeichenfolge ist, standardmäßig `FileGet` liest einen 2-Byte-Deskriptor, die Länge der Zeichenfolge enthält, und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge. Wenn in einer Datei zu speichern, wird der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, können Sie auswählen, ob einen Deskriptor für die Größe und die Dimension des Arrays zu lesen. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Beim Lesen des Arrays müssen Sie die Möglichkeit zu entsprechen, die das Array geschrieben wurde. Wenn sie mit dem Deskriptor geschrieben wurde, müssen Sie den Deskriptor lesen. Der Deskriptor nicht verwendet wird, die Größe und die Grenzen des Arrays übergebenen `FileGet` ermittelt das weitere Vorgehen zu lesen.  
  
     Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     Die 218 Bytes werden wie folgt verteilt:  
  
    -   18 Bytes für den Deskriptor: (2 + 8 * 2)  
  
    -   200 Bytes für die Daten: (10 * 5 * 4).  
  
-   Wenn die Variable in gelesen werden, andere Typen von Variablen (keine Zeichenfolge variabler Länge oder ein Objekt), `FileGet` liest nur die Daten die Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der Daten, die gelesen werden können.  
  
-   `FileGet`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePut`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente erforderlich. Dies schließt alle Arrays und ihrer Deskriptoren. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGet`Liest alle Variablen zusammenhängend vom Datenträger. d. h. ohne Auffüllung zwischen Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGet` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
-   `FileGet`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
    > [!IMPORTANT]
    >  Lesen aus einer Datei mithilfe der `FileGet` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Der gültige Name einer Variablen, in die Daten gelesen werden.</param>
        <param name="RecordNumber">Optional. Datensatznummer (Dateien im <see langword="Random" />-Modus) oder Bytenummer (Dateien im <see langword="Binary" />-Modus), bei der der Lesevorgang beginnt.</param>
        <summary>Liest Daten aus einer offenen Datenträgerdatei in eine Variable.  Die <see langword="My" />-Funktion bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileGetObject" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `FileGetObject` -Funktion wird verwendet, statt `FileGet` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs zurückgegeben `Integer`, `Long`, `Short`usw. lauten.  
  
 Wenn Sie beabsichtigen, schreiben die `Variant` Typ `FileGetObject` ist erforderlich. Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird immer empfohlen, dass Sie verwenden `FilePutObject` und `FileGetObject`.  
  
 `FileGetObject`gilt nur in `Random` und `Binary` Modus.  
  
 Datenlesevorgänge mit `FileGetObject` wird in der Regel mit geschrieben `FilePutObject`.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, `FileGetObject` liest den Datensatz oder ein Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder verweist, zu dem letzten `Seek` Funktion).  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu lesenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FileGetObject` liest nachfolgende Datensätze Datensatzlänge. Der Abstand zwischen dem Ende eines Datensatzes und den Anfang des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten genau ermittelt werden kann, ist es sinnvoll, die Datensatzlänge der Länge der zu lesenden Daten überein.  
  
-   Wenn die Zielvariable eine Zeichenfolge, in der Standardeinstellung ist `FileGetObject` liest einen 2-Byte-Deskriptor mit der Zeichenfolgenlänge und liest dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge. Visual Basic 6.0 und früheren Versionen unterstützen Zeichenfolgen mit fester Länge und in eine Datei beim Lesen der Längendeskriptor nicht geschrieben werden. Wenn Sie eine Zeichenfolge ohne Deskriptor lesen möchten, übergeben Sie `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` Parameter in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: 2 + 8 * NumberOfDimensions.  
  
     Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger:  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     Die 218 Bytes werden wie folgt verteilt: 18 Bytes für den Deskriptor (2 + 8 * 2) und 100 Bytes für die Daten (10 * 5 * 4).  
  
-   `FileGetObject`liest Sie Elemente von Strukturen, als ob einzeln gelesen wurden, mit dem Unterschied, dass keine Auffüllung zwischen Elementen vorhanden ist. Auf dem Datenträger ein dynamisches array, in einem benutzerdefinierten Typ (mit geschriebene `FilePutObject`) ein Deskriptor, dessen Länge 2 plus 8 Mal der Anzahl der Dimensionen gleich, vorangestellt ist: 2 + 8 * NumberOfDimensions. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes, die zum Lesen der einzelnen Elemente, einschließlich aller Arrays und ihrer Deskriptoren erforderlich. Die <xref:Microsoft.VisualBasic.VBFixedStringAttribute> Klasse angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` aller-Modus die `Random` Regeln anwenden, mit den folgenden Ausnahmen:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FileGetObject`Liest alle Variablen vom Datenträger zusammenhängend, d. h. ohne Abstand zwischen den Datensätzen.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FileGetObject` liest nur die Daten. Es wird kein Deskriptor gelesen.  
  
 `FileGetObject`liest die Zeichenfolgen mit variabler Länge, die keine Elemente von Strukturen ohne erwartet den Längendeskriptor 2-Byte-sind. Die Anzahl der gelesenen Bytes entspricht die Anzahl der Zeichen, die bereits in der Zeichenfolge.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei namens "Form1.vb" möglicherweise z. B. keine Visual Basic-Quelldatei.  
  
   
  
## Examples  
 Im folgenden Beispiel liest, einen Datensatz in einer Testdatei und ruft dann ab.  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Erforderlich. <see langword="String" />-Ausdruck, der eine Datei angibt. <c>PathName</c> kann das Verzeichnis und das Laufwerk oder Ordner handeln.</param>
        <summary>Gibt einen <see langword="Long" />-Wert zurück, der die Länge einer Datei in Bytes angibt. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileLen" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</summary>
        <returns>
          <see langword="Long" />-Wert, der die Länge einer Datei in Bytes angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die angegebene Datei geöffnet wann ist die `FileLen` Funktion aufgerufen wird, wird der zurückgegebene Wert stellt die Größe der Datei zu dem Zeitpunkt, der sie geöffnet wurde.  
  
> [!NOTE]
>  Um die aktuelle Länge einer geöffneten Datei abzurufen, verwenden die `LOF` Funktion.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FileLen` Funktion, um die Länge einer Datei in Bytes zurück. Für dieses Beispiel wird davon ausgegangen, die `TestFile` ist eine Datei, die einige Daten enthält.  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">Die Datei ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer. Verwenden der <see langword="FreeFile" /> -Funktion die nächste verfügbare Zahl abrufen.</param>
        <param name="FileName">Erforderlich. <see langword="String" />Ausdruck, der angibt, einen Dateinamen – eventuell Verzeichnissen oder Ordnern, und das Laufwerk.</param>
        <param name="Mode">Erforderlich. Enumeration, die den Dateimodus angeben: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, oder <see langword="Random" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenMode" />.</param>
        <param name="Access">Dies ist optional. Enumeration, der die Vorgänge angibt, die für die geöffnete Datei zulässig: <see langword="Read" />, <see langword="Write" />, oder <see langword="ReadWrite" />. Wird standardmäßig auf <see langword="ReadWrite" /> festgelegt. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</param>
        <param name="Share">Dies ist optional. Enumeration, die die Vorgänge, die nicht durch andere Prozesse auf die geöffnete Datei zulässig angeben: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, und <see langword="Lock Read Write" />. Wird standardmäßig auf <see langword="Lock Read Write" /> festgelegt. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.OpenShare" />.</param>
        <param name="RecordLength">Dies ist optional. Zahl kleiner oder gleich 32.767 (Bytes). Für Dateien, die für den zufälligen Zugriff geöffnet werden ist dieser Wert die Datensatzlänge. Bei sequenziellen Dateien ist dieser Wert die Anzahl der Zeichen, die gepuffert.</param>
        <summary>Öffnet eine Datei für die Eingabe oder Ausgabe. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileOpen" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `FileOpen` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Sie müssen eine Datei öffnen, bevor alle e/a-Vorgang darauf ausgeführt werden kann. `FileOpen`reserviert einen Puffer für e/a auf die Datei, und bestimmt den Modus des Zugriffs für die Verwendung mit dem Puffer.  
  
> [!IMPORTANT]
>  Beim Schreiben in eine Datei eine Anwendung möglicherweise eine Datei erstellen, wenn die Datei mit der er schreiben möchte nicht vorhanden ist. Zu diesem Zweck benötigt er die Berechtigung für das Verzeichnis, in dem die Datei erstellt werden. Jedoch, wenn die Datei durch angegeben `FileName` vorhanden ist, muss die Anwendung `Write` Berechtigungen nur für die Datei selbst. Immer, wenn möglich, zur Verbesserung der Sicherheit erstellen Sie die Datei während der Bereitstellung und gewähren Sie `Write` Berechtigungen für diese Datei nur, anstatt das gesamte Verzeichnis. Schreiben Sie Daten in Verzeichnissen nach Benutzer statt auf das Stammverzeichnis oder das Verzeichnis für Programmdateien, um Sicherheit zu verbessern.  
  
 Der Kanal geöffnet verwendbaren mithilfe der `FreeFile()` Funktion.  
  
> [!IMPORTANT]
>  Die `FileOpen` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` -Enumeration, die sich möglicherweise auf ihre Ausführung in teilweise vertrauenswürdigen Umgebungen auswirken. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der der `FileOpen` Funktion, um ein- und Ausgabe in eine Datei zu ermöglichen.  
  
 Der folgende Code öffnet die Datei `TestFile` in `Input` Modus.  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 In diesem Beispiel öffnet die Datei im `Binary` Modus ausschließlich für Schreibvorgänge.  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 Das folgende Beispiel öffnet die Datei im `Random` Modus. Die Datei enthält die Datensätze mit der Struktur `Person`.  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 Dieses Codebeispiel öffnet die Datei im `Output` Modus; jeder Prozess kann lesen oder Schreiben in die Datei.  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 Dieses Codebeispiel öffnet die Datei im `Binary` Modus zum Lesen; andere Prozesse die Datei können nicht gelesen werden.  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Länge des Datensatzes ist negativ (und nicht gleich-1).</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="FileName" />ist bereits geöffnet ist, oder <paramref name="FileName" /> ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die`VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der`RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <param name="StringIsFixedLength">Dies ist optional. Gilt nur beim Schreiben einer Zeichenfolge. Gibt an, ob einen 2-Byte-Zeichenfolge Längendeskriptor für die Zeichenfolge in die Datei geschrieben werden soll. Die Standardeinstellung ist <see langword="False" />.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <param name="ArrayIsDynamic">Dies ist optional. Gilt nur, wenn ein Array zu schreiben. Gibt an, gibt an, ob das Array wird als dynamische behandelt werden soll, und ob einen der Arraydeskriptor für die Zeichenfolge zu schreiben, der die Länge beschreibt.</param>
        <param name="StringIsFixedLength">Dies ist optional. Gilt nur beim Schreiben einer Zeichenfolge. Gibt an, ob einen 2-Byte-Zeichenfolge Längendeskriptor für die Zeichenfolge in die Datei geschrieben werden soll. Die Standardeinstellung ist <see langword="False" />.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePut" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `FilePut`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePut` geschriebene Daten werden in der Regel mit `FileGet` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, den nächsten Datensatz bzw. Byte nach dem letzten `FileGet` oder `FilePut` Funktion oder verweist, zu dem letzten `Seek` Funktion geschrieben wird.  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePut`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePut`, was identisch mit `FileGet`, und Sie müssen sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePut` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten nicht mit Sicherheit bestimmt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Eine Zeichenfolge ist, die Zielvariable `FilePut` schreibt einen 2-Byte-Deskriptor, der die Länge der Zeichenfolge enthält, und schreibt dann die Daten, die in die Variable aufgenommen wird. Aus diesem Grund die Datensatzlänge gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss über mindestens zwei Bytes größer als die tatsächliche Länge der Zeichenfolge sein.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePut` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePut` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ist die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePut` schreibt eine 2-Byte-Deskriptor, identifiziert die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array ist, müssen Sie eine Auswahl, ob einen Deskriptor für die Größe und die Dimensionen des Arrays zu schreiben. Visual Basic 6.0 und früheren Versionen Dateideskriptor für dynamische Arrays und nicht für Arrays mit fester Größe zu schreiben. Visual Basic 2005 standardmäßig kein Deskriptor geschrieben. Legen Sie zum Schreiben des Deskriptors der `ArrayIsDynamic` Parameter `True`. Wenn das Array zu schreiben, müssen Sie entsprechend der Weise wird das Array gelesen werden; Wenn mit dem Deskriptor gelesen werden, müssen Sie den Deskriptor schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions). Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Die folgende Arraydeklaration erfordert z. B. 218 Bytes, wenn das Array geschrieben wird auf den Datenträger.  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   Wenn die Zielvariable einen anderen Typ der Variable (keine Zeichenfolge variabler Länge oder ein Objekt), ist `FilePut` schreibt nur die Daten der Variablen. Die Länge des Datensatzes gemäß der `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Länge der zu schreibenden Daten.  
  
-   `FilePut`Schreibt die Elemente von Strukturen, als ob jeder einzeln geschrieben wurden jedoch keine Auffüllung zwischen Elementen. Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in den Strukturen an, dass die Größe der Zeichenfolge beim Schreiben auf den Datenträger.  
  
    > [!NOTE]
    >  String-Felder, die mehr als Bytes angegeben die `VBFixedString` Attribut werden abgeschnitten, beim Schreiben auf den Datenträger  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus, die meisten der `Random` -Modus-Regeln gelten, bis auf einige Ausnahmen. Die folgenden Regeln für Dateien geöffnet, `Binary` Modus unterscheiden sich von den Regeln für `Random` Modus:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePut`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
-   Für ein beliebiges Array als ein Array in einer Struktur `FilePut` schreibt nur die Daten. Es wird kein Deskriptor geschrieben.  
  
-   `FilePut`schreibt Zeichenfolgen variabler Länge, die keine Elemente von Strukturen ohne Längendeskriptor 2-Byte-sind. Die Anzahl der geschriebenen Bytes entspricht die Anzahl der Zeichen in der Zeichenfolge. Die folgenden Anweisungen wird z. B. 11 Bytes Datei Zahl 1 schreiben:  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   Schreiben in eine Datei mithilfe der `FilePut` -Funktion erfordert `Write` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePut` Funktion, um Daten in eine Datei schreiben. Fünf Datensätze der Struktur `Person` in die Datei geschrieben werden.  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="RecordNumber" />&lt; 1 und ungleich-1.</exception>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Name einer gültigen Variablen, die geschriebenen Daten auf den Datenträger.</param>
        <param name="RecordNumber">Dies ist optional. Anzahl (<see langword="Random" /> Modus-Dateien) oder Byte-Zahl (<see langword="Binary" /> Modus-Dateien) an der der Schreibvorgang beginnt.</param>
        <summary>Schreibt Daten aus einer Variablen in einer Datenträgerdatei.  Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FilePutObject" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `FilePutObject` Funktion dient anstelle von `FilePut` um Mehrdeutigkeiten zum Zeitpunkt der Kompilierung zu vermeiden, wenn Typ `Object` wird z. B. anstelle eines anderen Typs übergeben `Integer`, `Long`, `Short`usw..  
  
 `FilePutObject`schreibt und liest Deskriptoren, die das Objekt zu beschreiben. Wenn Sie beabsichtigen, schreiben die `Variant` Typ `FilePutObject` ist erforderlich. Im Zweifelsfall, wenn Sie ein Objekt für den zweiten Parameter verwenden, wird empfohlen, dass Sie immer verwenden `FilePutObject` und `FileGetObject`.  
  
 `FilePutObject`gilt nur in `Random` und `Binary` Modus.  
  
 Mit `FilePutObject` geschriebene Daten werden in der Regel mit `FileGetObject` aus einer Datei gelesen.  
  
 Der erste Datensatz oder Byte in einer Datei befindet sich an Position 1, den zweiten Datensatz bzw. das Byte an Position 2 usw. ist. Wenn Sie weglassen `RecordNumber`, `FilePutObject` schreibt den nächsten Datensatz bzw. Byte nach dem letzten `FileGetObject` oder `FilePutObject` Funktion (oder den Datensatz bzw. das Byte verweist, zu dem letzten `Seek` Funktion).  
  
 Die `StringIsFixedLength` -Argument steuert, ob die Funktion Zeichenfolgen als Variable oder feste Länge interpretiert. `FilePutObject`den Längendeskriptor wird nicht geschrieben werden, wenn das Argument ist `True`. Bei Verwendung von `StringIsFixedLength`  =  `True` mit `FilePutObject`, was identisch mit `FileGetObject`, und Sie müssen auch sicherstellen, dass die Zeichenfolge mit der erwarteten Länge initialisiert wird.  
  
## <a name="random-mode"></a>Zufällige Modus  
 Für Dateien in geöffnet `Random` Modus gelten die folgenden Regeln:  
  
-   Wenn die Länge des zu schreibenden Daten kleiner als die Länge ist, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion, `FilePutObject` nachfolgende Datensätze auf Datensatzlänge schreibt. Der Abstand zwischen dem Ende eines Datensatzes und dem Beginn des nächsten Datensatzes wird mit den vorhandenen Inhalt des Dateipuffers aufgefüllt. Da die Menge der Leerstellen Daten genau ermittelt werden kann, ist es im Allgemeinen empfiehlt sich, die Datensatzlänge der Länge der zu schreibenden Daten überein. Ist die Länge des zu schreibenden Daten größer als die Länge, angegeben der `RecordLength` -Klausel der `FileOpen` -Funktion eine Ausnahme ausgelöst.  
  
-   Wenn die Zielvariable ein Objekt ist, die einen numerischen Typ enthält `FilePutObject` zwei Bytes, identifizieren den `VarType` des Objekts und schreibt dann die Variable. Enthält z. B. wenn ein Objekt zu schreiben, die eine ganze Zahl `FilePutObject` schreibt sechs Bytes: 2 Bytes, die Identifizierung des Objekts als `VarType(3)` (`Integer`) und vier Bytes, die Daten enthalten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens zwei Bytes größer als die tatsächliche Anzahl von Bytes, die zum Speichern von Variablen erforderlich sein.  
  
-   Ob die Zielvariable ein Objekt, das eine Zeichenfolge enthält `FilePutObject` schreibt eine 2-Byte-Deskriptor identifizieren die `VarType(8)` des Objekts, ein 2-Byte-Deskriptor, der angibt, der Länge der Zeichenfolge und anschließend die Zeichenfolgendaten. Die angegebene Datensatzlänge der `RecordLength` Parameter in der `FileOpen` Funktion muss mindestens vier Bytes größer als die tatsächliche Länge der Zeichenfolge sein. Wenn Sie eine Zeichenfolge ohne Deskriptor ablegen möchten, sollten Sie übergeben `True` auf die `StringIsFixedLength` Parameter, und die Zeichenfolge, die Sie einlesen, sollte die richtige Länge.  
  
-   Wenn die Zielvariable ein Array, und klicken Sie dann auf die angegebene Datensatzlänge ist die `RecordLength` -Klausel in der `FileOpen` Funktion muss größer als oder gleich der Summe aller Bytes erforderlich, um die Daten des Arrays und den Arraydeskriptor zu schreiben. Der Deskriptor gibt den Rang des Arrays, die Größe und die unteren Grenzen für jeden Rang. Seine Länge entspricht 2 plus 8 multipliziert mit der Anzahl von Dimensionen: (2 + 8 * NumberOfDimensions).  
  
## <a name="binary-mode"></a>Binärmodus  
 Für Dateien in geöffnet `Binary` Modus alle der `Random` -Modus-Regeln gelten, außer:  
  
-   Die `RecordLength` -Klausel in der `FileOpen` Funktion hat keine Auswirkungen. `FilePutObject`Schreibt alle Variablen zusammenhängend, d. h. ohne Leerraum zwischen Datensätzen Datenträger an.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FilePutObject` Funktion, um eine Zeichenfolge in eine Datei zu schreiben.  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="RecordWidth">Erforderlich. Numerischer Ausdruck im Bereich 0 – 255 einschließlich liegen, der angibt, wie viele Zeichen in einer Zeile angezeigt werden, bevor eine neue Zeile gestartet wird. Wenn <c>RecordWidth</c> gleich 0 ist, besteht keine Einschränkung auf die Länge einer Zeile. Der Standardwert für <c>RecordWidth</c> ist 0.</param>
        <summary>Legt die Breite einer Ausgabezeile in eine Datei geöffnet wird, mithilfe der <see langword="FileOpen" /> Funktion.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Dieses Beispiel verwendet die `FileWidth` Funktion, um die Ausgabezeilenbreite für eine Datei festzulegen.  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gibt eine <see langword="Integer" /> -Wert, der die nächste Datei Zahl, die zur Verwendung in der <see langword="FileOpen" /> Funktion.</summary>
        <returns>Gibt eine <see langword="Integer" /> -Wert, der die nächste Datei Zahl, die zur Verwendung in der <see langword="FileOpen" /> Funktion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwendung `FreeFile` eine Dateinummer angeben, die nicht bereits verwendet wird.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `FreeFile` Funktion, um die nächste verfügbare Zahl zurückzugeben. Für die Ausgabe innerhalb der Schleife werden fünf Dateien geöffnet, und einige Beispieldaten werden an jede geschrieben.  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Mehr als 255 Dateien werden verwendet.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Erforderlich. <see langword="String" />Ausdruck, der einen Datei-, Verzeichnis- oder Ordner Namen angibt. <c>PathName</c> kann das Verzeichnis und das Laufwerk oder Ordner handeln.</param>
        <summary>Gibt eine <see langword="FileAttribute" /> -Wert, der die Attribute einer Datei, Verzeichnis, oder eines Ordners darstellt. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="FileAttribute" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <returns>Der Rückgabewert von <see langword="GetAttr" /> ist die Summe der folgenden Enumerationswerte:  
  
 <list type="table"><item><term>Wert  
  
 </term><description>Konstanten  
  
 </description><description>Beschreibung  
  
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description>Normal.  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description>Schreibgeschützt.  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description>Ausgeblendet.  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description>Systemdatei.  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description>Verzeichnissen oder Ordnern.  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description>Datei wurde seit der letzten Sicherung geändert.  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description>Datei weist einen anderen Namen an.  
  
 </description></item></list><block subset="none" type="note"><para>  
 Diese Enumerationen werden von der Visual Basic-Sprache angegeben. Die Namen können überall im Code anstelle der eigentlichen Werte verwendet werden.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden, um zu bestimmen, welche Attribute festgelegt werden, die `And` Operator einen bitweisen Vergleich von den Rückgabewert von Durchführen der `GetAttr` -Funktion und den Wert des Attributs Einzeldatei werden sollen. Wenn das Ergebnis nicht 0 (null) ist, wird dieses Attribut für die benannte Datei festgelegt. Beispielsweise ist der Rückgabewert der folgenden `And` Ausdruck ist NULL, wenn die `Archive` -Attribut nicht festgelegt ist:  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 Ein Wert ungleich NULL wird zurückgegeben, wenn die `Archive` -Attribut festgelegt ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `GetAttr` -Funktion können Sie die Attribute einer Datei und das Verzeichnis oder die Ordner zu ermitteln.  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="Pathname" />ist ungültig oder enthält Platzhalterzeichen.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Zieldatei ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die einige Zeilen der Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Value">Erforderlich. Variable, die die Werte zugewiesen ist, die aus der Datei gelesenen – kann eine Array oder Objekt-Variable sein.</param>
        <summary>Liest Daten aus einer geöffneten sequenziellen Datei und weist die Daten zu Variablen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Input` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `Input` in der Regel in eine Datei geschrieben wird, mithilfe von `Write`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. keine Visual Basic 2005-Quelldatei.  
  
 Beim Lesen standard Zeichenfolgen- oder numerische Daten ohne Änderung Variablen zugewiesen werden. Die folgende Tabelle verdeutlicht, wie die Eingabedaten behandelt werden.  
  
|Daten|Variablen zugewiesenen Wert|  
|-|-|  
|Komma oder Leerzeile begrenzen|Empty|  
|#NULL #|`DBNull`|  
|#TRUE # "oder" #FALSE #|`True` oder `False`|  
|#`yyyy-mm-dd hh:mm:ss`#|Das Datum und/oder eine Uhrzeit, die durch den Ausdruck dargestellt wird.|  
|#ERROR`errornumber`#|`errornumber`(Variable ist ein Objekt, das als Fehler gekennzeichnet)|  
  
 Wenn das Ende der Datei wird erreicht, während Sie eines Datenelements, die Eingabe wird beendet und ein Fehler auftritt.  
  
> [!NOTE]
>  Die `Input` Funktion ist nicht lokalisiert. Z. B. wenn eingegebene 3,14159, in der deutschen Version wird nur 3 zurückgegeben, da das Komma als Trennzeichen Variablen statt als Dezimaltrennzeichen behandelt wird.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `Input` -Funktion erfordert `Read` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Input` Funktion zum Lesen von Daten aus einer Datei in zwei Variablen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Datei, die mehrere Zeilen mit Daten, die Sie mithilfe von geschrieben hat die `Write` -Funktion, jede Zeile mit einer Zeichenfolge in Anführungszeichen und eine Zahl, die durch Kommas getrennt ein, z. B.: ("Hello", 234).  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="CharCount">Erforderlich. Jeder gültige numerische Ausdruck, der die Anzahl der zu lesenden Zeichen angibt.</param>
        <summary>Gibt <see langword="String" /> -Wert enthält Zeichen aus einer Datei geöffnet, <see langword="Input" /> oder <see langword="Binary" /> Modus. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <returns>Gibt <see langword="String" /> -Wert enthält Zeichen aus einer Datei geöffnet, <see langword="Input" /> oder <see langword="Binary" /> Modus. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="InputString" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `InputString` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Mit gelesenen Daten der `InputString` Funktion ist in der Regel in eine Datei geschrieben, mit `Print` oder `FilePut`. Verwenden Sie diese Funktion nur mit geöffneten Dateien `Input` oder `Binary` Modus.  
  
 Im Gegensatz zu den `Input` -Funktion, die `InputString` Funktion gibt alle Zeichen gelesen. Dies schließt Kommas, Wagenrückläufen, Zeilenvorschüben, Anführungszeichen und führende Leerzeichen.  
  
 Dateien für geöffnet `Binary` zugreifen, beim Lesen der Datei mithilfe der `InputString` Funktion bis `EOF` gibt `True` wird ein Fehler generiert. Verwenden Sie die `LOF` und `Loc` anstelle von Funktionen `EOF` beim Lesen von Binärdateien mit `InputString`, oder verwenden Sie `FileGet` bei Verwendung der `EOF` Funktion.  
  
> [!NOTE]
>  Beim Lesen aus Dateien, nehmen Sie keine sicherheitsrelevanten Aspekten der Inhalt der Datei anhand der Dateinamenerweiterung. Eine Datei namens "Form1.vb" möglicherweise z. B. keine Visual Basic-Quelldatei.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `InputString` Funktion, um Zeichen zu einem Zeitpunkt aus einer Datei gelesen und zum Drucken der `Output` Fenster. In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <paramref name="FileNumber" /> existiert nicht.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCount" />&lt; 0 oder &gt; 214.</exception>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">Erforderlich. <see langword="String" />Ausdruck, der angibt, eine oder mehrere Dateinamen gelöscht werden soll. <c>PathName</c> kann das Verzeichnis und das Laufwerk oder Ordner handeln.</param>
        <summary>Löscht Dateien von einem Datenträger. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Kill" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Kill`unterstützt die Verwendung von mehreren Zeichen (`*`) und ein einzelnes Zeichen (`?`) mit Platzhaltern für mehrere Dateien anzugeben.  
  
 **Sicherheitshinweis** zum Ausführen der `Kill` -Funktion erfordert `Read` und `PathDiscovery` des flags <xref:System.Security.Permissions.FileIOPermission> , die den Ausführungscode gewährt werden. Weitere Informationen finden Sie unter <xref:System.Security.SecurityException> [Codezugriffsberechtigungen](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Kill` Funktion, um eine Datei von einem Datenträger zu löschen.  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Target-Dateien zu öffnen.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Target-Dateien nicht gefunden.</exception>
        <exception cref="T:System.Security.SecurityException">Berechtigung verweigert.</exception>
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <summary>Liest eine einzelne Zeile aus einer sequenziellen geöffneten Datei und weist sie einer <see langword="String" /> Variable.</summary>
        <returns>Liest eine einzelne Zeile aus einer sequenziellen geöffneten Datei und weist sie einer <see langword="String" /> Variable.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LineInput` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Datenlesevorgänge mit `LineInput` in der Regel in eine Datei geschrieben wird, mithilfe von `Print`.  
  
> [!IMPORTANT]
>  Beim Lesen aus Dateien nicht Beurteilen der Inhalt einer Datei, die anhand der Dateinamenerweiterung. Eine Datei mit dem Namen "Form1.vb" möglicherweise z. B. nicht über ein Visual Basic-Quelldatei.  
  
 Die `LineInput` Funktion liest Zeichen aus einer Datei eine schrittweise, bis er erkennt, dass einen Wagenrücklauf (`Chr(13)`) oder Wagenrücklauf/Zeilenvorschub (`Chr(13) + Chr(10)`) Sequenz. Carriage Return/Line feed Sequenzen werden übersprungen und nicht auf die Zeichenfolge angefügt.  
  
> [!IMPORTANT]
>  Lesen aus einer Datei mithilfe der `LineInput` -Funktion erfordert `Read` aus Zugriff auf die <xref:System.Security.Permissions.FileIOPermissionAccess> Enumeration.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LineInput` Funktion, um eine Zeile aus einer sequenziellen Datei gelesen und einer Variablen zuweisen. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">Ende der Datei erreicht.</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="FileNumber" /> existiert nicht.</exception>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Jeder gültige <see langword="Integer" /> Dateinummer.</param>
        <summary>Gibt eine <see langword="Long" /> Wert, der die aktuelle Lese-/Schreibposition in einer geöffneten Datei angibt.</summary>
        <returns>Gibt eine <see langword="Long" /> Wert, der die aktuelle Lese-/Schreibposition in einer geöffneten Datei angibt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Loc` Funktion ist nullbasiert; verwenden, um das erste Byte in einer Datei abrufen, wird 0 zurückgegeben.  
  
 Die `Loc` Funktion wird für Abwärtskompatibilität angeboten und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Nachfolgend wird den Rückgabewert für jede Dateizugriffsmodus beschrieben:  
  
|Modus|Rückgabewert|  
|-|-|  
|`Random`|Die Nummer des letzten Datensatzes lesen oder in die Datei geschrieben.|  
|`Sequential`|Aktuelle Byteposition in der Datei, geteilt durch 128. Zurückgegebene Informationen werden jedoch von `Loc` für sequenzielle Dateien ist weder verwendet noch benötigt.|  
|`Binary`|Die Position des letzten Bytes gelesen bzw. geschrieben werden.|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Loc` Funktion, um die aktuelle Lese-/Schreibposition in einer geöffneten Datei zurückzugeben. In diesem Beispiel wird vorausgesetzt, dass `MyFile` ist eine Textdatei, die mehrere mit Beispieldaten Zeilen.  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Record">Dies ist optional. Anzahl der einzige Datensatz oder ein Byte, Sperren oder Entsperren</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="FromRecord">Dies ist optional. Anzahl der erste Datensatz oder das Byte, Sperren oder entsperren.</param>
        <param name="ToRecord">Dies ist optional. Anzahl der letzten Datensatz oder zu sperren oder Entsperren Byte.</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine <see langword="Integer" /> , die eine gültige Zahl enthält.</param>
        <summary>Gibt eine <see langword="Long" /> mit geöffnet, die die Größe in Bytes, der eine Datei darstellt. die <see langword="FileOpen" /> Funktion. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <returns>Gibt eine <see langword="Long" /> mit geöffnet, die die Größe in Bytes, der eine Datei darstellt. die <see langword="FileOpen" /> Funktion. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="LOF" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Verwenden der `FileLen` Funktion, um die Länge einer Datei zu erhalten, die nicht geöffnet ist.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LOF` -Funktion können Sie die Größe einer geöffneten Datei zu ermitteln. In diesem Beispiel wird vorausgesetzt, dass `TestFile` ist eine Textdatei, die Beispieldaten enthält.  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">Erforderlich. <see langword="String" />Ausdruck, der die zu erstellende Verzeichnis identifiziert. Die <c>Pfad</c> kann das Laufwerk enthalten. Wenn kein Laufwerk angegeben wird, <see langword="MkDir" /> erstellt das neue Verzeichnis auf das aktuelle Laufwerk.</param>
        <summary>Erstellt ein neues Verzeichnis. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="MkDir" />. Weitere Informationen finden Sie unter <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion wird ein neues Verzeichnis erstellt.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `MkDir` Funktion zum Erstellen eines Verzeichnisses. Wenn das Laufwerk nicht angegeben wird, wird das neue Verzeichnis auf das aktuelle Laufwerk erstellt.  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Path" />ist nicht angegeben oder ist leer.</exception>
        <exception cref="T:System.Security.SecurityException">Berechtigung verweigert.</exception>
        <exception cref="T:System.IO.IOException">Verzeichnis ist bereits vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Output">Optional. 0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.  
  
 Die <c>Ausgabe</c> argumenteinstellungen sind:  
  
 <see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.  
  
 <see langword="T:System.IO.IOException" />: <c>Dateinummer</c> ist nicht vorhanden.</param>
        <summary>Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Print` und `PrintLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 `Print`Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings `PrintLine` umfasst einen Zeilenvorschub.  
  
 Mit geschriebenen Daten `Print` in der Regel aus einer Datei lesen, mit `LineInput` oder `Input`.  
  
 Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; für `Print`, nichts wird ausgegeben. Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden so ausgerichtet, Registerkarte Grenzen, sondern mischen Kommas und `TAB` kann zu inkonsistente Ergebnissen führen.  
  
 Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird. Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.  
  
 Datumsdaten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat, die vom System erkannt wird. Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.  
  
 Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer. Jedoch wenn `Output` Listendaten ist `DBNull`, `Null` in die Datei geschrieben wird.  
  
 Für `Error` Daten, die Ausgabe angezeigt wird, als `Error errorcode`. Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.  
  
 Alle Daten, die in die Datei geschrieben wird, mit `Print` ist Dezimaltrennzeichen; d. h. die Daten ist richtig formatiert mit entsprechenden Dezimaltrennzeichen. Wenn der Benutzer möchte Ausgabedaten für die Verwendung in mehreren Gebietsschemas `Write` verwendet werden soll.  
  
 Schreiben in eine Datei mithilfe der `Print` oder `PrintLine` Funktionen erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen, um Daten in eine Datei schreiben.  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Output">Optional. 0 (null) oder mehrere durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.  
  
 Die <c>Ausgabe</c> argumenteinstellungen sind:  
  
 <see langword="T:System.IO.IOException" />: Dateimodus ist ungültig.  
  
 <see langword="T:System.IO.IOException" />: <c>Dateinummer</c> ist nicht vorhanden.</param>
        <summary>Schreibt für die Anzeige formatierte Daten in eine sequenzielle Datei.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Print` und `PrintLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 `Print`Schließt einen Zeilenvorschub am Ende einer Zeile nicht; allerdings`PrintLine` umfasst einen Zeilenvorschub.  
  
 Mit geschriebenen Daten `Print` in der Regel aus einer Datei lesen, mit `LineInput` oder `Input`.  
  
 Wenn Sie weglassen `Output` für `PrintLine`, eine leere Zeile wird ausgegeben, in der Datei; für `Print`, nichts wird ausgegeben. Mehrere Ausdrücke, die durch ein Komma voneinander getrennt werden so ausgerichtet, Registerkarte Grenzen, sondern mischen Kommas und `TAB` kann zu inkonsistente Ergebnissen führen.  
  
 Für `Boolean` Daten, entweder `True` oder `False` gedruckt wird. Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.  
  
 Datumsdaten werden in die Datei geschrieben, mit das standardmäßige kurze Datumsformat vom System erkannt. Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.  
  
 Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer. Jedoch wenn `Output` Listendaten ist `DBNull`, `Null` in die Datei geschrieben wird.  
  
 Für `Error` Daten, die Ausgabe angezeigt wird, als `Error errorcode`. Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.  
  
 Alle Daten, die in die Datei geschrieben wird, mit `Print` ist Dezimaltrennzeichen; d. h. die Daten ist richtig formatiert mit entsprechenden Dezimaltrennzeichen. Wenn der Benutzer möchte Ausgabedaten für die Verwendung in mehreren Gebietsschemas `Write` verwendet werden soll.  
  
 Schreiben in eine Datei mithilfe der `Print` oder `PrintLine` Funktionen erfordert `Write` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Print` und `PrintLine` Funktionen, um Daten in eine Datei schreiben.  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">Erforderlich. <see langword="String" />Ein Ausdruck, der den Dateinamen der vorhandenen und den Speicherort angibt. <c>OldPath</c> kann das Verzeichnis und das Laufwerk der Datei enthalten.</param>
        <param name="NewPath">Erforderlich. <see langword="String" />Ein Ausdruck, der den neuen Dateinamen und den Speicherort angibt. <c>NewPath</c> Verzeichnis und das Laufwerk des Zielspeicherorts enthalten kann. Indem der angegebene Dateiname <c>NewPath</c> nicht bereits vorhanden sein.</param>
        <summary>Benennt eine Datenträgerdatei oder ein Verzeichnis an. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Rename" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die`Rename` Funktion benennt eine Datei und in ein anderes Verzeichnis verschoben, wenn es erforderlich ist. Die `Rename` Funktion kann eine Datei auf Laufwerken verschoben, aber es kann nur ein vorhandenes Verzeichnis umbenennen Wenn beide `NewPath` und `OldPath` auf dem gleichen Laufwerk befinden. `Rename`eine neue Datei oder ein Verzeichnis kann nicht erstellt werden.  
  
 Mithilfe der `Rename` Funktion in einer geöffneten Datei erzeugt einen Fehler. Sie müssen eine geöffnete Datei schließen, bevor Sie es umbenennen. `Rename`Argumente können nicht mehrere Zeichen (*) und Platzhalter für einzelne Zeichen (?) enthalten.  
  
> [!IMPORTANT]
>  Bei Verwendung `Rename` um eine Datei aus einem ungeschützten Speicherort auf einem geschützten Speicherort zu kopieren, die Datei behält die weniger eingeschränkten Berechtigungen. Stellen Sie sicher, dass Sie nicht über ein mögliches Sicherheitsrisiko entstehen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Rename` Funktion zum Umbenennen einer Datei. Für den Rahmen dieses Beispiels wird davon ausgegangen Sie, dass die Verzeichnisse, die bereits vorhanden sind.  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Der Pfad ist ungültig.</exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <paramref name="OldPath" />Datei ist nicht vorhanden.</exception>
        <exception cref="T:System.IO.IOException">Auf verschiedenen Geräten kann nicht umbenannt werden.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Alle Datenträger mit geöffnete Dateien geschlossen wird, wird die <see langword="FileOpen" /> Funktion. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Reset" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Reset` -Funktion schließt alle aktive Dateien geöffnet, indem die `FileOpen` Funktion, und hat die gleiche Funktion wie `FileClose()` ohne Parameter.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Reset` Funktion, um alle geöffneten Dateien geschlossen und der Inhalt aller Dateipuffer auf dem Datenträger festgeschrieben. Beachten Sie die Verwendung der `Object` Variable `FileNumber` als eine Zeichenfolge und eine Zahl.  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">Erforderlich. <see langword="String" />Ausdruck, der das Verzeichnis oder einen Ordner zu entfernenden identifiziert. <c>Pfad</c> kann das Laufwerk enthalten. Wenn kein Laufwerk angegeben wird, <see langword="RmDir" /> das Verzeichnis auf das aktuelle Laufwerk entfernt.</param>
        <summary>Entfernt ein vorhandenes Verzeichnis an. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="RmDir" />. Weitere Informationen finden Sie unter <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Fehler auftritt, wenn Sie versuchen, `RmDir` in einem Verzeichnis, das Dateien enthält. Verwenden der `Kill` Funktion, um alle Dateien zu löschen, bevor Sie versuchen, ein Verzeichnis zu entfernen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `RmDir` Funktion, um ein vorhandenes Verzeichnis zu entfernen.  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Path" />ist nicht angegeben oder ist leer.</exception>
        <exception cref="T:System.IO.IOException">Zielverzeichnis enthält Dateien.</exception>
        <exception cref="T:System.IO.FileNotFoundException">Verzeichnis ist nicht vorhanden.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine <see langword="Integer" /> , die eine gültige Zahl enthält.</param>
        <summary>Gibt eine <see langword="Long" /> angeben der aktuellen Lese-/Schreibposition in einer Datei geöffnet, mit der <see langword="FileOpen" /> -Funktion, oder legt die Position für den nächsten Vorgang für den Lese-/Schreibzugriff in eine Datei geöffnet wird, mithilfe der <see langword="FileOpen" /> Funktion. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <returns>Gibt eine <see langword="Long" /> angeben der aktuellen Lese-/Schreibposition in einer Datei geöffnet, mit der <see langword="FileOpen" /> -Funktion, oder legt die Position für den nächsten Vorgang für den Lese-/Schreibzugriff in eine Datei geöffnet wird, mithilfe der <see langword="FileOpen" /> Funktion.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Seek`Gibt einen Wert zwischen 1 und 2.147.483.647 (entspricht 2 ^ 31-1), inklusive.  
  
 Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:  
  
|Modus|Rückgabewert|  
|-|-|  
|`Random`|Nummer des nächsten Datensatzes gelesen bzw. geschrieben werden|  
|`Binary`, `Input`, `Output`, `Append`|Die Byteposition mit der nächste Vorgang auftritt. Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw. ist.|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Seek` Funktion, um die aktuelle Dateiposition zurückzugeben. Das Beispiel setzt voraus `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt die Byteposition mit der nächste Vorgang auftritt. Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 Dieses Beispiel verwendet die `Seek` Funktion, positionieren Sie die für den nächsten Lese- oder Schreibvorgang in einer Datei.  
  
 Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` legt die Byteposition mit der nächste Vorgang auftritt. Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine <see langword="Integer" /> , die eine gültige Zahl enthält.</param>
        <param name="Position">Erforderlich. Eine Zahl im Bereich von 1 bis 2.147.483.647 liegen, der angibt, in dem die nächste Lese-/Schreibzugriff Vorgang erfolgen soll.</param>
        <summary>Gibt eine <see langword="Long" /> angeben der aktuellen Lese-/Schreibposition in einer Datei geöffnet, mit der <see langword="FileOpen" /> -Funktion, oder legt die Position für den nächsten Vorgang für den Lese-/Schreibzugriff in eine Datei geöffnet wird, mithilfe der <see langword="FileOpen" /> Funktion. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="Seek" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Seek`Gibt einen Wert zwischen 1 und 2.147.483.647 (entspricht 2 ^ 31-1), inklusive.  
  
 Im folgenden werden die Rückgabewerte für jede Dateizugriffsmodus beschrieben:  
  
|Modus|Rückgabewert|  
|-|-|  
|`Random`|Nummer des nächsten Datensatzes gelesen bzw. geschrieben werden|  
|`Binary`, `Input`, `Output`, `Append`|Die Byteposition mit der nächste Vorgang auftritt. Das erste Byte in einer Datei befindet sich an Position 1, das zweite Byte an Position 2 usw. ist.|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Seek` Funktion, um die aktuelle Dateiposition zurückzugeben. Das Beispiel setzt voraus `TestFile` ist eine Datei, die Datensätze der Struktur enthält `Record`.  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 Für Dateien in geöffnet `Random` Modus `Seek` gibt die Anzahl des nächsten Datensatzes zurück.  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` gibt die Byteposition mit der nächste Vorgang auftritt. Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 Dieses Beispiel verwendet die `Seek` Funktion, positionieren Sie die für den nächsten Lese- oder Schreibvorgang in einer Datei.  
  
 Für Dateien, die nicht in den Modi geöffnet `Random` Modus `Seek` legt die Byteposition mit der nächste Vorgang auftritt. Angenommen `TestFile` ist eine Datei, die mehrere Textzeilen enthält.  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">Erforderlich. <see langword="String" />Ein Ausdruck, der einen Dateinamen angibt. <c>PathName</c> zählen Verzeichnissen oder Ordnern, und das Laufwerk.</param>
        <param name="Attributes">Erforderlich. Konstanten oder numerische Ausdruck, gibt an, deren Summe, Dateiattribute.</param>
        <summary>Legt die attribute für eine Datei. Das <see langword="My" />-Feature bietet höhere Produktivität und Leistung bei Datei-E/A-Vorgängen als <see langword="SetAttr" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ein Laufzeitfehler tritt auf, wenn Sie versuchen, die Attribute einer geöffneten Datei festzulegen.  
  
 Die `Attributes` Argument Enumerationswerte sind wie folgt:  
  
|Wert|Konstante|Beschreibung|  
|-|-|-|  
|`Normal`|`vbNormal`|Normal (Standard).|  
|`ReadOnly`|`vbReadOnly`|Schreibgeschützt.|  
|`Hidden`|`vbHidden`|Ausgeblendet.|  
|`System`|`vbSystem`|Systemdatei.|  
|`Volume`|`vbVolume`|Volumebezeichnung|  
|`Directory`|`vbDirectory`|Verzeichnissen oder Ordnern.|  
|`Archive`|`vbArchive`|Datei wurde seit der letzten Sicherung geändert.|  
|`Alias`|`vbAlias`|Datei weist einen anderen Namen an.|  
  
> [!NOTE]
>  Diese Enumerationen werden von der Visual Basic-Sprache angegeben. Die Namen können überall im Code anstelle der eigentlichen Werte verwendet werden.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SetAttr` Funktion, um Attribute für eine Datei festzulegen.  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Attribute" />Typ ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">Erforderlich. Die Anzahl der Leerzeichen vor dem anzeigen oder Drucken des nächsten Ausdrucks in einer Liste eingefügt werden soll.</param>
        <summary>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktion, um die Ausgabe zu positionieren.</summary>
        <returns>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktion, um die Ausgabe zu positionieren.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Count` ist kleiner als die Breite der Ausgabezeile, sofort der nächste drucken Position die Anzahl von Leerzeichen gedruckter folgt. Wenn`Count` ist größer als die Breite einer Ausgabezeile `SPC` wird die nächste drucken Position anhand der Formel berechnet:  
  
 `currentprintposition`(+(`Count``Mod``width`))  
  
 Beispielsweise ist die aktuelle Position 24, die Breite der Ausgabe beträgt 80, und geben Sie `SPC(90)`, beginnt die nächste Ausgabe an Position 34 (aktuelle drucken Position + die restliche 90/80). Wenn unterscheiden sich die aktuelle Position und die Breite der Ausgabe ist kleiner als `Count` (oder `Count` `Mod` *Breite*), wird die `SPC` Funktion am Anfang der nächsten Zeile übersprungen und generiert Leerzeichen gleich `Count` – (*Breite* – *aktuelleAusgabeposition*).  
  
> [!NOTE]
>  Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben zu ermöglichen.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `SPC` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktionen zum Positionieren der Ausgabe.</summary>
        <returns>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktionen zum Positionieren der Ausgabe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die aktuelle drucken Position in der aktuellen Zeile überschreitet `Column`, `TAB` springt zu der Spaltenwert gleich `Column` in der nächsten Ausgabezeile. Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Position in Spalte 1. Wenn `Column` ist größer als die Breite einer Ausgabezeile `TAB` wird die nächste drucken Position anhand der Formel berechnet:  
  
 Mod Spaltenbreite  
  
 Z. B. wenn *Breite* beträgt 80, und geben Sie `TAB(90)`, beginnt die nächste Ausgabe in Spalte 10 (der Rest von 90/80). Wenn `Column` ist kleiner als die aktuelle Position drucken, beginnt die Ausgabe in der nächsten Zeile an der berechneten. Wenn die berechnete Position größer als die aktuelle Position ist, Drucken beginnt die Ausgabe an den berechneten Position in der gleichen Zeile.  
  
 Die am weitesten links stehende Position in einer Ausgabezeile ist immer 1. Bei Verwendung der `Print` oder `PrintLine` Funktionen zum Drucken auf Dateien, die äußersten rechten Position ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.  
  
 Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion. Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben enthalten.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `TAB` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">Dies ist optional. Die Nummer der Spalte, die vor dem anzeigen oder Drucken des nächsten Ausdrucks in einer Liste in verschoben werden. Wenn nicht angegeben, <see langword="TAB" /> verschiebt die Einfügemarke am Anfang des nächsten Ausgabebereichs.</param>
        <summary>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktionen zum Positionieren der Ausgabe.</summary>
        <returns>Verwendet die <see langword="Print" /> oder <see langword="PrintLine" /> Funktionen zum Positionieren der Ausgabe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die aktuelle drucken Position in der aktuellen Zeile größer ist `Column`, `TAB` springt zu der Spaltenwert gleich `Column` in der nächsten Ausgabezeile. Wenn `Column` ist kleiner als 1, `TAB` verschiebt die Position in Spalte 1. Wenn `Column` ist größer als die Breite einer Ausgabezeile `TAB` wird die nächste drucken Position anhand der Formel berechnet:  
  
 Mod Spaltenbreite  
  
 Z. B. wenn *Breite* beträgt 80, und geben Sie `TAB(90)`, beginnt die nächste Ausgabe in Spalte 10 (der Rest von 90/80). Wenn `Column` ist kleiner als die aktuelle Position drucken, beginnt die Ausgabe in der nächsten Zeile an der berechneten. Ist die berechnete Position größer als die aktuelle Position, Drucken beginnt die Ausgabe an den berechneten Position in der gleichen Zeile ein.  
  
 Die am weitesten links stehende Position in einer Ausgabezeile ist immer 1. Bei Verwendung der `Print` oder `PrintLine` Funktionen zum Drucken auf Dateien, die äußersten rechten Position ist die aktuelle Breite der Ausgabedatei, die Sie festlegen können, mit der `FileWidth` Funktion.  
  
 Die `TAB` Funktion kann auch verwendet werden, mit der `WriteLine` Funktion. Es kann nicht verwendet werden, mit <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> oder <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Stellen Sie sicher, dass die tabellarischen Spalten breit genug, um die Breite Buchstaben enthalten.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `TAB` Funktion zum Positionieren der Ausgabe in eine Datei und die **Ausgabe** Fenster.  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="Record">Dies ist optional. Anzahl der einzige Datensatz oder ein Byte, Sperren oder Entsperren</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Eine beliebige gültige Dateinummer.</param>
        <param name="FromRecord">Dies ist optional. Anzahl der erste Datensatz oder das Byte, Sperren oder entsperren.</param>
        <param name="ToRecord">Dies ist optional. Anzahl der letzten Datensatz oder zu sperren oder Entsperren Byte.</param>
        <summary>Steuert den Zugriff durch andere Prozesse auf das gesamte oder einen Teil einer Datei geöffnet wird, mithilfe der <see langword="Open" /> Funktion. Die <see langword="My" /> Funktion bietet Ihnen eine bessere Leistung und Produktivität bei Datei-e/a-Vorgängen als <see langword="Lock" /> und <see langword="Unlock" />. Weitere Informationen finden Sie unter <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Lock` und `Unlock` Funktionen in Umgebungen verwendet werden, in denen mehrere Prozesse benötigen möglicherweise Zugriff auf die gleiche Datei.  
  
 `Lock`und `Unlock` Funktionen werden immer paarweise verwendet. Die Argumente für `Lock` und `Unlock` müssen identisch sein.  
  
 Wenn `Record`, oder `FromRecord` und `ToRecord` sind nicht angegeben wird, wird die Sperre für die gesamte Datei sein. Wenn `Record` allein entspricht der einzelne Datensatz gesperrt/entsperrt werden.  
  
 Wenn die Datei, für die sequenzielle Eingabe oder Ausgabe geöffnet wurde, `Lock` und `Unlock` Auswirkungen auf die gesamte Datei und unabhängig vom angegebenen Bereich `FromRecord` und`ToRecord`.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `Lock` und `Unlock` Funktionen. In diesem Beispiel wird vorausgesetzt, dass `People.txt` ist eine Datei, die Datensätze der Struktur enthält `Person`.  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</param>
        <param name="Output">Optional. Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</param>
        <summary>Schreibt Daten in eine sequenzielle Datei. Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Write` und `WriteLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Wenn Sie weglassen `Output`, eine leere Zeile in die Datei ausgegeben. Mehrere Ausdrücke können durch ein Komma getrennt werden.  
  
 Im Gegensatz zu den `Print` -Funktion, die `Write` -Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen ein, wie sie in die Datei geschrieben werden. Sie müssen keinen explizite Trennzeichen in der Liste zu platzieren. Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Date, Null, und `Error` Datenformate werden unterstützt. Die folgenden universellen Annahmen werden befolgt werden, damit die Daten immer lesen können, und unter Verwendung ordnungsgemäß interpretiert `Input`unabhängig vom Gebietsschema:  
  
-   Numerische Daten werden immer geschrieben mithilfe des Punkts als dezimales Trennzeichen.  
  
-   Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird. Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.  
  
-   Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben. Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.  
  
-   Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer. Beachten Sie jedoch bei null-Daten `#NULL#` geschrieben wird.  
  
-   Für `Error` Daten, die Ausgabe angezeigt wird, als `#ERROR errorcode#`. Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.  
  
 `WriteLine`Fügt ein neue Zeilenumbruchzeichen (d. h. eine Carriage Return/Line feed, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.  
  
 Sie können die Anführungszeichen in einer Zeichenfolge einbetten, durch die Verwendung doppelter Anführungszeichen oder "". Beispiel:  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.  
  
 Schreiben in eine Datei mithilfe der `Write` oder `WriteLine` Funktionen erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Write` Funktion, um Rohdaten in eine sequenzielle Datei schreiben.  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">Dateimodus ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">Erforderlich. Ein <see langword="Integer" />-Ausdruck, der eine beliebige gültige Dateinummer enthält.</param>
        <param name="Output">Optional. Ein Ausdruck oder mehrere, durch Trennzeichen getrennte Ausdrücke, die in eine Datei geschrieben werden sollen.</param>
        <summary>Schreibt Daten in eine sequenzielle Datei. Mit <see langword="Write" /> geschriebene Daten werden in der Regel mit <see langword="Input" /> aus einer Datei gelesen.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Write` und `WriteLine` Funktionen für Abwärtskompatibilität angeboten werden und die Leistung beeinträchtigen. Für nicht-Legacyanwendungen der `My.Computer.FileSystem` Objekt bietet eine bessere Leistung. Weitere Informationen finden Sie unter [Dateizugriff mit Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).  
  
 Wenn Sie weglassen `Output`, eine leere Zeile in die Datei ausgegeben. Mehrere Ausdrücke können durch ein Komma getrennt werden.  
  
 Im Gegensatz zu den `Print` -Funktion, die `Write` -Funktion fügt Kommas zwischen Elementen und Zeichenfolgen in Anführungszeichen ein, wie sie in die Datei geschrieben werden. Sie müssen keinen explizite Trennzeichen in der Liste zu platzieren. Wenn `Write` wird verwendet, um das Schreiben von Daten in eine Datei, die nur numerische `Boolean`, Date, Null, und `Error` Datenformate werden unterstützt. Die folgenden universellen Annahmen werden befolgt werden, damit die Daten immer lesen können, und unter Verwendung ordnungsgemäß interpretiert `Input`unabhängig vom Gebietsschema:  
  
-   Numerische Daten werden immer geschrieben mithilfe des Punkts als dezimales Trennzeichen.  
  
-   Für `Boolean` Daten, entweder `#TRUE#` oder `#FALSE#` gedruckt wird. Die `True` und `False` Schlüsselwörter sind unabhängig vom Gebietsschema nicht übersetzt.  
  
-   Datumsdaten werden in die Datei unter Verwendung des universellen Datumsformat geschrieben. Wenn das Datum oder die Zeitkomponente fehlen oder gleich NULL, so wird nur der Teil werden in die Datei geschrieben.  
  
-   Nichts in die Datei geschrieben wird, wenn `Output` Daten ist leer. Beachten Sie jedoch bei null-Daten `#NULL#` geschrieben wird.  
  
-   Für `Error` Daten, die Ausgabe angezeigt wird, als `#ERROR errorcode#`. Die `Error` Schlüsselwort wird unabhängig vom Gebietsschema nicht übersetzt.  
  
 `WriteLine`Fügt ein neue Zeilenumbruchzeichen (d. h. eine Carriage Return/Line feed, oder `Chr(13) + Chr(10)`), nachdem das letzte Zeichen im geschrieben wurde `Output` in die Datei.  
  
 Sie können die Anführungszeichen in einer Zeichenfolge einbetten, durch die Verwendung doppelter Anführungszeichen oder "". Beispiel:  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 Gibt eine Zeichenfolge mit dem Wert des `Double quotation marks aren't "difficult" to handle`.  
  
 Schreiben in eine Datei mithilfe der `Write` oder `WriteLine` Funktionen erfordert `Append` aus Zugriff auf die `FileIOPermissionAccess` Enumeration. Weitere Informationen finden Sie unter <xref:System.Security.Permissions.FileIOPermissionAccess>.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Write` Funktion, um Rohdaten in eine sequenzielle Datei schreiben.  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
