<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Die <see langword="Strings" /> Modul enthält Prozeduren zum Zeichenfolgenvorgängen.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dieses Modul unterstützt die Visual Basic-Schlüsselwörter und Laufzeit-Bibliothekscode-Elemente, die Zeichenfolgen bearbeiten.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Jeder gültige <see langword="Char" /> oder <see langword="String" /> Ausdruck. Wenn <c>Zeichenfolge</c> ist eine <see langword="String" /> Ausdruck nur das erste Zeichen der Zeichenfolge für die Eingabe verwendet wird. Wenn <c>Zeichenfolge</c> ist <see langword="Nothing" /> oder keine Zeichen enthält, ein <see cref="T:System.ArgumentException" /> Fehler auftritt.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen. Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.  
  
 `AscW`Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Jeder gültige <see langword="Char" /> oder <see langword="String" /> Ausdruck. Wenn <c>Zeichenfolge</c> ist eine <see langword="String" /> Ausdruck nur das erste Zeichen der Zeichenfolge für die Eingabe verwendet wird. Wenn <c>Zeichenfolge</c> ist <see langword="Nothing" /> oder keine Zeichen enthält, ein <see cref="T:System.ArgumentException" /> Fehler auftritt.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen. Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.  
  
 `AscW`Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Jeder gültige <see langword="Char" /> oder <see langword="String" /> Ausdruck. Wenn <c>Zeichenfolge</c> ist eine <see langword="String" /> Ausdruck nur das erste Zeichen der Zeichenfolge für die Eingabe verwendet wird. Wenn <c>Zeichenfolge</c> ist <see langword="Nothing" /> oder keine Zeichen enthält, ein <see cref="T:System.ArgumentException" /> Fehler auftritt.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen. Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.  
  
 `AscW`Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Erforderlich. Jeder gültige <see langword="Char" /> oder <see langword="String" /> Ausdruck. Wenn <c>Zeichenfolge</c> ist eine <see langword="String" /> Ausdruck nur das erste Zeichen der Zeichenfolge für die Eingabe verwendet wird. Wenn <c>Zeichenfolge</c> ist <see langword="Nothing" /> oder keine Zeichen enthält, ein <see cref="T:System.ArgumentException" /> Fehler auftritt.</param>
        <summary>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</summary>
        <returns>Gibt einen <see langword="Integer" />-Wert zurück, der den Zeichencode darstellt, der einem Zeichen entspricht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc`Gibt die *Codepunkt*, oder der Zeichencode für das eingegebene Zeichen. Dies kann 0 bis 255 für Single-Byte-Zeichen festlegen (SBCS) Werten und zwischen-32768 und 32767 für Doppelbyte-Zeichensatz (Character Set, DBCS) Werte sein.  
  
 `AscW`Gibt den Unicode-Codepunkt für das eingegebene Zeichen zurück. Dies kann 0 bis 65535 sein. Der zurückgegebene Wert ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread.  
  
> [!NOTE]
>  Die `AscB` -Funktion aus früheren Versionen von Visual Basic gibt einen Code für ein Byte, statt ein Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `AscB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Asc` Funktion zurückzugebende `Integer` Zeichencodes für den ersten Buchstaben in jeder Zeichenfolge entspricht.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Erforderlich. Ein <see langword="Integer" /> Ausdruck darstellt. die <c>Codepunkt</c>, oder Zeichencode für das Zeichen an.</param>
        <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
        <returns>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akzeptierte asymmetrische Bereich für `CharCode` kompensiert die Speicherunterschiede zwischen den `Short` und `Integer`. Z. B.-29183 ein `Short` 36353 ist jedoch ein `Integer`. Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.  
  
 `Chr`verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird. Klicken Sie dann dauert `CharCode` als Codepunkt in die entsprechende Gruppe. Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft von der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace. Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`nimmt `CharCode` als Unicode-Codepunkt. Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread. Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.  
  
 Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes. Beispielsweise `Chr(10)` gibt ein Zeilenvorschubzeichen.  
  
> [!NOTE]
>  Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" />&lt; 0 oder &gt; 255 für <see langword="Chr" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Erforderlich. Ein <see langword="Integer" /> Ausdruck darstellt. die <c>Codepunkt</c>, oder Zeichencode für das Zeichen an.</param>
        <summary>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</summary>
        <returns>Gibt das dem angegebenen Zeichencode zugeordnete Zeichen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Akzeptierte asymmetrische Bereich für `CharCode` kompensiert die Speicherunterschiede zwischen den `Short` und `Integer`. Z. B.-29183 ein `Short` 36353 ist jedoch ein `Integer`. Dies vereinfacht auch die Kompatibilität mit Visual Basic 6.0.  
  
 `Chr`verwendet die <xref:System.Text.Encoding> -Klasse in der <xref:System.Text?displayProperty=nameWithType> festlegen (DBCS) Namespaces zu bestimmen, ob der aktuelle Thread ein Einzelbyte-Zeichensatz (SBCS) oder Double-Byte-Zeichen verwendet wird. Klicken Sie dann dauert `CharCode` als Codepunkt in die entsprechende Gruppe. Der Bereich kann zwischen 0 und 255 Zeichen SBCS- und zwischen-32768 und 65535 für DBCS-Zeichen sein.  
  
 Der zurückgegebene Wert hängt von der Codepage für den aktuellen Thread, der in enthalten ist das <xref:System.Globalization.TextInfo.ANSICodePage%2A> Eigenschaft von der <xref:System.Globalization.TextInfo> -Klasse in der <xref:System.Globalization> Namespace. Sie erhalten <xref:System.Globalization.TextInfo.ANSICodePage%2A> durch Angabe `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW`nimmt `CharCode` als Unicode-Codepunkt. Der Bereich ist unabhängig von der Kultur und Code seiteneinstellungen für den aktuellen Thread. Werte zwischen-32768 und-1 werden behandelt als Werte im Bereich zwischen + 32768 und + 65535.  
  
 Zahlen von 0 bis 31 entsprechen standard nicht druckbaren ASCII-Codes. Beispielsweise `Chr(10)` gibt ein Zeilenvorschubzeichen.  
  
> [!NOTE]
>  Die `ChrB` -Funktion in früheren Versionen von Visual Basic gibt ein einzelnes Byte zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Zeichenfolgen in Visual Basic und .NET Framework werden in Unicode und `ChrB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Im folgenden Beispiel wird die `Chr` Funktion, um das dem angegebenen Zeichencode zugeordnete Zeichen zurück.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" />&lt; -32768 oder &gt; 65535 für <see langword="ChrW" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. Eindimensionales Array von Zeichenfolgen, die gesucht werden soll.</param>
        <param name="Match">Erforderlich. Zu suchende Zeichenfolge.</param>
        <param name="Include">Dies ist optional. <see langword="Boolean" />Wert, der angibt, ob die Teilzeichenfolgen zurückzugeben, die ein- oder ausschließen <c>Übereinstimmung</c>. Wenn <c>Include</c> ist <see langword="True" />, <see langword="Filter" /> Funktion gibt den Teil des Arrays, das enthält <c>Übereinstimmung</c> als Teilzeichenfolge. Wenn <c>Include</c> ist <see langword="False" />, <see langword="Filter" /> Funktion gibt den Teil des Arrays, die keine enthält <c>Übereinstimmung</c> als Teilzeichenfolge.</param>
        <param name="Compare">Dies ist optional. Der numerische Wert, der angibt, der Art des Zeichenfolgenvergleichs an verwenden. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
        <returns>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Übereinstimmungen von `Match` befinden sich in `Source`die `Filter` Funktion ein leeres Array zurück. Ein Fehler tritt auf, wenn `Source` festgelegt ist, um `Nothing` oder ist kein eindimensionales Array.  
  
 Das zurückgegebene Array die `Filter` Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|Konstante|Beschreibung|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|  
|`CompareMethod.Text`|Führt einen Vergleich aus Text|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" />ist <see langword="Nothing" /> oder ist kein eindimensionales Array.</exception>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. Eindimensionales Array von Zeichenfolgen, die gesucht werden soll.</param>
        <param name="Match">Erforderlich. Zu suchende Zeichenfolge.</param>
        <param name="Include">Dies ist optional. <see langword="Boolean" />Wert, der angibt, ob die Teilzeichenfolgen zurückzugeben, die ein- oder ausschließen <c>Übereinstimmung</c>. Wenn <c>Include</c> ist <see langword="True" />, <see langword="Filter" /> Funktion gibt den Teil des Arrays, das enthält <c>Übereinstimmung</c> als Teilzeichenfolge. Wenn <c>Include</c> ist <see langword="False" />, <see langword="Filter" /> Funktion gibt den Teil des Arrays, die keine enthält <c>Übereinstimmung</c> als Teilzeichenfolge.</param>
        <param name="Compare">Dies ist optional. Der numerische Wert, der angibt, der Art des Zeichenfolgenvergleichs an verwenden. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</summary>
        <returns>Gibt ein nullbasiertes Array zurück, das einen Teilbereich eines <see langword="String" />-Arrays auf der Basis angegebener Filterkriterien enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn keine Übereinstimmungen von `Match` befinden sich in `Source`die `Filter` Funktion ein leeres Array zurück. Ein Fehler tritt auf, wenn `Source` festgelegt ist, um `Nothing` oder ist kein eindimensionales Array.  
  
 Das zurückgegebene Array die `Filter` Funktion enthält nur genügend Elemente, um die Anzahl der übereinstimmenden Elemente enthalten.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|  
|`CompareMethod.Text`|Führt einen Vergleich aus Text|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Filter` Funktion.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" />ist <see langword="Nothing" /> oder ist kein eindimensionales Array.</exception>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Jeder gültige Ausdruck.</param>
        <param name="Style">Dies ist optional. Ein gültiges Format für benannte oder eine benutzerdefinierte <see langword="String" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</summary>
        <returns>Gibt eine Zeichenfolge zurück, die entsprechend den Anweisungen in einem <see langword="String" />-Formatausdruck formatiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die <xref:System.String.Format%2A?displayProperty=nameWithType> Methode verfügt auch über ähnliche Funktionen.  
  
 Wenn Sie eine nicht lokalisierte numerische Zeichenfolge formatieren, sollten Sie ein benutzerdefinierten numerisches Format verwenden, um sicherzustellen, dass das Aussehen gewünschten abzurufen.  
  
 Wenn Sie versuchen, formatieren Sie eine Zahl ohne `Style`, `Format` Funktion bietet ähnliche Funktionen der `Str` -Funktion an, obwohl er das Gebietsschema berücksichtigt wird. Allerdings positive Zahlen mithilfe als Zeichenfolgen formatiert die `Format` Funktion nicht mit ein führendes Leerzeichen zur Angabe des Vorzeichens einschließen, mit denen konvertiert die `Str` Funktion behalten das führende Leerzeichen.  
  
## <a name="different-formats-for-different-numeric-values"></a>Verschiedene Formate für verschiedene numerische Werte  
 Ein benutzerdefiniertes Formatausdruck für Zahlen kann ein bis drei durch Semikolons getrennte Abschnitte haben. Wenn die `Style` Argument der `Format` Funktion enthält einen der vordefinierten numerischen Formate, die nur ein Abschnitt zulässig ist.  
  
|Bei Verwendung von|Dies ist das Ergebnis|  
|-|-|  
|Nur ein Abschnitt|Der Formatausdruck gilt für alle Werte.|  
|Zwei Abschnitte|Der erste Abschnitt gilt für positive Werte und Nullen; die zweite gilt für negative Werte.|  
|Drei Abschnitte|Der erste Abschnitt gilt für positive Werte, die zweite gilt für negative Werte und die dritte betrifft Nullen.|  
  
 Das folgende Beispiel enthält zwei Abschnitte unterteilt: der erste definiert das Format für positive Werte und Nullen; der zweite Abschnitt definiert das Format für negative Werte. Da die `Style` Argument der `Format` Funktion akzeptiert eine Zeichenfolge, die er in Anführungszeichen eingeschlossen ist.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 Wenn Sie zwei Semikolons ohne etwas dazwischen einfügen, wird der fehlende Abschnitt mit dem Format des positiven Wertes ausgegeben. Beispielsweise das folgende Format zeigt positive und Negative Werte mit dem Format im ersten Abschnitt und zeigt `Zero` ist der Wert 0 (null).  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Vordefinierte numerische Formate  
 Die folgende Tabelle zeigt die vordefinierten numerischen Formate. Diese können verwendet werden, anhand des Namens der `Style` Argument für die `Format` Funktion:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Number`, `G` oder `g`|Zeigt eine Zahl ohne Tausendertrennzeichen an.<br /><br /> Beispielsweise `Format(&H3FA, "g")` gibt `1018`.|  
|`Currency`, `C` oder `c`|Zeigt eine Zahl ggf. mit Tausendertrennzeichen an; zeigt zwei Ziffern rechts vom Dezimaltrennzeichen an. Ausgabe hängt vom verwendeten Systemgebietsschema ab.<br /><br /> Beispielsweise `Format(1234567, "c")` gibt `$1,234,567.00`.|  
|`Fixed`, `F` oder `f`|Zeigt mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen.<br /><br /> Beispielsweise `Format(1234567, "f")` gibt `1234567.00`.|  
|`Standard`, `N` oder `n`|Zeigt die Zahl mit Tausendertrennzeichen, mindestens eine Ziffer links und zwei Ziffern rechts vom Dezimaltrennzeichen an.<br /><br /> Beispielsweise `Format(1234567, "n")` gibt `1,234,567.00`.|  
|`Percent`|Zeigt die Zahl multipliziert mit 100 mit einem Prozentzeichen (%) auf der rechten Seite angefügt an; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.<br /><br /> Beispielsweise `Format(0.4744, "Percent")` gibt `47.44%`.|  
|`P`, oder`p`|Zeigt eine Zahl mit Tausendertrennzeichen multipliziert mit 100 mit einem Prozentzeichen (%) nach rechts und getrennt durch ein einzelnes Leerzeichen angefügt; zeigt immer zwei Ziffern rechts vom Dezimaltrennzeichen.<br /><br /> Beispielsweise `Format(0.80345, "p")` gibt `80.35 %`.|  
|`Scientific`|Verwendet standardmäßige wissenschaftliche Schreibweise und stellt zwei signifikante Stellen bereit.<br /><br /> Beispielsweise `Format(1234567, "Scientific")` gibt `1.23E+06`.|  
|`E`, oder`e`|Verwendet standardmäßige wissenschaftliche Schreibweise und stellt sechs signifikante Stellen bereit.<br /><br /> Beispielsweise `Format(1234567, "e")` gibt `1.234567e+006`.|  
|`D`, oder`d`|Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl in Dezimalzahl (Basis 10)-Format enthält. Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.<br /><br /> Beispielsweise `Format(&H7F, "d")` gibt `127`.|  
|`X`, oder`x`|Zeigt eine Zahl als eine Zeichenfolge, die den Wert der Zahl im Hexadezimalformat (Basis 16) enthält. Diese Option wird für ganzzahlige Typen unterstützt (`Byte`, `Short`, `Integer`, `Long`) nur.<br /><br /> Beispielsweise `Format(127, "x")` gibt `7f`.|  
|`Yes/No`|Zeigt `No` Wenn Zahl, andernfalls 0 ist, zeigt `Yes`.<br /><br /> Beispielsweise `Format(0, "Yes/No")` gibt `No`.|  
|`True/False`|Zeigt `False` Wenn Zahl, andernfalls 0 ist, zeigt `True`.<br /><br /> Beispielsweise `Format(1, "True/False")` gibt `True`.|  
|`On/Off`|Zeigt `Off` Wenn Zahl, andernfalls 0 ist, zeigt `On`.<br /><br /> Beispielsweise `Format(1, "On/Off")` gibt `On`.|  
  
### <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Yes/No`, `True/False`, und `On/Off` pfadformate werden nicht unterstützt.  
  
## <a name="user-defined-numeric-formats"></a>Benutzerdefinierte numerische Formate  
 In der folgenden Tabelle identifiziert die Zeichen, mit denen Sie benutzerdefinierte Zahlenformate erstellen können. Diese können verwendet werden, zum Erstellen der `Style` Argument für die `Format` Funktion:  
  
|Zeichen|Beschreibung|  
|-|-|  
|Keine|Zeigt die Zahl ohne Formatierung an.|  
|(`0`)|Ziffernplatzhalter. Zeigt eine Ziffer oder eine 0 (null). Wenn der Ausdruck eine Ziffer an der Position, wo die 0 (null) in der Formatzeichenfolge angezeigt wird, angezeigt. Andernfalls wird an dieser Position eine Null angezeigt.<br /><br /> Hat die Zahl sind weniger Ziffern als Nullen (auf beiden Seiten des Dezimaltrennzeichens) im Formatausdruck, führende oder nachfolgende Nullen angezeigt wird. Hat die Zahl mehr Ziffern rechts vom Dezimaltrennzeichen als stehen Nullen rechts des Dezimaltrennzeichens im Formatausdruck, rundet die Zahl auf so viele Dezimalstellen wie Nullen vorhanden sind. Hat die Zahl mehr Stellen links vom Dezimaltrennzeichen als stehen Nullen auf der linken Seite des Dezimaltrennzeichens im Formatausdruck, zeigt die zusätzlichen Ziffern unverändert.|  
|(`#`)|Ziffernplatzhalter. Zeigt eine Ziffer oder nichts an. Wenn der Ausdruck eine Ziffer an der Position, in dem die `#` Zeichen vorkommt, wird in der Formatzeichenfolge angezeigt; andernfalls wird nichts an dieser Stelle angezeigt.<br /><br /> Dieses Symbol funktioniert wie die `0` Ziffernplatzhalter, mit der Ausnahme, die führenden und nachfolgenden Nullen angezeigt werden, hat die Zahl weniger Ziffern als vorhanden sind `#` -Zeichen auf beiden Seiten des Dezimaltrennzeichens im Formatausdruck.|  
|(`.`)|Dezimalplatzhalter. Der dezimalplatzhalter legt fest, wie viele Ziffern links und rechts vom Dezimaltrennzeichen angezeigt werden. Wenn der Formatausdruck nur enthält `#` Zeichen links von diesem Symbol; Zahlen, die kleiner als 1 mit einem Dezimaltrennzeichen beginnen. Verwenden Sie zum Anzeigen einer führenden Null angezeigt werden, sollen Bruchzahlen mit 0 (null) als ersten Ziffernplatzhalter links vom Dezimaltrennzeichen an. In manchen Gebietsschemas wird ein Komma als Dezimaltrennzeichen verwendet. Welches Zeichen tatsächliche als Dezimaltrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, das vom System erkannt wird. Daher sollten Sie den Zeitraum als dezimalplatzalter in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die ein Komma als Dezimaltrennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.|  
|(`%`)|Prozentplatzhalter. Den Ausdruck multipliziert mit 100. Das Prozentzeichen (`%`) in die Position, wo es angezeigt, in der Formatzeichenfolge wird, eingefügt wird.|  
|(`,`)|Tausendertrennzeichen an. Das Tausendertrennzeichen trennt Tausender von den Hundertern in eine Zahl mit vier oder mehr Stellen links vom Dezimaltrennzeichen an. Standardmäßige Verwendung des Tausendertrennzeichens wird angegeben, wenn das Format ein Tausendertrennzeichen Ziffernplatzhalter enthaltender enthält (`0` oder `#`).<br /><br /> Ein Tausendertrennzeichen direkt links vom Dezimaltrennzeichen (fest, ob ein Dezimaltrennzeichen angegeben ist) oder der äußersten rechten Zeichen in der Zeichenfolge bedeutet Folgendes "Skalieren die Zahl durch Division durch 1000, gegebenenfalls mit Rundung". Zahlen, die kleiner als 1.000 und größer als oder gleich 500 werden angezeigt, als `1`, und Zahlen, die kleiner als 500, als angezeigt werden `0`. Zwei benachbarte Tausendertrennzeichen an dieser Position skalieren, indem Sie einen Faktor von 1 Million sowie einem zusätzlichen Faktor von 1000 für jedes zusätzliche Trennzeichen.<br /><br /> Mehrere Trennzeichen, die in alle anderen Position als direkt links vom Dezimaltrennzeichen oder ganz rechts in der Zeichenfolge werden behandelt, als die Verwendung eines Tausendertrennzeichens angeben. In manchen Gebietsschemas wird der Punkt als Tausendertrennzeichen verwendet. Welches Zeichen tatsächliche als Tausendertrennzeichen in der formatierten Ausgabe verwendet hängt das Zahlenformat, die vom System erkannt wird. Daher sollten Sie das Komma als Tausendertrennzeichen in den Formaten verwenden, auch wenn Sie in einem Gebietsschema arbeiten, die einen Punkt als Tausendertrennzeichen verwendet. Die formatierte Zeichenfolge wird im richtigen Format für das Gebietsschema angezeigt.<br /><br /> Betrachten Sie beispielsweise die folgenden drei Formatzeichenfolgen:<br /><br /> -   `"#,0."`, welches wird das Tausendertrennzeichen verwendet, um die Zahl 100 Millionen als die Zeichenfolge "100,000,000" zu formatieren.<br />-   `"#0,."`, die mit dem Faktor Tausendstel Skalierung so formatieren Sie die Zahl 100 Millionen als die Zeichenfolge "100000" verwendet.<br />-   `"#,0,."`, welches wird das Tausendertrennzeichen verwendet und mit einem Faktor von auf die Zahl 100 Millionen als die Zeichenfolge "100,000" zu formatieren.|  
|(`:`)|Zeittrennzeichen. In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden. Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.|  
|(`/`)|Trennzeichen für Datumsangaben. In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden. Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden. Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird von den Systemeinstellungen bestimmt.|  
|(`E-``E+``e-``e+`)|Wissenschaftliches Format. Wenn der Formatausdruck mindestens einen Ziffernplatzhalter enthält (`0` oder `#`) auf der linken Seite des `E-`, `E+`, `e-`, oder `e+`, wird die Zahl im wissenschaftlichen Format angezeigt und `E` oder `e` wird zwischen der Zahl und dem Exponenten eingefügt. Die Anzahl der Ziffernplatzhalter auf der linken Seite bestimmt die Anzahl der Ziffern im Exponenten. Verwendung `E-` oder `e-` ein Minuszeichen neben negativen Exponenten zu platzieren. Verwendung `E+` oder `e+` um negativen Exponenten ein Minuszeichen und positiven Exponenten ein Pluszeichen einzufügen. Sie müssen auch Ziffernplatzhalter rechts von diesem Symbol, um die richtige Formatierung einschließen.|  
|`-` `+` `$` ( )|Literalzeichen. Diese Zeichen werden genau wie in der Formatzeichenfolge eingegeben angezeigt. Um ein anderes Zeichen als die hier aufgeführten anzuzeigen, fügen sie davor ein umgekehrter Schrägstrich (`\`) oder schließen Sie ihn in doppelte Anführungszeichen ("").|  
|(`\`)|Zeigt das nächste Zeichen in der Formatzeichenfolge an. Um ein Zeichen anzuzeigen, die besondere Bedeutung als Literalzeichen hat, fügen sie davor ein umgekehrter Schrägstrich (`\`). Der umgekehrte Schrägstrich selbst wird nicht angezeigt. Mit einem umgekehrten Schrägstrich entspricht dem einschließen des nächsten Zeichens in doppelte Anführungszeichen. Um einen umgekehrten Schrägstrich anzuzeigen, verwenden Sie zwei umgekehrte Schrägstriche (`\\`).<br /><br /> Beispiele für Zeichen, die nicht angezeigt werden können, als Literalzeichen Formatieren von Datums- und uhrzeitformatierungen Zeichen sind (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, und `:`), die Zeichen zum Formatieren von numerischen (`#`, `0`, `%`, `E`, `e`, Komma und Punkt), und die Zeichen zum Formatieren von Zeichenfolgen (`@`, `&`, `<`, `>`, und `!`).|  
|(`"``ABC``"`)|Zeigt die Zeichenfolge in doppelte Anführungszeichen (""). Um eine Zeichenfolge im Formatargument innerhalb des Codes einzuschließen, verwenden Sie `Chr(34)` , schließen Sie den Text (`34` ist der Zeichencode für ein Anführungszeichen (")).|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Die folgende Tabelle enthält einige Beispielausdrücke-Format für Zahlen. (Allen diesen Beispielen wird davon ausgegangen, dass Ihre Systemgebietsschema Englisch-USA ist) Die erste Spalte enthält die Formatzeichenfolgen für die `Style` Argument der `Format` -Funktion; die anderen Spalten enthalten die resultierende Ausgabe, wenn die formatierten Daten der in den Spaltenüberschriften angegebenen Wert verfügt.  
  
|Format (`Style`)|"5" formatiert als|"-5" formatiert als|"0,5" formatiert als|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Vordefinierte Datums-/Zeitformate  
 Die folgende Tabelle identifiziert die vordefinierten Datums- und Zeitformate. Diese möglicherweise nach Namen als Formatargument für verwendet werden die `Format` Funktion:  
  
|Formatname|Beschreibung|  
|-|-|  
|`General Date`, oder`G`|Zeigt ein Datum und/oder eine Uhrzeit. Beispielsweise `3/12/2008 11:07:31 AM`. Datumsanzeige wird vom aktuellen Kulturwert der Anwendung bestimmt.|  
|`Long Date`, `Medium Date` oder `D`|Zeigt ein Datum entsprechend dem langen Datumsformat Ihrer aktuellen kultureinstellung an. Beispielsweise `Wednesday, March 12, 2008`.|  
|`Short Date`, oder`d`|Zeigt ein Datum unter Verwendung der aktuellen Kultur kurzen Datumsformat. Beispielsweise `3/12/2008`.<br /><br /> Die `d` Zeichen zeigt den Tag in einem benutzerdefinierten Datumsformat.|  
|`Long Time`, `Medium Time` oder `T`|Zeigt eine Uhrzeit mit lange Uhrzeitformat Ihrer aktuellen kultureinstellung an. in der Regel umfasst, Stunden, Minuten und Sekunden. Beispielsweise `11:07:31 AM`.|  
|`Short Time` oder `t`|Zeigt eine Uhrzeit entsprechend Ihrer aktuellen kultureinstellung kurzen Zeitformat. Beispielsweise `11:07 AM`.<br /><br /> Die `t` Zeichen zeigt `AM` oder `PM` Werte für Gebietsschemas, die in einem benutzerdefinierten Uhrzeitformat 12-Stunden-Format verwenden.|  
|`f`|Zeigt den langen Datums- und des kurzen Format Ihrer aktuellen kultureinstellung an. Beispielsweise `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Zeigt das lange Datum und lange Format Ihrer aktuellen kultureinstellung. Beispielsweise `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Zeigt das kurzes Datum und kurze Zeit entsprechend Ihrer aktuellen kultureinstellung-Format. Beispielsweise `3/12/2008 11:07 AM`.|  
|`M`, `m`|Zeigt den Monat und Tag eines Datums. Beispielsweise `March 12`.<br /><br /> Die `M` Zeichen zeigt den Monat in einem benutzerdefinierten Datumsformat. Die `m` Zeichen zeigt die Minuten in einem benutzerdefinierten Uhrzeitformat an.|  
|`R`, `r`|Formatiert das Datum gemäß der <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> Eigenschaft. Beispielsweise `Wed, 12 Mar 2008 11:07:31 GMT`. Den Wert von Datum und Uhrzeit formatierte Datum nicht angepasst. Sie müssen den Datums-/Uhrzeitwert an GMT anpassen, vor dem Aufruf der `Format` Funktion.|  
|`s`|Formatiert das Datum und die Uhrzeit als sortierbaren Index. Beispielsweise `2008-03-12T11:07:31`.<br /><br /> Die `s` Zeichen zeigt die Sekunden in einem benutzerdefinierten Uhrzeitformat an.|  
|`u`|Formatiert das Datum und die Uhrzeit als sortierbaren GMT-Index. Beispielsweise `2008-03-12 11:07:31Z`.|  
|`U`|Formatiert das Datum und Uhrzeit mit das lange Datum und lange Zeit als GMT. Beispielsweise `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Formatiert das Datum als Jahr und Monat an. Beispielsweise `March, 2008`.<br /><br /> Die `Y` und `y` Zeichen zeigt das Jahr in einem benutzerdefinierten Datumsformat.|  
  
 Weitere Informationen zu aktuellen Kulturwert der Anwendung, finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Benutzerdefinierte Datums-/Zeitformate  
 In der folgenden Tabelle sind die Zeichen, dass Sie zum Erstellen von benutzerdefinierten Datums-/Zeitformate verwenden können. Anders als in früheren Versionen von [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], diesen Formatzeichen Groß-/Kleinschreibung beachtet.  
  
|Zeichen|Beschreibung|  
|-|-|  
|(`:`)|Zeittrennzeichen. In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Zeittrennzeichen verwendet werden. Das Zeittrennzeichen trennt Stunden, Minuten und Sekunden, wenn Zeitwerte formatiert werden. Welches Zeichen tatsächliche als Zeittrennzeichen in der formatierten Ausgabe verwendet wird, wird vom aktuellen Kulturwert der Anwendung bestimmt.|  
|(`/`)|Trennzeichen für Datumsangaben. In manchen Gebietsschemas werden unter Umständen andere Zeichen zu Datumstrennzeichen verwendet werden. Das Datumstrennzeichen trennt den Tag, Monat und Jahr wenn Datumswerte formatiert werden. Welches Zeichen tatsächliche als Datumstrennzeichen in der formatierten Ausgabe verwendet wird, richtet sich nach der aktuellen Kultur der Anwendung.|  
|(`%`)|Verwendet, um anzugeben, dass die folgenden Zeichen als unabhängig von der alle nachfolgenden Buchstaben ein Einzelbuchstabenformat gelesen werden soll. Außerdem verwendet, um anzugeben, dass ein Einzelbuchstabenformat als benutzerdefiniertes Format gelesen wird. Finden Sie weitere Details folgt.|  
|`d`|Zeigt den Tag als Zahl ohne führende Null an (z. B. `1`). Verwendung `%d` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`dd`|Zeigt den Tag als Zahl mit einer führenden Null an (z. B. `01`).|  
|`ddd`|Zeigt den Tag als Abkürzung an (z. B. `Sun`).|  
|`dddd`|Zeigt den Tag mit vollem Namen an (z. B. `Sunday`).|  
|`M`|Zeigt den Monat als Zahl ohne führende Null an (Januar wird z. B. dargestellt, als `1`). Verwendung `%M` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`MM`|Zeigt den Monat als Zahl mit einer führenden Null an (z. B. `01/12/01`).|  
|`MMM`|Zeigt den Monat als Abkürzung an (z. B. `Jan`).|  
|`MMMM`|Zeigt den Monat als vollständigen Monatsnamen an (z. B. `January`).|  
|`gg`|Zeigt die Zeichenfolge Zeitraum (z. B. `A.D.`).|  
|`h`|Zeigt die Stunde als Zahl ohne führende Nullen im 12-Stunden-Format (z. B. `1:15:15 PM`). Verwendung `%h` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`hh`|Zeigt die Stunde als Zahl mit führenden Nullen im 12-Stunden-Format (z. B. `01:15:15 PM`).|  
|`H`|Zeigt die Stunde als Zahl ohne führende Nullen im 24-Stunden-Format (z. B. `1:15:15`). Verwendung `%H` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`HH`|Zeigt die Stunde als Zahl mit führenden Nullen im 24-Stunden-Format (z. B. `01:15:15`).|  
|`m`|Zeigt die Minute als Zahl ohne führende Nullen an (z. B. `12:1:15`). Verwendung `%m` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`mm`|Zeigt die Minute als Zahl mit führenden Nullen an (z. B. `12:01:15`).|  
|`s`|Zeigt die Sekunde als Zahl ohne führende Nullen an (z. B. `12:15:5`). Verwendung `%s` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`ss`|Zeigt die Sekunde als Zahl mit führenden Nullen an (z. B. `12:15:05`).|  
|`f`|Zeigt Sekundenbruchteile an. Z. B. `ff` zeigt Hundertstelsekunden an, während `ffff` Zehntausendstelsekunden Sekunden angezeigt. Sie können bis zu sieben `f` Symbole im benutzerdefinierten Format. Verwendung `%f` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`t`|Verwendet ein 12-Stunden-Format und Großbuchstaben `A` für jede Stunde vor Mittag zeigt einen Großbuchstaben `P` für jede Stunde zwischen Mittag und 23:59 Uhr Verwendung `%t` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`tt`|Für Gebietsschemas, 12-Stunden-Format verwenden, zeigt einen Großbuchstaben `AM` für jede Stunde vor Mittag zeigt einen Großbuchstaben `PM` hinter jeder Stunde zwischen Mittag und 23:59 Uhr<br /><br /> Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigt nichts an.|  
|`y`|Zeigt die Jahreszahl (0-9) ohne führende Nullen an. Verwendung `%y` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`yy`|Zeigt das Jahr im numerischen Format von zwei Ziffern mit einer führenden Null an, falls zutreffend.|  
|`yyy`|Zeigt das Jahr im numerischen Format vierstellige an.|  
|`yyyy`|Zeigt das Jahr im numerischen Format vierstellige an.|  
|`z`|Zeigt den Zeitzonenunterschied ohne führende Null an (z. B. `-8`). Verwendung `%z` ist dies das einzige Zeichen im benutzerdefinierten numerischen Format.|  
|`zz`|Zeigt den Zeitzonenunterschied mit einer führenden Null an (z. B. `-08`)|  
|`zzz`|Zeigt den vollständigen Zeitzonenunterschied (z. B. `-08:00`)|  
  
### <a name="legacy-code-example"></a>Legacy-Codebeispiel  
 Im folgenden sind Beispiele für benutzerdefinierte Datums- und Zeitformate für `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Format|Anzeige|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die minimale zeitauflösung für ein Gerät wird vom Hersteller des Geräts bestimmt. Wenn die Auflösung der Uhrzeit für das Gerät genug, grob gehalten ist die `f` Formatzeichen gibt 0 bei Ausführung auf diesem Gerät.  
  
   
  
## Examples  
 Dieses Beispiel zeigt verschiedene Verwendungsmöglichkeiten der `Format`-Funktion zur Formatierung von Werten mit `String`-Formaten und benutzerdefinierten Formaten. Die tatsächlich von Ihrem System ausgegebene Formatierung von Datumstrennzeichen (`/`), Trennzeichen für Zeitangaben (`:`) und AM/PM-Indikatoren (`t` und `tt`) richtet sich nach den Gebietsschemaeinstellungen des Codes. Wenn Datums- und Zeitangaben in der Entwicklungsumgebung angezeigt werden, werden das 24-Stunden-Zeitformat und das kurze Datumsformat des für den Code ausgewählten Gebietsschemas verwendet.  
  
> [!NOTE]
>  Für Gebietsschemas, die das 24-Stunden-Format verwenden, zeigen die AM/PM-Indikatoren (`t` und `tt`) nichts an.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Dies ist optional. Der numerische Wert, der angibt, wie viele Stellen rechts vom Dezimaltrennzeichen angezeigt werden. Standardwert ist -1, der angibt, dass die regionalen Einstellungen des Computers verwendet werden.</param>
        <param name="IncludeLeadingDigit">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />eine Enumeration, der angibt, ob eine führende Null für Bruchzahlen angezeigt wird. Werte finden Sie unter "Hinweise".</param>
        <param name="UseParensForNegativeNumbers">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />eine Enumeration, der angibt, ob negative Werte in Klammern gesetzt werden soll oder nicht. Werte finden Sie unter "Hinweise".</param>
        <param name="GroupDigits">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />eine Enumeration, der angibt, ob der Gruppierung von Zahlen mit den Trennzeichen in den regionalen Einstellungen des Computers angegeben. Werte finden Sie unter "Hinweise".</param>
        <summary>Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</summary>
        <returns>Gibt einen Ausdruck als Währungsbetrag zurück, der mit dem in der Systemsteuerung festgelegten Währungssymbol formatiert ist.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden stattdessen des Computers entsprechende regionale Einstellungen Werte verwendet.  
  
 Die Position des Währungssymbols relativ zu den Currency-Wert wird von den regionalen Systemeinstellungen bestimmt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Allerdings es möglicherweise geändert werden programmgesteuert mithilfe von .NET Framework, außer dem führenden Null an, die aus stammt die `Number` Registerkarte.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente akzeptiert die folgenden TriState-Enumerationswerte.  
  
|Wert|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Regionale Einstellungen des Computers|  
  
   
  
## Examples  
 Das folgende Beispiel veranschaulicht die Verwendung der `FormatCurrency`-Funktion.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Anzahl der Ziffern nach dem Dezimaltrennzeichen ist größer als 99.</exception>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="Date" />Ausdruck, der formatiert werden.</param>
        <param name="NamedFormat">Dies ist optional. Numerischer Wert, der das Datum/Uhrzeit-Format verwendet. Wenn nicht angegeben, <see langword="DateFormat.GeneralDate" /> verwendet wird.</param>
        <summary>Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</summary>
        <returns>Gibt einen Zeichenfolgenausdruck für einen Datums- und Uhrzeitwert zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Date` -Datentyp enthält immer die Datums-und Uhrzeitinformationen. Zwecken Typumwandlung berücksichtigt Visual Basic 1/1/1 (1. Januar des Jahres 1) für das Datum und 00:00:00 (Mitternacht) ist eine neutrale Wert für die Zeit ein neutrale Wert sein. Wenn Sie nicht Formatieren einer `Date` Wert als Datum/Uhrzeit-Zeichenfolge `FormatDateTime` neutralen Werte nicht in der Ergebniszeichenfolge enthalten ist. Angenommen, Sie #1/1/0001 konvertieren 9:30:&#00; in eine Zeichenfolge, die das Ergebnis wird "9:30:00 AM"; Die Datumsinformationen wird unterdrückt. Die Datumsinformationen ist jedoch weiterhin vorhanden, in der ursprünglichen `Date` Wert und können mit Funktionen wie z. B. wiederhergestellt werden `DatePart`.  
  
> [!NOTE]
>  Wenn Sie übergeben die `Expression` Argument als ein `String` literal, `FormatDateTime` interpretiert gemäß der <xref:System.Globalization.CultureInfo.CurrentCulture%2A> Ihrer Anwendung festlegen. Jedoch wenn Sie ihn als übergeben einer `Date` literal, verwenden Sie das Format #mm/tt/jjjj-da `FormatDateTime` immer interpretiert eine `Date` Zeichenfolgenliteral entsprechend der Kultur Englisch (USA). Dies ist erforderlich, da, wenn eine Anwendung entwickelt und codiert `Date` Literale aus einer Kultur, aber klicken Sie dann auf einer Plattform mit einer anderen Kultur ausgeführt wird die `Date` Literale konnte nicht ordnungsgemäß analysiert werden.  
  
 Die `NamedFormat` Argument hat die folgenden Einstellungen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`DateFormat.GeneralDate`|Zeigen Sie ein Datum und/oder eine Uhrzeit ein. Einen Datumsteil als kurzes Datum angezeigt. Bei ein Uhrzeitteil wird als eine lange Zeit anzeigen. Falls vorhanden, werden beide Teile angezeigt.|  
|`DateFormat.LongDate`|Zeigt ein Datum unter Verwendung des lange Datumsformat in regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.ShortDate`|Zeigt ein Datum unter Verwendung des kurzen Datumsformat in regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.LongTime`|Zeigt eine Uhrzeit das Uhrzeitformat in den regionalen Einstellungen des Computers angegeben.|  
|`DateFormat.ShortTime`|Zeigt eine Uhrzeit mit dem 24-Stunden-Format (hh: mm).|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `FormatDateTime` Funktion.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" />die Einstellung ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Dies ist optional. Der numerische Wert, der angibt, wie viele Stellen rechts vom Dezimaltrennzeichen angezeigt werden. Der Standardwert ist -1, der angibt, dass die regionalen Einstellungen des Computers verwendet werden.</param>
        <param name="IncludeLeadingDigit">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />eine Konstante, die angibt, ob eine führende 0 für Bruchzahlen angezeigt wird. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="UseParensForNegativeNumbers">Dies ist optional. <see cref="T:Microsoft.VisualBasic.TriState" />eine Konstante, die angibt, ob negative Werte in Klammern setzen. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt einen als Zahl formatierten Ausdruck zurück.</summary>
        <returns>Gibt einen als Zahl formatierten Ausdruck zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden werden durch die gebietsschemaeinstellungen ausgelassenes Argumentwerte bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente über die folgenden Einstellungen verfügen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Regionale Einstellungen des Computers|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die `FormatNumber` Funktion.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der zu formatierende Ausdruck.</param>
        <param name="NumDigitsAfterDecimal">Optional. Numerischer Wert, der angibt, wie viele Stellen rechts neben dem Dezimaltrennzeichen angezeigt werden. Der Standardwert ist –1, was darauf hinweist, dass die Einstellungen des Gebietsschemas verwendet werden.</param>
        <param name="IncludeLeadingDigit">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob bei Dezimalzahlen eine führende Null angezeigt werden soll. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="UseParensForNegativeNumbers">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob negative Werte in Klammern gesetzt werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <param name="GroupDigits">Optional. <see cref="T:Microsoft.VisualBasic.TriState" />-Konstante, die angibt, ob Ziffern mithilfe des in den Gebietsschemaeinstellungen angegebenen Gruppentrennzeichens gruppiert werden sollen. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</summary>
        <returns>Gibt einen Ausdruck als Prozentangabe (d. h. multipliziert mit 100) und einem abschließenden %-Zeichen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn eine oder mehrere optionale Argumente ausgelassen werden, werden die Werte für Argumente ausgelassen durch die gebietsschemaeinstellungen bereitgestellt.  
  
> [!NOTE]
>  Alle Einstellungsinformationen stammt aus dem Gebietsschema der Anwendung. Standardmäßig werden, die das Gebietsschema, in der Systemsteuerung festgelegt. Allerdings kann es programmgesteuert geändert werden mithilfe von .NET Framework.  
  
 Die `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, und `GroupDigits` Argumente über die folgenden Einstellungen verfügen.  
  
|Konstante|Beschreibung|  
|-|-|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|Regionale Einstellungen des Computers|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung der `FormatPercent` Funktion.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Typ ist nicht numerisch.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="Index">Erforderlich. <see langword="Integer" />Ausdruck. Der Index (1-basiert) des Zeichens in <c>str</c> zurückgegeben werden.</param>
        <summary>Gibt eine <see langword="Char" /> Wert, der das Zeichen aus dem angegebenen Index in der bereitgestellten Zeichenfolge darstellt.</summary>
        <returns>
          <see langword="Char" />der Wert, der die Zeichen aus dem angegebenen Index in der angegebenen Zeichenfolge darstellt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Index` ist kleiner als 1 oder größer als der Index des letzten Zeichens in `str`, wird eine `ArgumentException` ausgelöst wird.  
  
   
  
## Examples  
 Dieses Beispiel zeigt, wie die `GetChar` Funktion zurückzugebende ein Zeichen aus einem angegebenen Index in einer `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" />ist <see langword="Nothing" />, <paramref name="Index" /> &lt; 1 oder <paramref name="Index" /> ist größer als der Index des letzten Zeichens der <paramref name="str" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Erforderlich. <see langword="String" />der Ausdruck, der durchsucht wird.</param>
        <param name="String2">Erforderlich. <see langword="String" />der Ausdruck gesucht.</param>
        <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs. Wenn <c>vergleichen</c> weggelassen wird, wird die <see langword="Option Compare" /> Einstellung bestimmt den Typ des Vergleichs.</param>
        <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr-gibt  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" />ist NULL oder<see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />ist NULL oder<see langword="Nothing" /></term>
              <description> Die Anfangsposition für die Suche, standardmäßig auf die Position des ersten Zeichens ist.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />wurde nicht gefunden  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />befindet sich in<paramref name="String1" /></term>
              <description> Position, an der Übereinstimmung beginnt  
  
 </description>
            </item>
            <item>
              <term>
              </term>
              <description>
              </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.  
  
> [!NOTE]
>  Die `InStrB` Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich|  
|`Text`|1|Führt einen Textvergleich aus|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Dies ist optional. Numerische Ausdruck, der die Startposition für jede Suche festlegt. Wenn nicht angegeben ist, beginnt der ersten Zeichenposition Suche. Der Startindex ist 1-basiert.</param>
        <param name="String1">Erforderlich. <see langword="String" />der Ausdruck, der durchsucht wird.</param>
        <param name="String2">Erforderlich. <see langword="String" />der Ausdruck gesucht.</param>
        <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs. Wenn <c>vergleichen</c> weggelassen wird, wird die <see langword="Option Compare" /> Einstellung bestimmt den Typ des Vergleichs.</param>
        <summary>Gibt einen Integer-Wert zurück, der die Anfangsposition des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge angibt.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr-gibt  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String1" />ist NULL oder<see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />ist NULL oder<see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />wurde nicht gefunden  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" />befindet sich in<paramref name="String1" /></term>
              <description> Position, an der Übereinstimmung beginnt  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" />&gt; Länge<paramref name="String1" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 In der Regel die `InStr` Funktion wird beim Analysieren von Zeichenfolgen verwendet.  
  
> [!NOTE]
>  Die `InStrB` Funktion in früheren Versionen von Visual Basic gibt eine Anzahl von Bytes anstatt eine Zeichenposition. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic 2005-Zeichenfolgen werden in Unicode und `InStrB` wird nicht mehr unterstützt.  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Wert|Beschreibung|  
|-|-|-|  
|`Binary`|0|Führt einen binären Vergleich|  
|`Text`|1|Führt einen Textvergleich aus|  
  
   
  
## Examples  
 In diesem Beispiel wird die `InStr`-Funktion verwendet, um die Position des ersten Auftretens einer Zeichenfolge innerhalb einer anderen Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Erforderlich. Der Zeichenfolgenausdruck, der durchsucht wird.</param>
        <param name="StringMatch">Erforderlich. Ein Ausdruck, der Zeichenfolge gesucht wird.</param>
        <param name="Start">Dies ist optional. Numerischer Ausdruck die einsbasierte Startposition für jede Suche, beginnend mit der linken Seite der Zeichenfolge festlegen. Wenn <c>starten</c> weggelassen wird, wird-1 verwendet wird, d. h. die Suche beginnt an der letzten Zeichenposition. Suche wird dann von rechts nach links fortgesetzt.</param>
        <param name="Compare">Dies ist optional. Der numerische Wert, der angibt, der Art des Vergleichs zu verwendende Teilzeichenfolgen auswerten. Wenn nicht angegeben, wird ein binärer Vergleich ausgeführt. Werte finden Sie unter "Einstellungen".</param>
        <summary>Gibt die Position des ersten Vorkommens einer Zeichenfolge innerhalb einer anderen Zeichenfolge von rechts nach links gesehen zurück.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStrRev gibt  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringCheck" />hat die Länge 0 (null)  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />hat die Länge 0 (null)  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />wurde nicht gefunden  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" />befindet sich in<paramref name="StringCheck" /></term>
              <description> Die Position, an dem die erste Übereinstimmung gefunden wird, beginnend mit der rechten Seite der Zeichenfolge.  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" />ist größer als die Länge von<paramref name="StringMatch" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Beachten Sie, dass die Syntax für die `InStrRev` Funktion ist nicht identisch mit der Syntax für die `InStr` Funktion.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich.|  
|`Text`|Führt einen Vergleich mit Text.|  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `InStrRev` Funktion.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" />0 = oder <paramref name="Start" /> &lt; -1.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Erforderlich. Eindimensionale Array, Teilzeichenfolgen enthält verknüpft werden sollen.</param>
        <param name="Delimiter">Dies ist optional. Eine beliebige Zeichenfolge zum Trennen der Teilzeichenfolgen in der zurückgegebenen Zeichenfolge verwendet. Wenn nicht angegeben, das Leerzeichen ("") verwendet wird. Wenn <c>Trennzeichen</c> ist eine leere Zeichenfolge ("") oder <see langword="Nothing" />, alle Elemente in der Liste ohne Trennzeichen verkettet.</param>
        <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
        <returns>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen der `Join` und `Split` Funktionen. Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben. Die `Split` Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben. Der wesentliche Unterschied besteht, liegt `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" />ist nicht eindimensional.</exception>
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Erforderlich. Eindimensionale Array, Teilzeichenfolgen enthält verknüpft werden sollen.</param>
        <param name="Delimiter">Dies ist optional. Eine beliebige Zeichenfolge zum Trennen der Teilzeichenfolgen in der zurückgegebenen Zeichenfolge verwendet. Wenn nicht angegeben, das Leerzeichen ("") verwendet wird. Wenn <c>Trennzeichen</c> ist eine leere Zeichenfolge ("") oder <see langword="Nothing" />, alle Elemente in der Liste ohne Trennzeichen verkettet.</param>
        <summary>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</summary>
        <returns>Gibt eine Zeichenfolge zurück, die durch Verknüpfen mehrerer Teilzeichenfolgen aus einem Array erstellt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es gibt eine Parität zwischen der `Join` und `Split` Funktionen. Die `Join` -Funktion akzeptiert ein Array von Zeichenfolgen und verknüpft sie mit einer Trennzeichenfolge, um eine einzelne Zeichenfolge zurückzugeben. Die `Split` Funktion akzeptiert eine Zeichenfolge, und trennt diese am Trennzeichen, und gibt ein Array von Zeichenfolgen zurückzugeben. Der wesentliche Unterschied besteht, liegt `Join` können Zeichenfolgen mit einer beliebigen Trennzeichenfolge verketten `Split` nur Zeichenfolgen, die mit einem einzelnen Trennzeichen trennen kann.  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie die `Join` Funktion, um eine Liste von mehreren Zeichenfolgen zu erstellen.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" />ist nicht eindimensional.</exception>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Jeder gültige <see langword="String" /> oder <see langword="Char" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LCase` Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Jeder gültige <see langword="String" /> oder <see langword="Char" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das in Kleinbuchstaben konvertiert wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Es werden nur Großbuchstaben konvertiert in Kleinbuchstaben; Alle Kleinbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `LCase` Funktion zum Zurückgeben einer Zeichenfolge in Kleinbuchstaben.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />der Ausdruck aus der die äußeren linken Zeichen zurückgegeben werden.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />Ausdruck. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben. Wenn 0, eine leere Zeichenfolge ("") zurückgegeben. Wenn Sie größer als oder gleich der Anzahl von Zeichen in <c>str</c>, wird die gesamte Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</summary>
        <returns>Gibt eine Zeichenfolge zurück, die eine angegebene Zeichenanzahl von der linken Seite einer Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion. Bei der Verwendung in einer Windows Forms-Anwendung oder eine andere Klasse mit einem `Left` -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  Die `LeftB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LeftB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Left` Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten `String`. In einer Klasse mit einem `Left` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Left` Funktion.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Jeder gültige <see langword="String" /> Ausdruck oder Variablenname. Wenn <c>Ausdruck</c> ist vom Typ <see langword="Object" />, <see langword="Len" /> Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die <see langword="FilePut" /> Funktion.</param>
        <summary>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</summary>
        <returns>Gibt eine ganze Zahl, die die Anzahl der Zeichen in einer Zeichenfolge oder die nominalen Anzahl von Bytes, die zum Speichern einer Variablen erforderliche enthalten.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Mit benutzerdefinierten Typen und `Object` Variablen, die `Len` Funktion gibt die Größe zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion. Wenn ein `Object` enthält eine `String`, wird die Länge der Zeichenfolge zurückgegeben. Wenn ein `Object` enthält einen anderen Typ, es gibt die Größe des Objekts zurück, wie es in der Datei durch geschrieben werden die `FilePut` Funktion.  
  
 Die `VBFixedString` Attribut angewendet werden kann, zu Zeichenfolgenfeldern in Objekten, das die Größe der Zeichenfolge in Bytes, der beim Schreiben auf den Datenträger. Die `Len` Funktion verwendet die `VBFixedString` Attributs, wenn verfügbar, wenn bestimmt die Größe des `Object` Variablen.  
  
> [!NOTE]
>  Die `Len` Funktion möglicherweise nicht in der Lage, um zu bestimmen, die tatsächliche Anzahl von Speicherplatz in Bytes erforderlich, wenn Sie mit Zeichenfolgen in eine benutzerdefinierte Datentypen variabler Länge verwendet.  
  
> [!NOTE]
>  Die `LenB` -Funktion in früheren Versionen von Visual Basic gibt die Anzahl der Bytes in eine Zeichenfolge anstatt in Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `LenB` wird nicht mehr unterstützt.  
  
## <a name="smart-device-developer-notes"></a>Entwicklerhinweise für intelligente Geräte  
 Die `Len` Funktion akzeptiert nur `String` und `Object` Variablen als Parameter. Wenn ein `Object` enthält eine `String`, wird zurückgegeben, die Länge der `String`. Wenn ein Parameter ein NULL-Wert ist `Object` -Verweis ist, gibt die Funktion 0 (null) zurück. Wenn ein `Object` enthält alle anderen Arten wird eine Ausnahme ausgelöst.  
  
   
  
## Examples  
 In diesem Beispiel wird mit der `Len`-Funktion die Anzahl der Zeichen in einer Zeichenfolge zurückgegeben.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. <see langword="String" />Ausdruck. Name des String-Variable.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />Ausdruck. Die Länge der zurückgegebenen Zeichenfolge.</param>
        <summary>Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</summary>
        <returns>Gibt eine links ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge angepasst an die angegebene Länge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird die zurückgegebene Zeichenfolge in der vorgegebenen Länge gekürzt. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen und dem rechten Ende der zurückgegebenen Zeichenfolge, die die entsprechende Länge erzeugt hinzugefügt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `LSet` Funktion.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</summary>
        <returns>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />der Ausdruck aus der Zeichen zurückgegeben werden.</param>
        <param name="Start">Erforderlich. <see langword="Integer" />Ausdruck. Die Anfangsposition der zurückzugebenden Zeichen. Wenn <c>starten</c> ist größer als die Anzahl der Zeichen in <c>str</c>, die <see langword="Mid" /> Funktion gibt eine leere Zeichenfolge (""). <c>Starten Sie</c> ist 1-basiert.</param>
        <summary>Gibt eine Zeichenfolge, die mit den Zeichen, die beginnend bei einer angegebenen Position in einer Zeichenfolge zurück.</summary>
        <returns>Eine Zeichenfolge, die alle Zeichen, die beginnend mit der angegebenen Position in der Zeichenfolge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.  
  
 Visual Basic verfügt über eine `Mid` Funktion und eine `Mid` Anweisung. Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktion gibt die Zeichen, während die `Mid` Anweisung ersetzt die Zeichen. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Die letzte Zeile in diesem Beispiel verwendet diese Überladung der `Mid` Funktion, um die fünfte und nachfolgende Zeichen aus einer Zeichenfolge zurückzugeben.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" />&lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />der Ausdruck aus der Zeichen zurückgegeben werden.</param>
        <param name="Start">Erforderlich. <see langword="Integer" />Ausdruck. Die Anfangsposition der zurückzugebenden Zeichen. Wenn <c>starten</c> ist größer als die Anzahl der Zeichen in <c>str</c>, die <see langword="Mid" /> Funktion gibt eine leere Zeichenfolge (""). <c>Starten Sie</c> ist 1-basiert.</param>
        <param name="Length">Dies ist optional. <see langword="Integer" />Ausdruck. Die Anzahl der zurückzugebenden Zeichen. Wenn nicht angegeben, oder wenn weniger als <c>Länge</c> Zeichen im Text (einschließlich des Zeichens an der Position <c>starten</c>), werden alle Zeichen von der Startposition bis zum Ende der Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge, die eine angegebene Anzahl von Zeichen ab, die von einer angegebenen Position in einer Zeichenfolge enthält.</summary>
        <returns>Eine Zeichenfolge, die die angegebene Anzahl von Zeichen ab der der angegebenen Position in der Zeichenfolge besteht.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion.  
  
 Visual Basic verfügt über eine `Mid` Funktion und eine `Mid` Anweisung. Diese Elemente, die beide auf eine angegebene Anzahl von Zeichen in eine Zeichenfolge funktionieren, aber die `Mid` Funktion gibt die Zeichen, während die `Mid` Anweisung ersetzt die Zeichen. Weitere Informationen finden Sie unter [Mid-Anweisung](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  Die `MidB` Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge zurück, in Byte anstatt in Zeichen. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle Visual Basic-Zeichenfolgen werden in Unicode und `MidB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Die ersten beiden `Mid` Funktionen in diesem Beispiel wird die angegebene Anzahl von Zeichen aus einer Zeichenfolge, beginnend mit den angegebenen Positionen zurück. (Die letzte Funktion veranschaulicht die <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> überladen und gibt nur den Ausgangspunkt für die Extrahierung Zeichenfolge.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" />&lt;= 0 oder <paramref name="Length" /> &lt; 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der Zeichenfolgenausdruck, der zu ersetzenden Teilzeichenfolge enthält.</param>
        <param name="Find">Erforderlich. Die Teilzeichenfolge gesucht wird.</param>
        <param name="Replacement">Erforderlich. Ersatz Teilzeichenfolge.</param>
        <param name="Start">Dies ist optional. Positionieren in <c>Ausdruck</c> , beginnt die Teilzeichenfolge für den Austausch verwendet. Der Rückgabewert der <see langword="Replace" /> ist eine Zeichenfolge, die bei beginnt <c>starten</c>, mit entsprechenden substitutionen. Wenn nicht angegeben, wird davon ausgegangen, dass 1.</param>
        <param name="Count">Dies ist optional. Anzahl der Teilzeichenfolge substitutionen ausführen. Wenn nicht angegeben, ist der Standardwert – 1 ist, d. h. "müssen alle möglichen substitutionen".</param>
        <param name="Compare">Dies ist optional. Der numerische Wert, der angibt, der Art des Vergleichs zu verwendende Teilzeichenfolgen auswerten. Werte finden Sie unter "Einstellungen".</param>
        <summary>Gibt eine Zeichenfolge zurück, in der eine bestimmte untergeordnete Zeichenfolge so oft wie angegeben durch eine andere Zeichenfolge ersetzt wurde.</summary>
        <returns>
          <see langword="Replace" />Gibt die folgenden Werte zurück.  
  
 <list type="table"><item><term>If  
  
 </term><description>Replace gibt zurück  
  
 </description></item><item><term><paramref name="Find" />hat die Länge 0 (null) oder <see langword="Nothing" /> </term> <description> Kopie von <paramref name="Expression" /> </description> </item> <item> <term> <paramref name="Replace" /> hat die Länge 0 (null)  
  
 </term><description>Kopieren von <paramref name="Expression" /> keine Vorkommen von <paramref name="Find" /> </description> </item> <item> <term> <paramref name="Expression" /> hat die Länge 0 (null) oder <see langword="Nothing" />, oder <paramref name="Start" /> ist größer als die Länge des <paramref name="Expression" /> </term> <description> <see langword="Nothing" /> </description> </item> <item> <term> <paramref name="Count" /> ist 0  
  
 </term><description>Kopie<paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Der Rückgabewert von der `Replace` Funktion ist eine Zeichenfolge, die an der angegebenen Position beginnt `Start` und endet am Ende der `Expression` Zeichenfolge mit de vorgenommenen Ersetzungen nach den Angaben von der `Find` und `Replace` Werte.  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich|  
|`Text`|Führt einen Vergleich aus Text|  
  
   
  
## Examples  
 Dieses Beispiel zeigt die `Replace` Funktion.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" />&lt; -1 oder <paramref name="Start" /> &lt;= 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />der Ausdruck aus dem äußersten rechten Zeichen zurückgegeben werden.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />. Numerischer Ausdruck, der angibt, wie viele Zeichen zurückgegeben. Wenn 0, eine leere Zeichenfolge ("") zurückgegeben. Wenn Sie größer als oder gleich der Anzahl von Zeichen in <c>str</c>, wird die gesamte Zeichenfolge zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</summary>
        <returns>Gibt eine Zeichenfolge mit einer bestimmten Anzahl von Zeichen ab dem ersten Zeichen rechts von einer Zeichenfolge zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Um zu bestimmen, die Anzahl der Zeichen in `str`, verwenden Sie die `Len` Funktion. Bei der Verwendung in einem Windows Form oder eine andere Klasse mit einem `Right` -Eigenschaft, Sie müssen vollqualifiziert-Funktion mit `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  Die `RightB` -Funktion in früheren Versionen von Visual Basic gibt eine Zeichenfolge in Bytes anstatt Zeichen zurück. Es dient in erster Linie für das Konvertieren von Zeichenfolgen in Doppelbyte-Zeichensatz (Character Set, DBCS) Anwendungen. Alle aktuellen Visual Basic-Zeichenfolgen werden in Unicode und `RightB` wird nicht mehr unterstützt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `Right` Funktion eine Teilzeichenfolge des zurückzugebenden einer bestimmten `String`. In einer Klasse mit einem `Right` -Eigenschaft, es kann erforderlich sein, vollständig qualifizieren der `Right` Funktion.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Erforderlich. <see langword="String" />Ausdruck. Name des String-Variable.</param>
        <param name="Length">Erforderlich. <see langword="Integer" />Ausdruck. Die Länge der zurückgegebenen Zeichenfolge.</param>
        <summary>Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</summary>
        <returns>Gibt eine rechts ausgerichtete Zeichenfolge zurück, die die angegebene Zeichenfolge in der vorgegebenen Länge enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wenn `Source` ist länger als `Length`, `RSet` fügt nur die am weitesten links stehende Zeichen bis zur Länge der `Source`, in der zurückgegebenen Zeichenfolge. Wenn die angegebene Zeichenfolge kürzer als die angegebene Länge ist, werden Leerzeichen zum linken Ende der Zeichenfolge, die die entsprechende Länge hinzugefügt. Wenn die angegebene Zeichenfolge länger als die angegebene Länge ist, wird es in der vorgegebenen Länge gekürzt.  
  
   
  
## Examples  
 Dieses Beispiel veranschaulicht die Verwendung von der `RSet` Funktion.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</summary>
        <returns>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />Ausdruck. Die Anzahl der Leerzeichen, die Sie in der Zeichenfolge werden soll.</param>
        <summary>Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</summary>
        <returns>Gibt eine Zeichenfolge mit der angegebenen Anzahl von Leerzeichen zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `Space` Funktion eignet sich zum Formatieren der Ausgabe und Löschen von Daten in Zeichenfolgen mit fester Länge.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `Space` -Funktion eine Zeichenfolge mit einer angegebenen Anzahl von Leerzeichen zurückgibt.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. <see langword="String" />der Ausdruck, Teilzeichenfolgen und Trennzeichen enthält.</param>
        <param name="Delimiter">Dies ist optional. Ein einzelnes Zeichen, die zur Identifizierung von Grenzen von untergeordneten Zeichenfolgen. Wenn <c>Trennzeichen</c> weggelassen wird, wird das Leerzeichen ("") wird davon ausgegangen, dass das Trennzeichen.</param>
        <param name="Limit">Dies ist optional. Maximale Anzahl von Teilzeichenfolgen, die in denen Eingabezeichenfolge aufgeteilt werden soll. Der Standardwert – 1 ist, gibt an, dass die Eingabezeichenfolge bei jedem Auftreten des aufgeteilt werden soll die <c>Trennzeichen</c> Zeichenfolge.</param>
        <param name="Compare">Dies ist optional. Der numerische Wert, der angibt, des Vergleichs zu verwendende Teilzeichenfolgen auswerten. Die Werte finden Sie unter „Einstellungen“.</param>
        <summary>Gibt ein nullbasiertes, eindimensionales Array zurück, das eine angegebene Anzahl von Teilzeichenfolgen enthält.</summary>
        <returns>
          <see langword="String" />-Array. Wenn <paramref name="Expression" /> ist eine leere Zeichenfolge (""), <see langword="Split" /> ein Einzelelement-Array zurückgegeben, eine Zeichenfolge der Länge 0 (null). Wenn <paramref name="Delimiter" /> ist eine Zeichenfolge der Länge 0 (null), oder wenn Sie nicht in erscheint <paramref name="Expression" />, <see langword="Split" /> ein Einzelelement-Array zurückgegeben, die gesamte <paramref name="Expression" /> Zeichenfolge.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Standardmäßig oder wenn `Limit` gleich 1, der `Split` Funktion teilt die Eingabezeichenfolge an jedem Vorkommen der Zeichenfolge als Trennzeichen, und gibt die Teilzeichenfolgen in einem Array zurück. Wenn die `Limit` -Parameters ist größer als 0 (null), die `Split` Funktion teilt die Zeichenfolge bei der ersten `Limit`-1 Vorkommen des Trennzeichens, und gibt ein Array mit den resultierenden untergeordneten Zeichenfolgen zurück. Beispielsweise `Split("a:b:c", ":")` gibt das Array `{"a", "b", "c"}`, während `Split("a:b:c", ":", 2)` gibt das Array `{"a", "b:c"}`.  
  
 Wenn die `Split` Funktion zwei Trennzeichen in einer Zeile oder ein Trennzeichen am Anfang oder Ende der Zeichenfolge auftritt, interpretiert als umgebenden eine leere Zeichenfolge (""). Beispielsweise `Split("xx", "x")` gibt das Array mit drei leeren Zeichenfolgen zurück: ein vom Anfang der Zeichenfolge und das erste "x", eine zwischen den beiden "Zeichenfolgen x" und eine der letzten "X" und das Ende der Zeichenfolge.  
  
 Diese Tabelle wird veranschaulicht, wie das optionale `Delimiter`, `Limit`, und `Compare` Parameter können das Verhalten des ändern die `Split` Funktion.  
  
|Split-Aufruf|Rückgabewert|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{"Alice und Bob"}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice", "Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone", "example.com"}|  
  
 Die `Compare` Argument kann die folgenden Werte haben.  
  
|Konstante|Beschreibung|Wert|  
|-|-|-|  
|`CompareMethod.Binary`|Führt einen binären Vergleich|0|  
|`CompareMethod.Text`|Führt einen Vergleich aus Text|1|  
  
   
  
## Examples  
 Im folgenden Beispiel wird veranschaulicht, wie eine Zeichenfolge an ihren Leerzeichen geteilt.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Im folgenden Beispiel wird veranschaulicht, wie zum Aufteilen von Zeichenfolgen mit mehreren Trennzeichen in einer Zeile und die leeren Zeichenfolgen herausfiltern.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="String2">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <param name="Compare">Dies ist optional. Gibt den Typ des Zeichenfolgenvergleichs. Wenn <c>vergleichen</c> weggelassen wird, wird die <see langword="Option Compare" /> Einstellung bestimmt den Typ des Vergleichs.</param>
        <summary>Gibt abhängig vom Ergebnis eines Zeichenfolgenvergleichs den Wert -1, 0 oder 1 zurück.</summary>
        <returns>Die <see langword="StrComp" /> Funktion weist die folgenden Rückgabewerte.  
  
 <list type="table"><item><term>If  
  
 </term><description>StrComp gibt  
  
 </description></item><item><term><paramref name="String1" />sortiert mysqlsink <paramref name="String2" /> </term> <description> -1  
  
 </description></item><item><term><paramref name="String1" />ist gleich <paramref name="String2" /> </term> <description> 0  
  
 </description></item><item><term><paramref name="String1" />sortiert nach <paramref name="String2" /> </term> <description> 1  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Zeichenfolgen werden nach alphanumerischen Sortierwerten beginnend mit dem ersten Zeichen verglichen. Weitere Informationen zu binäre Vergleiche, Textvergleiche und Sortierreihenfolge finden Sie unter [Option Compare-Anweisung](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Die `Compare`-Argumenteinstellungen lauten:  
  
|Konstante|Beschreibung|  
|-|-|  
|`Binary`|Führt einen binären Vergleich, basierend auf einer Sortierreihenfolge, die von den internen binären Darstellungen der Zeichen abgeleitet.|  
|`Text`|Führt einen Textvergleich aus, basierend auf einer schreibungsunabhängigen Textsortierreihenfolge gemäß Ihrem System `LocaleID` Wert.|  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrComp` Funktion, um die Ergebnisse eines Zeichenfolgenvergleichs zurück.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Der <paramref name="Compare" />-Wert ist ungültig.</exception>
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. <see langword="String" />der Ausdruck konvertiert werden.</param>
        <param name="Conversion">Erforderlich. <see cref="T:Microsoft.VisualBasic.VbStrConv" />Member. Der Enumerationswert, der den Typ der durchzuführenden Konvertierung angeben.</param>
        <param name="LocaleID">Dies ist optional. Die <see langword="LocaleID" /> Wert, falls abweichend vom System <see langword="LocaleID" /> Wert. (Das System <see langword="LocaleID" /> ist der Standardwert.)</param>
        <summary>Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</summary>
        <returns>Gibt eine wie angegeben konvertierte Zeichenfolge zurück.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die Konstanten `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, und `VbStrConv.Hiragana` kann dazu führen, dass zur Laufzeit Fehler bei der Verwendung in Gebietsschemas, in dem sie nicht gelten, aber nicht immer: die Konstanten `VbStrConv.Katakana` und `VbStrConv.Hiragana`können in einem nicht japanischen-System verwendet werden, mit das japanische Sprachpaket installiert. Darüber hinaus verwenden Sie Konstanten `VbStrConv.Wide` und `VbStrConv.Narrow` wird mit der eine ostasiatische Sprache installiert auf allen Systemen unterstützt.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Die `Conversion`-Argumenteinstellungen lauten:  
  
|Enumerationsmember|Beschreibung|  
|-|-|  
|`VbStrConv.None`|Führt keine Konvertierung|  
|`VbStrConv.LinguisticCasing`|Linguistische Regeln verwendet für Groß-/Kleinschreibung, anstatt File System (Standard). Mit gültigen `VbStrConv.UpperCase` und `VbStrConv.LowerCase` nur.|  
|`VbStrConv.UpperCase`|Konvertiert die Zeichenfolge in Großbuchstaben.|  
|`VbStrConv.LowerCase`|Konvertiert die Zeichenfolge in Kleinbuchstaben.|  
|`VbStrConv.ProperCase`|Konvertiert den ersten Buchstaben jedes Worts in einer Zeichenfolge in Großbuchstaben.|  
|`VbStrConv.Wide` <sup>*</sup>|Konvertiert schmale Zeichen (halbe Breite), in der Zeichenfolge in Breitzeichen (ganze Breite).|  
|`VbStrConv.Narrow` <sup>*</sup>|Konvertiert die Breitzeichen (ganze Breite) in der Zeichenfolge schmale Zeichen (halbe Breite).|  
|`VbStrConv.Katakana` <sup>**</sup>|Konvertiert Hiragana-Zeichen in der Zeichenfolge in Katakana-Zeichen.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Konvertiert Katakana-Zeichen in der Zeichenfolge in Hiragana-Zeichen.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Konvertiert traditionelle chinesische Zeichen in Chinesisch (vereinfacht).|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Konvertiert vereinfachte chinesische Zeichen in traditionellem Chinesisch.|  
  
 <sup>*</sup>Gilt für asiatische Gebietsschemas.  
  
 <sup>**</sup>Gilt nur für Japan.  
  
> [!NOTE]
>  Diese Konstanten werden in der common Language Runtime von .NET Framework angegeben. Daher können sie eine beliebige Stelle im Code anstelle der eigentlichen Werte verwendet werden. Die meisten kombiniert werden können (z. B. `UpperCase + Wide`), außer wenn sie sich gegenseitig ausschließende sind (z. B. `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Im folgenden werden die gültigen Worttrennzeichen für die richtige Groß-/Kleinschreibung: Null (`Chr$(0)`), horizontaler Tabulator (`Chr$(9)`), line Feed, Zeilenvorschub (`Chr$(10)`), vertikaler Tabulator (`Chr$(11)`), Seitenvorschub (`Chr$(12)`), Wagenrücklaufzeichen (`Chr$(13)`), Leerzeichen () Einzelbyte-Zeichensatz) (`Chr$(32)`). Der tatsächliche Wert für ein Leerzeichen, was die volle oder halbe Breite sein kann, variiert je nach Land/Region für ostasiatische Kulturen.  
  
   
  
## Examples  
 In diesem Beispiel konvertiert Text in Kleinbuchstaben.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Nicht unterstützte <paramref name="LocaleID" />, <paramref name="Conversion" /> &lt; 0 oder &gt; 2048 Bits oder nicht unterstützte Konvertierung für die angegebene Gebietsschema.</exception>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />Ausdruck. Die Länge der Zeichenfolge zurückgegeben werden.</param>
        <param name="Character">Erforderlich. Jeder gültige <see langword="Char" />, <see langword="String" />, oder <see langword="Object" /> Ausdruck. Es wird nur das erste Zeichen des Ausdrucks verwendet werden. Wenn Zeichen vom Typ <see langword="Object" />, es muss entweder enthalten eine <see langword="Char" /> oder ein <see langword="String" /> Wert.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen. Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" />ist kleiner als 0 oder <paramref name="Character" /> Typ ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />Ausdruck. Die Länge der Zeichenfolge zurückgegeben werden.</param>
        <param name="Character">Erforderlich. Jeder gültige <see langword="Char" />, <see langword="String" />, oder <see langword="Object" /> Ausdruck. Es wird nur das erste Zeichen des Ausdrucks verwendet werden. Wenn Zeichen vom Typ <see langword="Object" />, es muss entweder enthalten eine <see langword="Char" /> oder ein <see langword="String" /> Wert.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen. Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" />ist kleiner als 0 oder <paramref name="Character" /> Typ ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Erforderlich. <see langword="Integer" />Ausdruck. Die Länge der Zeichenfolge zurückgegeben werden.</param>
        <param name="Character">Erforderlich. Jeder gültige <see langword="Char" />, <see langword="String" />, oder <see langword="Object" /> Ausdruck. Es wird nur das erste Zeichen des Ausdrucks verwendet werden. Wenn Zeichen vom Typ <see langword="Object" />, es muss entweder enthalten eine <see langword="Char" /> oder ein <see langword="String" /> Wert.</param>
        <summary>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Objekt zurück, in der bzw. dem das angegebene Zeichen so häufig wie angegeben wiederholt wird.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Diese Funktion gibt eine `String` setzt sich wiederholenden Zeichen. Das Zeichen, das aus der Zeichenfolge besteht, ist das erste Zeichen in der `Character` Argument, und es wird dupliziert `Number` -Mal.  
  
   
  
## Examples  
 Dieses Beispiel verwendet die `StrDup` -Funktion eine Zeichenfolge zurückgibt, dupliziert Zeichen.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" />ist kleiner als 0 oder <paramref name="Character" /> Typ ist ungültig.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> ist <see langword="Nothing" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Erforderlich. Der Zeichenfolgenausdruck, deren Zeichen werden rückgängig gemacht werden. Wenn <c>Ausdruck</c> ist eine leere Zeichenfolge (""), wird eine Zeichenfolge der Länge 0 (null) zurückgegeben.</param>
        <summary>Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</summary>
        <returns>Gibt eine Zeichenfolge zurück, in der die Reihenfolge der Zeichen in einer bestimmten Zeichenfolge umgekehrt wurde.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `StrReverse` Funktion gibt eine Zeichenfolge, die gleichen Zeichen wie enthält `Expression`, aber in umgekehrter Reihenfolge.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Erforderlich. Jeder gültige <see langword="String" />-Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</summary>
        <returns>Gibt eine Zeichenfolge, die eine Kopie einer angegebenen Zeichenfolge ohne führende Leerzeichen enthält (<see langword="LTrim" />), ohne nachfolgende Leerzeichen (<see langword="RTrim" />), oder keine führenden oder nachstehenden Leerzeichen (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Die `LTrim`, `RTrim`, und `Trim` Funktionen entfernen von Leerzeichen am Ende von Zeichenfolgen.  
  
   
  
## Examples  
 In diesem Beispiel werden mit der `LTrim`-Funktion führende Leerzeichen und mit der `RTrim`-Funktion nachstehende Leerzeichen aus einer Zeichenfolgenvariablen entfernt. Mit der `Trim`-Funktion werden beide Typen von Leerzeichen entfernt.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Jeder gültige <see langword="String" /> oder <see langword="Char" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Erforderlich. Jeder gültige <see langword="String" /> oder <see langword="Char" /> Ausdruck.</param>
        <summary>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</summary>
        <returns>Gibt eine Zeichenfolge oder ein Zeichen zurück, die bzw. das die angegebene Zeichenfolge in Großbuchstaben enthält.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konvertiert nur Kleinbuchstaben in Großbuchstaben; alle Großbuchstaben und sonstigen Zeichen bleiben unverändert.  
  
 Diese Funktion verwendet die Informationen zur Kultur der Anwendung, wenn die Zeichenfolge bearbeiten, sodass die Groß-/Kleinschreibung Änderungen für das Gebietsschema geeignet sind, in denen die Anwendung verwendet wird.  
  
> [!IMPORTANT]
>  Wenn Ihre Anwendung sicherheitsrelevanten abhängig vom Ergebnis eines Vergleichs oder Änderung der Groß-/Kleinschreibung erstellt und gibt dann den Vorgang verwenden, sollten die <xref:System.String.Compare%2A?displayProperty=nameWithType> -Methode, und übergeben Sie <xref:System.StringComparison.Ordinal> oder <xref:System.StringComparison.OrdinalIgnoreCase> für die `comparisonType` Argument. Weitere Informationen finden Sie unter [wie Kultur wirkt sich auf Zeichenfolgen in Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 In diesem Beispiel wird die `UCase`-Funktion verwendet, um eine Zeichenfolge in Großbuchstaben zurückzugeben:  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
