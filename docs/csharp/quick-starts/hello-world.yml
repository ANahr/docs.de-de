documentType: Tutorial
title: "„Hello World“ in C#"
metadata:
  title: "„Hello World“ in C#. Einführung in die Programmiersprache C#."
  description: "In diesem Schnellstart verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes."
  audience: Developer
  level: Beginner
  nextTutorialHref: numbers-in-csharp
  nextTutorialTitle: Zahlen in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
items:
- durationInMinutes: 1
  content: "In diesem Schnellstart lernen Sie interaktiv die Grundlagen von C# kennen, indem Sie mit Ihrem Browser C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes anzeigen können. Es enthält eine Reihe von Lektionen, die mit einem „Hello World“-Programm beginnen. In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.\n"
  ms.openlocfilehash: ce1791bd7949c89269b1051d15765f5efd273e7c
  ms.sourcegitcommit: 401c4427a3ec0d1263543033b3084039278509dc
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 12/07/2017
- title: "Ausführen des ersten C#-Programms"
  durationInMinutes: 2
  content: "Führen Sie den folgenden Code im interaktiven Fenster aus. Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nHerzlichen Glückwunsch! Sie haben Ihr erstes C#-Programm ausgeführt. Hierbei handelt es sich um ein einfaches Programm, das die Meldung „Hello World!“ ausgibt. Diese Meldung wird anhand der <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode ausgegeben. Der `Console`-Typ stellt das Konsolenfenster dar. `WriteLine` ist eine Methode des `Console`-Typs, die eine Textzeile in dieser Textkonsole ausgibt.\n\nFahren wir fort, und sehen wir uns das einmal genauer an. In der restlichen Lektion wird die Arbeit mit dem `string`-Typ erklärt, der Text in C# darstellt. Wie der `Console`-Typ weist der `string`-Typ bestimmte Methoden auf. Bei den `string`-Methoden geht es um Text. \n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Deklarieren und Verwenden von Variablen
  durationInMinutes: 3
  content: "Ihr erstes Programm hat den Wert „Hello World!“ vom Typ `string` auf dem Bildschirm ausgegeben. \n\n> [!TIP]\n> Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben. Der **Compiler** findet diese Fehler und meldet diese. Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.\n> Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen. \n\nIhr erstes Programm gibt nur eine Meldung aus. Mithilfe von **Variablen** können Sie weitere nützliche Programme schreiben. Eine **Variable** ist ein Symbol, durch das Sie einen Code mit unterschiedlichen Werten ausführen können. Probieren Sie es aus! Ersetzen Sie den Code, den Sie in das interaktive Fenster geschrieben haben, durch den folgenden Code:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nDie erste Zeile deklariert die Variable `aFriend` und weist dieser den Wert „Bill“ zu. Die zweite Zeile gibt den Namen aus.\n\nSie können jeder Variable, die Sie deklarieren, unterschiedliche Werte zuweisen. Sie können den Namen in den Namen von einem Ihrer Freunde ändern. Fügen Sie im interaktiven Fenster nach dem Code, den Sie bereits hinzugefügt haben, die folgenden zwei Zeilen hinzu:\n\n```csharp\naFriend = \"Maria\";\nConsole.WriteLine(aFriend);\n```\n\nBeachten Sie, dass die Codezeile abhängig von dem in der `aFriend`-Variable gespeicherten Wert zwei verschiedene Meldungen ausgibt.\n\nVielleicht haben Sie auch bemerkt, dass in den letzten beiden Meldungen das Wort „Hello“ fehlte. Korrigieren wir dies nun.  Ändern Sie die Zeilen, die die Meldung ausgeben, wie folgt:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nKlicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen.\n\nIm weiteren Verlauf wird das Erstellen von Zeichenfolgen zum Drucken mit `+` umständlich. Mit der Zeichenfolgeninterpolation können Sie Zeichenfolgen übersichtlicher und lesbarer zusammensetzen.\n\nWenn Sie ein `$` vor den öffnenden Anführungszeichen der Zeichenfolge einfügen, können Sie Zeichenfolgenausdrücke – wie z.B. die Variable `aFriend` – innerhalb der Zeichenfolge in geschweiften Klammern einfügen.\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nKlicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Arbeiten mit Zeichenfolgen
  durationInMinutes: 5
  content: "Mit der vorherigen Änderung haben wir einen kurzen Blick darauf geworfen, wie Zeichenfolgen verwendet werden können. Sehen wir uns dies einmal näher an.\n\nDas `+`-Zeichen wird in C# als Operator bezeichnet. Wenn es in Zeichenketten angewendet wird (z.B. `firstString + secondString`), wird eine neue Zeichenkette mit dem Text aus der ersten gefolgt von dem Text aus der zweiten erstellt. Dies wird als *Zeichenfolgenverkettung* bezeichnet. Sie können eine beliebige Anzahl von Zeichenfolgen, einschließlich Zeichenfolgenvariablen, kombinieren.  Testen Sie Folgendes:\n\n```csharp\nstring firstFriend = \"Maria\";\nstring secondFriend = \"Sage\";\nConsole.WriteLine($\"My friends are {firstFriend} and {secondFriend}\");\n```\n\nBei Ihren ersten Schritten mit Zeichenketten können Sie die Länge einer Zeichenkette durch `Length` ermitteln. `Length` ist die **Eigenschaft** einer Zeichenfolge und gibt die Anzahl der Zeichen in dieser Zeichenfolge zurück. Fügen Sie im interaktiven Fenster unten den folgenden Code hinzu:\n\n```csharp\nConsole.WriteLine($\"The name {firstFriend} has {firstFriend.Length} letters.\");\nConsole.WriteLine($\"The name {secondFriend} has {secondFriend.Length} letters.\");\n```\n\n> [!TIP]\n> An dieser Stelle können Sie nun etwas experimentieren. Sie haben erfahren, dass mit `Console.WriteLine()` Text auf den Bildschirm geschrieben wird. Zudem haben Sie erfahren, wie Variablen deklariert und Zeichenfolgen miteinander verkettet werden. Experimentieren Sie im interaktiven Fenster und schreiben Sie selbst weitere Meldungen. Erstellen Sie Zeichenfolgen mit dem `+`-Operator.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Weitere Möglichkeiten zur Verwendung von Zeichenfolgen"
  durationInMinutes: 5
  content: "Sie haben mithilfe der **Methode** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Meldungen ausgegeben. Eine **Methode** ist ein Codeblock, der eine bestimmte Aktion implementiert. Diesem ist ein Name zugewiesen, damit Sie auf diesen zugreifen können. \n\nDer `string`-Typ verfügt über viele nützliche Methoden. Sehen wir uns die <xref:System.String.Trim%2A>-Methode und die verwandten Methoden <xref:System.String.TrimStart%2A> und <xref:System.String.TrimEnd%2A> einmal genauer an. Durch diese Methoden entfernen Sie führende und nachfolgende Leerräume:\n\n```csharp\nstring message = \"      Hello World!       \";\nConsole.WriteLine($\"[{message}]\");\n\nstring trimmedMessage = message.TrimStart();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.TrimEnd();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n\ntrimmedMessage = message.Trim();\nConsole.WriteLine($\"[{trimmedMessage}]\");\n```\n\nIn diesem Beispiel werden eine Reihe wichtiger Konzepte für die Arbeit mit Zeichenfolgen veranschaulicht. Die Methoden, die Zeichenfolgen bearbeiten, geben neue Zeichenfolgenobjekte zurück, statt die Änderungen zu implementieren. So können Sie erkennen, dass bei jedem Aufruf von einer der `Trim`-Methoden eine neue Zeichenkette zurückgegeben wird, die ursprüngliche Meldung jedoch nicht geändert wird.\n\nFür die Arbeit mit Zeichenfolgen stehen weitere Methoden zur Verfügung. Beispielsweise haben Sie sicher schon mal einen Befehl zum Suchen und Ersetzen in einem Editor oder Textverarbeitungsprogramm verwendet. Die <xref:System.String.Replace%2A>-Methode funktioniert bei einem `string`-Typ auf ähnliche Weise. So sucht diese nach einer Teilzeichenfolge und ersetzt diese durch einen anderen Text. Die <xref:System.String.Replace%2A>-Methode enthält zwei **Parameter**, nämlich die Zeichenfolgen zwischen den Klammern. Die erste Zeichenfolge ist der Text, nach dem gesucht wird. Die zweite Zeichenfolge ist der Text, durch den die erste Zeichenfolge ersetzt werden soll. Versuchen Sie es selbst. Fügen Sie den folgenden Code hinzu:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nmessage = message.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(message);\n```\n\nZwei andere nützliche Methoden bestehen darin, eine Zeichenfolge in vollständig in GROSSBUCHSTABEN oder kleinbuchstaben zu erstellen. Testen Sie den folgenden Code:\n\n```csharp\nstring message = \"Hello World!\";\nConsole.WriteLine(message);\nConsole.WriteLine(message.ToUpper());\nConsole.WriteLine(message.ToLower());\n```\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Suchzeichenfolgen
  durationInMinutes: 10
  content: "Der andere Teil eines Vorgangs zum *Suchen und Ersetzen* besteht darin, nach einem Text in einer Zeichenfolge zu suchen. Für die Suche können Sie die <xref:System.String.Contains%2A>-Methode verwenden. Diese gibt an, ob eine Zeichenfolge eine Teilzeichenfolge enthält. Verwenden Sie zum Experimentieren mit <xref:System.String.Contains%2A> den folgenden Code:\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.Contains(\"goodbye\"));\nConsole.WriteLine(message.Contains(\"greetings\"));\n```\n\nDie <xref:System.String.Contains%2A>-Methode gibt einen Wert vom Typ **boolean** zurück, der angibt, ob die Zeichenfolge, nach der Sie gesucht haben, gefunden wurde. Ein **boolean**-Datentyp speichert entweder den Wert `true` oder `false`. In einer späteren Lektion erfahren Sie mehr über **boolean**-Werte.\n\n***Übung***\n\nEs gibt zwei ähnliche Methoden, <xref:System.String.StartsWith%2A> und <xref:System.String.EndsWith%2A>, die ebenfalls nach Teilzeichenfolgen in einer Zeichenfolge suchen. Diese suchen am Anfang oder am Ende der Zeichenfolge nach einer Teilzeichenfolge. Versuchen Sie, im vorherigen Beispiel <xref:System.String.StartsWith%2A> und <xref:System.String.EndsWith%2A> anstelle von <xref:System.String.Contains%2A> zu verwenden. Suchen Sie am Anfang einer Zeichenfolge nach „You“ oder „goodbye“. Suchen Sie am Ende einer Zeichenfolge nach „hello“ oder „goodbye“.\n\n> [!Note]\n> Achten Sie am Ende der Zeichenfolge auf die Interpunktion, wenn Sie probehalber nach einem Text suchen. Wenn die Zeichenfolge mit einem Punkt endet, müssen Sie nach einer Zeichenfolge suchen, die mit einem Punkt endet.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Übung abgeschlossen"
  durationInMinutes: 3
  content: "Sieht ihr Code ungefähr wie der Folgende aus?\n\n```csharp\nstring message = \"You say goodbye, and I say hello\";\nConsole.WriteLine(message.StartsWith(\"You\"));\nConsole.WriteLine(message.StartsWith(\"goodbye\"));\n\nConsole.WriteLine(message.EndsWith(\"hello\"));\nConsole.WriteLine(message.EndsWith(\"goodbye\"));\n```\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- content: "Sie haben den Schnellstart „Hello World in C#“ abgeschlossen.\n\nSie können diese Schnellstarts für Ihre eigene Entwicklungsumgebung fortsetzen. Das .NET-Thema [Erste Schritte in 10 Minuten](https://www.microsoft.com/net/core) umfasst Anweisungen zum Einrichten Ihrer lokalen Entwicklungsumgebung. Sobald Sie damit fertig sind, fahren Sie mit [Zahlen in C#](numbers-in-csharp-local.md) in Ihrer lokalen Umgebung fort.\n\nWeitere Informationen zum Arbeiten mit dem `string`-Typ finden Sie im [C#-Programmierhandbuch](../programming-guide/index.md) im Thema [Zeichenfolgen (C#-Programmierhandbuch)](../programming-guide/strings/index.md).\0"
