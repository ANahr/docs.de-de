### YamlMime:Tutorial
title: „Hello World“ in C#
metadata:
  title: 'Interaktives Tutorial „Hello World“: C#-Schnellstarts'
  description: In diesem Schnellstart verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  level: Beginner
  ms.topic: quickstart
  ms.date: 08/24/2018
  nextTutorialHref: numbers-in-csharp.yml
  nextTutorialTitle: Zahlen in C#
  displayType: two-column
  interactive: csharp
  ms.custom: mvc
  ms.openlocfilehash: 26aeb125a69b210bee96fe32818304cc72e3da17
  ms.sourcegitcommit: fb78d8abbdb87144a3872cf154930157090dd933
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 10/01/2018
  ms.locfileid: "47421845"
items:
- durationInMinutes: 1
  content: >
    In diesem Schnellstart lernen Sie interaktiv die Grundlagen von C# kennen, indem Sie mit Ihrem Browser C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes anzeigen. Es enthält eine Reihe von Lektionen, die mit einem „Hello World“-Programm beginnen. In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.
- title: Ausführen des ersten C#-Programms
  durationInMinutes: 2
  content: "Führen Sie den folgenden Code im interaktiven Fenster aus. Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:\n\n```csharp\nConsole.WriteLine(\"Hello World!\");\n```\n\nHerzlichen Glückwunsch! Sie haben Ihr erstes C#-Programm ausgeführt. Hierbei handelt es sich um ein einfaches Programm, das die Meldung „Hello World!“ ausgibt. Diese Meldung wird anhand der <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>-Methode ausgegeben. Der `Console`-Typ stellt das Konsolenfenster dar. `WriteLine` ist eine Methode des `Console`-Typs, die eine Textzeile in dieser Textkonsole ausgibt.\n\nFahren wir fort, und sehen wir uns das einmal genauer an. In der restlichen Lektion wird die Arbeit mit dem `string`-Typ erklärt, der Text in C# darstellt. Wie der `Console`-Typ weist der `string`-Typ bestimmte Methoden auf. Bei den `string`-Methoden geht es um Text. \n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Deklarieren und Verwenden von Variablen
  durationInMinutes: 3
  content: "Ihr erstes Programm hat den Wert „Hello World!“ vom Typ `string` auf dem Bildschirm ausgegeben. \n\n> [!TIP]\n> Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben. Der **Compiler** findet diese Fehler und meldet diese. Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.\n> Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen. \n\nIhr erstes Programm gibt nur eine Meldung aus. Mithilfe von **Variablen** können Sie weitere nützliche Programme schreiben. Eine **Variable** ist ein Symbol, durch das Sie einen Code mit unterschiedlichen Werten ausführen können. Probieren Sie es aus! Ersetzen Sie den Code, den Sie in das interaktive Fenster geschrieben haben, durch den folgenden Code:\n\n```csharp\nstring aFriend = \"Bill\";\nConsole.WriteLine(aFriend);\n```\n\nDie erste Zeile deklariert die Variable `aFriend` und weist dieser den Wert „Bill“ zu. Die zweite Zeile gibt den Namen aus.\n\nSie können jeder Variable, die Sie deklarieren, unterschiedliche Werte zuweisen. Sie können den Namen in den Namen von einem Ihrer Freunde ändern. Fügen Sie im interaktiven Fenster nach dem Code, den Sie bereits hinzugefügt haben, die folgenden zwei Zeilen hinzu:\n\n```csharp\naFriend = \"Maira\";\nConsole.WriteLine(aFriend);\n```\n\nBeachten Sie, dass die Codezeile abhängig von dem in der `aFriend`-Variable gespeicherten Wert zwei verschiedene Meldungen ausgibt.\n\nVielleicht haben Sie auch bemerkt, dass in den letzten beiden Meldungen das Wort „Hello“ fehlte. Korrigieren wir dies nun.  Ändern Sie die Zeilen, die die Meldung ausgeben, wie folgt:\n\n```csharp\nConsole.WriteLine(\"Hello \" + aFriend);\n```\n\nKlicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen.\n\nSie haben `+` verwendet, um Zeichenfolgen aus **Variablen-** und **Konstanten**zeichenfolgen zu erstellen. Es gibt eine bessere Möglichkeit.\nSie können eine Variable zwischen `{`- und `}`-Zeichen platzieren, um C# anzuweisen, den betreffenden Text durch den Wert der Variablen zu ersetzen.\n\nDies wird als [Zeichenfolgeninterpolation](../language-reference/tokens/interpolated.md) bezeichnet.\n\nWenn Sie das `$`-Zeichen vor den öffnenden Anführungszeichen der Zeichenfolge einfügen, können Sie anschließend Variablen, wie etwa `aFriend` innerhalb der Zeichenfolge in geschweiften Klammern einfügen. Probieren Sie es aus:\n\n\n```csharp\nConsole.WriteLine($\"Hello {aFriend}\");\n```\n\nKlicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen. Anstelle von „Hello {aFriend}“ sollte die Nachricht „Hello Maira“ lauten.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Arbeiten mit Zeichenfolgen
  durationInMinutes: 5
  content: >
    Mit der vorherigen Änderung haben wir einen kurzen Blick darauf geworfen, wie Zeichenfolgen verwendet werden können. Sehen wir uns dies einmal näher an.


    Sie sind nicht auf eine einzelne Variable zwischen den geschweiften Klammern beschränkt. Testen Sie Folgendes:


    ```csharp

    string firstFriend = "Maria";

    string secondFriend = "Sage";

    Console.WriteLine($"My friends are {firstFriend} and {secondFriend}");

    ```


    Wenn Sie sich näher mit Zeichenfolgen beschäftigen, werden Sie feststellen, dass sie mehr als eine Ansammlung von Buchstaben sind. Sie können die Länge einer Zeichenfolge mithilfe von `Length` ermitteln. `Length` ist die **Eigenschaft** einer Zeichenfolge und gibt die Anzahl der Zeichen in dieser Zeichenfolge zurück. Fügen Sie im interaktiven Fenster unten den folgenden Code hinzu:


    ```csharp

    Console.WriteLine($"The name {firstFriend} has {firstFriend.Length} letters.");

    Console.WriteLine($"The name {secondFriend} has {secondFriend.Length} letters.");

    ```


    > [!TIP]

    > An dieser Stelle können Sie nun etwas experimentieren. Sie haben erfahren, dass mit `Console.WriteLine()` Text auf den Bildschirm geschrieben wird. Zudem haben Sie erfahren, wie Variablen deklariert und Zeichenfolgen miteinander verkettet werden. Experimentieren Sie im interaktiven Fenster und Das Fenster verfügt über ein Feature mit dem Namen **IntelliSense**, das Vorschläge für Ihre möglichen Aktionen unterbreitet. Geben Sie einen `.` hinter dem `d` in `firstFriend` ein. Sie sehen eine Liste mit Vorschlägen für Eigenschaften und Methoden, die Sie verwenden können.


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- title: Weitere Möglichkeiten zur Verwendung von Zeichenfolgen
  durationInMinutes: 5
  content: "Sie haben mithilfe der **Methode** <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> Meldungen ausgegeben. Eine **Methode** ist ein Codeblock, der eine bestimmte Aktion implementiert. Diesem ist ein Name zugewiesen, damit Sie auf diesen zugreifen können. \n\nNehmen wir an, Ihre Zeichenfolgen weisen führende oder schließende Leerzeichen auf, die Sie nicht anzeigen möchten. Sie möchten die Zeichenfolgen um die Leerzeichen **kürzen**.\nDie <xref:System.String.Trim%2A>-Methode und die verwandten <xref:System.String.TrimStart%2A>-Methoden und <xref:System.String.TrimEnd%2A> erledigen das für Sie. Sie können einfach diese Methoden verwenden, um führende und schließende Leerzeichen zu entfernen. Testen Sie den folgenden Code:\n\n```csharp\nstring greeting = \"      Hello World!       \";\nConsole.WriteLine($\"[{greeting}]\");\n\nstring trimmedGreeting = greeting.TrimStart();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.TrimEnd();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n\ntrimmedGreeting = greeting.Trim();\nConsole.WriteLine($\"[{trimmedGreeting}]\");\n```\n\nIn diesem Beispiel werden eine Reihe wichtiger Konzepte für die Arbeit mit Zeichenfolgen veranschaulicht. Die Methoden, die Zeichenfolgen bearbeiten, geben neue Zeichenfolgenobjekte zurück, statt die Änderungen zu implementieren. So können Sie erkennen, dass bei jedem Aufruf von einer der `Trim`-Methoden eine neue Zeichenkette zurückgegeben, die ursprüngliche Meldung jedoch nicht geändert wird.\n\nFür die Arbeit mit Zeichenfolgen stehen weitere Methoden zur Verfügung. Beispielsweise haben Sie sicher schon mal einen Befehl zum Suchen und Ersetzen in einem Editor oder Textverarbeitungsprogramm verwendet. Die <xref:System.String.Replace%2A>-Methode funktioniert bei einer Zeichenfolge auf ähnliche Weise. Sie sucht nach einer Teilzeichenfolge und ersetzt diese durch einen anderen Text. Die <xref:System.String.Replace%2A>-Methode enthält zwei **Parameter**, nämlich die Zeichenfolgen zwischen den Klammern. Die erste Zeichenfolge ist der Text, nach dem gesucht wird. Die zweite Zeichenfolge ist der Text, durch den die erste Zeichenfolge ersetzt werden soll. Versuchen Sie es selbst. Fügen Sie den folgenden Code hinzu: Geben Sie ihn ein, um die Hinweise zu sehen, während Sie mit der Eingabe von `.Re` nach der Variable `sayHello` beginnen:\n\n```csharp\nstring sayHello = \"Hello World!\";\nConsole.WriteLine(sayHello);\nsayHello = sayHello.Replace(\"Hello\", \"Greetings\");\nConsole.WriteLine(sayHello);\n```\n\nZwei andere nützliche Methoden bestehen darin, eine Zeichenfolge in vollständig in GROSSBUCHSTABEN oder kleinbuchstaben zu erstellen. Testen Sie den folgenden Code: Geben Sie ihn ein, um zu sehen, wie **IntelliSense** Hinweise bereitstellt, sobald Sie mit der Eingabe von `To` beginnen:\n\n```csharp\nConsole.WriteLine(sayHello.ToUpper());\nConsole.WriteLine(sayHello.ToLower());\n```\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Suchzeichenfolgen
  durationInMinutes: 10
  content: "Der andere Teil eines Vorgangs zum *Suchen und Ersetzen* besteht darin, nach einem Text in einer Zeichenfolge zu suchen. Für die Suche können Sie die <xref:System.String.Contains%2A>-Methode verwenden. Diese gibt an, ob eine Zeichenfolge eine Teilzeichenfolge enthält. Verwenden Sie zum Experimentieren mit <xref:System.String.Contains%2A> den folgenden Code:\n\n```csharp\nstring songLyrics = \"You say goodbye, and I say hello\";\nConsole.WriteLine(songLyrics.Contains(\"goodbye\"));\nConsole.WriteLine(songLyrics.Contains(\"greetings\"));\n```\n\nDie <xref:System.String.Contains%2A>-Methode gibt einen Wert vom Typ **boolean** zurück, der angibt, ob die Zeichenfolge, nach der Sie gesucht haben, gefunden wurde. Ein **boolean**-Datentyp speichert entweder den Wert `true` oder `false`. In einer späteren Lektion erfahren Sie mehr über **boolean**-Werte.\n\n***Übung***\n\nEs gibt zwei ähnliche Methoden, <xref:System.String.StartsWith%2A> und <xref:System.String.EndsWith%2A>, die ebenfalls nach Teilzeichenfolgen in einer Zeichenfolge suchen. Diese suchen am Anfang oder am Ende der Zeichenfolge nach einer Teilzeichenfolge. Versuchen Sie, im vorherigen Beispiel <xref:System.String.StartsWith%2A> und <xref:System.String.EndsWith%2A> anstelle von <xref:System.String.Contains%2A> zu verwenden. Suchen Sie am Anfang einer Zeichenfolge nach „You“ oder „goodbye“. Suchen Sie am Ende einer Zeichenfolge nach „hello“ oder „goodbye“.\n\n> [!Note]\n> Achten Sie am Ende der Zeichenfolge auf die Interpunktion, wenn Sie probehalber nach einem Text suchen. Wenn die Zeichenfolge mit einem Punkt endet, müssen Sie nach einer Zeichenfolge suchen, die mit einem Punkt endet.\n\nSie sollten `true` erhalten, wenn die Eingabe mit „You“ beginnt und mit „hello“ endet, oder FALSE, wenn die Eingabe mit „goodbye“ beginnt oder endet. \n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Übung abgeschlossen
  durationInMinutes: 3
  content: >
    Sieht ihr Code ungefähr wie der Folgende aus?


    ```csharp

    string songLyrics = "You say goodbye, and I say hello";

    Console.WriteLine(songLyrics.StartsWith("You"));

    Console.WriteLine(songLyrics.StartsWith("goodbye"));


    Console.WriteLine(songLyrics.EndsWith("hello"));

    Console.WriteLine(songLyrics.EndsWith("goodbye"));

    ```


    > [!NOTE]

    > Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).
- content: >-
    Sie haben den Schnellstart „Hello World in C#“ abgeschlossen.


    Weitere Informationen zum Arbeiten mit dem `string`-Typ finden Sie im [C#-Programmierhandbuch](../programming-guide/index.md) im Thema [Zeichenfolgen (C#-Programmierhandbuch)](../programming-guide/strings/index.md).

    [Tipps zum Arbeiten mit Zeichenfolgen](../how-to/index.md#working-with-strings).
