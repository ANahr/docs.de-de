### YamlMime:YamlDocument
documentType: Tutorial
title: 'Sammlungen in c#'
metadata:
  title: 'Sammlungen in C# geschrieben. Informationen Sie zum Verwenden von Sequenzen und Auflistungen in C# geschrieben.'
  description: 'In diesem Lernprogramm verwenden Sie Ihren Browser um C#-interaktiv zu erhalten. C#-Code schreiben und die Ergebnisse der kompilieren und Ausführen von Code direkt im Browser angezeigt.'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      In diesem Lernprogramm erfahren Sie, C#-interaktiv mithilfe Ihres Browsers zum Schreiben von C#- und die Ergebnisse der Kompilierung und Ausführung des Codes angezeigt. Es enthält eine Reihe von Lektionen, in denen erstellen, ändern und Untersuchen von Auflistungen und Arrays.
  - title: Erstellen von Listen
    durationInMinutes: 2
    content: |
      Führen Sie den folgenden Code in das interactive-Fenster. Geben Sie hierzu den folgenden Codeblock im interactive-Fenster (ersetzen Sie "<name>" durch den Namen Ihres), und klicken Sie auf die **ausführen** Schaltfläche:

      ```csharp
      var names = new List<string> { "<name>", "Ana", "Felipe" };
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      Sie haben gerade erstellte eine Liste von Zeichenfolgen, drei Namen dieser Liste hinzugefügt, und die Namen in Großbuchstaben ausgegeben. Sie verwenden Konzepte, die Sie haben gelernt in zuvor Schnellstarts so durchlaufen Sie die Liste.

      Der Code zum Anzeigen der Namen nutzt **interpoliert Zeichenfolgen**.  Wenn Sie voranstellen eine `string` mit der `$` Zeichen ist, können Sie C#-Code in der Deklaration Zeichenfolge einbetten. Die tatsächliche Zeichenfolge ersetzt dieses C#-Code mit dem Wert, den er generiert wird. In diesem Beispiel ersetzt die `{name.ToUpper()}` jeder Name konvertiert, Großbuchstaben, da Sie wird aufgerufen, die <xref:System.String.ToUpper%2A> Methode.

      Wir untersuchen zu halten.

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - title: Ändern der Ordnerinhalt auflisten
    durationInMinutes: 3
    content: |
      Die Auflistung, die Sie erstellt mithilfe der <xref:System.Collections.Generic.List%601> Typ. Dieser Typ speichert Elementsequenzen. Sie geben den Typ der Elemente zwischen den spitzen Klammern.

      Ein wichtiger Aspekt dieses <xref:System.Collections.Generic.List%601> Typ ist, dass es vergrößert oder verkleinert werden, können Sie zum Hinzufügen oder Entfernen von Elementen zu aktivieren. Fügen Sie den folgenden Code unter dem Code, den Sie bereits geschrieben haben:

      ```csharp
      Console.WriteLine();
      names.Add("Maria");
      names.Add("Bill");
      names.Remove("Ana");
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      Sie haben zwei weitere Namen bis zum Ende der Liste hinzugefügt. Sie haben eine auch ebenfalls entfernt.

      Die <xref:System.Collections.Generic.List%601> ermöglicht es Ihnen, einzelne Elemente von verweisen **Index** ebenfalls. Sie greifen auf Objekte, die mit der `[` und `]` Token. Fügen Sie unter Was Sie bereits geschrieben haben, und wiederholen sie den folgenden Code hinzu:

      ```csharp
      Console.WriteLine($"My name is {names[0]}.");
      Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");
      ```

      Sie sind nicht zulässig, auf das Ende der Liste zuzugreifen. Sie können überprüfen, wie lange die Liste verwendet die <xref:System.Collections.Generic.List%601.Count%2A> Eigenschaft. Fügen Sie den folgenden Code aus, um ihn zu testen:

      ```csharp
      Console.WriteLine($"The list has {names.Count} people in it");
      ```

      Klicken Sie auf **führen** erneut aus, um die Ergebnisse anzuzeigen. C#-Indizes bei 0 beginnt, daher der größte gültige Index eins kleiner als die Anzahl der Elemente in der Liste.

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - title: Suchen und sortieren Listen
    durationInMinutes: 5
    content: |
      Unsere Beispiele relativ kleine Listen werden verwendet, aber Ihre Anwendungen möglicherweise häufig Listen mit viele weitere Elemente, manchmal in Tausenden Nummerierung erstellen. In diesen größere Sammlungen nach Elementen suchen möchten, müssen Sie die Liste der für verschiedene Elemente durchsuchen. Die <xref:System.Collections.Generic.List%601.IndexOf%2A> Methode sucht nach einem Element und gibt den Index des Elements zurück. Wiederholen Sie diese Option, um seine Funktionsweise.  Fügen Sie den folgenden Code unter bisher geschriebene hinzu:

      ```csharp
      var index = names.IndexOf("Felipe");
      if (index != -1)
        Console.WriteLine($"The name {names[index]} is at index {index}");

      var notFound = names.IndexOf("Not Found");
        Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");
      ```

      Sie nicht wissen, ob ein Element in der Liste ist, also den zurückgegebene Index immer überprüfen sollten <xref:System.Collections.Generic.List%601.IndexOf%2A>. Wenn Sie sie-1 ist, wird das Element wurde nicht gefunden.

      Die Elemente in der Liste können auch sortiert werden. Die <xref:System.Collections.Generic.List%601.Sort%2A> Methode werden alle Elemente in der Liste in der normalen Reihenfolge (in alphabetischer Reihenfolge im Fall von Zeichenfolgen). Fügen Sie Code hinzu, und führen Sie erneut aus:

      ```csharp
      names.Sort();
      foreach (var name in names)
      {
        Console.WriteLine($"Hello {name.ToUpper()}!");
      }
      ```

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - title: Listen mit anderen Typen
    durationInMinutes: 5
    content: |
      Haben Sie verwendet wurden die `string` Typ in Listen bisher. Wir stellen eine <xref:System.Collections.Generic.List%601> mithilfe eines anderen Typs. Erstellen Sie eine Menge von Zahlen. Löschen Sie den Code, den Sie bisher geschrieben haben, und Ersetzen Sie sie mit diesem:

      ```csharp
      var fibonacciNumbers = new List<int> {1, 1};
      ```

      Die eine Liste mit ganzen Zahlen erstellt, und legt die ersten beiden Ganzzahlen auf den Wert 1 fest. Dies sind die ersten beiden Werte, der eine *Fibonacci-Sequenz*, eine Sequenz von Zahlen. Jede nächste Fibonacci-Zahl wird ermittelt, indem die Summe der beiden vorherigen Zahlen. Fügen Sie diesen Code hinzu:

      ```csharp
      var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
      var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];

      fibonacciNumbers.Add(previous + previous2);

      foreach(var item in fibonacciNumbers)
          Console.WriteLine(item);
      ```

      Drücken Sie **ausführen** zu den Ergebnissen finden Sie unter

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - title: Herausforderung
    durationInMinutes: 10
    content: |
      Überprüfen, ob Sie zusammen platzieren können einige der in den Lektionen aus dieser und früheren Lektionen. Erweitern Sie auf, was Sie bisher mit Fibonacci-Zahlen erstellt haben. Versuchen Sie es, und Schreiben Sie den Code, um die ersten 20 Zahlen in der Sequenz zu generieren.

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - title: Vollständige Herausforderung
    durationInMinutes: 3
    content: |
      Werden Sie mit etwa wie folgt aufgerufen?

      ```csharp
      var fibonacciNumbers = new List<int> {1, 1};

      while (fibonacciNumbers.Count < 20)
      {
          var previous = fibonacciNumbers[fibonacciNumbers.Count - 1];
          var previous2 = fibonacciNumbers[fibonacciNumbers.Count - 2];
          
          fibonacciNumbers.Add(previous + previous2);
      }
      foreach(var item in fibonacciNumbers)
          Console.WriteLine(item);
      ```

      Bei jeder Iteration der Schleife weitergeleitet Sie die letzten beiden Ganzzahlen in der Liste, und diesen Wert zur Liste hinzufügen, summiert werden. Die Schleife wird wiederholt, bis Sie die Liste 20 Elemente hinzugefügt haben.

      > [!NOTE]
      > Diese Codierung online-Umgebung ist im Vorschaumodus. Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).
  - content: |
      Sie haben das Lernprogramm Liste abgeschlossen.

      Weitere Informationen finden Sie Informationen zum Arbeiten mit der `List` Geben Sie in der [Handbuch für die .NET](../../standard/index.md) Thema auf [Sammlungen](../../standard/collections/index.md). Sie erfahren auch über viele andere Sammlungstypen.