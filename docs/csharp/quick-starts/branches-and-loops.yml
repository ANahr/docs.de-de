### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="dc91f-101">Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="dc91f-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="dc91f-102">Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="dc91f-102">Branches and loops</span></span>
  description: '<span data-ttu-id="dc91f-103">In diesem Lernprogramm zu Verzweigungen und Schleifen verwenden Sie Ihren Browser um C#-interaktiv zu erhalten.</span><span class="sxs-lookup"><span data-stu-id="dc91f-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="dc91f-104">Sie sind im Begriff C#-Code schreiben und die Ergebnisse der kompilieren und Ausführen von Code direkt im Browser angezeigt.</span><span class="sxs-lookup"><span data-stu-id="dc91f-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="dc91f-105">In diesem Lernprogramm erfahren Sie, über das Schreiben von Code, der Variablen untersucht und Ausführungspfad basierend auf diese Variablen ändert.</span><span class="sxs-lookup"><span data-stu-id="dc91f-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="dc91f-106">C#-schreiben interaktiv verwenden, Sie mithilfe des Browsers zum Schreiben von C#- und die Ergebnisse der Kompilierung und Ausführung des Codes angezeigt.</span><span class="sxs-lookup"><span data-stu-id="dc91f-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="dc91f-107">Es enthält eine Reihe von Lektionen, in denen untersuchen, Verzweigungen und Schleifenkonstrukte in C# geschrieben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="dc91f-108">In diesen Lektionen erfahren Sie die Grundlagen der Programmiersprache c#.</span><span class="sxs-lookup"><span data-stu-id="dc91f-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="dc91f-109">Verwenden des If Entscheidungen Anweisung</span><span class="sxs-lookup"><span data-stu-id="dc91f-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="dc91f-110">Führen Sie den folgenden Code in das interactive-Fenster.</span><span class="sxs-lookup"><span data-stu-id="dc91f-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="dc91f-111">Zu diesem Zweck geben Sie den folgenden Codeblock in das interactive-Fenster, und klicken Sie auf die **ausführen** Schaltfläche:</span><span class="sxs-lookup"><span data-stu-id="dc91f-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="dc91f-112">Ändern Sie die Deklaration von `b` , damit die Summe kleiner als 10 ist:</span><span class="sxs-lookup"><span data-stu-id="dc91f-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="dc91f-113">Klicken Sie auf die **ausführen** erneut.</span><span class="sxs-lookup"><span data-stu-id="dc91f-113">Click the **Run** button again.</span></span> <span data-ttu-id="dc91f-114">Da die Antwort auf weniger als 10 ist, wird nichts ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="dc91f-115">Die **Bedingung** du Test ist "false".</span><span class="sxs-lookup"><span data-stu-id="dc91f-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="dc91f-116">Sie verfügen nicht über keinen Code für die ausgeführt werden, da Sie nur eine der möglichen Verzweigungen für geschrieben haben eine `if` Anweisung: die Verzweigung "true".</span><span class="sxs-lookup"><span data-stu-id="dc91f-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="dc91f-117">Wie Sie c# (oder einer beliebigen Programmiersprache) durchsuchen, müssen Sie Supportcenter beim Schreiben von Code.</span><span class="sxs-lookup"><span data-stu-id="dc91f-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="dc91f-118">Die **Compiler** findet diese Fehler und melden Sie diese für Sie.</span><span class="sxs-lookup"><span data-stu-id="dc91f-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="dc91f-119">Wenn die Ausgabe Fehlermeldungen enthält, sehen Sie sich den Beispielcode, und den Code in das interactive-Fenster zu sehen, zu beheben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="dc91f-120">Diese Übung hilft die Struktur der C#-Code vertraut zu machen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="dc91f-121">Dieses erste Beispiel veranschaulicht die Leistungsfähigkeit von `if` und booleschen Typen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="dc91f-122">Ein *booleschen* ist eine Variable, die einen von zwei Werten haben kann: `true` oder `false`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="dc91f-123">C# definiert eine Sonderform `bool` für boolesche Variablen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="dc91f-124">Die `if` Anweisung überprüft den Wert von einem `bool`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="dc91f-125">Wenn der Wert ist `true`, die folgende Anweisung die `if` ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="dc91f-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="dc91f-126">Andernfalls wird sie übersprungen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="dc91f-127">Dieser Prozess der Überprüfung von Bedingungen und Ausführen von Anweisungen, die anhand dieser Bedingungen ist sehr leistungsfähig.</span><span class="sxs-lookup"><span data-stu-id="dc91f-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="dc91f-128">Lassen Sie uns mehr.</span><span class="sxs-lookup"><span data-stu-id="dc91f-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="dc91f-129">Diese Codierung online-Umgebung ist im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="dc91f-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="dc91f-130">Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="dc91f-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: '<span data-ttu-id="dc91f-131">Erstellen Sie, wenn und andere arbeiten Sie zusammen</span><span class="sxs-lookup"><span data-stu-id="dc91f-131">Make if and else work together</span></span>'
    durationInMinutes: 10
    content: |

      <span data-ttu-id="dc91f-132">Um anderen Code, der in den Verzweigungen "true" und "false" auszuführen, erstellen Sie eine `else` Verzweigung, die ausgeführt wird, wenn die Bedingung "false" ist.</span><span class="sxs-lookup"><span data-stu-id="dc91f-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="dc91f-133">Versuchen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="dc91f-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="dc91f-134">Die Anweisung nach der `else` Schlüsselwort führt nur, wenn die getestete Bedingung ist `false`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="dc91f-135">Kombinieren von `if` und `else` mit einem booleschen Operator Bedingungen bietet die Leistungsfähigkeit, die Sie benötigen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="dc91f-136">Der Einzug gilt unter der `if` und `else` Anweisungen ist für interaktive Workflowdienste-Reader.</span><span class="sxs-lookup"><span data-stu-id="dc91f-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="dc91f-137">Die C#-Sprache behandeln nicht Einzug oder Leerräume als signifikant.</span><span class="sxs-lookup"><span data-stu-id="dc91f-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="dc91f-138">Die Anweisung nach der `if` oder `else` Schlüsselwort wird basierend auf der Bedingung ausgeführt werden.</span><span class="sxs-lookup"><span data-stu-id="dc91f-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="dc91f-139">Alle Beispiele in diesem Lernprogramm führen Sie üblicherweise um die Zeilen basierend auf Ausführung einen Einzug festzulegen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="dc91f-140">Da Einzug nicht relevant ist, müssen Sie verwenden `{` und `}` , um anzugeben, wenn Sie möchten mehr als eine Anweisung als Teil des Blocks, die bedingt ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="dc91f-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="dc91f-141">C#-Programmierer in der Regel verwenden Sie die geschweiften Klammern, auf allen `if` und `else` Klauseln.</span><span class="sxs-lookup"><span data-stu-id="dc91f-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="dc91f-142">Das folgende Beispiel ist identisch mit, was Sie gerade erstellt haben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="dc91f-143">Versuch es.</span><span class="sxs-lookup"><span data-stu-id="dc91f-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="dc91f-144">Über den Rest dieses Lernprogramms, enthalten alle Codebeispiele geschweifte Klammern folgen Methoden akzeptiert.</span><span class="sxs-lookup"><span data-stu-id="dc91f-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="dc91f-145">Sie können etwas kompliziertere Bedingungen testen:</span><span class="sxs-lookup"><span data-stu-id="dc91f-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="dc91f-146">Die `&&` stellt "und".</span><span class="sxs-lookup"><span data-stu-id="dc91f-146">The `&&` represents "and".</span></span> <span data-ttu-id="dc91f-147">Dies bedeutet, dass beide Bedingungen zum Ausführen der Anweisung in der "true" Verzweigung "true" sein müssen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="dc91f-148">In diesen Beispielen auch anzeigen, können Sie mehrere Anweisungen in jede bedingte Verzweigung verwenden, sofern Sie sie in Klammern einschließen `{` und `}`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="dc91f-149">Sie können auch `||` zur Darstellung "oder":</span><span class="sxs-lookup"><span data-stu-id="dc91f-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="dc91f-150">Diese Codierung online-Umgebung ist im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="dc91f-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="dc91f-151">Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="dc91f-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: '<span data-ttu-id="dc91f-152">Verwenden Sie Schleifen, um Vorgänge zu wiederholen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-152">Use loops to repeat operations</span></span>'
    durationInMinutes: 6
    content: |
      <span data-ttu-id="dc91f-153">Ist ein weiteres wichtiges Konzept größere Programme erstellen **Schleifen**.</span><span class="sxs-lookup"><span data-stu-id="dc91f-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="dc91f-154">Schleifen verwenden, wiederholen die Anweisungen, die Sie mehr als einmal ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="dc91f-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="dc91f-155">Wiederholen Sie diesen Code im interactive-Fenster aus:</span><span class="sxs-lookup"><span data-stu-id="dc91f-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="dc91f-156">Die `while` -Anweisung überprüft eine Bedingung und führt die Anweisung nach der `while`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="dc91f-157">Es wird wiederholt, überprüfen die Bedingung, und diese Anweisungen ausführen, bis die Bedingung "false" ist.</span><span class="sxs-lookup"><span data-stu-id="dc91f-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="dc91f-158">In diesem Beispiel ist eine andere new-Operator.</span><span class="sxs-lookup"><span data-stu-id="dc91f-158">There's one other new operator in this example.</span></span> <span data-ttu-id="dc91f-159">Die `++` nach der `counter` Variable ist die **Inkrement** Operator.</span><span class="sxs-lookup"><span data-stu-id="dc91f-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="dc91f-160">Es fügt 1 auf den Wert des Leistungsindikators und speichert diesen Wert in der Indikatorvariable.</span><span class="sxs-lookup"><span data-stu-id="dc91f-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="dc91f-161">Stellen Sie sicher, dass die `while` schleifenbedingung auf "false" wechseln, wenn Sie den Code ausführen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="dc91f-162">Erstellen Sie andernfalls eine **Endlosschleife** , in dem das Programm nie endet.</span><span class="sxs-lookup"><span data-stu-id="dc91f-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="dc91f-163">Wir führen, da das Modul ausgeführt, die Ihren Code wird einen Timeout beendet, und Sie keine Ausgabe von Ihrem Programm sehen werden nicht vor.</span><span class="sxs-lookup"><span data-stu-id="dc91f-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="dc91f-164">Die `while` Schleife überprüft die Bedingung vor dem Ausführen folgender Code die `while`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="dc91f-165">Die `do` ... `while` Schleife im Code zuerst ausgeführt und anschließend überprüft die Bedingung.</span><span class="sxs-lookup"><span data-stu-id="dc91f-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="dc91f-166">Es sieht wie folgt:</span><span class="sxs-lookup"><span data-stu-id="dc91f-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="dc91f-167">Dies `do` Schleife und die frühere `while` Schleife funktionieren identisch.</span><span class="sxs-lookup"><span data-stu-id="dc91f-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="dc91f-168">Betrachten wir nun eine letzte Loop-Anweisung.</span><span class="sxs-lookup"><span data-stu-id="dc91f-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="dc91f-169">Diese Codierung online-Umgebung ist im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="dc91f-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="dc91f-170">Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="dc91f-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="dc91f-171">Arbeiten mit der for-Schleife</span><span class="sxs-lookup"><span data-stu-id="dc91f-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="dc91f-172">Ist eine andere häufige Loop-Anweisung, die Sie in C#-Code sehen die `for` Schleife.</span><span class="sxs-lookup"><span data-stu-id="dc91f-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="dc91f-173">Wiederholen Sie diesen Code im interactive-Fenster aus:</span><span class="sxs-lookup"><span data-stu-id="dc91f-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="dc91f-174">Dies hat die gleiche Aufgaben wie das `while` Schleife und die `do` Schleife, die Sie bereits verwendet haben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="dc91f-175">Die `for` Anweisung besteht aus drei Teilen, die steuern, wie es funktioniert.</span><span class="sxs-lookup"><span data-stu-id="dc91f-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="dc91f-176">Der erste Teil ist die **für Initialisierer**: `for counter = 0;` deklariert, `counter` Schleifenvariablen ist, und legt den Anfangswert auf `0`.</span><span class="sxs-lookup"><span data-stu-id="dc91f-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="dc91f-177">Der mittlere Teil ist die **für Bedingung**: `counter < 10` deklariert, die von diesem `for` Schleife so lange weiter ausgeführt, solange der Wert des Leistungsindikators kleiner als 10 ist.</span><span class="sxs-lookup"><span data-stu-id="dc91f-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="dc91f-178">Der letzte Teil ist der **für Iterator**: `counter++` gibt an, wie Schleifenvariablen zu ändern, nachdem die Ausführung der folgenden Block der `for` Anweisung.</span><span class="sxs-lookup"><span data-stu-id="dc91f-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="dc91f-179">Es gibt hier an, dass `counter` inkrementiert um 1 jedes Mal der Block wird ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="dc91f-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="dc91f-180">Experimentieren Sie mit diesen selbst.</span><span class="sxs-lookup"><span data-stu-id="dc91f-180">Experiment with these yourself.</span></span> <span data-ttu-id="dc91f-181">Wiederholen Sie dann die folgenden:</span><span class="sxs-lookup"><span data-stu-id="dc91f-181">Try each of the following:</span></span>

      - <span data-ttu-id="dc91f-182">Ändern Sie den Initialisierer an einen anderen Wert zu starten.</span><span class="sxs-lookup"><span data-stu-id="dc91f-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="dc91f-183">Ändern Sie die Bedingung zum Beenden an einen anderen Wert ein.</span><span class="sxs-lookup"><span data-stu-id="dc91f-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="dc91f-184">Wenn Sie fertig sind, fahren wir bei schreiben code einige selbst um Gelernte zu verwenden.</span><span class="sxs-lookup"><span data-stu-id="dc91f-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="dc91f-185">Diese Codierung online-Umgebung ist im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="dc91f-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="dc91f-186">Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="dc91f-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="dc91f-187">Kombinieren von Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="dc91f-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="dc91f-188">Nun, dass Sie gesehen haben die `if` -Anweisung und die Schleifenkonstrukte in der C#-Sprache, zu ermitteln, ob Sie C#-Code, um die Summe der alle ganzen Zahlen 1 bis 20 suchen, die durch 3 teilbar sind schreiben können.</span><span class="sxs-lookup"><span data-stu-id="dc91f-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="dc91f-189">Hier sind einige Tipps:</span><span class="sxs-lookup"><span data-stu-id="dc91f-189">Here are a few hints:</span></span>

      - <span data-ttu-id="dc91f-190">Die `%` -Operator gibt den Rest einer Division.</span><span class="sxs-lookup"><span data-stu-id="dc91f-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="dc91f-191">Die `if` Anweisung Givesx Sie die Bedingung aus, um festzustellen, ob eine Zahl Teilen der Summe sein darf.</span><span class="sxs-lookup"><span data-stu-id="dc91f-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="dc91f-192">Die `for` Schleife ermöglicht Ihnen eine Reihe von Schritten für alle Zahlen 1 bis 20 wiederholen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="dc91f-193">Probieren Sie es selbst.</span><span class="sxs-lookup"><span data-stu-id="dc91f-193">Try it yourself.</span></span> <span data-ttu-id="dc91f-194">Überprüfen Sie, wie Sie verwendet haben.</span><span class="sxs-lookup"><span data-stu-id="dc91f-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="dc91f-195">Diese Codierung online-Umgebung ist im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="dc91f-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="dc91f-196">Wenn Probleme auftreten, Bitte melden Sie diese [auf das Repository Dotnet/Try](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="dc91f-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="dc91f-197">Vollständige Herausforderung</span><span class="sxs-lookup"><span data-stu-id="dc91f-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="dc91f-198">Sie haben das Lernprogramm "Verzweigungen und Schleifen" abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="dc91f-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="dc91f-199">Erfahren Sie mehr über diese Konzepte in den folgenden Themen:</span><span class="sxs-lookup"><span data-stu-id="dc91f-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="dc91f-200">[Wenn und else-Anweisung](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="dc91f-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="dc91f-201">[While-Anweisung](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="dc91f-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="dc91f-202">[Do-Anweisung](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="dc91f-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="dc91f-203">Für die Anweisung</span><span class="sxs-lookup"><span data-stu-id="dc91f-203">For statement</span></span>](../language-reference/keywords/for.md)