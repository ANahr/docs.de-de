### YamlMime:Tutorial
title: Verzweigungen und Schleifen
metadata:
  title: "Interaktives Tutorial „Branches und Schleifen“: C#-Schnellstarts"
  description: "In diesem Schnellstart zu Branches und Schleifen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes."
  audience: Developer
  level: Beginner
  ms.custom: mvc
  ms.prod: .net
  ms.technology: devlang-csharp
  ms.topic: get-started-article
  displayType: two-column
  interactive: csharp
  nextTutorialHref: interpolated-strings
  nextTutorialTitle: Interpolierte Zeichenfolgen in C#
  ms.openlocfilehash: 1fad5d5b205c9a02bbb00d3377e3cae59926faf9
  ms.sourcegitcommit: d2da0142247ef42a219a5d2907f153e62dc6ea0d
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 02/01/2018
items:
- durationInMinutes: 1
  content: "In diesem Schnellstart erfahren Sie, wie Sie Code schreiben, der Variablen untersucht und basierend auf diesen Variablen den Ausführungspfad ändert. Sie verwenden Ihren Browser zum interaktiven Schreiben von C#-Code und sehen im Browser die Ergebnisse der Kompilierung und Ausführung Ihres Codes. Dieser Schnellstart enthält eine Reihe von Lektionen, in denen Branch- und Schleifenkonstrukte in C# untersucht werden. In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.\n"
- title: Treffen von Entscheidungen mithilfe der if-Anweisung
  durationInMinutes: 4
  content: "Führen Sie den folgenden Code im interaktiven Fenster aus. Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:\n\n```csharp\nint a = 5;\nint b = 6;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10.\");\n```\n\nÄndern Sie die Deklaration von `b` so, dass die Summe kleiner als 10 ist: \n\n```csharp\nint b = 3;\n```\n\nKlicken Sie erneut auf die Schaltfläche **Ausführen**. Da die Antwort kleiner als 10 ist, wird nichts ausgegeben. Die von Ihnen getestete **Bedingung** ist falsch. Es ist kein Code auszuführen, da Sie lediglich eine der möglichen Verzweigungen für eine `if`-Anweisung geschrieben haben: die true-Verzweigung.\n\n> [!TIP]\n> Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben. Der **Compiler** findet diese Fehler und meldet diese. Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.\n> Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.     \n\nDas erste Beispiel veranschaulicht die Vorteile von `if`-Anweisungen und boolean-Typen. Ein *boolean*-Typ ist eine Variable, die einen der folgenden zwei Werte enthalten kann: `true` oder `false`. In C# ist ein besonderer Typ für boolesche Variablen, `bool`, definiert. Die `if`-Anweisung überprüft den Wert eines `bool`-Typs. Wenn der Wert `true` lautet, wird die nach `if` folgende Anweisung ausgeführt. Andernfalls wird diese übersprungen. \n\nDieser Vorgang zum Überprüfen von Bedingungen und Ausführen von Anweisungen basierend auf diesen Bedingungen ist sehr nützlich. Sehen wir uns dies einmal näher an.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Kombinieren von if- und else-Anweisungen
  durationInMinutes: 10
  content: "\nUm einen anderen Code in den true- und false-Verzweigungen auszuführen, erstellen Sie eine `else`-Verzweigung, die ausgeführt wird, wenn die Bedingung falsch ist. Testen Sie Folgendes:\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n    Console.WriteLine(\"The answer is greater than 10\");\nelse\n    Console.WriteLine(\"The answer is not greater than 10\");\n```\n\nDie Anweisung, die nach dem Schlüsselwort `else` folgt, wird nur ausgeführt, wenn die zu testende Bedingung `false` lautet. Wenn Sie `if` und `else` mit booleschen Bedingungen kombinieren, erhalten Sie sozusagen das Beste aus beiden Welten.\n\n> [!IMPORTANT]\n> Der Einzug unter den `if`- und `else`-Anweisungen dient zur besseren Lesbarkeit.\n> In der Programmiersprache C# werden Einzüge oder Leerräume nicht berücksichtigt. Die Anweisung nach dem Schlüsselwort `if` bzw. `else` wird basierend auf der Bedingung ausgeführt. Alle Beispiele in diesem Schnellstart folgen der gängigen Vorgehensweise, Zeilen basierend auf der Ablaufsteuerung von Anweisungen mit einem Einzug zu versehen.\n\nDa Einzüge nicht relevant sind, müssen Sie mit `{` und `}` angeben, dass Sie mehr als eine Anweisung im Rahmen des bedingt ausgeführten Blocks verwenden möchten. C#-Programmierer verwenden solche geschweifte Klammern in der Regel bei allen `if`- und `else`-Anweisungen. Das folgende Beispiel ist identisch mit dem Inhalt, den Sie soeben erstellt haben. Probieren Sie es aus!\n\n```csharp\nint a = 5;\nint b = 3;\nif (a + b > 10)\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n}\n```\n\n> [!TIP]\n> Im restlichen Schnellstart enthalten alle Codebeispiele geschweifte Klammern gemäß den allgemeingültigen Vorgehensweisen.\n\nSie können kompliziertere Bedingungen testen:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) && (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"And the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"Or the first number is not greater than the second\");\n}\n```\n\nDas Zeichen `&&` steht für „and“. Es bedeutet, dass beide Bedingungen „true“ lauten müssen, damit die Anweisung in der true-Verzweigung ausgeführt wird.  Diese Beispiele zeigen außerdem, dass Sie in jeder bedingten Verzweigung mehrere Anweisungen verwenden können, sofern Sie sie mit `{` und `}` umschließen.\n\nSie können auch `||` für „or“ verwenden:\n\n```csharp\nint a = 5;\nint b = 3;\nint c = 4;\nif ((a + b + c > 10) || (a > b))\n{\n    Console.WriteLine(\"The answer is greater than 10\");\n    Console.WriteLine(\"Or the first number is greater than the second\");\n}\nelse\n{\n    Console.WriteLine(\"The answer is not greater than 10\");\n    Console.WriteLine(\"And the first number is not greater than the second\");\n}\n```\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Wiederholen von Vorgängen durch Schleifen"
  durationInMinutes: 6
  content: "Ein weiterer wichtiger Begriff zur Erstellung umfangreicherer Programme sind **Schleifen**. Schleifen werden verwendet, um Anweisungen zu wiederholen, die mehrmals ausgeführt werden sollen. Testen Sie den folgenden Code im interaktiven Fenster:\n\n```csharp\nint counter = 0;\nwhile (counter < 10)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n}\n```\n\nDie `while`-Anweisung prüft eine Bedingung und führt die Anweisung nach `while` aus. Es wiederholt die Überprüfung der Bedingung und die Ausführung dieser Anweisungen, bis die Bedingung „false“ lautet.\n\nIn diesem Beispiel kommt ein weiterer neuer Operator vor. Das `++`-Zeichen nach der `counter`-Variable ist der **increment**-Operator. Er erhöht den Wert des Zählers um 1 und speichert diesen Wert in der Zählervariable.\n\n> [!IMPORTANT]\n> Stellen Sie sicher, dass die Schleifenbedingung `while` zu „false“ wechselt, nachdem Sie den Code ausgeführt haben. Erstellen Sie anderenfalls eine **Endlosschleife**, durch die das Programm niemals beendet wird. Dies werden wir nicht testen, da bei dem Modul, das Ihren Code ausführt, eine Zeitüberschreitung auftritt und keine Ausgabe von Ihrem Programm angezeigt wird.\n\nDie `while`-Schleife testet die Bedingung, bevor der Code nach `while` ausgeführt wird. Die `do` ... `while`-Schleife führt den Code zuerst aus und überprüft anschließend die Bedingung. Diese sieht folgendermaßen aus:\n\n```csharp\nint counter = 0;\ndo\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n  counter++;\n} while (counter < 10);\n```\n\nDiese `do`-Schleife und die vorherige `while`-Schleife funktionieren auf dieselbe Weise. \n\nSehen wir uns nun eine letzte Schleifenanweisung an.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Arbeiten mit der for-Schleife
  durationInMinutes: 5
  content: "Eine weitere häufig verwendete Schleifenanweisung, die bei C#-Codes vorkommt, ist die `for`-Schleife. Testen Sie den folgenden Code im interaktiven Fenster:\n\n```csharp\nfor(int counter = 0; counter < 10; counter++)\n{\n  Console.WriteLine($\"Hello World! The counter is {counter}\");\n} \n```\n\nDieser funktioniert auf dieselbe Weise wie die `while`-Schleife und die `do`-Schleife, die Sie bereits verwendet haben. Die `for`-Anweisung besteht aus drei Teilen, die steuern, wie sie ausgeführt wird. \n\nDer erste Teil ist der **for-Initialisierer**: `for counter = 0;` deklariert, dass `counter` die Schleifenvariable ist, und legt den Anfangswert auf `0` fest.\n\nDer mittlere Teil ist die **for-Bedingung**: `counter < 10` deklariert, dass diese `for`-Schleife ausgeführt wird, solange der Wert des Zählers kleiner als 10 ist.\n\nDer letzte Teil ist der **for-Iterator**: `counter++` gibt an, wie die Schleifenvariable geändert wird, nachdem der Block nach der `for`-Anweisung ausgeführt wurde. Hier gibt dieser an, dass `counter` bei jeder Blockausführung um 1 erhöht werden soll.\n\nExperimentieren Sie selbst damit. Testen Sie Folgendes:\n\n- Ändern Sie den Initialisierer, um mit einem anderen Wert zu beginnen.\n- Ändern Sie die Bedingung, um an einem anderen Wert anzuhalten.\n\nWenn Sie fertig sind, fahren Sie damit fort, mithilfe der erworbenen Kenntnisse selbst Codes zu schreiben.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: Kombinieren von Branches und Schleifen
  durationInMinutes: 12
  content: "Nachdem Sie nun die `if`-Anweisung und die Schleifenkonstrukte in der Programmiersprache C# kennengelernt haben, versuchen Sie, einen C#-Code zu schreiben, der die Summe aller ganzen Zahlen von 1 bis 20 ermittelt, die durch 3 teilbar sind.  Im Folgenden einige Tipps:\n\n- Der `%`-Operator ermittelt den Restwert einer Divisionsoperation.\n- Die `if`-Anweisung ermittelt die Bedingung, um festzustellen, ob eine Zahl in der Summe berücksichtigt werden soll.\n- Die `for`-Schleife ermöglicht es, eine Reihe von Schritten für alle Zahlen von 1 bis 20 zu wiederholen.\n\nProbieren Sie es selbst aus. Prüfen Sie dann, wie Sie abgeschnitten haben. Hinweis: Sie sollten 63 als Antwort erhalten.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Übung abgeschlossen"
  durationInMinutes: 1
  content: "Sie haben den Schnellstart „Branches und Schleifen“ abgeschlossen. \n\nSie können diese Schnellstarts in Ihrer eigenen Entwicklungsumgebung fortsetzen. Erfahren Sie mehr über die Grundlagen der [lokalen Entwicklung](local-environment.md), und wählen Sie dann einen Schnellstart aus. Sie können diese Übung durchführen, direkt mit dem nächsten Schnellstart fortfahren oder erneut mit dem Schnellstart [Zahlen in C#](numbers-in-csharp-local.md) beginnen.\n\nWeitere Informationen zu diesen Begriffen finden Sie unter folgenden Themen:\n\n[if- und else-Anweisung](../language-reference/keywords/if-else.md)   \n[while-Anweisung](../language-reference/keywords/while.md)   \n[do-Anweisung](../language-reference/keywords/do.md)   \n[for-Anweisung](../language-reference/keywords/for.md)\0"
