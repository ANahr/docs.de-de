### YamlMime:YamlDocument
documentType: Tutorial
title: <span data-ttu-id="a4c57-101">Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="a4c57-101">Branches and loops</span></span>
metadata:
  title: <span data-ttu-id="a4c57-102">Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="a4c57-102">Branches and loops</span></span>
  description: '<span data-ttu-id="a4c57-103">In diesem Tutorial zu Verzweigungen und Schleifen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-103">In this tutorial about branches and loops, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="a4c57-104">Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.</span><span class="sxs-lookup"><span data-stu-id="a4c57-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: arrays-and-collections
  nextTutorialTitle: 'Arrays and colletions in C#'
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="a4c57-105">In diesem Tutorial erfahren Sie, wie Sie einen Code schreiben, der Variablen untersucht und basierend auf diesen Variablen den Ausführungspfad ändert.</span><span class="sxs-lookup"><span data-stu-id="a4c57-105">This tutorial teaches you about how to write code that examines variables and changes execution path based on those variables.</span></span> <span data-ttu-id="a4c57-106">Mit Ihrem Browser schreiben Sie einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.</span><span class="sxs-lookup"><span data-stu-id="a4c57-106">You'll write C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="a4c57-107">Das Tutorial enthält eine Reihe von Lektionen, in denen Verzweigungs- und Schleifenkonstrukte in C# erkundet werden.</span><span class="sxs-lookup"><span data-stu-id="a4c57-107">It contains a series of lessons that explore branching and looping constructs in C#.</span></span> <span data-ttu-id="a4c57-108">In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-108">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="a4c57-109">Treffen von Entscheidungen mithilfe der if-Anweisung</span><span class="sxs-lookup"><span data-stu-id="a4c57-109">Make decisions using the if statement</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="a4c57-110">Führen Sie den folgenden Code im interaktiven Fenster aus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-110">Run the following code in the interactive window.</span></span> <span data-ttu-id="a4c57-111">Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:</span><span class="sxs-lookup"><span data-stu-id="a4c57-111">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 5;
      int b = 6;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10.");
      ```

      <span data-ttu-id="a4c57-112">Ändern Sie die Deklaration von `b` so, dass die Summe kleiner als 10 ist:</span><span class="sxs-lookup"><span data-stu-id="a4c57-112">Modify the declaration of `b` so that the sum is less than 10:</span></span> 

      ```csharp
      int b = 3;
      ```

      <span data-ttu-id="a4c57-113">Klicken Sie erneut auf die Schaltfläche **Ausführen**.</span><span class="sxs-lookup"><span data-stu-id="a4c57-113">Click the **Run** button again.</span></span> <span data-ttu-id="a4c57-114">Da die Antwort kleiner als 10 ist, wird nichts ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-114">Because the answer is less than 10, nothing is printed.</span></span> <span data-ttu-id="a4c57-115">Die von Ihnen getestete **Bedingung** ist falsch.</span><span class="sxs-lookup"><span data-stu-id="a4c57-115">The **condition** you're testing is false.</span></span> <span data-ttu-id="a4c57-116">Es ist kein Code auszuführen, da Sie lediglich eine der möglichen Verzweigungen für eine `if`-Anweisung geschrieben haben: die true-Verzweigung.</span><span class="sxs-lookup"><span data-stu-id="a4c57-116">You don't have any code to execute because you've only written one of the possible branches for an `if` statement: the true branch.</span></span>

      > [!TIP]
      > <span data-ttu-id="a4c57-117">Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-117">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="a4c57-118">Der **Compiler** findet diese Fehler und meldet diese.</span><span class="sxs-lookup"><span data-stu-id="a4c57-118">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="a4c57-119">Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster genau an, um herauszufinden, was korrigiert werden muss.</span><span class="sxs-lookup"><span data-stu-id="a4c57-119">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="a4c57-120">Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-120">That exercise will help you learn the structure of C# code.</span></span>     

      <span data-ttu-id="a4c57-121">Das erste Beispiel veranschaulicht die Vorteile von `if`-Anweisungen und boolean-Typen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-121">This first sample shows the power of `if` and boolean types.</span></span> <span data-ttu-id="a4c57-122">Ein *boolean*-Typ ist eine Variable, die einen der folgenden zwei Werte enthalten kann: `true` oder `false`.</span><span class="sxs-lookup"><span data-stu-id="a4c57-122">A *boolean* is a variable that can have one of two values: `true` or `false`.</span></span> <span data-ttu-id="a4c57-123">In C# ist ein besonderer Typ für boolesche Variablen, `bool`, definiert.</span><span class="sxs-lookup"><span data-stu-id="a4c57-123">C# defines a special type, `bool` for boolean variables.</span></span> <span data-ttu-id="a4c57-124">Die `if`-Anweisung überprüft den Wert eines `bool`-Typs.</span><span class="sxs-lookup"><span data-stu-id="a4c57-124">The `if` statement checks the value of a `bool`.</span></span> <span data-ttu-id="a4c57-125">Wenn der Wert `true` lautet, wird die nach `if` folgende Anweisung ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="a4c57-125">When the value is `true`, the statement following the `if` executes.</span></span> <span data-ttu-id="a4c57-126">Andernfalls wird diese übersprungen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-126">Otherwise, it is skipped.</span></span> 

      <span data-ttu-id="a4c57-127">Dieser Vorgang zum Überprüfen von Bedingungen und Ausführen von Anweisungen basierend auf diesen Bedingungen ist sehr nützlich.</span><span class="sxs-lookup"><span data-stu-id="a4c57-127">This process of checking conditions and executing statements based on those conditions is very powerful.</span></span> <span data-ttu-id="a4c57-128">Sehen wir uns dies einmal näher an.</span><span class="sxs-lookup"><span data-stu-id="a4c57-128">Let's explore more.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a4c57-129">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-129">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a4c57-130">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a4c57-130">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a4c57-131">Kombinieren von if- und else-Anweisungen</span><span class="sxs-lookup"><span data-stu-id="a4c57-131">Make if and else work together</span></span>
    durationInMinutes: 10
    content: |

      <span data-ttu-id="a4c57-132">Um einen anderen Code in den true- und false-Verzweigungen auszuführen, erstellen Sie eine `else`-Verzweigung, die ausgeführt wird, wenn die Bedingung falsch ist.</span><span class="sxs-lookup"><span data-stu-id="a4c57-132">To execute different code in both the true and false branches, you create an `else` branch that executes when the condition is false.</span></span> <span data-ttu-id="a4c57-133">Testen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="a4c57-133">Try this:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
          Console.WriteLine("The answer is greater than 10");
      else
          Console.WriteLine("The answer is not greater than 10");
      ```

      <span data-ttu-id="a4c57-134">Die Anweisung, die nach dem Schlüsselwort `else` folgt, wird nur ausgeführt, wenn die zu testende Bedingung `false` lautet.</span><span class="sxs-lookup"><span data-stu-id="a4c57-134">The statement following the `else` keyword executes only when the condition being tested is `false`.</span></span> <span data-ttu-id="a4c57-135">Wenn Sie `if` und `else` mit booleschen Bedingungen kombinieren, erhalten Sie sozusagen das Beste aus beiden Welten.</span><span class="sxs-lookup"><span data-stu-id="a4c57-135">Combining `if` and `else` with boolean conditions provides all the power you need.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="a4c57-136">Der Einzug unter den `if`- und `else`-Anweisungen dient zur besseren Lesbarkeit.</span><span class="sxs-lookup"><span data-stu-id="a4c57-136">The indentation under the `if` and `else` statements is for human readers.</span></span>
      > <span data-ttu-id="a4c57-137">In der Programmiersprache C# werden Einzüge oder Leerräume nicht berücksichtigt.</span><span class="sxs-lookup"><span data-stu-id="a4c57-137">The C# language doesn't treat indentation or whitespace as significant.</span></span> <span data-ttu-id="a4c57-138">Die Anweisung nach dem Schlüsselwort `if` bzw. `else` wird basierend auf der Bedingung ausgeführt.</span><span class="sxs-lookup"><span data-stu-id="a4c57-138">The statement following the `if` or `else` keyword will be executed based on the condition.</span></span> <span data-ttu-id="a4c57-139">In allen Beispielen dieses Tutorials wurden in der Regel Zeilen gemäß ihrer Ausführung eingezogen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-139">All the samples in this tutorial follow a common practice to indent lines based on execution.</span></span>

      <span data-ttu-id="a4c57-140">Da Einzüge nicht relevant sind, müssen Sie mit `{` und `}` angeben, dass Sie mehr als eine Anweisung im Rahmen des bedingt ausgeführten Blocks verwenden möchten.</span><span class="sxs-lookup"><span data-stu-id="a4c57-140">Because indentation is not significant, you need to use `{` and `}` to indicate when you want more than one statement to be part of the block that executes conditionally.</span></span> <span data-ttu-id="a4c57-141">C#-Programmierer verwenden solche geschweifte Klammern in der Regel bei allen `if`- und `else`-Anweisungen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-141">C# programmers typically use those braces on all `if` and `else` clauses.</span></span> <span data-ttu-id="a4c57-142">Das folgende Beispiel ist identisch mit dem Inhalt, den Sie soeben erstellt haben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-142">The following example is the same as what you just created.</span></span> <span data-ttu-id="a4c57-143">Probieren Sie es aus!</span><span class="sxs-lookup"><span data-stu-id="a4c57-143">Try it.</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      if (a + b > 10)
      {
          Console.WriteLine("The answer is greater than 10");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
      }
      ```

      > [!TIP]
      > <span data-ttu-id="a4c57-144">Im restlichen Tutorial enthalten alle Codebeispiele geschweifte Klammern gemäß den allgemein gültigen Vorgehensweisen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-144">Through the rest of this tutorial, the code samples all include the braces, following accepted practices.</span></span>

      <span data-ttu-id="a4c57-145">Sie können kompliziertere Bedingungen testen:</span><span class="sxs-lookup"><span data-stu-id="a4c57-145">You can test more complicated conditions:</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) && (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("And the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("Or the first number is not greater than the second");
      }
      ```

      <span data-ttu-id="a4c57-146">Das Zeichen `&&` steht für „and“.</span><span class="sxs-lookup"><span data-stu-id="a4c57-146">The `&&` represents "and".</span></span> <span data-ttu-id="a4c57-147">Es bedeutet, dass beide Bedingungen „true“ lauten müssen, damit die Anweisung in der true-Verzweigung ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a4c57-147">It means both conditions must be true to execute the statement in the true branch.</span></span>  <span data-ttu-id="a4c57-148">Diese Beispiele zeigen außerdem, dass Sie in jeder bedingten Verzweigung mehrere Anweisungen verwenden können, sofern Sie sie mit `{` und `}` umschließen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-148">These examples also show that you can have multiple statements in each conditional branch, provided you enclose them in `{` and `}`.</span></span>

      <span data-ttu-id="a4c57-149">Sie können auch `||` für „or“ verwenden:</span><span class="sxs-lookup"><span data-stu-id="a4c57-149">You can also use  `||` to represent "or":</span></span>

      ```csharp
      int a = 5;
      int b = 3;
      int c = 4;
      if ((a + b + c > 10) || (a > b))
      {
          Console.WriteLine("The answer is greater than 10");
          Console.WriteLine("Or the first number is greater than the second");
      }
      else
      {
          Console.WriteLine("The answer is not greater than 10");
          Console.WriteLine("And the first number is not greater than the second");
      }
      ```

      > [!NOTE]
      > <span data-ttu-id="a4c57-150">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-150">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a4c57-151">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a4c57-151">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a4c57-152">Wiederholen von Vorgängen durch Schleifen</span><span class="sxs-lookup"><span data-stu-id="a4c57-152">Use loops to repeat operations</span></span>
    durationInMinutes: 6
    content: |
      <span data-ttu-id="a4c57-153">Ein weiterer wichtiger Begriff zur Erstellung umfangreicherer Programme sind **Schleifen**.</span><span class="sxs-lookup"><span data-stu-id="a4c57-153">Another important concept to create larger programs is **loops**.</span></span> <span data-ttu-id="a4c57-154">Schleifen werden verwendet, um Anweisungen zu wiederholen, die mehrmals ausgeführt werden sollen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-154">You'll use loops to repeat statements that you want executed more than once.</span></span> <span data-ttu-id="a4c57-155">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class="sxs-lookup"><span data-stu-id="a4c57-155">Try this code in the interactive window:</span></span>

      ```csharp
      int counter = 0;
      while (counter < 10)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      }
      ```

      <span data-ttu-id="a4c57-156">Die `while`-Anweisung prüft eine Bedingung und führt die Anweisung nach `while` aus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-156">The `while` statement checks a condition and executes the statement following the `while`.</span></span> <span data-ttu-id="a4c57-157">Es wiederholt die Überprüfung der Bedingung und die Ausführung dieser Anweisungen, bis die Bedingung „false“ lautet.</span><span class="sxs-lookup"><span data-stu-id="a4c57-157">It will repeat checking the condition and executing those statements until the condition is false.</span></span>

      <span data-ttu-id="a4c57-158">In diesem Beispiel kommt ein weiterer neuer Operator vor.</span><span class="sxs-lookup"><span data-stu-id="a4c57-158">There's one other new operator in this example.</span></span> <span data-ttu-id="a4c57-159">Das `++`-Zeichen nach der `counter`-Variable ist der **increment**-Operator.</span><span class="sxs-lookup"><span data-stu-id="a4c57-159">The `++` after the `counter` variable is the **increment** operator.</span></span> <span data-ttu-id="a4c57-160">Er erhöht den Wert des Zählers um 1 und speichert diesen Wert in der Zählervariable.</span><span class="sxs-lookup"><span data-stu-id="a4c57-160">It adds 1 to the value of counter, and stores that value in the counter variable.</span></span>

      > [!IMPORTANT]
      > <span data-ttu-id="a4c57-161">Stellen Sie sicher, dass die Schleifenbedingung `while` zu „false“ wechselt, nachdem Sie den Code ausgeführt haben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-161">Make sure that the `while` loop condition does switch to false as you execute the code.</span></span> <span data-ttu-id="a4c57-162">Erstellen Sie anderenfalls eine **Endlosschleife**, durch die das Programm niemals beendet wird.</span><span class="sxs-lookup"><span data-stu-id="a4c57-162">Otherwise, you create an **infinite loop** where your program never ends.</span></span> <span data-ttu-id="a4c57-163">Dies werden wir nicht testen, da bei dem Modul, das Ihren Code ausführt, eine Zeitüberschreitung auftritt und keine Ausgabe von Ihrem Programm angezeigt wird.</span><span class="sxs-lookup"><span data-stu-id="a4c57-163">Let's not demonstrate that, because the engine that runs your code will time out and you'll see no output from your program.</span></span>

      <span data-ttu-id="a4c57-164">Die `while`-Schleife testet die Bedingung, bevor der Code nach `while` ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a4c57-164">The `while` loop tests the condition before executing the code following the `while`.</span></span> <span data-ttu-id="a4c57-165">Die `do` ... `while`-Schleife führt den Code zuerst aus und überprüft anschließend die Bedingung.</span><span class="sxs-lookup"><span data-stu-id="a4c57-165">The `do` ... `while` loop executes the code first, and then checks the condition.</span></span> <span data-ttu-id="a4c57-166">Diese sieht folgendermaßen aus:</span><span class="sxs-lookup"><span data-stu-id="a4c57-166">It looks like this:</span></span>

      ```csharp
      int counter = 0;
      do
      {
        Console.WriteLine("Hello World! The counter is " + counter);
        counter++;
      } while (counter < 10);
      ```

      <span data-ttu-id="a4c57-167">Diese `do`-Schleife und die vorherige `while`-Schleife funktionieren auf dieselbe Weise.</span><span class="sxs-lookup"><span data-stu-id="a4c57-167">This `do` loop and the earlier `while` loop work the same.</span></span> 

      <span data-ttu-id="a4c57-168">Sehen wir uns nun eine letzte Schleifenanweisung an.</span><span class="sxs-lookup"><span data-stu-id="a4c57-168">Let's move on to one last loop statement.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a4c57-169">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-169">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a4c57-170">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a4c57-170">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a4c57-171">Arbeiten mit der for-Schleife</span><span class="sxs-lookup"><span data-stu-id="a4c57-171">Work with the for loop</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="a4c57-172">Eine weitere häufig verwendete Schleifenanweisung, die bei C#-Codes vorkommt, ist die `for`-Schleife.</span><span class="sxs-lookup"><span data-stu-id="a4c57-172">Another common loop statement that you'll see in C# code is the `for` loop.</span></span> <span data-ttu-id="a4c57-173">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class="sxs-lookup"><span data-stu-id="a4c57-173">Try this code in the interactive window:</span></span>

      ```csharp
      for(int counter = 0; counter < 10; counter++)
      {
        Console.WriteLine("Hello World! The counter is " + counter);
      } 
      ```

      <span data-ttu-id="a4c57-174">Dieser funktioniert auf dieselbe Weise wie die `while`-Schleife und die `do`-Schleife, die Sie bereits verwendet haben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-174">This does the same work as the `while` loop and the `do` loop you've already used.</span></span> <span data-ttu-id="a4c57-175">Die `for`-Anweisung besteht aus drei Teilen, die steuern, wie sie ausgeführt wird.</span><span class="sxs-lookup"><span data-stu-id="a4c57-175">The `for` statement has three parts that control how it works.</span></span> 

      <span data-ttu-id="a4c57-176">Der erste Teil ist der **for-Initialisierer**: `for counter = 0;` deklariert, dass `counter` die Schleifenvariable ist, und legt den Anfangswert auf `0` fest.</span><span class="sxs-lookup"><span data-stu-id="a4c57-176">The first part is the **for initializer**: `for counter = 0;` declares that `counter` is the loop variable, and sets its initial value to `0`.</span></span>

      <span data-ttu-id="a4c57-177">Der mittlere Teil ist die **for-Bedingung**: `counter < 10` deklariert, dass diese `for`-Schleife ausgeführt wird, solange der Wert des Zählers kleiner als 10 ist.</span><span class="sxs-lookup"><span data-stu-id="a4c57-177">The middle part is the **for condition**: `counter < 10` declares that this `for` loop continues to execute as long as the value of counter is less than 10.</span></span>

      <span data-ttu-id="a4c57-178">Der letzte Teil ist der **for-Iterator**: `counter++` gibt an, wie die Schleifenvariable geändert wird, nachdem der Block nach der `for`-Anweisung ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="a4c57-178">The final part is the **for iterator**: `counter++` specifies how to modify the loop variable after executing the block following the `for` statement.</span></span> <span data-ttu-id="a4c57-179">Hier gibt dieser an, dass `counter` bei jeder Blockausführung um 1 erhöht werden soll.</span><span class="sxs-lookup"><span data-stu-id="a4c57-179">Here, it specifies that `counter` should be incremented by 1 each time the block executes.</span></span>

      <span data-ttu-id="a4c57-180">Experimentieren Sie selbst damit.</span><span class="sxs-lookup"><span data-stu-id="a4c57-180">Experiment with these yourself.</span></span> <span data-ttu-id="a4c57-181">Testen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="a4c57-181">Try each of the following:</span></span>

      - <span data-ttu-id="a4c57-182">Ändern Sie den Initialisierer, um mit einem anderen Wert zu beginnen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-182">Change the initializer to start at a different value.</span></span>
      - <span data-ttu-id="a4c57-183">Ändern Sie die Bedingung, um an einem anderen Wert anzuhalten.</span><span class="sxs-lookup"><span data-stu-id="a4c57-183">Change the condition to stop at a different value.</span></span>

      <span data-ttu-id="a4c57-184">Wenn Sie fertig sind, fahren Sie damit fort, mithilfe der erworbenen Kenntnisse selbst Codes zu schreiben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-184">When you're done, let's move on to write some code yourself to use what you've learned.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a4c57-185">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-185">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a4c57-186">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a4c57-186">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a4c57-187">Kombinieren von Verzweigungen und Schleifen</span><span class="sxs-lookup"><span data-stu-id="a4c57-187">Combining branches and loops</span></span>
    durationInMinutes: 12
    content: |
      <span data-ttu-id="a4c57-188">Nachdem Sie nun die `if`-Anweisung und die Schleifenkonstrukte in der Programmiersprache C# kennengelernt haben, versuchen Sie, einen C#-Code zu schreiben, der die Summe aller ganzen Zahlen von 1 bis 20 ermittelt, die durch 3 teilbar sind.</span><span class="sxs-lookup"><span data-stu-id="a4c57-188">Now that you've seen the `if` statement and the looping constructs in the C# language, see if you can write C# code to find the sum of all integers 1 through 20 that are divisible by 3.</span></span>  <span data-ttu-id="a4c57-189">Im Folgenden einige Tipps:</span><span class="sxs-lookup"><span data-stu-id="a4c57-189">Here are a few hints:</span></span>

      - <span data-ttu-id="a4c57-190">Der `%`-Operator ermittelt den Restwert einer Divisionsoperation.</span><span class="sxs-lookup"><span data-stu-id="a4c57-190">The `%` operator gives you the remainder of a division operation.</span></span>
      - <span data-ttu-id="a4c57-191">Die `if`-Anweisung ermittelt die Bedingung, um festzustellen, ob eine Zahl in der Summe berücksichtigt werden soll.</span><span class="sxs-lookup"><span data-stu-id="a4c57-191">The `if` statement givesx you the condition to see if a number should be part of the sum.</span></span>
      - <span data-ttu-id="a4c57-192">Die `for`-Schleife ermöglicht es, eine Reihe von Schritten für alle Zahlen von 1 bis 20 zu wiederholen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-192">The `for` loop can help you repeat a series of steps for all the numbers 1 through 20.</span></span>

      <span data-ttu-id="a4c57-193">Probieren Sie es selbst aus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-193">Try it yourself.</span></span> <span data-ttu-id="a4c57-194">Prüfen Sie dann, wie Sie abgeschnitten haben.</span><span class="sxs-lookup"><span data-stu-id="a4c57-194">Then check how you did.</span></span>

      > [!NOTE]
      > <span data-ttu-id="a4c57-195">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="a4c57-195">This online coding experience is in preview mode.</span></span> <span data-ttu-id="a4c57-196">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="a4c57-196">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="a4c57-197">Übung abgeschlossen</span><span class="sxs-lookup"><span data-stu-id="a4c57-197">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="a4c57-198">Sie haben das Tutorial „Verzweigungen und Schleifen“ abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="a4c57-198">You've completed the "branches and loops" tutorial.</span></span> <span data-ttu-id="a4c57-199">Weitere Informationen zu diesen Begriffen finden Sie unter folgenden Themen:</span><span class="sxs-lookup"><span data-stu-id="a4c57-199">You can learn more about these concepts in these topics:</span></span>

      <span data-ttu-id="a4c57-200">[if- und else-Anweisung](../language-reference/keywords/if-else.md) </span><span class="sxs-lookup"><span data-stu-id="a4c57-200">[If and else statement](../language-reference/keywords/if-else.md) </span></span>  
      <span data-ttu-id="a4c57-201">[while-Anweisung](../language-reference/keywords/while.md) </span><span class="sxs-lookup"><span data-stu-id="a4c57-201">[While statement](../language-reference/keywords/while.md) </span></span>  
      <span data-ttu-id="a4c57-202">[do-Anweisung](../language-reference/keywords/do.md) </span><span class="sxs-lookup"><span data-stu-id="a4c57-202">[Do statement](../language-reference/keywords/do.md) </span></span>  
      [<span data-ttu-id="a4c57-203">for-Anweisung</span><span class="sxs-lookup"><span data-stu-id="a4c57-203">For statement</span></span>](../language-reference/keywords/for.md)