### YamlMime:Tutorial
title: Interpolierte Zeichenfolgen in C#
metadata:
  title: "Interpolierte Zeichenfolgen in C#. Erfahren Sie, wie Sie eine Zeichenfolge erstellen, die andere Werte umfasst – z.B. Datumsangaben und Werte."
  description: "Verwenden Sie für dieses Tutorial Ihren Browser, um die interpolierte Zeichenfolgenfunktion für C# interaktiv zu nutzen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes."
  audience: Developer
  ms.custom: mvc
  ms.topic: get-started-article
  level: Beginner
  displayType: two-column
  interactive: csharp
  nextTutorialHref: list-collection
  nextTutorialTitle: Sammlungen in C#
  ms.openlocfilehash: f54d8e5e3703556b333155fd9541f9d7c7e7fd1b
  ms.sourcegitcommit: 8bde7a3432f30fc771079744955c75c58c4eb393
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 01/20/2018
items:
- durationInMinutes: 2
  content: "In diesem Schnellstart wird erläutert, wie Sie interpolierte Zeichenfolgen in C# verwenden können, um Werte in eine einzige Ausgabezeichenfolge interaktiv einzufügen. Verwenden Sie Ihren Browser zum Schreiben von C#-Code. Dort werden Ihnen unmittelbar die Ergebnisse der Kompilierung und Ausführung Ihres Codes angezeigt. In diesem Schnellstart sind einige Lektionen enthalten, bei denen Zeichenfolgen verkettet, Werte in Zeichenfolgen eingefügt und auf verschiedene Arten formatiert werden.\n"
- title: Erstellen einer interpolierten Zeichenfolge
  durationInMinutes: 2
  content: "Führen Sie den folgenden Code im interaktiven Fenster aus. Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein (ersetzen Sie „\\<name>“ durch Ihren Namen), und klicken Sie auf die Schaltfläche **Ausführen**:\n\n```csharp\nvar name = \"<name>\";\nConsole.WriteLine($\"Hello, {name}. It's a pleasure to meet you!\");\n```\n\nWenn Sie das Programm ausführen, wird eine einzelne Zeichenfolge angezeigt, die Ihren Namen in der Begrüßung enthält. Die Zeichenfolge, die in den <xref:System.Console.WriteLine%2A>-Methodenaufruf eingefügt wird, ist eine *interpolierte Zeichenfolge*. Dabei handelt es sich um eine Vorlage, durch die Sie eine einzelne Zeichenfolge (als *Ergebniszeichenfolge* bezeichnet) aus einer Zeichenfolge erstellen können, die eingebetteten Code enthält. Interpolierte Zeichenfolgen sind besonders nützlich für das Einfügen von Werten in eine Zeichenfolge oder zum Verketten (bzw. Verknüpfen) von Zeichenfolgen. \n\nDieses einfache Beispiel enthält die zwei Elemente, über die jede interpolierte Zeichenfolge verfügen muss: \n\n- Ein Zeichenfolgenliteral, das ein `$`-Zeichen vor dem öffnenden Anführungszeichen enthält. Zwischen dem `$`-Symbol und dem Anführungszeichen darf kein Leerraum vorhanden sein. (Wenn Sie sehen möchten, was geschieht, wenn Sie einen Leerraum einfügen, fügen Sie nach dem `$`-Zeichen im interaktiven Fenster einen ein, und klicken Sie auf die Schaltfläche **Ausführen**. Dann gibt der C#-Compiler den Fehler „Unerwartetes Zeichen ‚$‘“ zurück.) \n\n- Mindestens ein *interpolierter Ausdruck*. Ein interpolierter Ausdruck wird durch eine öffnende und eine schließende Klammer (`{` und `}`) angegeben. Sie können jeden C#-Ausdruck in die Klammern einfügen, der einen Wert (einschließlich `null`) zurückgibt. \n\nIm Folgenden finden Sie weitere Beispiele für interpolierte Zeichenfolgen mit einigen anderen Datentypen.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Einschließen verschiedener Datentypen"
  durationInMinutes: 3
  content: "Im vorherigen Schnellstart haben Sie eine interpolierte Zeichenfolge verwendet, um eine Zeichenfolge in eine andere einzufügen. Ein interpolierter Zeichenfolgenausdruck kann jedoch jeden Datentyp aufweisen. Im Folgenden wird eine interpolierte Zeichenfolge dargestellt, die Werte mehrerer Datentypen enthält. \n\nIm folgenden Beispiel sind interpolierte Ausdrücke enthalten, die über ein `Vegetable`-Objekt, einen Member der `Unit`-Enumeration, einen <xref:System.DateTime>-Wert und einen <xref:System.Decimal>-Wert verfügen. Führen Sie es im interaktiven Fenster aus.\n\n```csharp\npublic class Vegetable\n{\n   public Vegetable(string name) => Name = name;\n\n   public string Name { get; }\n\n   public override string ToString() => Name;\n}\n\npublic class Example\n{\n   public enum Unit { item, pound, ounce, dozen };\n\n   public static void Main()\n   {\n      var item = new Vegetable(\"eggplant\");\n      var date = DateTime.Now;\n      var price = 1.99m;\n      var unit = Unit.item;\n      Console.WriteLine($\"On {date}, the price of {item} was {price} per {unit}.\");\n   }\n}\n```\n\nBeachten Sie, dass einer der interpolierten Ausdrücke das `item`-Objekt in der Ergebniszeichenfolge enthält, die in der Konsole angezeigt wird. In diesem Fall wird die Zeichenfolge „eggplant“ in die Ergebniszeichenfolge eingefügt. Dies liegt daran, dass der C#-Compiler Folgendes durchführt, wenn der Typ eines interpolierten Ausdrucks keine Zeichenfolge ist:\n\n- Wenn der interpolierte Ausdruck `null` ist, gibt dieser eine leere Zeichenfolge (\"\" oder <xref:System.String.Empty?displayProperty=nameWithType>) zurück.\n\n- Wenn der interpolierte Ausdruck nicht `null` ist, wird die `ToString`-Methode des Typs des interpolierten Ausdrucks aufgerufen. Sie können dies testen, indem Sie die Definition der `Vegetable.ToString`-Methode im Beispiel auskommentieren, indem Sie ein Kommentarsymbol (`//`) davor einfügen. In der Ausgabe wird die Zeichenfolge „eggplant“ durch den vollqualifizierten Typnamen (der neben dem Typnamen von der C#-REPL definierte Namespace) ersetzt. Dabei handelt es sich um das Standardverhalten der <xref:System.Object.ToString?displayProperty=nameWithType>-Methode.   \n\nBei der Ausgabe dieses Beispielcodes ist das Datum zu genau angegeben (der Preis von Auberginen ändert sich nicht sekündlich), und der Wert der Variablen „price“ gibt keine Währungsinformation an. Im nächsten Schritt erfahren Sie, wie Sie diese Probleme beheben, indem Sie das Format der Zeichenfolgen steuern, die von den interpolierten Ausdrücken zurückgegeben werden.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Steuern der Formatierung von interpolierten Ausdrücken"
  durationInMinutes: 5
  content: "In der vorherigen Lektion wurden zwei fehlerhaft formatierte Zeichenfolgen in die Ergebniszeichenfolge eingefügt. Bei einer davon handelte es sich um einen Datums- und Uhrzeitwert, bei dem nur das Datum relevant war. Bei der zweiten handelte es sich um einen Preis, bei dem keine Währungseinheit angegeben wurde. Beide Probleme sind einfach zu beheben. Interpolierte Ausdrücke können *Formatzeichenfolgen* enthalten, die die Formatierung von bestimmten Typen steuern. Ändern Sie den Aufruf von `Console.WriteLine` im vorherigen Beispiel, damit der Formatbezeichner für die Felder „date“ und „price“ wie in der folgenden Zeile dargestellt enthalten ist:\n\n```csharp\nConsole.WriteLine($\"On {date:d}, the price of {item} was {price:C2} per {unit}.\");\n```\n\nSie können eine Formatzeichenfolge angeben, indem Sie dem interpolierten Ausdruck einen Doppelpunkt und die Formatzeichenfolge anfügen. Bei „d“ handelt es sich um eine [Zeichenfolge für das Standardformat für Datum und Uhrzeit](../../standard/base-types/standard-date-and-time-format-strings.md#the-short-date-d-format-specifier), die das kurze Datumsformat darstellt. Bei „C2“ handelt es sich um eine [Zeichenfolge für das numerische Standardformat](../../standard/base-types/standard-numeric-format-strings.md#the-currency-c-format-specifier), die eine Zahl als Währungswert mit zwei Ziffern nach dem Dezimaltrennzeichen darstellt.\n\nEinige Typen in den .NET Standard-Bibliotheken unterstützen einen vordefinierten Satz von Formatzeichenfolgen. Darin sind alle numerischen Typen sowie alle Datums- und Uhrzeittypen enthalten. Eine vollständige Liste der Typen, die Formatzeichenfolgen unterstützen, finden Sie im Artikel [Formatieren von Typen in .NET](../../standard/base-types/formatting-types.md) unter [Format Strings and .NET Class Library Types (Formatzeichenfolgen und .NET-Klassenbibliothekstypen)](../../standard/base-types/formatting-types.md#stringRef). Jeder dieser Typen kann bestimmte Formatzeichenfolgen unterstützen. Sie können jedoch ebenfalls benutzerdefinierte Formatierungserweiterungen entwickeln, um benutzerdefinierte Formatierungen für vorhandene Typen bereitzustellen. Weitere Informationen zur benutzerdefinierten Formatierung durch die Bereitstellung einer <xref:System.ICustomFormatter>-Implementierung finden Sie im Artikel [Formatieren von Typen in .NET](../../standard/base-types/formatting-types.md) unter [Benutzerdefinierte Formatierung mit ICustomFormatter](../../standard/base-types/formatting-types.md#custom-formatting-with-icustomformatter).\n\nVersuchen Sie, die Formatzeichenfolgen im **.NET-Editor** zu verändern, um zu sehen, welche Auswirkungen sie auf die Formatierung des Datums, der Zeit und des numerischen Werts haben. Ändern Sie „d“ in `{date:d}` in „t“ (um das kurze Uhrzeitformat anzuzeigen) sowie in „y“ (um das Jahr und den Monat anzuzeigen) und in „yyyy“ (um das Jahr als vierstellige Zahl anzuzeigen). Ändern Sie „C2“ in `{price:C2}` in „e“ (für die Exponentialschreibweise) und in „F3“ (für einen numerischen Wert mit drei Ziffern nach dem Dezimaltrennzeichen).\n\nSie können zusätzlich zum Steuern der Formatierung auch die Feldbreite und die Ausrichtung der Zeichenfolgen steuern, die von einem interpolierten Ausdruck zurückgegeben werden. Im nächsten Schritt erfahren Sie mehr zu diesem Thema.\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- title: "Steuern der Feldbreite und der Ausrichtung von interpolierten Ausdrücken"
  durationInMinutes: 6
  content: "Wenn die von einem interpolierten Ausdruck zurückgegebene Zeichenfolge in eine Ergebniszeichenfolge eingefügt wird, enthält diese normalerweise keine führenden oder nachgestellten Leerräume. Insbesondere bei Instanzen, bei denen Sie mit einem Datensatz arbeiten, können Sie durch interpolierte Ausdrücke die Breite und Ausrichtung eines Felds angeben. Wenn Ihnen dies angezeigt werden soll, führen Sie den folgenden Code aus.\n\n```csharp\n  var inventory = new Dictionary<string, int>();\n  inventory.Add(\"hammer, ball pein\", 18);\n  inventory.Add(\"hammer, cross pein\", 5);\n  inventory.Add(\"screwdriver, Phillips #2\", 14);\n\n  Console.WriteLine($\"Inventory on {DateTime.Now:d}\");\n  Console.WriteLine(\" \");\n  Console.WriteLine($\"{\"Item\",-25}    {\"Quantity\",10}\");\n  Console.WriteLine(\" \"); \n  foreach (var item in inventory)\n     Console.WriteLine($\"{item.Key,-25}     {item.Value,10}\");\n```\n\nDie Elementnamen sind linksbündig ausgerichtet. Die Mengen sind rechtsbündig ausgerichtet. Sie können die Ausrichtung festlegen, indem Sie dem Ausdruck ein Komma („,“) anfügen und die Feldbreite angeben. Wenn Sie eine positive Zahl für die Feldbreite eingeben, wird das Feld rechtsbündig ausgerichtet:\n\n```text\n{expression, width}\n```\n\nWenn Sie eine negative Zahl für die Feldbreite eingeben, wird das Feld linksbündig ausgerichtet:\n\n```text\n{expression, -width}\n```\nEntfernen Sie die negativen Vorzeichen der interpolierten Ausdrücke `{\"Item\",-25}` und `{item.Key,-25}`, und führen Sie das Beispiel erneut aus. In diesem Fall ist der Elementname rechtsbündig ausgerichtet.\n\nSie können eine Feldbreite und eine Formatzeichenfolge in einem einzigen interpolierten Ausdruck kombinieren. Die Feldbreite wird zuerst angegeben, gefolgt von einem Doppelpunkt und der Formatzeichenfolge. Probieren Sie das folgende, einfache Programm aus, das die drei formatierten Zeichenfolgen mit definierten Feldbreiten darstellt.\n\n```csharp\nConsole.WriteLine($\"{DateTime.Now,-20:d} Hour {DateTime.Now,-10:HH} {1063.342,15:N2} feet\");\n```\n\n> [!NOTE]\n> Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus. Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).\n"
- content: "Sie haben den Schnellstart für interpolierte Zeichenfolgen abgeschlossen. \n\nSie können diese Schnellstarts für Ihre eigene lokale Entwicklungsumgebung fortsetzen. Erfahren Sie mehr über die Grundlagen der [lokalen Entwicklung](local-environment.md), und wählen Sie dann einen Schnellstart aus. Sie können diese Übung durchführen, direkt mit dem nächsten Schnellstart fortfahren oder erneut mit dem Schnellstart [Zahlen in C#](numbers-in-csharp-local.md) beginnen.\n\nWeitere Informationen zum Arbeiten mit interpolierten Zeichenfolgen finden Sie im Artikel [Interpolierte Zeichenfolgen](../language-reference/keywords/interpolated-strings.md) in der C#-Referenz.\0"
