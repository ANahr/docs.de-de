### YamlMime:YamlDocument
documentType: Tutorial
title: 'Zahlen in C#'
metadata:
  title: '<span data-ttu-id="91cac-102">Zahlen in C#</span><span class="sxs-lookup"><span data-stu-id="91cac-102">Numbers in C#</span></span>'
  description: '<span data-ttu-id="91cac-103">In diesem Tutorial zu numerischen Typen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen.</span><span class="sxs-lookup"><span data-stu-id="91cac-103">In this tutorial about numeric types, you''ll use your browser to learn C# interactively.</span></span> <span data-ttu-id="91cac-104">Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.</span><span class="sxs-lookup"><span data-stu-id="91cac-104">You''re going to write C# code and see the results of compiling and running your code directly in the browser.</span></span>'
  audience: Developer
  level: Beginner
  nextTutorialHref: branches-and-loops
  nextTutorialTitle: 'Branches and loops in C#'
  displayType: two-column
  interactive: csharp
items:
  - durationInMinutes: 1
    content: |
      <span data-ttu-id="91cac-105">In diesem Tutorial erlernen Sie interaktiv die Zahlentypen in C#, indem Sie mit Ihrem Browser einen C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen.</span><span class="sxs-lookup"><span data-stu-id="91cac-105">This tutorial teaches you about the number types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="91cac-106">Es enthält eine Reihe von Lektionen, in denen Zahlen und arithmetische Operationen in C# untersucht werden.</span><span class="sxs-lookup"><span data-stu-id="91cac-106">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="91cac-107">In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.</span><span class="sxs-lookup"><span data-stu-id="91cac-107">These lessons teach you the fundamentals of the C# language.</span></span>
  - title: <span data-ttu-id="91cac-108">Erkunden von arithmetischen Operationen mit ganzen Zahlen</span><span class="sxs-lookup"><span data-stu-id="91cac-108">Explore integer math</span></span>
    durationInMinutes: 4
    content: |
      <span data-ttu-id="91cac-109">Führen Sie den folgenden Code im interaktiven Fenster aus.</span><span class="sxs-lookup"><span data-stu-id="91cac-109">Run the following code in the interactive window.</span></span> <span data-ttu-id="91cac-110">Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:</span><span class="sxs-lookup"><span data-stu-id="91cac-110">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>

      ```csharp
      int a = 18;
      int b = 6;
      int c = a + b;
      Console.WriteLine(c);
      ```

      <span data-ttu-id="91cac-111">Sie haben soeben eine der grundlegenden arithmetischen Operationen mit ganzen Zahlen kennengelernt.</span><span class="sxs-lookup"><span data-stu-id="91cac-111">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id="91cac-112">Der `int`-Typ steht für **integer**, d.h. eine positive oder negative ganze Zahl.</span><span class="sxs-lookup"><span data-stu-id="91cac-112">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id="91cac-113">Sie verwenden zum Addieren das `+`-Symbol.</span><span class="sxs-lookup"><span data-stu-id="91cac-113">You use the `+` symbol for addition.</span></span> <span data-ttu-id="91cac-114">Zu den anderen häufig verwendeten arithmetischen Operationen für ganze Zahlen zählen Folgende:</span><span class="sxs-lookup"><span data-stu-id="91cac-114">Other common mathematical operations for integers include:</span></span>

      - <span data-ttu-id="91cac-115">`-` zur Subtraktion</span><span class="sxs-lookup"><span data-stu-id="91cac-115">`-` for subtraction</span></span>
      - <span data-ttu-id="91cac-116">`*` zur Multiplikation</span><span class="sxs-lookup"><span data-stu-id="91cac-116">`*` for multiplication</span></span>
      - <span data-ttu-id="91cac-117">`/` zur Division</span><span class="sxs-lookup"><span data-stu-id="91cac-117">`/` for division</span></span>

      > [!TIP]
      > <span data-ttu-id="91cac-118">Im Rahmen dieses Tutorials können Sie sich selbst mit dieser Operationen vertraut machen, indem Sie den Code, den Sie in das interaktive Fenster geschrieben haben, ändern.</span><span class="sxs-lookup"><span data-stu-id="91cac-118">Throughout this tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id="91cac-119">Dieses Tutorial stellt bei jedem Schritt Beispiele zur Verfügung, die Sie testen können.</span><span class="sxs-lookup"><span data-stu-id="91cac-119">This tutorial provides examples that you can try at each step.</span></span>

      <span data-ttu-id="91cac-120">Erkunden Sie zunächst die anderen Operationen.</span><span class="sxs-lookup"><span data-stu-id="91cac-120">Start by exploring those different operations.</span></span> <span data-ttu-id="91cac-121">Ändern Sie die dritte Zeile, um die einzelnen Operationen zu testen.</span><span class="sxs-lookup"><span data-stu-id="91cac-121">Modify the third line to try each of these operations.</span></span> <span data-ttu-id="91cac-122">Klicken Sie nach jeder Änderung auf die Schaltfläche **Ausführen**.</span><span class="sxs-lookup"><span data-stu-id="91cac-122">After each edit, click the **Run** button.</span></span>

      <span data-ttu-id="91cac-123">Subtraktion:</span><span class="sxs-lookup"><span data-stu-id="91cac-123">Subtraction:</span></span>

      ```csharp
      int c = a - b;
      ```

      <span data-ttu-id="91cac-124">Multiplikation:</span><span class="sxs-lookup"><span data-stu-id="91cac-124">Multiplication:</span></span>

      ```csharp
      int c = a * b;
      ```

      <span data-ttu-id="91cac-125">Division:</span><span class="sxs-lookup"><span data-stu-id="91cac-125">Division:</span></span> 

      ```csharp
      int c = a / b;
      ```

      <span data-ttu-id="91cac-126">Wenn Sie möchten, können Sie auch experimentieren, indem Sie mehrere arithmetische Operationen in der gleichen Zeile ausführen.</span><span class="sxs-lookup"><span data-stu-id="91cac-126">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>

      > [!TIP]
      > <span data-ttu-id="91cac-127">Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben.</span><span class="sxs-lookup"><span data-stu-id="91cac-127">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id="91cac-128">Der **Compiler** findet diese Fehler und meldet diese.</span><span class="sxs-lookup"><span data-stu-id="91cac-128">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id="91cac-129">Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster genau an, um herauszufinden, was korrigiert werden muss.</span><span class="sxs-lookup"><span data-stu-id="91cac-129">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>
      > <span data-ttu-id="91cac-130">Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.</span><span class="sxs-lookup"><span data-stu-id="91cac-130">That exercise will help you learn the structure of C# code.</span></span>     

      > [!NOTE]
      > <span data-ttu-id="91cac-131">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="91cac-131">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91cac-132">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="91cac-132">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="91cac-133">Erkunden der Reihenfolge der Operationen</span><span class="sxs-lookup"><span data-stu-id="91cac-133">Explore order of operations</span></span>
    durationInMinutes: 7
    content: |
      <span data-ttu-id="91cac-134">Die Programmiersprache C# definiert anhand von Regeln, die Sie aus der Mathematik kennen, die Rangfolge verschiedener arithmetischer Operationen.</span><span class="sxs-lookup"><span data-stu-id="91cac-134">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>
      <span data-ttu-id="91cac-135">Multiplikation und Division haben gegenüber der Addition und Subtraktion Vorrang.</span><span class="sxs-lookup"><span data-stu-id="91cac-135">Multiplication and division take precedence over addition and subtraction.</span></span>
      <span data-ttu-id="91cac-136">Erkunden Sie dies, indem Sie den folgenden Code im interaktiven Fenster ausführen:</span><span class="sxs-lookup"><span data-stu-id="91cac-136">Explore that by running the following code in the interactive window:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = a + b * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="91cac-137">Die Ausgabe zeigt, dass vor der Addition die Multiplikation ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="91cac-137">The output demonstrates that the multiplication is performed before the addition.</span></span>

      <span data-ttu-id="91cac-138">Sie können eine andere Operationsreihenfolge erzwingen, indem Sie die Operation bzw. die Operationen, die zuerst ausgeführt werden soll bzw. sollen, mit Klammern umschließen:</span><span class="sxs-lookup"><span data-stu-id="91cac-138">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>

      ```csharp
      int a = 5;
      int b = 4;
      int c = 2;
      int d = (a  + b) * c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="91cac-139">Machen Sie sich damit vertraut, indem Sie viele verschiedene Operationen kombinieren.</span><span class="sxs-lookup"><span data-stu-id="91cac-139">Explore more by combining many different operations.</span></span> <span data-ttu-id="91cac-140">Ersetzen Sie die vierte Zeile oben durch eine Zeile wie etwa Folgende:</span><span class="sxs-lookup"><span data-stu-id="91cac-140">Replace the fourth line above with something like this:</span></span>

      ```csharp
      int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;
      ```

      <span data-ttu-id="91cac-141">Vielleicht haben Sie bereits ein interessantes Verhalten bei den ganzen Zahlen bemerkt.</span><span class="sxs-lookup"><span data-stu-id="91cac-141">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="91cac-142">Bei der Division ganzer Zahlen kommt immer ein ganzzahliges Ergebnis heraus, selbst wenn das mathematische Ergebnis eine Dezimal- oder Bruchzahl enthalten müsste.</span><span class="sxs-lookup"><span data-stu-id="91cac-142">Integer division always produces an integer result, even when the mathematical result would include a decimal or fraction portion.</span></span>

      <span data-ttu-id="91cac-143">Wenn Sie dieses Verhalten noch nicht beobachtet haben, testen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="91cac-143">If you haven't seen this behavior, try the following:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="91cac-144">Klicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="91cac-144">Click **Run** again to see the results.</span></span>

      > [!NOTE]
      > <span data-ttu-id="91cac-145">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="91cac-145">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91cac-146">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="91cac-146">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="91cac-147">Erkunden der Genauigkeit und Grenzwerte ganzer Zahlen</span><span class="sxs-lookup"><span data-stu-id="91cac-147">Explore integer precision and limits</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="91cac-148">Im vorherigen Beispiel haben Sie gesehen, dass das Ergebnis bei der Division ganzer Zahlen abgeschnitten wird.</span><span class="sxs-lookup"><span data-stu-id="91cac-148">That last sample showed you that integer division truncates the result.</span></span>
      <span data-ttu-id="91cac-149">Sie erhalten den Restwert **remainder** mithilfe des **Modulo**-Operators, dem `%`-Zeichen:</span><span class="sxs-lookup"><span data-stu-id="91cac-149">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>

      ```csharp
      int a = 7;
      int b = 4;
      int c = 3;
      int d = (a  + b) / c;
      int e = (a + b) % c;
      Console.WriteLine("quotient: " + d);
      Console.WriteLine("remainder: " + e);
      ```

      <span data-ttu-id="91cac-150">Der integer-C#-Typ unterscheidet sich noch in einem weiteren Punkt von einer mathematischen ganzen Zahl: Der `int`-Typ ist mit minimalen und maximalen Grenzwerten versehen.</span><span class="sxs-lookup"><span data-stu-id="91cac-150">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="91cac-151">Führen Sie den folgenden Code im interaktiven Fenster aus, um diese Grenzwerte anzuzeigen:</span><span class="sxs-lookup"><span data-stu-id="91cac-151">Run this code in the interactive window to see those limits:</span></span>

      ```csharp
      int max = int.MaxValue;
      int min = int.MinValue;
      Console.WriteLine("The range of integers is " + min + " to " + max);
      ```

      <span data-ttu-id="91cac-152">Wenn bei einer Berechnung ein Wert herauskommt, der diese Grenzwerte überschreitet, liegt eine **Unterlauf-** oder **Überlaufbedingung** vor.</span><span class="sxs-lookup"><span data-stu-id="91cac-152">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="91cac-153">Die Antwort gibt dann den Bereich der Grenzwerte an.</span><span class="sxs-lookup"><span data-stu-id="91cac-153">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="91cac-154">Fügen Sie im interaktiven Fenster die folgenden beiden Zeilen hinzu, um ein Beispiel anzuzeigen:</span><span class="sxs-lookup"><span data-stu-id="91cac-154">Add these two lines to the interactive window to see an example:</span></span>

      ```csharp
      int what = max + 3;
      Console.WriteLine("An example of overflow: " + what);
      ```

      <span data-ttu-id="91cac-155">Beachten Sie, dass die Antwort sehr nah an der minimalen (negativen) ganzen Zahl liegt.</span><span class="sxs-lookup"><span data-stu-id="91cac-155">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="91cac-156">Sie entspricht `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="91cac-156">It's the same as `min + 2`.</span></span> <span data-ttu-id="91cac-157">Die Additionsoperation hat die zulässigen Werte für ganze Zahlen **überlaufen**.</span><span class="sxs-lookup"><span data-stu-id="91cac-157">The addition operation **overflowed** the allowed values for integers.</span></span>
      <span data-ttu-id="91cac-158">Die Antwort enthält eine sehr große negative Zahl, da ein Überlauf den größtmöglichen ganzzahligen Wert bis zum kleinstmöglichen Wert umschließt.</span><span class="sxs-lookup"><span data-stu-id="91cac-158">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>

      <span data-ttu-id="91cac-159">Wenn der `int`-Typ nicht Ihren Anforderungen entspricht, so gibt es verschiedene numerische Typen mit anderen Grenzwerten und Genauigkeitsgraden, die Sie verwenden können.</span><span class="sxs-lookup"><span data-stu-id="91cac-159">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="91cac-160">Werfen wir im Folgenden einmal einen Blick auf diese.</span><span class="sxs-lookup"><span data-stu-id="91cac-160">Let's explore those next.</span></span>

      > [!NOTE]
      > <span data-ttu-id="91cac-161">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="91cac-161">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91cac-162">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="91cac-162">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="91cac-163">Arbeiten mit dem Double-Typ</span><span class="sxs-lookup"><span data-stu-id="91cac-163">Work with the double type</span></span>
    durationInMinutes: 5
    content: |
      <span data-ttu-id="91cac-164">Der numerische Typ `double` stellt eine Gleitkommazahl mit doppelter Genauigkeit dar.</span><span class="sxs-lookup"><span data-stu-id="91cac-164">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id="91cac-165">Falls Ihnen diese Benennungen nichts sagen, beachten Sie die folgenden Erläuterungen:</span><span class="sxs-lookup"><span data-stu-id="91cac-165">Those terms may be new to you.</span></span> <span data-ttu-id="91cac-166">Eine **Gleitkommazahl** wird verwendet, um sehr große oder sehr kleine Zahlen, die keine ganzen Zahlen sind, darzustellen.</span><span class="sxs-lookup"><span data-stu-id="91cac-166">A **floating point** number is useful to represent non-integral numbers that may be very large, or small in magnitude.</span></span> <span data-ttu-id="91cac-167">**Doppelte Genauigkeit** bedeutet, dass diese Zahlen mit einer höheren Genauigkeit gespeichert werden als mit **einfacher Genauigkeit**.</span><span class="sxs-lookup"><span data-stu-id="91cac-167">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id="91cac-168">Bei modernen Computern werden häufiger Zahlen mit doppelter Genauigkeit verwendet statt mit einfacher Genauigkeit.</span><span class="sxs-lookup"><span data-stu-id="91cac-168">On modern computers, it is more common to use double precision than single precision numbers.</span></span>
      <span data-ttu-id="91cac-169">Sehen wir uns dies einmal genauer an.</span><span class="sxs-lookup"><span data-stu-id="91cac-169">Let's explore.</span></span> <span data-ttu-id="91cac-170">Testen Sie den folgenden Code im interaktiven Fenster, und sehen Sie sich das Ergebnis an:</span><span class="sxs-lookup"><span data-stu-id="91cac-170">Try the following code in the interactive window and see the result:</span></span>

      ```csharp
      double a = 5;
      double b = 4;
      double c = 2;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="91cac-171">Beachten Sie, dass die Antwort die Dezimalzahl des Quotienten enthält.</span><span class="sxs-lookup"><span data-stu-id="91cac-171">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id="91cac-172">Testen Sie einen etwas komplizierteren Ausdruck mit Werten vom Typ „double“:</span><span class="sxs-lookup"><span data-stu-id="91cac-172">Try a slightly more complicated expression with doubles:</span></span>

      ```csharp
      double a = 19;
      double b = 23;
      double c = 8;
      double d = (a  + b) / c;
      Console.WriteLine(d);
      ```

      <span data-ttu-id="91cac-173">Der Bereich eines Werts vom Typ „double“ ist weitaus größer als bei ganzzahligen Werten.</span><span class="sxs-lookup"><span data-stu-id="91cac-173">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id="91cac-174">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class="sxs-lookup"><span data-stu-id="91cac-174">Try the following code in the interactive window:</span></span>

      ```csharp
      double max = double.MaxValue;
      double min = double.MinValue;
      Console.WriteLine("The range of double is " + min + " to " + max);
      ```

      <span data-ttu-id="91cac-175">Diese Werte werden zur Darstellung der wissenschaftlichen Schreibweise ausgegeben.</span><span class="sxs-lookup"><span data-stu-id="91cac-175">These values are printed out to represent scientific notation.</span></span> <span data-ttu-id="91cac-176">Die Zahl links von `E` ist die signifikante Stelle.</span><span class="sxs-lookup"><span data-stu-id="91cac-176">The number to the left of the `E` is the significant.</span></span> <span data-ttu-id="91cac-177">Die Zahl rechts ist der Exponent als Potenz von 10.</span><span class="sxs-lookup"><span data-stu-id="91cac-177">The number to the right is the exponent, as a power of 10.</span></span> <span data-ttu-id="91cac-178">Diese Zahlen werden im Wesentlichen auf ähnliche Weise dargestellt, liegen jedoch im Binärformat vor.</span><span class="sxs-lookup"><span data-stu-id="91cac-178">Internally, these numbers are represented similarly, but in a binary form.</span></span> <span data-ttu-id="91cac-179">Ein Teil stellt die signifikanten Binärziffern dar.</span><span class="sxs-lookup"><span data-stu-id="91cac-179">One part represents the significant binary digits.</span></span>
      <span data-ttu-id="91cac-180">Der andere Teil stellt die Stelle dar, an der der Binärpunkt (analog zu einem Dezimalkomma) relativ zu diesen signifikanten Ziffern platziert wird.</span><span class="sxs-lookup"><span data-stu-id="91cac-180">Another part represents where to place the binary point (analogous to a decimal point) relative to those significant digits.</span></span>

      <span data-ttu-id="91cac-181">Wie bei Dezimalzahlen in der Mathematik können double-Werte in C# Rundungsfehler aufweisen.</span><span class="sxs-lookup"><span data-stu-id="91cac-181">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id="91cac-182">Testen Sie den folgenden Code:</span><span class="sxs-lookup"><span data-stu-id="91cac-182">Try this code:</span></span>

      ```csharp
      double third = 1.0 / 3.0;
      Console.WriteLine(third);
      ```

      <span data-ttu-id="91cac-183">Denken Sie daran, dass `0.3` nicht exakt `1/3` entspricht.</span><span class="sxs-lookup"><span data-stu-id="91cac-183">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>

      <span data-ttu-id="91cac-184">***Übung***</span><span class="sxs-lookup"><span data-stu-id="91cac-184">***Challenge***</span></span>

      <span data-ttu-id="91cac-185">Testen Sie für den `double`-Typ andere Berechnungen mit großen und kleinen Zahlen sowie mit Multiplikation und Division.</span><span class="sxs-lookup"><span data-stu-id="91cac-185">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id="91cac-186">Testen Sie kompliziertere Berechnungen.</span><span class="sxs-lookup"><span data-stu-id="91cac-186">Try more complicated calculations.</span></span>

      > [!NOTE]
      > <span data-ttu-id="91cac-187">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="91cac-187">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91cac-188">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="91cac-188">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="91cac-189">Arbeiten mit Festkommatypen</span><span class="sxs-lookup"><span data-stu-id="91cac-189">Work with fixed point types</span></span>
    durationInMinutes: 8
    content: |
      <span data-ttu-id="91cac-190">Sie haben die grundlegenden numerischen Typen in C# – „integer“ und „double“ – kennengelernt.</span><span class="sxs-lookup"><span data-stu-id="91cac-190">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id="91cac-191">Es gibt einen weiteren Typ, den Sie kennen sollten: den `decimal`-Typ.</span><span class="sxs-lookup"><span data-stu-id="91cac-191">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id="91cac-192">Der `decimal`-Typ weist einen kleineren Bereich als `double` auf, aber eine höhere Genauigkeit.</span><span class="sxs-lookup"><span data-stu-id="91cac-192">The `decimal` type has a smaller range, but greater precision than `double`.</span></span> <span data-ttu-id="91cac-193">Die Benennung **Festkomma** bedeutet, dass die Position des Dezimalkommas (hier Dezimalpunkts bzw. Binärpunkts) unveränderlich ist.</span><span class="sxs-lookup"><span data-stu-id="91cac-193">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id="91cac-194">Sehen wir uns das einmal genauer an:</span><span class="sxs-lookup"><span data-stu-id="91cac-194">Let's take a look:</span></span>

      ```csharp
      decimal min = decimal.MinValue;
      decimal max = decimal.MaxValue;
      Console.WriteLine("The range of the decimal type is " + min + " to " + max);
      ```

      <span data-ttu-id="91cac-195">Beachten Sie, dass der Bereich kleiner ist als beim `double`-Typ.</span><span class="sxs-lookup"><span data-stu-id="91cac-195">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id="91cac-196">Sie können sehen, dass die Genauigkeit beim Typ „decimal“ höher ist, wenn Sie den folgenden Code testen:</span><span class="sxs-lookup"><span data-stu-id="91cac-196">You can see the greater precision with the decimal type by trying the following code:</span></span>

      ```csharp
      double a = 1.0;
      double b = 3.0;
      Console.WriteLine(a / b);

      decimal c = 1.0M;
      decimal d = 3.0M;
      Console.WriteLine(c / d);
      ```

      <span data-ttu-id="91cac-197">Mit dem Suffix `M` neben einer Zahl geben Sie an, dass eine Konstante den `decimal`-Typ verwenden soll.</span><span class="sxs-lookup"><span data-stu-id="91cac-197">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>

      <span data-ttu-id="91cac-198">Beachten Sie, dass der aus dieser arithmetischen Operation resultierende Wert vom Typ „decimal“ rechts neben dem Dezimalpunkt mehr Ziffern enthält.</span><span class="sxs-lookup"><span data-stu-id="91cac-198">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> 

      <span data-ttu-id="91cac-199">***Übung***</span><span class="sxs-lookup"><span data-stu-id="91cac-199">***Challenge***</span></span>

      <span data-ttu-id="91cac-200">Nachdem Sie nun die verschiedenen numerischen Typen kennengelernt haben, schreiben Sie einen Code, der den Flächeninhalt eines Kreises mit einem Radius von 2,5 Zoll berechnet.</span><span class="sxs-lookup"><span data-stu-id="91cac-200">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 inches.</span></span> <span data-ttu-id="91cac-201">Denken Sie daran, dass der Flächeninhalt eines Kreises durch das Quadrat des Radius multipliziert mit Pi gebildet wird.</span><span class="sxs-lookup"><span data-stu-id="91cac-201">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id="91cac-202">Tipp: C# bietet eine Konstante für Pi (`Math.PI`), die Sie für die Berechnung dieses Werts verwenden können.</span><span class="sxs-lookup"><span data-stu-id="91cac-202">One hint: C# contains a constant for PI: `Math.PI` that you can use for that value.</span></span> 

      > [!NOTE]
      > <span data-ttu-id="91cac-203">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="91cac-203">This online coding experience is in preview mode.</span></span> <span data-ttu-id="91cac-204">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="91cac-204">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
  - title: <span data-ttu-id="91cac-205">Übung abgeschlossen</span><span class="sxs-lookup"><span data-stu-id="91cac-205">Complete challenge</span></span>
    durationInMinutes: 1
    content: |
      <span data-ttu-id="91cac-206">Sie haben das Tutorial „Zahlen in C#“ abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="91cac-206">You've completed the "Numbers in C#" tutorial.</span></span> <span data-ttu-id="91cac-207">Weitere Informationen zu Zahlen in C# finden Sie auch unter folgenden Themen:</span><span class="sxs-lookup"><span data-stu-id="91cac-207">You can learn more about numbers in C# in the following topics:</span></span>

      <span data-ttu-id="91cac-208">[Tabelle ganzzahliger Typen](../language-reference/keywords/integral-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="91cac-208">[Integral Types Table](../language-reference/keywords/integral-types-table.md) </span></span>  
      <span data-ttu-id="91cac-209">[Tabelle für Gleitkommatypen](../language-reference/keywords/floating-point-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="91cac-209">[Floating-Point Types Table](../language-reference/keywords/floating-point-types-table.md) </span></span>  
      <span data-ttu-id="91cac-210">[Tabelle integrierter Typen](../language-reference/keywords/built-in-types-table.md) </span><span class="sxs-lookup"><span data-stu-id="91cac-210">[Built-In Types Table](../language-reference/keywords/built-in-types-table.md) </span></span>  
      <span data-ttu-id="91cac-211">[Tabelle für implizite numerische Konvertierungen](../language-reference/keywords/implicit-numeric-conversions-table.md) </span><span class="sxs-lookup"><span data-stu-id="91cac-211">[Implicit Numeric Conversions Table](../language-reference/keywords/implicit-numeric-conversions-table.md) </span></span>  
      [<span data-ttu-id="91cac-212">Tabelle für explizite numerische Konvertierungen</span><span class="sxs-lookup"><span data-stu-id="91cac-212">Explicit Numeric Conversions Table</span></span>](../language-reference/keywords/explicit-numeric-conversions-table.md)