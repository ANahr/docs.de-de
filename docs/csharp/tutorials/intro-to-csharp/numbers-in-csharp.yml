### YamlMime:Tutorial
title: <span data-ttu-id="233d6-101">Bearbeiten von Ganzzahlen und Gleitkommazahlen in C#</span><span class="sxs-lookup"><span data-stu-id="233d6-101">Manipulate integral and floating point numbers in C#</span></span>
metadata:
  title: Zahlen in C# – Einführung in das interaktive C#-Tutorial
  description: In diesem Tutorial zu numerischen Typen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: <span data-ttu-id="233d6-105">Branches und Schleifen in C#</span><span class="sxs-lookup"><span data-stu-id="233d6-105">Branches and loops in C#</span></span>
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: d29fae5aa5a34d7a8e91e53f2005178740464827
  ms.sourcegitcommit: ccd8c36b0d74d99291d41aceb14cf98d74dc9d2b
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 12/10/2018
  ms.locfileid: "53131247"
items:
- durationInMinutes: 1
  content: >
    <span data-ttu-id="233d6-106">In diesem interaktiven Tutorial erfahren Sie mehr über numerische Typen in C#, indem Sie mit Ihrem Browser einen C#-Code schreiben und die Ergebnisse der Kompilierung und Ausführung Ihres Codes sehen.</span><span class="sxs-lookup"><span data-stu-id="233d6-106">This tutorial teaches you about the numeric types in C# interactively, using your browser to write C# and see the results of compiling and running your code.</span></span> <span data-ttu-id="233d6-107">Es enthält eine Reihe von Lektionen, in denen Zahlen und arithmetische Operationen in C# untersucht werden.</span><span class="sxs-lookup"><span data-stu-id="233d6-107">It contains a series of lessons that explore numbers and math operations in C#.</span></span> <span data-ttu-id="233d6-108">In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.</span><span class="sxs-lookup"><span data-stu-id="233d6-108">These lessons teach you the fundamentals of the C# language.</span></span>
- title: <span data-ttu-id="233d6-109">Erkunden von arithmetischen Operationen mit ganzen Zahlen</span><span class="sxs-lookup"><span data-stu-id="233d6-109">Explore integer math</span></span>
  durationInMinutes: 4
  content: "<span data-ttu-id=\"233d6-110\">Führen Sie den folgenden Code im interaktiven Fenster aus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-110\">Run the following code in the interactive window.</span></span> <span data-ttu-id=\"233d6-111\">Geben Sie hierfür den folgenden Codeblock in das interaktive Fenster ein, und klicken Sie auf die Schaltfläche **Ausführen**:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-111\">To do that, type the following code block in the interactive window and click the **Run** button:</span></span>\n\n```csharp\nint a = 18;\nint b = 6;\nint c = a + b;\nConsole.WriteLine(c);\n```\n\n<span data-ttu-id=\"233d6-112\">Sie haben soeben eine der grundlegenden arithmetischen Operationen mit ganzen Zahlen kennengelernt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-112\">You've just seen one of the fundamental math operations with integers.</span></span> <span data-ttu-id=\"233d6-113\">Der `int`-Typ steht für **integer**, d.h. eine positive oder negative ganze Zahl.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-113\">The `int` type represents an **integer**, a positive or negative whole number.</span></span> <span data-ttu-id=\"233d6-114\">Sie verwenden zum Addieren das `+`-Symbol.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-114\">You use the `+` symbol for addition.</span></span> <span data-ttu-id=\"233d6-115\">Zu den anderen häufig verwendeten arithmetischen Operationen für ganze Zahlen zählen Folgende:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-115\">Other common mathematical operations for integers include:</span></span>\n\n- <span data-ttu-id=\"233d6-116\">`-` zur Subtraktion</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-116\">`-` for subtraction</span></span>\n- <span data-ttu-id=\"233d6-117\">`*` zur Multiplikation</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-117\">`*` for multiplication</span></span>\n- <span data-ttu-id=\"233d6-118\">`/` zur Division</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-118\">`/` for division</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"233d6-119\">Im Rahmen dieses interaktiven Tutorials können Sie sich selbst mit dieser Operationen vertraut machen, indem Sie den Code, den Sie in das interaktive Fenster geschrieben haben, ändern.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-119\">Throughout this interactive tutorial, you can explore on your own by modifying the code you've written in the interactive window.</span></span> <span data-ttu-id=\"233d6-120\">Dieses Tutorial stellt bei jedem Schritt Beispiele zur Verfügung, die Sie testen können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-120\">This tutorial provides examples that you can try at each step.</span></span>\n\n<span data-ttu-id=\"233d6-121\">Erkunden Sie zunächst die anderen Operationen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-121\">Start by exploring those different operations.</span></span> <span data-ttu-id=\"233d6-122\">Ändern Sie die dritte Zeile, um die einzelnen Operationen zu testen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-122\">Modify the third line to try each of these operations.</span></span> <span data-ttu-id=\"233d6-123\">Klicken Sie nach jeder Änderung auf die Schaltfläche **Ausführen**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-123\">After each edit, click the **Run** button.</span></span>\n\n<span data-ttu-id=\"233d6-124\">Subtraktion:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-124\">Subtraction:</span></span>\n\n```csharp\nint c = a - b;\n```\n\n<span data-ttu-id=\"233d6-125\">Multiplikation:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-125\">Multiplication:</span></span>\n\n```csharp\nint c = a * b;\n```\n\n<span data-ttu-id=\"233d6-126\">Division:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-126\">Division:</span></span> \n\n```csharp\nint c = a / b;\n```\n\n<span data-ttu-id=\"233d6-127\">Wenn Sie möchten, können Sie auch experimentieren, indem Sie mehrere arithmetische Operationen in der gleichen Zeile ausführen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-127\">You can also experiment by performing multiple mathematics operations in the same line, if you'd like.</span></span>\n\n> [!TIP]\n> <span data-ttu-id=\"233d6-128\">Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-128\">As you explore C# (or any programming language), you'll make mistakes when you write code.</span></span> <span data-ttu-id=\"233d6-129\">Der **Compiler** findet diese Fehler und meldet diese.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-129\">The **compiler** will find those errors and report them to you.</span></span> <span data-ttu-id=\"233d6-130\">Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-130\">When the output contains error messages, look closely at the example code, and the code in the interactive window to see what to fix.</span></span>\n> <span data-ttu-id=\"233d6-131\">Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-131\">That exercise will help you learn the structure of C# code.</span></span>     \n\n> [!NOTE]\n> <span data-ttu-id=\"233d6-132\">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-132\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"233d6-133\">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-133\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="233d6-134">Erkunden der Reihenfolge der Operationen</span><span class="sxs-lookup"><span data-stu-id="233d6-134">Explore order of operations</span></span>
  durationInMinutes: 7
  content: >
    <span data-ttu-id="233d6-135">Die Programmiersprache C# definiert anhand von Regeln, die Sie aus der Mathematik kennen, die Rangfolge verschiedener arithmetischer Operationen.</span><span class="sxs-lookup"><span data-stu-id="233d6-135">The C# language defines the precedence of different mathematics operations with rules consistent with the rules you learned in mathematics.</span></span>

    <span data-ttu-id="233d6-136">Multiplikation und Division haben gegenüber der Addition und Subtraktion Vorrang.</span><span class="sxs-lookup"><span data-stu-id="233d6-136">Multiplication and division take precedence over addition and subtraction.</span></span>

    <span data-ttu-id="233d6-137">Erkunden Sie dies, indem Sie den folgenden Code im interaktiven Fenster ausführen:</span><span class="sxs-lookup"><span data-stu-id="233d6-137">Explore that by running the following code in the interactive window:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="233d6-138">Die Ausgabe zeigt, dass vor der Addition die Multiplikation ausgeführt wurde.</span><span class="sxs-lookup"><span data-stu-id="233d6-138">The output demonstrates that the multiplication is performed before the addition.</span></span>


    <span data-ttu-id="233d6-139">Sie können eine andere Operationsreihenfolge erzwingen, indem Sie die Operation bzw. die Operationen, die zuerst ausgeführt werden soll bzw. sollen, mit Klammern umschließen:</span><span class="sxs-lookup"><span data-stu-id="233d6-139">You can force a different order of operation by adding parentheses around the operation or operations you want performed first:</span></span>


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="233d6-140">Machen Sie sich damit vertraut, indem Sie viele verschiedene Operationen kombinieren.</span><span class="sxs-lookup"><span data-stu-id="233d6-140">Explore more by combining many different operations.</span></span> <span data-ttu-id="233d6-141">Ersetzen Sie die vierte Zeile oben durch eine Zeile wie etwa Folgende:</span><span class="sxs-lookup"><span data-stu-id="233d6-141">Replace the fourth line above with something like this:</span></span>


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    <span data-ttu-id="233d6-142">Vielleicht haben Sie bereits ein interessantes Verhalten bei den ganzen Zahlen bemerkt.</span><span class="sxs-lookup"><span data-stu-id="233d6-142">You may have noticed an interesting behavior for integers.</span></span> <span data-ttu-id="233d6-143">Bei der Division ganzer Zahlen kommt immer ein ganzzahliges Ergebnis heraus, selbst wenn Sie als Ergebnis einen Dezimal- oder Bruchteil erwarten würden.</span><span class="sxs-lookup"><span data-stu-id="233d6-143">Integer division always produces an integer result, even when you'd expect the result to include a decimal or fractional portion.</span></span>


    <span data-ttu-id="233d6-144">Wenn Sie dieses Verhalten noch nicht beobachtet haben, testen Sie Folgendes:</span><span class="sxs-lookup"><span data-stu-id="233d6-144">If you haven't seen this behavior, try the following:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    Console.WriteLine(d);

    ```


    <span data-ttu-id="233d6-145">Klicken Sie erneut auf **Ausführen**, um die Ergebnisse anzuzeigen.</span><span class="sxs-lookup"><span data-stu-id="233d6-145">Click **Run** again to see the results.</span></span>


    > [!NOTE]

    > <span data-ttu-id="233d6-146">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="233d6-146">This online coding experience is in preview mode.</span></span> <span data-ttu-id="233d6-147">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="233d6-147">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="233d6-148">Erkunden der Genauigkeit und Grenzwerte ganzer Zahlen</span><span class="sxs-lookup"><span data-stu-id="233d6-148">Explore integer precision and limits</span></span>
  durationInMinutes: 5
  content: >
    <span data-ttu-id="233d6-149">Im vorherigen Beispiel haben Sie gesehen, dass das Ergebnis bei der Division ganzer Zahlen abgeschnitten wird.</span><span class="sxs-lookup"><span data-stu-id="233d6-149">That last sample showed you that integer division truncates the result.</span></span>

    <span data-ttu-id="233d6-150">Sie erhalten den Restwert **remainder** mithilfe des **Modulo**-Operators, dem `%`-Zeichen:</span><span class="sxs-lookup"><span data-stu-id="233d6-150">You can get the **remainder** by using the **modulo** operator, the `%` character:</span></span>


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a  + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    <span data-ttu-id="233d6-151">Der integer-C#-Typ unterscheidet sich noch in einem weiteren Punkt von einer mathematischen ganzen Zahl: Der `int`-Typ ist mit minimalen und maximalen Grenzwerten versehen.</span><span class="sxs-lookup"><span data-stu-id="233d6-151">The C# integer type differs from mathematical integers in one other way: the `int` type has minimum and maximum limits.</span></span> <span data-ttu-id="233d6-152">Führen Sie den folgenden Code im interaktiven Fenster aus, um diese Grenzwerte anzuzeigen:</span><span class="sxs-lookup"><span data-stu-id="233d6-152">Run this code in the interactive window to see those limits:</span></span>


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    <span data-ttu-id="233d6-153">Wenn bei einer Berechnung ein Wert herauskommt, der diese Grenzwerte überschreitet, liegt eine **Unterlauf-** oder **Überlaufbedingung** vor.</span><span class="sxs-lookup"><span data-stu-id="233d6-153">If a calculation produces a value that exceeds those limits, you have an **underflow** or **overflow** condition.</span></span> <span data-ttu-id="233d6-154">Die Antwort gibt dann den Bereich der Grenzwerte an.</span><span class="sxs-lookup"><span data-stu-id="233d6-154">The answer appears to wrap from one limit to the other.</span></span> <span data-ttu-id="233d6-155">Fügen Sie im interaktiven Fenster die folgenden beiden Zeilen hinzu, um ein Beispiel anzuzeigen:</span><span class="sxs-lookup"><span data-stu-id="233d6-155">Add these two lines to the interactive window to see an example:</span></span>


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    <span data-ttu-id="233d6-156">Beachten Sie, dass die Antwort sehr nah an der minimalen (negativen) ganzen Zahl liegt.</span><span class="sxs-lookup"><span data-stu-id="233d6-156">Notice that the answer is very close to the minimum (negative) integer.</span></span> <span data-ttu-id="233d6-157">Sie entspricht `min + 2`.</span><span class="sxs-lookup"><span data-stu-id="233d6-157">It's the same as `min + 2`.</span></span> <span data-ttu-id="233d6-158">Die Additionsoperation hat die zulässigen Werte für ganze Zahlen **überlaufen**.</span><span class="sxs-lookup"><span data-stu-id="233d6-158">The addition operation **overflowed** the allowed values for integers.</span></span>

    <span data-ttu-id="233d6-159">Die Antwort enthält eine sehr große negative Zahl, da ein Überlauf den größtmöglichen ganzzahligen Wert bis zum kleinstmöglichen Wert umschließt.</span><span class="sxs-lookup"><span data-stu-id="233d6-159">The answer is a very large negative number because an overflow "wraps around" from the largest possible integer value to the smallest.</span></span>


    <span data-ttu-id="233d6-160">Wenn der `int`-Typ nicht Ihren Anforderungen entspricht, so gibt es verschiedene numerische Typen mit anderen Grenzwerten und Genauigkeitsgraden, die Sie verwenden können.</span><span class="sxs-lookup"><span data-stu-id="233d6-160">There are other numeric types with different limits and precision that you would use when the `int` type doesn't meet your needs.</span></span> <span data-ttu-id="233d6-161">Werfen wir im Folgenden einmal einen Blick auf diese.</span><span class="sxs-lookup"><span data-stu-id="233d6-161">Let's explore those next.</span></span>


    > [!NOTE]

    > <span data-ttu-id="233d6-162">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="233d6-162">This online coding experience is in preview mode.</span></span> <span data-ttu-id="233d6-163">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="233d6-163">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- title: <span data-ttu-id="233d6-164">Arbeiten mit dem Double-Typ</span><span class="sxs-lookup"><span data-stu-id="233d6-164">Work with the double type</span></span>
  durationInMinutes: 5
  content: "<span data-ttu-id=\"233d6-165\">Der numerische Typ `double` stellt eine Gleitkommazahl mit doppelter Genauigkeit dar.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-165\">The `double` numeric type represents a double-precision floating point number.</span></span> <span data-ttu-id=\"233d6-166\">Falls Ihnen diese Benennungen nichts sagen, beachten Sie die folgenden Erläuterungen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-166\">Those terms may be new to you.</span></span> <span data-ttu-id=\"233d6-167\">Eine **Gleitkommazahl** wird verwendet, um sehr große oder sehr kleine Zahlen, die keine ganzen Zahlen sind, darzustellen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-167\">A **floating point** number is useful to represent non-integral numbers that may be very large or small in magnitude.</span></span> <span data-ttu-id=\"233d6-168\">**Doppelte Genauigkeit** bedeutet, dass diese Zahlen mit einer höheren Genauigkeit gespeichert werden als mit **einfacher Genauigkeit**.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-168\">**Double-precision** means that these numbers are stored using greater precision than **single-precision**.</span></span> <span data-ttu-id=\"233d6-169\">Bei modernen Computern werden häufiger Zahlen mit doppelter Genauigkeit verwendet statt mit einfacher Genauigkeit.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-169\">On modern computers, it is more common to use double precision than single precision numbers.</span></span>\n<span data-ttu-id=\"233d6-170\">Sehen wir uns dies einmal genauer an.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-170\">Let's explore.</span></span> <span data-ttu-id=\"233d6-171\">Testen Sie den folgenden Code im interaktiven Fenster, und sehen Sie sich das Ergebnis an:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-171\">Try the following code in the interactive window and see the result:</span></span>\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"233d6-172\">Beachten Sie, dass die Antwort die Dezimalzahl des Quotienten enthält.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-172\">Notice that the answer includes the decimal portion of the quotient.</span></span> <span data-ttu-id=\"233d6-173\">Testen Sie einen etwas komplizierteren Ausdruck mit Werten vom Typ „double“:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-173\">Try a slightly more complicated expression with doubles:</span></span>\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a  + b) / c;\nConsole.WriteLine(d);\n```\n\n<span data-ttu-id=\"233d6-174\">Der Bereich eines Werts vom Typ „double“ ist weitaus größer als bei ganzzahligen Werten.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-174\">The range of a double value is much greater than integer values.</span></span> <span data-ttu-id=\"233d6-175\">Testen Sie den folgenden Code im interaktiven Fenster:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-175\">Try the following code in the interactive window:</span></span>\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\n<span data-ttu-id=\"233d6-176\">Diese Werte werden in der wissenschaftlichen Schreibweise ausgegeben.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-176\">These values are printed out in scientific notation.</span></span> <span data-ttu-id=\"233d6-177\">Die Zahl links von `E` ist die Mantisse.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-177\">The number to the left of the `E` is the significand.</span></span> <span data-ttu-id=\"233d6-178\">Die Zahl rechts ist der Exponent als Potenz von 10.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-178\">The number to the right is the exponent, as a power of 10.</span></span> \n\n<span data-ttu-id=\"233d6-179\">Wie bei Dezimalzahlen in der Mathematik können double-Werte in C# Rundungsfehler aufweisen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-179\">Just like decimal numbers in math, doubles in C# can have rounding errors.</span></span> <span data-ttu-id=\"233d6-180\">Testen Sie den folgenden Code:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-180\">Try this code:</span></span>\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\n<span data-ttu-id=\"233d6-181\">Denken Sie daran, dass `0.3` nicht exakt `1/3` entspricht.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-181\">You know that `0.3` repeating is not exactly the same as `1/3`.</span></span>\n\n<span data-ttu-id=\"233d6-182\">***Übung***</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-182\">***Challenge***</span></span>\n\n<span data-ttu-id=\"233d6-183\">Testen Sie für den `double`-Typ andere Berechnungen mit großen und kleinen Zahlen sowie mit Multiplikation und Division.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-183\">Try other calculations with large numbers, small numbers, multiplication and division using the `double` type.</span></span>  <span data-ttu-id=\"233d6-184\">Testen Sie kompliziertere Berechnungen.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-184\">Try more complicated calculations.</span></span>\n\n> [!NOTE]\n> <span data-ttu-id=\"233d6-185\">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-185\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"233d6-186\">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-186\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n"
- title: <span data-ttu-id="233d6-187">Arbeiten mit Festkommatypen</span><span class="sxs-lookup"><span data-stu-id="233d6-187">Work with fixed point types</span></span>
  durationInMinutes: 8
  content: "<span data-ttu-id=\"233d6-188\">Sie haben die grundlegenden numerischen Typen in C# – „integer“ und „double“ – kennengelernt.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-188\">You've seen the basic numeric types in C#: integers and doubles.</span></span>  <span data-ttu-id=\"233d6-189\">Es gibt einen weiteren Typ, den Sie kennen sollten: den `decimal`-Typ.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-189\">There is one other type to learn: the `decimal` type.</span></span> <span data-ttu-id=\"233d6-190\">Der `decimal`-Typ weist einen kleineren Bereich als `double` auf, aber eine höhere Genauigkeit.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-190\">The `decimal` type has a smaller range but greater precision than `double`.</span></span> <span data-ttu-id=\"233d6-191\">Die Benennung **Festkomma** bedeutet, dass die Position des Dezimalkommas (hier Dezimalpunkts bzw. Binärpunkts) unveränderlich ist.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-191\">The term **fixed point** means that the decimal point (or binary point) doesn't move.</span></span> <span data-ttu-id=\"233d6-192\">Sehen wir uns das einmal genauer an:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-192\">Let's take a look:</span></span>\n\n```csharp\ndecimal min = decimal.MinValue;\ndecimal max = decimal.MaxValue;\nConsole.WriteLine($\"The range of the decimal type is {min} to {max}\");\n```\n\n<span data-ttu-id=\"233d6-193\">Beachten Sie, dass der Bereich kleiner ist als beim `double`-Typ.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-193\">Notice that the range is smaller than the `double` type.</span></span> <span data-ttu-id=\"233d6-194\">Sie können sehen, dass die Genauigkeit beim Typ „decimal“ höher ist, wenn Sie den folgenden Code testen:</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-194\">You can see the greater precision with the decimal type by trying the following code:</span></span>\n\n```csharp\ndouble a = 1.0;\ndouble b = 3.0;\nConsole.WriteLine(a / b);\n\ndecimal c = 1.0M;\ndecimal d = 3.0M;\nConsole.WriteLine(c / d);\n```\n\n<span data-ttu-id=\"233d6-195\">Mit dem Suffix `M` neben einer Zahl geben Sie an, dass eine Konstante den `decimal`-Typ verwenden soll.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-195\">The `M` suffix on the numbers is how you indicate that a constant should use the `decimal` type.</span></span>\n\n<span data-ttu-id=\"233d6-196\">Beachten Sie, dass der aus dieser arithmetischen Operation resultierende Wert vom Typ „decimal“ rechts neben dem Dezimalpunkt mehr Ziffern enthält.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-196\">Notice that the math using the decimal type has more digits to the right of the decimal point.</span></span> \n\n<span data-ttu-id=\"233d6-197\">***Übung***</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-197\">***Challenge***</span></span>\n\n<span data-ttu-id=\"233d6-198\">Nachdem Sie nun die verschiedenen numerischen Typen kennengelernt haben, schreiben Sie Code, der den Flächeninhalt eines Kreises mit einem Radius von 2,5 cm berechnet.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-198\">Now that you've seen the different numeric types, write code that calculates the area of a circle whose radius is 2.50 centimeters.</span></span> <span data-ttu-id=\"233d6-199\">Denken Sie daran, dass der Flächeninhalt eines Kreises durch das Quadrat des Radius multipliziert mit Pi gebildet wird.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-199\">Remember that the area of a circle is the radius squared multiplied by PI.</span></span> <span data-ttu-id=\"233d6-200\">Hinweis: .NET bietet eine Konstante für Pi (<xref:System.Math.PI?displayProperty=nameWithType>), die Sie für die Berechnung dieses Werts verwenden können.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-200\">One hint: .NET contains a constant for PI, <xref:System.Math.PI?displayProperty=nameWithType> that you can use for that value.</span></span> \n\n> [!NOTE]\n> <span data-ttu-id=\"233d6-201\">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-201\">This online coding experience is in preview mode.</span></span> <span data-ttu-id=\"233d6-202\">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-202\">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>\n\n<span data-ttu-id=\"233d6-203\">Sie sollten eine Antwort zwischen 19 und 20 erhalten.</span><span class=\"sxs-lookup\"><span data-stu-id=\"233d6-203\">You should get an answer between 19 and 20.</span></span>\n"
- title: <span data-ttu-id="233d6-204">Übung abgeschlossen</span><span class="sxs-lookup"><span data-stu-id="233d6-204">Complete challenge</span></span>
  durationInMinutes: 1
  content: >
    <span data-ttu-id="233d6-205">Sieht ihr Code ungefähr wie der Folgende aus?</span><span class="sxs-lookup"><span data-stu-id="233d6-205">Did you come up with something like this?</span></span>


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    <span data-ttu-id="233d6-206">Wenn Sie möchten, testen Sie andere Formeln.</span><span class="sxs-lookup"><span data-stu-id="233d6-206">Try some other formulas if you'd like.</span></span>


    > [!NOTE]

    > <span data-ttu-id="233d6-207">Dieses Onlinecodierungstutorial befindet sich im Vorschaumodus.</span><span class="sxs-lookup"><span data-stu-id="233d6-207">This online coding experience is in preview mode.</span></span> <span data-ttu-id="233d6-208">Wenn Probleme auftreten, melden Sie diese [im dotnet/try-Repository](https://github.com/dotnet/try/issues).</span><span class="sxs-lookup"><span data-stu-id="233d6-208">If you encounter problems, please report them [on the dotnet/try repo](https://github.com/dotnet/try/issues).</span></span>
- content: >-
    <span data-ttu-id="233d6-209">Sie haben das interaktive Tutorial „Zahlen in C#“ abgeschlossen.</span><span class="sxs-lookup"><span data-stu-id="233d6-209">You've completed the "Numbers in C#" interactive tutorial.</span></span> <span data-ttu-id="233d6-210">Klicken sie unten auf den Link **Verzweigungen und Schleifen**, um das nächste interaktive Tutorial zu starten, oder besuchen sie die [.NET-Website](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial), um das .NET Core SDK herunterzuladen, ein Projekt auf Ihrem Computer zu erstellen und weiter zu programmieren.</span><span class="sxs-lookup"><span data-stu-id="233d6-210">You can click the **Branches and Loops** link below to start the next interactive tutorial, or you can visit the [.NET site](https://www.microsoft.com/net/learn/dotnet/hello-world-tutorial) to download the .NET Core SDK, create a project on your machine, and keep coding.</span></span> <span data-ttu-id="233d6-211">Über den Schritt „Weiterlernen“ gelangen Sie wieder zu diesen Tutorials.</span><span class="sxs-lookup"><span data-stu-id="233d6-211">The "Keep Learning" step brings you back to these tutorials.</span></span>


    <span data-ttu-id="233d6-212">Weitere Informationen zu Zahlen in C# finden Sie auch unter folgenden Themen:</span><span class="sxs-lookup"><span data-stu-id="233d6-212">You can learn more about numbers in C# in the following topics:</span></span>


    - [<span data-ttu-id="233d6-213">Tabelle ganzzahliger Typen</span><span class="sxs-lookup"><span data-stu-id="233d6-213">Integral Types Table</span></span>](../../language-reference/keywords/integral-types-table.md)

    - [<span data-ttu-id="233d6-214">Tabelle für Gleitkommatypen</span><span class="sxs-lookup"><span data-stu-id="233d6-214">Floating-Point Types Table</span></span>](../../language-reference/keywords/floating-point-types-table.md)

    - [<span data-ttu-id="233d6-215">Tabelle integrierter Typen</span><span class="sxs-lookup"><span data-stu-id="233d6-215">Built-In Types Table</span></span>](../../language-reference/keywords/built-in-types-table.md)

    - [<span data-ttu-id="233d6-216">Tabelle für implizite numerische Konvertierungen</span><span class="sxs-lookup"><span data-stu-id="233d6-216">Implicit Numeric Conversions Table</span></span>](../../language-reference/keywords/implicit-numeric-conversions-table.md)

    - [<span data-ttu-id="233d6-217">Tabelle für explizite numerische Konvertierungen</span><span class="sxs-lookup"><span data-stu-id="233d6-217">Explicit Numeric Conversions Table</span></span>](../../language-reference/keywords/explicit-numeric-conversions-table.md)
